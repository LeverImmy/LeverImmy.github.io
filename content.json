{"meta":{"title":"Clever_Jimmy's blog","subtitle":"","description":"","author":"Clever_Jimmy","url":"https://leverimmy.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-07-02T08:23:19.149Z","updated":"2020-07-02T08:23:19.149Z","comments":true,"path":"404.html","permalink":"https://leverimmy.top/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-07-02T11:36:45.501Z","updated":"2020-07-02T11:36:45.501Z","comments":true,"path":"about/index.html","permalink":"https://leverimmy.top/about/index.html","excerpt":"","text":"窝是 Clever_Jimmy，一名来自 HB 的 OIer。 OI 水平比较菜，喜欢打皇室战争、荒野乱斗。 希望有大佬跟窝互换友链呀(=￣ω￣=) 窝的 cf 账号们： 备忘小提示 多写注释； LaTeX 指南 「也许，同学间最好的结局就是朋友吧。」 后缀树建造过程 「你自己才是自己的原动力。你把原动力都掐熄火了，还能干嘛呢？」 头像网址 LaTeX 索引（支持查找关键字） 算法及数据结构可视化 Visualization 各大 OJ 通过数统计 statistics QQ 表情 图床地址 SVG 图像 绘制 int mul(int ta, int tb, int mod) { int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret; } 大事祭 日期 事情 2018.07.01 成功 祭 2018.11.11 完成第一次 NOIP 祭 2019.11.17 完成第一次 CSP 祭 2020.01.01 失败 祭 2020.01.23 武汉封城祭 2020.03.10 CF 上 1800 祭 2020.03.22 第一次 AK ABC 祭 2020.03.30 第一次上 洛谷日报 祭 2020.06.08 CF Candidate Master 祭 2020.06.12 第一次 CF Successful Hack 祭（hack 的还是自己） 2020.06.12 CF 上 2000 祭 2020.06.14 第一次 举办洛谷公开赛 EasY Round祭"},{"title":"所有分类","date":"2020-07-02T07:55:54.061Z","updated":"2020-07-02T07:55:54.061Z","comments":true,"path":"categories/index.html","permalink":"https://leverimmy.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-07-02T08:21:38.106Z","updated":"2020-07-02T08:21:38.106Z","comments":true,"path":"friends/index.html","permalink":"https://leverimmy.top/friends/index.html","excerpt":"这些都是我的好朋友。","text":"这些都是我的好朋友。 如果希望互挂友链的，请联系我：506503360@qq.com。 欢迎哦~"},{"title":"所有标签","date":"2020-07-02T07:55:35.544Z","updated":"2020-07-02T07:55:35.544Z","comments":true,"path":"tags/index.html","permalink":"https://leverimmy.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【学习笔记】KMP 算法学习笔记","slug":"【学习笔记】KMP-算法学习笔记","date":"2020-06-29T03:41:18.000Z","updated":"2020-07-03T05:43:10.418Z","comments":true,"path":"2020/06/29/【学习笔记】KMP-算法学习笔记/","link":"","permalink":"https://leverimmy.top/2020/06/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91KMP-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"发现自己不会 KMP 的模板了，借此机会复习一下 KMP，顺便更深入地研究前缀函数 $\\pi$ 的应用。","text":"发现自己不会 KMP 的模板了，借此机会复习一下 KMP，顺便更深入地研究前缀函数 $\\pi$ 的应用。 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： 字符串通常用 $S, T$ 等表示，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； 字符串长度用 $\\left|S\\right|$ 表示； 字符集大小用 $\\left|\\Sigma\\right|$ 表示； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； 空串用 $\\epsilon$ 表示； $S$ 是 $T$ 的前缀，用 $S \\sqsubset T$ 表示；$S$ 是 $T$ 的后缀，用 $S \\sqsupset T$ 表示； $S$ 的第 $i$ 个前缀，即 $S[1..i]$，用 $S_i$ 表示。 特殊地，本文的字符串下标、$\\pi$ 数组下标 均从 $1$ 开始。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； $S_4 = \\mathtt{ABCB}$。 前缀函数数组定义对于一个字符串 $S$，我们定义其前缀函数 $\\pi(S)$ 的值为 $S$ 的最长相等的真前缀和真后缀的长度，即：$$\\begin{aligned}\\pi(S) &amp; = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; \\left|S\\right|}\\{S[1..k] = S[\\left|S\\right| - k + 1..\\left|S\\right|]\\}\\\\&amp; = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; \\left|S\\right|}\\{S_k \\sqsupset S\\}\\end{aligned}$$对于一个字符串 $S$，我们定义其前缀函数数组 $\\pi$ 为 $\\pi[i] = \\pi(S_i)$。 特殊地，当 $\\left|S\\right| = 1$ 时 $\\pi(S) = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; 1}\\{S[1..k] = S[2 - k..1]\\}$当 $k = 0$ 时 $S[1..0] = S[2..1] = \\epsilon$，故 $\\pi(S) = 0$。 性质 1：$\\pi(S_i) = \\pi[i] &lt; i$。 证明 由定义知 $\\pi[i] &lt; i$，即得证。$\\blacksquare$ 算法流程 根据定义，$\\pi[1] = 0$； 假设我们循环到了要求 $\\pi[i]\\quad(i \\ge 2)$，令 $k \\gets \\pi[i - 1]$。 由 $\\pi$ 数组的定义得，此时 $S[1..k] = S[i - k, i - 1]$。 我们现在要做的，就是从 $\\pi[1..i - 1]$ 递推到 $\\pi[i]$： 考虑到 $\\pi$ 数组的定义，我们不断地枚举共同的前后缀（即使用 $k = \\pi[k]$ 来迭代）。 结束这个迭代，有且仅有两种情况：$k = 0$ 或 $S[k + 1] = S[i]$。 对于前者，说明对于字符串 $S[1..i]$，不存在任何两个真前缀与真后缀相同，$\\pi[i] = 0$。 对于后者，说明我们找到了一个 $k$，使得 $S[1..k + 1] = S[i - k..i]$，根据定义，有 $\\pi[i] = k + 1$。 至此，我们求出了字符串 $S$ 的前缀函数数组 $\\pi$。 代码实现1234567891011void calcPi(char* S) &#123; pi[1] = 0; int len = strlen(S + 1); for(int i = 2, k = 0; i &lt;= len; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != T[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; &#125;&#125; 正确性 引理 1（后缀重叠引理）：对于 $x, y$ 满足 $x \\sqsupset z, y \\sqsupset z$ 而言，有若 $\\left|x\\right| \\le \\left|y\\right|$，则 $x \\sqsupset y$；若 $\\left|x\\right| \\ge \\left|y\\right|$，则 $y \\sqsupset x$；若 $\\left|x\\right| = \\left|y\\right|$，则 $x = y$。 证明 过于显然，证明略。$\\blacksquare$ 设$$\\pi^{\\star}[q] = \\{\\pi[q], \\pi^{(2)}[q], \\cdots, \\pi^{(t)}[q]\\}$$其中$$\\pi^{(i)}[q] = \\begin{cases}q &amp; i = 0 \\\\ \\pi[\\pi^{(i - 1)}[q]] &amp; i \\ge 1\\end{cases}$$ 当 $\\pi^{(t)}[q] = 0$ 时 $\\pi^{\\star}[q]$ 中的序列终止。 引理 2（前缀函数迭代引理）：对任意长度为 $n$ 的字符串 $S$，有$$\\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k &lt; q \\land S_k \\sqsupset S_q\\}$$ 证明 先证明 $\\pi^{\\star}[q] \\subseteq \\{k:k &lt; q \\land S_k \\sqsupset S_q\\}$，即证明 $\\forall x \\in \\pi^{\\star}[q], x &lt; q \\land S_x \\sqsupset S_q$。任取 $x \\in \\pi^{\\star}[q]$，不妨设 $x = \\pi^{u}[q] \\quad (u &gt; 0)$，下面通过对 $u$ 的数学归纳法证明命题成立。（基础）当 $u = 1$ 时，$x = \\pi[q]$，由 $\\pi$ 数组的定义可知 $\\pi[q] &lt; q \\land S_{\\pi[q]} \\sqsupset S_q$。（假设）假设当 $u = v$ 时 $\\pi^{v}[q] &lt; q \\land S_{\\pi^{v}[q]} \\sqsupset S_q$。（推导）则当 $u = v + 1$ 时，$\\pi^{v + 1}[q] = \\pi[\\pi^{v}[q]] &lt; \\pi^{v}[q] &lt; q$（性质 1）；$S_{\\pi^{v + 1}[q]} \\sqsupset S_{\\pi^{v}[q]} \\sqsupset S_q$（由性质 1 得到下标的大小关系，由引理 1 得到前缀之间的关系）因此 $\\forall x \\in \\pi^{\\star}[q], x &lt; q \\land S_x \\sqsupset S_q$。再证明 $\\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$，即证明 $\\forall x \\in \\{k:k &lt; q \\land S_x \\sqsupset S_q\\}, x \\in\\pi^{\\star}[q]$考虑使用反证法来证明命题成立。假设集合 $M = \\{k:k &lt; q \\land S_k \\sqsupset S_q\\} - \\pi^{\\star}[q]$ 非空，$j$ 是 $M$ 中的最大值。$\\because$ $\\pi[q]$ 是 $\\{k:k &lt; q \\land S_x \\sqsupset S_q\\}$ 中的最大值，且 $j \\in \\{k:k &lt; q \\land S_x \\sqsupset S_q\\}$$\\therefore j &lt; \\pi[q], S_j \\sqsupset S_q$又 $\\because \\pi[q] \\in \\pi^{\\star}[q]$$\\therefore \\exists j’ \\in \\pi^{\\star}[q], \\text{s.t. }j’ &gt; j$设 $j’$ 表示 $\\pi^{\\star}[q]$ 中比 $j$ 大的最小整数。$\\because \\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$ 且 $j’ \\in \\pi^{\\star}[q]$$\\therefore S_{j’} \\sqsupset S_q$$\\because j’ &gt; j$ 且 $j$ 是小于 $j’$ 的最大值$\\therefore S_j \\sqsupset S_{j’}$（引理 1）由 $\\pi$ 数组的定义知 $\\pi[j’] = j$$\\because j’ \\in \\pi^{\\star}[q]$$\\therefore j = \\pi[j’] \\in \\pi^{\\star}[q]$，与假设矛盾因此 $\\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$。综上所述，对任意长度为 $n$ 的字符串 $S$，有 $\\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k &lt; q \\land S_k \\sqsupset S_q\\}$。$\\blacksquare$ 引理 3：对任意长度为 $n$ 的字符串 $S$，有 $\\forall q \\in [1, n]$，若 $\\pi[q] &gt; 0$，则 $\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$。 证明 令 $x = \\pi[q] &gt; 0$，则 $x &lt; q, S_x \\sqsupset S_q$$\\because x &gt; 0$，则 $x - 1$ 有意义$\\therefore x - 1 &lt; q - 1, S_{x - 1} \\sqsupset S_{q - 1}$（把 $S_x$ 和 $S_q$ 的最后一个字符去掉） 由引理 2 知 $x - 1 \\in \\pi^{\\star}[q - 1]$$\\therefore \\forall q \\in [1, n] \\land \\pi[q] &gt; 0,\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$$\\blacksquare$ 对 $q \\in [2, n]$ 定义子集 $E_{q - i} \\subseteq \\pi^{\\star}[q - 1]$ 为： $$E_{q - 1} = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\}$$ 则有： $$\\begin{aligned} E_{q - 1} &amp; = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} \\\\ &amp; = \\{k: k &lt; q - 1, S_k \\sqsupset S_{q - 1}, S[k + 1] = S[q]\\} \\\\ &amp; = \\{k: k &lt; q - 1, S_{k + 1} \\sqsupset S_q\\}\\end{aligned}$$ 因此，$E_{q - 1}$ 是由 $\\pi^{\\star}[q - 1]$ 中的值组成的、能满足 $S_{k + 1}$ 与 $S_q$ 的某个后缀相等的 $k$ 组成的集合。 推论 1：对任意长度为 $n$ 的字符串 $S$，有$$\\forall q \\in [2, n],\\pi[q] = \\begin{cases}0 &amp; E_{q - 1} = \\varnothing \\\\ 1 + \\max\\{k \\in E_{q - 1}\\} &amp; E_{q - 1} \\neq \\varnothing\\end{cases}$$ 证明 当 $E_{q - 1} = \\varnothing$ 时，不存在任何一个 $k \\in \\pi^{\\star}[q - 1]$，使得 $S_{k + 1} \\sqsupset S_q$。显然此时 $\\pi[q]$ 只能为 $0$。当 $E_{q - 1} \\neq \\varnothing$ 时，$\\forall k \\in E_{q - 1}, k &lt; q - 1 \\land S_{k + 1} \\sqsupset S_q \\Longrightarrow k + 1 &lt; q$则由 $\\pi[q]$ 的定义，$k$ 是拓展到 $S_q$ 的某一后缀的备选项，$\\pi[q] \\ge 1 + \\max\\{k \\in E_{q - 1}\\}$。注意到此时 $\\pi[q] &gt; 0$，设 $r = \\pi[q] - 1$。则 $r + 1 = \\pi[q] &lt; q, S_{r + 1} = S_{\\pi[q]} \\sqsupset S_q$。$\\because r + 1 &gt; 0$$\\therefore S_{r + 1} = S_q$由引理 3 可得 $r = \\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$$\\therefore r \\in E_{q - 1}$$\\therefore \\pi[q] - 1 = r \\le \\max\\{k \\in E_{q - 1}\\}$即 $\\pi[q] \\le 1 + \\max\\{k \\in E_{q - 1}\\}$综上所述，当 $E_{q - 1} \\neq \\varnothing$，$\\pi[q] = 1 + \\max\\{k \\in E_{q - 1}\\}$。$\\blacksquare$ 再来看看代码： 1234567891011void calcPi(char* S) &#123; pi[1] = 0; int len = strlen(S + 1); for(int i = 2, k = 0; i &lt;= len; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; &#125;&#125; 接下来我们将使用循环不变式来证明上述代码的正确性。 证明 初始化在第 4 行的迭代开始前，有 $i = 1, k = \\pi[i] = 0$，不变式成立。保持在每次迭代开始前，有 $k = \\pi[i - 1]$：若是第一次迭代，此等式由第 4 行保证；其余迭代均由第 9 行保证。接下来要证明每次迭代结束后均有 $k = \\pi[i]$ 成立。若 $k \\neq \\pi[i]$，则会在第 5-8 行将 $k$ 调整至 $\\pi[i]$。第 5 行的 while 循环遍历每一个 $k \\in \\pi^{\\star}[i - 1]$，直至找到一个 $k$，使得 $S[k + 1] = S[i]$。（引理 2）若找不到这样的值，则在第 7 行 $k = 0$。若找到了这样的值，此时 $k$ 为满足条件的集合中的最大值，应将 $\\pi[i] \\gets k + 1$。（推论 1）第 9 行的赋值语句使得 $k = \\pi[i]$ 恒成立。终止当 $i = n + 1$ 时，迭代终止，此时我们求出了 $\\pi[1..n]$。至此，算法结束。因此，上述代码实现能正确地求出字符串 $S$ 的前缀函数数组。$\\blacksquare$ 时间复杂度不难发现，第 7-9 行代码的时间复杂度均为 $O(n)$，唯一棘手的是第 6-7 行代码。 考虑 $k$ 的变化，$k$ 在第 7-8 行增加的次数不超过 $n$ 次，即 $k \\le n$； $k$ 在第 6 行的操作中，因为有 $\\pi(S_i) &lt; i$ 的性质，导致每次迭代至少使 $k$ 减小 $1$，即最多迭代 $n$ 次。 综上所述，用上述方法求一个字符串的前缀函数数组的时间复杂度为 $O(n)$。 空间复杂度易知用此种方法求前缀函数数组的空间复杂度为 $O(n)$。 KMP 算法算法流程代码实现正确性时间复杂度空间复杂度应用写在最后","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"},{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"}]},{"title":"【学习笔记】EERTREE 学习笔记","slug":"【学习笔记】EERTREE-学习笔记","date":"2020-06-22T14:51:07.000Z","updated":"2020-07-03T05:43:21.917Z","comments":true,"path":"2020/06/22/【学习笔记】EERTREE-学习笔记/","link":"","permalink":"https://leverimmy.top/2020/06/22/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91EERTREE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"EERTREE，又称回文树（Palindrome tree）、回文自动机（PAM），是一种能在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内处理与 回文串 有关问题的数据结构。 EERTREE 是一个 回文串，也许这就是这个数据结构的名字的来历。 回文树的高级应用慢慢写，持续更新。 pdf 论文","text":"EERTREE，又称回文树（Palindrome tree）、回文自动机（PAM），是一种能在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内处理与 回文串 有关问题的数据结构。 EERTREE 是一个 回文串，也许这就是这个数据结构的名字的来历。 回文树的高级应用慢慢写，持续更新。 pdf 论文 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： $S, T$ 通常表示一个字符串，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； $\\left|S\\right|$ 表示字符串长度； $\\left|\\Sigma\\right|$ 表示字符集大小； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； $\\epsilon$ 表示空串； $S \\subset T$ 表示 $S$ 为 $T$ 的子串，即 $\\exists i \\in [1, \\left|T\\right| - \\left|S\\right|], \\text{s.t. } \\forall j \\in [1, \\left|S\\right|], S[j] = T[i + j - 1]$； $\\overleftarrow{S}$ 表示 $S$ 的翻转，即 $\\forall i \\in [1, \\left|S\\right|], \\overleftarrow{S[i]} = S[\\left|S\\right|- i + 1]$； $S$ 为回文串当且仅当 $S = \\overleftarrow{S}$，即 $\\forall i \\in [1, \\left|S\\right|], S[i] = S[\\left|S\\right| - i + 1]$； 若 $S$ 为回文串，则定义 $r(S)$ 为其最长回文半径，即 $r(S) = \\max\\{\\left\\lfloor\\dfrac{\\left|T\\right| + 1}{2}\\right\\rfloor\\}, T \\subset S, T = \\overleftarrow{T}$。 特殊地，本文的字符串下标、回文树内节点编号 均从 $1$ 开始。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； $S[1..4] \\subset S[1..5]$； $\\overleftarrow{S[3..5]} = \\mathtt{DAB}$； $S[1..5] = \\mathtt{ABCBA} = \\overleftarrow{S[1..5]}$ 为回文串。 结构、操作与建立为什么我们考虑一个长度为 $n$ 的回文串 $S$，令 $P = { T : T = S[i..n - i + 1] \\quad i \\in [1, \\left\\lfloor\\dfrac{n + 1}{2}\\right\\rfloor]}$，则 $\\forall x \\in P, x = \\overleftarrow{x}$。 那么 $\\forall x \\in P$ 之间又有什么样的关系呢？ 不难发现，一个回文串，是很多 子回文串层层嵌套 而成的。 也就是说，一个回文串，通过 在两端添加相同的字符，可以形成一个新的回文串。 至此，我们寻觅到了回文树上 边的意义。 在回文树中，$u$ 的父亲连向 $u$ 的边上存储着字符 $c$ 的意义是 $u$ 的父亲表示的回文串，在两端加上 $c$ 后，能形成 $u$。 是什么 引理 1：向 $S$ 末尾添加一个字符 ，最多只会新生成一个回文子串。 证明 这个子串是 $S$ 的 最长回文后缀 末端增加 $c$，且原来的前端恰好也是 $c$，所产生的。也就是说，每次在 $S$ 的末尾添加一个字符，最多只会新建一个节点。$\\blacksquare$ 回文树的内部结构，是一个包含着额外信息的有向图。 在后文中，我们可能会用回文子串来表示一个节点。 回文树支持两个操作：$\\text{add}(c)$ 和 $\\text{eertree}(S)$。 $\\text{add}(c)$ 表示在回文树内插入 $c$，返回此次操作新增的回文子串个数。 通过引理 1，我们可以知道 $\\text{add}(c)$ 总是返回 $0$ 或 $1$。 不难发现，每次 $\\text{add}$ 操作之后，我们都能在 $O(1)$ 的时间内得到已经处理了的字符串 $T$ 的最长回文后缀，即 $\\text{maxSuf}(T)$。 $\\text{eertree}(S)$ 表示将 $S$ 内的字符，从左至右逐个插入后形成的回文树。 小结 1：$S$ 中包含的本质不同的回文子串数量为 $\\text{eertree}(S)$ 的节点中的最大编号。 一棵回文树上的每一个节点上要存储的信息有： 这个点的序号 $u$； 表示的回文串的长度 $len_u$； 从这个点出发的一条标为 $c$ 的出边指向的节点的编号 $ch_{u, c}$； 回文链接 $fail_u$； 为了以后的方便，我们需要在初始化的时候新建两个节点，长度和编号分别为 $-1$ 和 $0$。 $0$ 表示着空串，称之为「偶根」；而 $-1$ 表示着「虚串」，称之为「奇根」。 偶根（即 $0$）连出的边（如果存在），指向 $cc$，表示在 $\\epsilon$ 的两侧同时添加 $c$ 所形成的的字符串为 $cc$； 奇根（即 $-1$）连出的边（如果存在），指向 $c$，表示原来长度为 $-1$ 的串，在两侧同时添加 $c$ 形成了长度为 $1$ 的字符串 $c$。 节点 $u$ 连至 $v$ 的回文链接 $fail_u$ 意味着 $v$ 表示的回文串 $S$ 是 $u$ 表示的回文串 $T$ 的次长回文后缀子串（因为最长的是自己本身）。 我们 定义 $fail_c = 0, fail_0 = fail_{-1} = -1$。 引理 2：任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$（注意，这里的「入度」不将「后缀链接」计算在内）。 证明 若 $len_u = 1$，则其唯一的入边必为 $-1 \\to u$；若 $len_u = 2$，则其唯一的入边必为 $0 \\to u$；若 $len_u \\ge 3$，则其唯一的入边必为 $v \\to u$，满足：$v$ 表示的回文子串 $T$ 的两端添加某个字符 $c$ 能使得 $u$ 表示的回文子串 $S$ 满足 $S = cTc$。综上所述，任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$。$\\blacksquare$ 命题 1：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的空间复杂度为 $O(n)$。 证明 由引理 1 可知，在 $S$ 的逐步插入过程中，最多会新建 $n$ 个节点；而还有 $2$ 个初始化时新建的节点。所以节点个数为最多为 $n + 2$ 个。由引理 2 可知，边的个数最多为 $n$ 个；后缀链接最多有 $n$ 个。综上所述，建立 $\\text{eertree}(S)$ 的空间复杂度为 $O(n)$。$\\blacksquare$ 怎么做以 $S_0 = \\mathtt{EERTREE}$ 为例，我们对它建立一棵回文树。 首先，我们先新建两个点，钦定它们为「奇根 $1$」和「偶根 $0$」。 一棵空的回文树是这样的（红色边为 $fail$ 边，蓝色边为 $ch$ 边，后同）： 然后我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{E}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EE}$。 接着我们插入 $\\mathtt{R}$，现在 $S = \\mathtt{EER}$。 接着我们插入 $\\mathtt{T}$，现在 $S = \\mathtt{EERT}$。 接着我们插入 $\\mathtt{R}$，现在 $S = \\mathtt{EERTR}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EERTRE}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EERTREE}$。 我们应该如何实现这个过程呢？ 命题 2：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\\log\\left|\\Sigma\\right|)$。 证明 在初始化的时候，我们得到了 $\\text{eertree}(\\epsilon)$，即一个「奇根」和一个「偶根」加上它们的后缀链接。对 $S$ 建造回文树的时候，我们会依次向回文树中插入 $S[1], S[2], \\ldots, S[n]$。我们要使得在每次 $\\text{add}$ 操作之后，回文树中的所有节点之间的边以及回文链接都被正确维护。考虑进行完了第 $i$ 次操作后的状态，也就是我们已经处理了 $T = S[1, i]$ 的回文树，现在要插入 $c = S[i + 1]$。我们现在的目标是寻找 $S[1..i + 1] = Tc$ 的最长回文后缀 $P$。显然，要么 $P = c$，要么 $P = cQc$（显然 $Q$ 为 $S[1..i]$ 的某一回文后缀）。也就是说，我们需要找到 $T$ 中，以 开头的前一位 为 $c$ 的最长回文后缀 $Q$。我们从 $\\text{maxSuf}(T)$ 开始，沿着回文链接遍历，设当前节点为 $v$，比较 $c$ 和 $T[i - len_v - 1]$。怎么理解呢？$T[i - len_v..i - 1]$ 是某一回文串 $Q$，我们要找的，是满足 $Q$ 开头的前一位为 $c$ 的某一回文串。也就是要保证 $c = T[i - len_v - 1]$。不难发现，特殊地，当 $P = c$ 时，$Q$ 对应的节点为「奇根」。若 $P = c$：检查 $ch_{-1, c}$ 是否存在：若不存在，则新建一个节点 $v$，使 $ch_{-1, c} = v, len_v = 1, fail_v = 0$。若存在，根据定义，$fail_v = 0$ 不需要更新。若 $P = cQc$：设 $Q$ 对应的节点的序号为 $u$。检查 $ch_{u, c}$ 是否存在：若不存在，则新建一个节点 $v$，使 $len_v = len_u + 2$，连接 $u \\to v$，还要更新 $fail_v$。若存在，我们只需要考虑更新 $fail_v$。考虑 $fail_v$ 到底会指向哪里？会指向 $S[1, i + 1] = Tc$ 的次长回文后缀。即 $cQc$ 中 开头的前一位 为 $c$ 的次长回文后缀 $R$。若我们从 $u$ 开始遍历后缀链接，那么找到的会是 $cQc$ 这个最长回文后缀；因此我们应从 $fail_u$ 开始遍历，仍然是比较 $c$ 和 $T[i - len_v - 1]$。接下来我们来分析 $\\text{add}$ 操作的时间复杂度。我们每次检查 $ch_{u, c}$（或是检查 $ch_{-1, c}$）是否存在，需要 $O(\\log\\left|\\Sigma\\right|)$ 的时间复杂度（std::map 之类的数据结构实现）实际情况下，我们使用子节点数组来实现，单次 $\\text{add}$ 的时间复杂度是 $O(\\left|\\Sigma\\right|)$ 的。则一共 $n$ 次，共 $O(n \\log\\left|\\Sigma\\right|)$。令已经处理了的字符串 $S[1..i] = T$，考虑 $\\text{maxSuf}(T)$ 的末尾在 $S$ 中的下标 $j$ 的变化：一个 $fail$ 的转移会使 $j$ 向左至少移动 $1$ 格；一个 $ch$ 转移会使 $j$ 向右至少移动一格。在处理整个 $S$ 的过程中，向左最多移动 $n$ 格，也就是最多 $n$ 次；向右最多移动 $n$ 格，也就是最多 $n$ 次。因此转移部分的时间复杂度为总共 $O(n)$。总时间复杂度为 $O(n) + O(n\\log\\left|\\Sigma\\right|) = O(n\\log\\left|\\Sigma\\right|)$。综上所述，建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\\log\\left|\\Sigma\\right|)$。$\\blacksquare$ 代码实现后文有吧。 性质我们称一个节点 $u$ 是「奇」的，当且仅当 $len_u$ 为奇数；称一个节点 $v$ 是「偶」的，当且仅当 $len_v$ 为偶数。 引理 3：一棵回文树本质上是两个弱连通图：以「奇根」和「奇点」构成的一个弱连通子图和以「偶根」和「偶点」构成的一个弱连通子图，且均为树。「奇点」和与其相连的边构成的树是 $S$ 右半部分长度为奇数的回文子串构成的 trie；「偶点」和与其相连的边构成的树是 $S$ 右半部分长度为偶数的回文子串构成的 trie。一棵回文树中的所有节点与连接在每个节点上的回文链接的反向链接构成一棵有向基环树，其中环为 $-1$ 节点的自环。 证明 如果边 $e = u \\to v$ 存在，则 $len_v = len_u + 2$，显然 $u, v$ 奇偶性相同，则「奇点」与「偶点」之间互不相通。结合引理 2，此性质得证。这是回文树上边的定义和 trie 的定义。注意到，除了 $fail_{-1}$，其他的回文链接均会使 $len$ 减小，且回文树中的每个点均有唯一的后缀链接。则每个点都仅有唯一简单路径到达 $-1$，这显然是一棵（带有一个环）的树。$\\blacksquare$ 小结 2：一些基本的字符串数据结构如回文 trie、后缀 trie 的空间复杂度都是 $O(n^2)$ 的；像后缀树和 Compressed trie 这样很复杂的数据结构空间复杂度是 $O(n)$ 的。但回文树这么简明易懂的数据结构的空间复杂度也是 $O(n)$ 的。岂不妙哉？ 更重要的是，一个字符串中本质不同的回文串期望个数 是 $O(\\sqrt{\\left|S\\right|\\cdot\\left|\\Sigma\\right|})$ 的。也就是说，回文树的期望空间复杂度更佳。 小结 3：我们定义一个映射 $\\theta :\\Sigma \\to \\Sigma, \\text{s.t. } \\theta^2(S) = S$。我们称一个字符串 $S$ 是 $\\theta$-回文的，当且仅当 $S = \\theta(\\overleftarrow{S})$。一个长度为 $n$ 的字符串 $S$ 的 $\\theta$-回文树仍可以在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内建立起来。 基础应用 「APIO2014」回文串 题意：给定一个长度为 $n$ 的字符串 $S$，求 $\\max\\{\\left|T\\right|\\cdot \\text{occ}(S, T)\\}, T \\subset S \\land T = \\overleftarrow{T}$。 其中 $\\text{occ}(S, T)$ 表示 $T$ 在 $S$ 中的出现次数，$1 \\le \\left|S\\right| \\le 3 \\cdot 10^5$。 「MIPT Fall Programming Training Camp2014」B. Pairs 题意：给定一个长度为 $n$，字符集为 $\\Sigma$ 的字符串 $S$，求满足 $1 \\le i \\le j &lt; k \\le n \\land (S[i..j] = \\overleftarrow{S[i..j]}) \\land (S[j + 1..k] = \\overleftarrow{S[j + 1..k]})$ 的三元组 $(i, j, k)$ 的个数。 $1 \\le n \\le 3 \\cdot 10^5$ 性质 3：「APIO2014」回文串 能用回文树在 额外 $O(n)$ 的时间和空间 内解决。 证明 令 $\\text{occ}[u]$ 表示节点 $u$ 对应的字符串 $T$ 在 $S$ 中的出现次数。令 $\\text{occAsMax}[u]$ 表示满足 $\\text{maxSuf}(S[1, i]) = T$ 的 $i$ 的个数，这个可以直接在每次 $\\text{add}$ 之后实时维护。不难发现，$$\\text{occ}[u] = \\text{occAsMax}[u] + \\sum_{v:fail_v = u}\\text{occ}[v]$$因为，$T$ 在 $S$ 中出现，要么是以 $T = \\text{maxSuf}(S[1..i])$ 的形式出现，要么是以 $T = \\text{maxSuf}(S[l..r]), S[l..r] = \\overleftarrow{S[l..r]}$ 的形式出现。考虑到前者即 $\\text{occAsMax}[u]$，后者即满足 $fail_v = u$ 的 $\\text{occ}[v]$，则上述式子成立。由引理 3 可知，我们可以自底向上地维护 $\\text{occ}[u]$。（maxNode 是最大节点编号）1234for(int i = maxNode; i &gt;= 1; --i) occ[i] = occAsMax[i];for(int i = maxNode; i &gt;= 1; --i) occ[ fail[i] ] += occ[i];我们得到了 $\\text{occ}$ 之后，答案即为 $\\mathop{\\operatorname{argmax}}\\limits_{\\text{occ}[u]}(\\text{occ}[u]\\cdot len_u)$。不难发现，这额外维护的一部分时间复杂度和空间复杂度均为 $O(n)$。在实现的过程中，因为 C++ 不支持访问负数数组下标，所以我们 整体把下标加一，即 $0$ 代表「奇根」，$1$ 代表「偶根」……以此类推。此时 maxNode 即为 cntNode - 1，$1$ 号节点的编号实际上为 $2$（处理 $\\text{occ}$ 的时候要注意）。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 3e5 + 5;const int C = 26 + 5;int m;char str[N];struct EERTREE &#123; static const int MS = N; int n, cntNode, last, s[MS], len[MS], ch[MS][C], fail[MS]; int occAsMax[MS], occ[MS]; int make(int ll) &#123; len[cntNode] = ll; for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; return cntNode++; &#125; int getfail(int x) &#123; while(s[n] != s[n - len[x] - 1]) x = fail[x]; return x; &#125; bool add(int x) &#123; s[++n] = x; int u = getfail(last), flg = 0; if(!u) &#123; if(!ch[u][x]) &#123; int v = make(1); ch[u][x] = v; fail[v] = 1; flg = 1; &#125; &#125; else &#123; if(!ch[u][x]) &#123; int v = make(len[u] + 2); ch[u][x] = v; flg = 1; &#125; fail[ ch[u][x] ] = ch[getfail(fail[u])][x]; &#125; last = ch[u][x]; ++occAsMax[last]; return flg; &#125; LL getocc() &#123; LL ans = -1; // 这里要注意迭代的范围 for(int i = cntNode - 1; i &gt;= 2; --i) occ[i] = occAsMax[i]; for(int i = cntNode - 1; i &gt;= 2; --i) occ[ fail[i] ] += occ[i]; for(int i = cntNode - 1; i &gt;= 2; --i) ans = std::max(ans, 1LL * occ[i] * len[i]); return ans; &#125; void init() &#123; n = cntNode = last = 0; make(-1), make(0); &#125;&#125; t;int main() &#123; scanf(\"%s\", str + 1); m = strlen(str + 1); t.init(); for(int i = 1; i &lt;= m; ++i) t.add(str[i] - 'a' + 1); printf(\"%lld\", t.getocc()); return 0;&#125;$\\blacksquare$ 性质 4：「MIPT Fall Programming Training Camp2014」B. Pairs 能用回文树在 额外 $O(n\\log\\left|\\Sigma\\right|)$ 的时间和 $O(n)$ 的空间 内解决。 证明 首先，我们建立起 $\\text{eertree}(S)$。我们用 $\\text{maxSuf}[i]$ 来表示 $\\text{maxSuf}(S[1..i])$，这个显然能在 $O(n)$ 的空间内在每次 $\\text{add}$ 操作之后维护。我们令 $\\text{sufCount}[u]$ 表示编号为 $u$ 的节点对应的字符串的回文后缀的个数。同理我们还要求出 $\\text{maxPre}$ 与 $\\text{preCount}$。注意到它们分别对应的是 $\\overleftarrow{S}$ 的 $\\text{maxSuf}$ 和 $\\text{sufCount}$（记为 $\\text{maxSuf}’$ 和 $\\text{sufCount}’$。。于是，我们建立起 $\\text{eertree}(\\overleftarrow{S})$。答案即为$$\\sum_{i = 1}^{n - 1}\\text{sufCount}[\\text{maxSuf}[i]]\\cdot\\text{sufCount}’[\\text{maxSuf}’[n - i]]$$不难发现这部分的时间复杂度是 $O(n\\log\\left|\\Sigma\\right|)$ 的，空间复杂度是 $O(n)$ 的。md 没得地方交这道题，代码仅供参考。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 3e5 + 5;const int C = 26 + 5;int m;char str[N];LL ans;struct EERTREE &#123; static const int MS = N; int n, cntNode, s[MS], len[MS], ch[MS][C], fail[MS]; int sufCount[MS], maxSuf[MS]; int make(int ll) &#123; len[cntNode] = ll; for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; return cntNode++; &#125; int getfail(int x) &#123; while(s[n] != s[n - len[x] - 1]) x = fail[x]; return x; &#125; bool add(int x) &#123; s[++n] = x; int u = getfail(maxSuf[n - 1]), flg = 0; if(!u) &#123; if(!ch[u][x]) &#123; int v = make(1); fail[v] = 1; ch[u][x] = v; flg = 1; &#125; &#125; else &#123; if(!ch[u][x]) &#123; int v = make(len[u] + 2); ch[u][x] = v; flg = 1; &#125; fail[ ch[u][x] ] = ch[getfail(fail[u])][x]; &#125; sufCount[ch[u][x]] = sufCount[ fail[ch[u][x]] ] + 1; maxSuf[n] = ch[u][x]; return flg; &#125; void init() &#123; n = cntNode; memset(maxSuf, 0, sizeof(maxSuf)); make(-1), make(0); &#125;&#125; t1, t2;int main() &#123; scanf(\"%s\", str + 1); m = strlen(str + 1); t1.init(), t2.init(); for(int i = 1; i &lt;= m; ++i) t1.add(str[i] - 'a' + 1); for(int i = m; i &gt;= 1; --i) t2.add(str[i] - 'a' + 1); for(int i = 1; i &lt;= m - 1; ++i) ans += t1.sufCount[ t1.maxSuf[i] ] * t2.sufCount[ t2.maxSuf[m - i] ]; printf(\"%lld\", ans); return 0;&#125;$\\blacksquare$ 高级应用并回文树与多个串的回文串相关的问题，我们可以用 并回文树 来解决。 我们用 $\\text{eertree}(S_1, S_2, \\ldots, S_n)$ 表示 $S_1, S_2, \\ldots, S_n$ 的并回文树。 支持删除的回文树富字符串计数可持久化回文树写在最后回文树真的能很巧妙地解决与回文串有关的问题， 而且很多与回文串有关的问题的暴力的时间复杂度极劣无比， 这也能从侧面体现出回文树的巧妙。 与字符串有关的数据结构都巧夺天工。 用一首前人写的诗作结尾： $$\\begin{aligned} &amp; \\textit{I think that I shall never see} \\\\ &amp; \\textit{A poem lovely as a tree.} \\\\ &amp; \\textit{Poems are made by fools like me,} \\\\ &amp; \\textit{But only God can make a tree.}\\end{aligned}$$ 接下来就开始努力钻研后缀树吧。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"},{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"}]}