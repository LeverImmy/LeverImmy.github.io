{"meta":{"title":"Clever_Jimmy's Blog","subtitle":"","description":"","author":"Clever_Jimmy","url":"https://leverimmy.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-07-02T08:23:19.149Z","updated":"2020-07-02T08:23:19.149Z","comments":true,"path":"404.html","permalink":"https://leverimmy.top/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-07-02T11:36:45.501Z","updated":"2020-07-02T11:36:45.501Z","comments":true,"path":"about/index.html","permalink":"https://leverimmy.top/about/index.html","excerpt":"","text":"窝是 Clever_Jimmy，一名来自 HB 的 OIer。 OI 水平比较菜，喜欢打皇室战争、荒野乱斗。 希望有大佬跟窝互换友链呀(=￣ω￣=) 窝的 cf 账号们： 备忘小提示 多写注释； LaTeX 指南 「也许，同学间最好的结局就是朋友吧。」 后缀树建造过程 「你自己才是自己的原动力。你把原动力都掐熄火了，还能干嘛呢？」 头像网址 LaTeX 索引（支持查找关键字） 算法及数据结构可视化 Visualization 各大 OJ 通过数统计 statistics QQ 表情 图床地址 SVG 图像 绘制 int mul(int ta, int tb, int mod) { int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret; } 大事祭 日期 事情 2018.07.01 成功 祭 2018.11.11 完成第一次 NOIP 祭 2019.11.17 完成第一次 CSP 祭 2020.01.01 失败 祭 2020.01.23 武汉封城祭 2020.03.10 CF 上 1800 祭 2020.03.22 第一次 AK ABC 祭 2020.03.30 第一次上 洛谷日报 祭 2020.06.08 CF Candidate Master 祭 2020.06.12 第一次 CF Successful Hack 祭（hack 的还是自己） 2020.06.12 CF 上 2000 祭 2020.06.14 第一次 举办洛谷公开赛 EasY Round祭"},{"title":"所有分类","date":"2020-07-02T07:55:54.061Z","updated":"2020-07-02T07:55:54.061Z","comments":true,"path":"categories/index.html","permalink":"https://leverimmy.top/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-07-04T05:42:51.230Z","updated":"2020-07-04T05:42:51.230Z","comments":true,"path":"friends/index.html","permalink":"https://leverimmy.top/friends/index.html","excerpt":"这些都是我的好朋友。","text":"这些都是我的好朋友。 如果希望互挂友链的，请联系我：506503360@qq.com。 欢迎哦~"},{"title":"所有标签","date":"2020-07-02T07:55:35.544Z","updated":"2020-07-02T07:55:35.544Z","comments":true,"path":"tags/index.html","permalink":"https://leverimmy.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【学习笔记】Lyndon 分解学习笔记","slug":"【学习笔记】Lyndon-分解学习笔记","date":"2020-07-15T03:41:18.000Z","updated":"2020-07-18T13:16:18.899Z","comments":true,"path":"2020/07/15/【学习笔记】Lyndon-分解学习笔记/","link":"","permalink":"https://leverimmy.top/2020/07/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Lyndon-%E5%88%86%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"OI-Wiki 里的字符串板块有 这个，就学一学叭？","text":"OI-Wiki 里的字符串板块有 这个，就学一学叭？ 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： 字符串通常用 $S, T$ 等表示，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； 字符串长度用 $\\left|S\\right|$ 表示； 字符集大小用 $\\left|\\Sigma\\right|$ 表示； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； 空串用 $\\epsilon$ 表示； $S$ 是 $T$ 的前缀，用 $S \\sqsubset T$ 表示；$S$ 是 $T$ 的后缀，用 $S \\sqsupset T$ 表示； $S$ 的字典序小于 $T$，用 $S &lt; T$ 表示，即 $\\left|S\\right| &lt; \\left|T\\right| \\lor(\\left|S\\right| = \\left|T\\right| \\land \\exists i \\in [1, \\left|S\\right|), \\textrm{s.t. }S[1..i] = T[1..i] \\land S[i + 1] &lt; T[i + 1])$。 特殊地，仅在本文中，字符串 $S$ 的第 $i$ 个后缀，即 $S[i..\\left|S\\right|]$，用 $S^i$ 表示。 注意，这个表示是 极为不规范的，因为 $S^i$ 在其他的很多地方表示 $\\begin{matrix}\\overline{\\underbrace{SS\\cdots S}}\\\\S \\textrm{ repeated } i \\textrm{ times}\\end{matrix}$。 特殊地，本文的字符串下标 从 $1$ 开始。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； Lyndon 串定义若一个字符串 $S$ 满足 $\\forall i \\in [2, \\left|S\\right|], S&lt; S[i..\\left|S\\right|]$，则我们称这个字符串为一个「Lyndon 串」。 它的等价命题是 $S$ 的字典序小于其所有 非平凡的 循环同构串。 性质 性质 1：若有两 Lyndon 串 $S, T$，且 $S &lt; T$，则 $\\overline{ST}$ 也为 Lyndon 串。 证明 我们分两种情况来证明：$\\left|S\\right| \\ge \\left|T\\right|$显然 $\\overline{ST} &lt; T$，又有 $T$ 的所有后缀都大于 $T$，因此 $\\overline{ST}$ 的所有后缀都大于 $\\overline{ST}$。因此 $\\overline{ST}$ 是 Lyndon 串。$\\left|S\\right| &gt; \\left|T\\right|$若 $S \\not\\sqsubset T$此时 $\\overline{ST} &lt; T$，由 1 即可得证。若 $S \\sqsubset T$若 $\\overline{ST} \\ge T$，则有 $T \\ge T[\\left|S\\right| + 1..\\left|T\\right|]$，与「$T$ 是 Lyndon 串」矛盾。那么此时一定有 $\\overline{ST} &lt; T$，由 1 即可得证。综上所述，若有两 Lyndon 串 $S, T$，且 $S &lt; T$，则 $\\overline{ST}$ 也为 Lyndon 串。 性质 2：若字符串 $S$ 和字符 $c$ 满足存在某一个字符串 $T$ 使得 $\\overline{Sc} \\sqsubset T$，则 $\\forall c’ &gt; c \\in \\Sigma$，$\\overline{Sc’}$ 均为 Lyndon 串。 证明 不妨设 $T = \\overline{ScR}, n = \\left|S\\right|$，则$$\\forall i \\in [2, n], \\overline{S^icR} &gt; \\overline{ScR}$$$\\therefore \\overline{S^ic} \\ge S$$\\therefore \\overline{S^ic’} &gt; \\overline{S^ic} \\ge S$又 $\\because c \\ge S[1]$$\\therefore c’ &gt; c \\ge S[1]$$\\therefore T = \\overline{Sc’}$ 也是一个 Lyndon 串。 Lyndon 分解将一个字符串 $S$ 分解成 $\\overline{T_1T_2\\cdots T_m}$，满足 $\\forall i \\in [1, m), T_i \\ge T_{i + 1}$，且 $\\forall i \\in [1, m]$，$T_i$ 均为 Lyndon 串。 这样的一个分解我们称之为「Lyndon 分解」。 定理：一个字符串 $S$ 的 Lyndon 分解有且仅有一个。 证明 先证明存在性：假设我们有一个非 Lyndon 分解 $S = \\overline{R_1R_2\\cdots R_x}$，初始化 $x = n, \\forall i \\in [1, n], R_i = S[i]$。若 $\\exists i \\in [1, n), \\textrm{s.t. }R_i &lt; R_{i + 1}$，则将 $R_i$ 与 $R_{i + 1}$ 合成成一个字符串，这样一定能得到一个 Lyndon 分解。再证明唯一性：设 $S$ 有两个 Lyndon 分解 $S = \\overline{P_1P_2\\cdots P_iP_{i + 1}\\cdots P_x}$ 和 $S = \\overline{P_1P_2\\cdots P_iQ_{i + 1}\\cdots Q_x}$。不妨令 $\\left|P_{i + 1}\\right| &gt; \\left|Q_{i +1}\\right|$，设 $P_{i + 1} = \\overline{Q_{i + 1}Q_{i + 2}\\cdots Q_{k}Q_{k + 1}[1..l]}$，则$$P_{i + 1} &lt; Q_{k + 1}[1..l] \\le Q_{k + 1} \\le Q_{i + 1} &lt; P_{i + 1}$$矛盾。综上所述，一个字符串 $S$ 的 Lyndon 分解有且仅有一个。 Duval 算法代码实现正确性时间复杂度空间复杂度例题写在最后","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"Lyndon 分解","slug":"Lyndon-分解","permalink":"https://leverimmy.top/tags/Lyndon-%E5%88%86%E8%A7%A3/"},{"name":"Duval 算法","slug":"Duval-算法","permalink":"https://leverimmy.top/tags/Duval-%E7%AE%97%E6%B3%95/"},{"name":"最小表示法","slug":"最小表示法","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"}]},{"title":"【洛谷】P3435 [POI2006]OKR-Periods of Words","slug":"【洛谷】P3435-POI2006-OKR-Periods-of-Words","date":"2020-07-12T07:36:10.000Z","updated":"2020-07-12T08:15:25.121Z","comments":true,"path":"2020/07/12/【洛谷】P3435-POI2006-OKR-Periods-of-Words/","link":"","permalink":"https://leverimmy.top/2020/07/12/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3435-POI2006-OKR-Periods-of-Words/","excerpt":"题意简述：给定一个字符串 $S$，求：$$\\sum_{i = 1}^{n}\\mathop{\\max}\\limits_{S_i\\sqsubset S_j^2}\\{j\\}$$$1 \\le \\left|S\\right| \\le 10^6$。 题目链接","text":"题意简述：给定一个字符串 $S$，求：$$\\sum_{i = 1}^{n}\\mathop{\\max}\\limits_{S_i\\sqsubset S_j^2}\\{j\\}$$$1 \\le \\left|S\\right| \\le 10^6$。 题目链接 解题思路：我们单独考虑某个字符串 $S_i \\sqsubset S$，则 $\\forall k \\in \\pi^{\\star}[i]$，都有 $S_{i - k} \\sqsubset S_i^2$。 考虑让 $i - k$ 最大（题目要求），即让 $k$ 最小，也就是我们 $\\forall i \\in [1, n]$，求 $\\pi^{\\star}[i]$ 中的非零最小值。 对每个 $i \\in [1, n]$ 都求一次最小值，会被卡成 $O(\\left|S\\right|^2)$，考虑记忆化。 我们每次求出来了 $\\pi^{\\star}[i]$ 中的非零最小值 $k$ 时，直接令 $\\pi[i] \\gets k$。 答案即为（之后的）$$\\sum_{i = 1}^{n}(i - \\pi[i])$$ 参考代码： Code 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e6 + 5;int n, pi[N];LL ans;char str[N];void calcPi() &#123; for(int i = 2, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; str[k + 1] != str[i]) k = pi[k]; if(str[k + 1] == str[i]) ++k; pi[i] = k; &#125;&#125;int32_t main() &#123; scanf(\"%d\", &amp;n); scanf(\"%s\", str + 1); calcPi(); for(int i = 1; i &lt;= n; ++i) &#123; int k = i; while(pi[k]) k = pi[k]; if(pi[i]) pi[i] = k; ans += i - k; &#125; printf(\"%lld\", ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"记忆化","slug":"记忆化","permalink":"https://leverimmy.top/tags/%E8%AE%B0%E5%BF%86%E5%8C%96/"}]},{"title":"【学习笔记】AC 自动机学习笔记","slug":"【学习笔记】AC-自动机学习笔记","date":"2020-07-12T01:39:18.000Z","updated":"2020-07-12T04:15:33.103Z","comments":true,"path":"2020/07/12/【学习笔记】AC-自动机学习笔记/","link":"","permalink":"https://leverimmy.top/2020/07/12/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91AC-%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"本文比较随意地讲解了一下 AC 自动机极其 fail 树的建构以及应用；可能不太严谨，但追求通俗易懂。 建议自学一下 trie 树，然后看一下 我的 KMP 博客，也许就能毫不费力地看懂这篇 AC 自动机的学习笔记。","text":"本文比较随意地讲解了一下 AC 自动机极其 fail 树的建构以及应用；可能不太严谨，但追求通俗易懂。 建议自学一下 trie 树，然后看一下 我的 KMP 博客，也许就能毫不费力地看懂这篇 AC 自动机的学习笔记。 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： 字符串通常用 $S, T$ 等表示，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； 字符串长度用 $\\left|S\\right|$ 表示； 字符集大小用 $\\left|\\Sigma\\right|$ 表示； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； 空串用 $\\epsilon$ 表示； 由 $S_1, S_2, \\cdots, S_n$ 构成的 trie 树，用 $\\textrm{trie}(S_1, S_2, \\cdots, S_n)$ 表示； 字典树中从根沿着边走到 $i$ 节点所形成的的字符串，用 $\\textrm{str}(i)$ 表示。 特殊地，本文的字符串下标 从 $1$ 开始，trie 树的 根节点编号为 $0$。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； 定义笼统地讲，AC 自动机实际上是一个 trie 图 加上很多的 fail 指针形成的结构。 AC 自动机中的 fail 指针就如同 KMP 算法的 $\\pi$ 数组； 但不同的是 fail 指针能在多个模式串上迭代，而 $\\pi$ 数组只能在单一的模式串上迭代。 注意到我的描述为「是一个 trie 图」，因为 AC 自动机实际上把所有 非法状态 都连向了沿着 fail 指针走后的 合法状态； 而这样就形成了一个图而不是单纯的一棵树。 也许你并不能理解上一句话，不过不要紧，我们先从「基于 trie 树结构的 AC 自动机」的结构开始说起。 对于一个模式串为 $S_1, S_2, \\cdots, S_n$ 基于 trie 树结构的 AC 自动机而言，有： $\\textrm{ch}[u, c]$ 数组。 指向的是 $u$ 节点，往后拓展一个字符 $c$ 之后到达的节点。 $\\text{fail}[u]$ 数组。 $\\textrm{fail}[u]$ 自 $u$ 开始，指向 $\\textrm{trie}(S_1, S_2, \\cdots, S_n)$ 中的最长的，前缀与 $\\textrm{str}(u)$ 的真后缀相等的节点。 如下图所示，$5$ 号节点的 fail 指针指向的是 $2$ 号节点，因为 $\\textrm{str}(5) = \\mathtt{bab}, \\textrm{str}(2) = \\mathtt{ab}$； $\\mathtt{ab}$ 是这棵 trie 树中最长的满足前缀（$\\mathtt{ab}$）与 $\\textrm{str}(5)$ 的某一真后缀（$\\textrm{str}(5)[2..3] = \\mathtt{ab}$）相等的节点。 算法流程一个 AC 自动机的建立以及使用包括三个流程：「trie 树的构建」、「fail 指针的连接，以及」和「对一个文本串进行匹配」。 trie 树的构建刚才我们在 定义 中提到了「基于 trie 树的 AC 自动机」的结构， 而「trie 树转化为 trie 图」的过程是在连接 fail 指针的时候进行的。 给定一些模式串 $S_1, S_2, \\cdots, S_n$，让你构建出 $\\textrm{trie}(S_1, S_2, \\cdots, S_n)$。 若不会构建 trie 树，建议先学习 trie 树之后再来看这篇文章。 insert 123456789void insert(std::string S, int id) &#123; int len = S.size(), u = 0; for(int i = 0; i &lt; len; ++i) &#123; int &amp;v = ch[u][S[i] - 'a' + 1]; if(!v) v = ++cntNode; u = v; &#125;&#125; fail 指针的连接首先，我们把 $0$ 和 $0$ 的所有儿子节点的 fail 指针都设为 $0$（即根节点）。 然后我们通过 BFS 来实现每个节点的 fail 指针的连接以及将 trie 树转化为 trie 图的过程。 为什么通过 BFS 呢？ 注意到，$\\textrm{fail}[u]$ 在 trie 树上的深度一定是小于等于 $u$ 在 trie 树上的深度的，因此我们可以使用 BFS 来构建。 怎么构建呢？trie 树为啥变成 trie 图了呢？ 考虑 fail 指针的意义，表示最长的前缀等于当前节点的真后缀的节点，我们尝试着往后拓展一个字符 $c$； 如果存在着 $\\textrm{ch}[\\textrm{fail}[u], c]$ ，那么很显然 $\\textrm{fail}[\\textrm{ch}[u, c]] \\gets \\textrm{ch}[\\textrm{fail}[u], c]$，然后我们将 $\\textrm{ch}[u, c]$ 放进队列里等候着 BFS； 如果不存在呢？那么这个节点对应着的其实是一个 非法状态，我们应该沿着 fail 指针跳至某一个合法状态。 为了简便，我们 直接将这些非法状态等价到 fail 指针指向的节点！ 不难发现，这样 trie 树就变成了一棵 trie 图（每个节点除了指向父亲，还有指向深度小于等于自身的节点的出边）。 build 1234567891011121314151617void build() &#123; std::queue &lt;int&gt; q; for(int i = 1; i &lt;= C; ++i) if(ch[0][i]) q.push(ch[0][i]); while(!q.empty()) &#123; int u = q.front(); q.pop(); for(int i = 1; i &lt;= C; ++i) &#123; int &amp;v = ch[u][i]; if(v) fail[v] = ch[fail[u]][i], q.push(v); else v = ch[fail[u]][i]; // 将非法状态等价到 fail 指针指向的节点！ &#125; &#125;&#125; 对一个文本串进行匹配 求所有模式串在文本串中分别出现的次数。 从左至右检查文本串的每个字符然后直接暴力跳 $\\textrm{ch}[u, c]$ 即可，因为我们已经建出了 trie 图！ 不用再考虑 fail 指针要怎么跳的问题了。 如同 ouuan 在 他的博客 里说到的，普通的「暴力跳 fail 指针」的 AC 自动机求模式串出现次数其实是 错误 的； 正确的做法是建出 fail 树之后 dfs 求出每棵子树的大小。 query 123456789101112131415161718192021void query(std::string S) &#123; int len = S.size(), u = 0; for(int i = 0; i &lt; len; ++i) &#123; u = ch[u][S[i] - 'a' + 1]; ++siz[u]; &#125;&#125;void dfs(int x, int p) &#123; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p) continue; dfs(y, x); siz[x] += siz[y]; &#125;&#125;void refresh() &#123; for(int i = 1; i &lt;= cntNode; ++i) add(i, fail[i]), add(fail[i], i); dfs(0, 0);&#125; 例题写在最后简单的一批，我会了。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"AC 自动机","slug":"AC-自动机","permalink":"https://leverimmy.top/tags/AC-%E8%87%AA%E5%8A%A8%E6%9C%BA/"}]},{"title":"【CodeForces】CF600F Edge coloring of bipartite graph","slug":"【CodeForces】CF600F-Edge-coloring-of-bipartite-graph","date":"2020-07-09T14:04:00.000Z","updated":"2020-07-09T14:43:08.570Z","comments":true,"path":"2020/07/09/【CodeForces】CF600F-Edge-coloring-of-bipartite-graph/","link":"","permalink":"https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600F-Edge-coloring-of-bipartite-graph/","excerpt":"题意简述：给定一个点集大小分别为 $a, b$，有 $m$ 条边的二分图， 问将其染成 任意两相邻边颜色均不同 最少需要多少种颜色，并输出任意一种方案。 $1 \\le a, b \\le 10^3$，$1 \\le m \\le 10^5$。 题目链接","text":"题意简述：给定一个点集大小分别为 $a, b$，有 $m$ 条边的二分图， 问将其染成 任意两相邻边颜色均不同 最少需要多少种颜色，并输出任意一种方案。 $1 \\le a, b \\le 10^3$，$1 \\le m \\le 10^5$。 题目链接 解题思路：边染色一个二分图，最少需要的颜色种数为图中顶点的最大度数。 具体证明可以看 Story about edge coloring of graph。 然后我们可以钦定一个点出边的颜色，如果有不符合的就顺着链摸下去修改颜色即可。 时间复杂度为 $O(m(a + b))$。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 2e3 + 5;const int M = 2e5 + 5;int a, b, m, ans;int u[M], v[M], deg[N], col[N][N];int32_t main() &#123; scanf(\"%d %d %d\", &amp;a, &amp;b, &amp;m); for(int i = 1; i &lt;= m; ++i) &#123; scanf(\"%d %d\", &amp;u[i], &amp;v[i]); v[i] += a; ++deg[u[i]], ++deg[v[i]]; &#125; for(int i = 1; i &lt;= a + b; ++i) ans = std::max(ans, deg[i]); for(int i = 1; i &lt;= m; ++i) &#123; int c1, c2; for(c1 = 1; c1 &lt;= ans; ++c1) if(!col[u[i]][c1]) break; for(c2 = 1; c2 &lt;= ans; ++c2) if(!col[v[i]][c2]) break; col[u[i]][c1] = v[i]; col[v[i]][c2] = u[i]; if(c1 == c2) continue; for(int c0 = c2, x = v[i]; x; x = col[x][c0], c0 ^= c1 ^ c2) std::swap(col[x][c1], col[x][c2]); &#125; printf(\"%d\\n\", ans); for(int i = 1; i &lt;= m; ++i) for(int j = 1; j &lt;= ans; ++j) if(col[u[i]][j] == v[i]) &#123; printf(\"%d \", j); break; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"二分图","slug":"二分图","permalink":"https://leverimmy.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"}]},{"title":"【CodeForces】CF600E Lomsat gelral","slug":"【CodeForces】CF600E-Lomsat-gelral","date":"2020-07-09T07:00:42.000Z","updated":"2020-07-09T07:12:53.890Z","comments":true,"path":"2020/07/09/【CodeForces】CF600E-Lomsat-gelral/","link":"","permalink":"https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600E-Lomsat-gelral/","excerpt":"题意简述：给定一棵大小为 $n$ 的一棵树，每个结点都有一个颜色 $c_i$，每种颜色有一个编号，求树中每个子树的最多的颜色 编号 的和。 $1 \\le n, c_i \\le 10^5$。 题目链接","text":"题意简述：给定一棵大小为 $n$ 的一棵树，每个结点都有一个颜色 $c_i$，每种颜色有一个编号，求树中每个子树的最多的颜色 编号 的和。 $1 \\le n, c_i \\le 10^5$。 题目链接 解题思路：设 $\\textrm{occ}(i)$ 表示 $i$ 这种颜色出现的次数。 在处理每个并列的子树时，我们发现每次要清空一次 $\\text{occ}$，这很浪费时间； 但最后一个子树的 $\\textrm{occ}$ 不需要清空，可以直接贡献到父亲节点上去。 考虑 dsu on tree，我们不清空的重儿子所在的子树，直接合并到父亲节点上。 分析时间复杂度，一个节点被暴力清空，只可能因为它的某个祖先是轻儿子。 而每条轻链上的节点个数是 $O(\\log n)$ 的，于是总复杂度为 $O(n\\log n)$。 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e5 + 5;const int M = 2e5 + 5;int n, c[N], cnt, first[N];int son[N], occ[N], siz[N], maxocc;LL sum, ans[N];struct EDGE &#123; int to, _next;&#125; e[M];void add(int u, int v) &#123; e[cnt].to = v, e[cnt]._next = first[u]; first[u] = cnt++;&#125;void dfs1(int x, int p) &#123; siz[x] = 1; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p) continue; dfs1(y, x); siz[x] += siz[y]; if(siz[y] &gt; siz[son[x]]) son[x] = y; &#125;&#125;void clear(int x, int p) &#123; --occ[c[x]]; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p) continue; clear(y, x); &#125;&#125;void calc(int x, int p, int g) &#123; ++occ[c[x]]; if(occ[c[x]] &gt; maxocc) &#123; maxocc = occ[c[x]]; sum = c[x]; &#125; else if(occ[c[x]] == maxocc) sum += c[x]; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p || y == g) continue; calc(y, x, g); &#125;&#125;void dfs2(int x, int p) &#123; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p || y == son[x]) continue; dfs2(y, x); clear(y, x); sum = maxocc = 0; &#125; if(son[x]) dfs2(son[x], x); calc(x, p, son[x]); ans[x] = sum;&#125;int32_t main() &#123; scanf(\"%d\", &amp;n); memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;c[i]); for(int i = 1; i &lt;= n - 1; ++i) &#123; int u, v; scanf(\"%d %d\", &amp;u, &amp;v); add(u, v); add(v, u); &#125; dfs1(1, 0), dfs2(1, 0); for(int i = 1; i &lt;= n; ++i) printf(\"%lld \", ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"dsu on tree","slug":"dsu-on-tree","permalink":"https://leverimmy.top/tags/dsu-on-tree/"}]},{"title":"【CodeForces】CF600D Area of Two Circles' Intersection","slug":"【CodeForces】CF600D-Area-of-Two-Circles-Intersection","date":"2020-07-09T01:57:28.000Z","updated":"2020-07-09T02:07:11.899Z","comments":true,"path":"2020/07/09/【CodeForces】CF600D-Area-of-Two-Circles-Intersection/","link":"","permalink":"https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600D-Area-of-Two-Circles-Intersection/","excerpt":"题意简述：求两个圆的交的面积。 $-10^9 \\le x_1, y_1, x_2, y_2 \\le 10^9$，$1 \\le r_1, r_2 \\le 10^9$。 题目链接","text":"题意简述：求两个圆的交的面积。 $-10^9 \\le x_1, y_1, x_2, y_2 \\le 10^9$，$1 \\le r_1, r_2 \\le 10^9$。 题目链接 解题思路：用余弦定理解三角形即可，然后用 $S = \\dfrac{1}{2}ab\\sin C$ 来求三角形面积，$S = \\dfrac{1}{2}\\alpha r^2$ 来求扇形面积，相减即可得到答案。 卡精度。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;#define LD long doubleconst LD PI = std::acos(-1);LD ra, rb;struct POINT &#123; LD x, y;&#125; A, B;LD dist(POINT a, POINT b) &#123; return std::sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));&#125;LD solve(LD a, LD b, LD c) &#123; LD cosC = (a * a + b * b - c * c)/(2 * a * b); LD angC = std::acos(cosC) * 2; LD sin2C = std::sin(ang2C); return a * a * ang2C / 2 - a * a * sin2C / 2;&#125;int32_t main() &#123; std::cin &gt;&gt; A.x &gt;&gt; A.y &gt;&gt; ra; std::cin &gt;&gt; B.x &gt;&gt; B.y &gt;&gt; rb; if(ra &gt; rb) std::swap(A, B), std::swap(ra, rb); LD dis = dist(A, B); if(dis &gt;= ra + rb) printf(\"0\"); else if(dis + ra &lt;= rb) printf(\"%.20f\", (double)(PI * ra * ra)); else printf(\"%.20f\", (double)(solve(ra, dis, rb) + solve(rb, dis, ra))); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"计算几何","slug":"计算几何","permalink":"https://leverimmy.top/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"},{"name":"余弦定理","slug":"余弦定理","permalink":"https://leverimmy.top/tags/%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86/"}]},{"title":"【洛谷】「TJOI2010」阅读理解","slug":"【洛谷】「TJOI2010」阅读理解","date":"2020-07-09T01:39:33.000Z","updated":"2020-07-09T01:57:02.379Z","comments":true,"path":"2020/07/09/【洛谷】「TJOI2010」阅读理解/","link":"","permalink":"https://leverimmy.top/2020/07/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91%E3%80%8CTJOI2010%E3%80%8D%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/","excerpt":"题意简述：给定 $n$ 篇文章和 $m$ 个单词，问每个单词在哪些文章中出现过。 $1 \\le n \\le 10^3$，$1 \\le m \\le 10^4$，每篇文章长度不超过 $5\\cdot 10^3$ 个字符，每个单词长度不超过 $20$ 个字符。 题目链接","text":"题意简述：给定 $n$ 篇文章和 $m$ 个单词，问每个单词在哪些文章中出现过。 $1 \\le n \\le 10^3$，$1 \\le m \\le 10^4$，每篇文章长度不超过 $5\\cdot 10^3$ 个字符，每个单词长度不超过 $20$ 个字符。 题目链接 解题思路：不难想到用 std::map 来维护这些文章，然后对每个询问而言，遍历所有的 std::map，直接查找是否存在即可。 但是可恶的毒瘤们卡了空间，于是就可以用 std::set 来维护。 同样的道理，我们用一些元素类型为 std::string 的 std::set 来维护每篇文章。 询问直接查 s[i].find(str) 是否等于 s[i].end() 即可。 挺短的，才 30 行，还比 trie 树好写。 参考代码：用了较多 std::cin 和 std::cout，开个 O2 就过了。 Code 1234567891011121314151617181920212223242526272829303132#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e3 + 1;int n, m;std::set &lt;std::string&gt; mp[N];int32_t main() &#123; std::cin &gt;&gt; n; for(int i = 1; i &lt;= n; ++i) &#123; int num; std::cin &gt;&gt; num; for(int j = 1; j &lt;= num; ++j) &#123; std::string str; std::cin &gt;&gt; str; mp[i].insert(str); &#125; &#125; std::cin &gt;&gt; m; for(int i = 1; i &lt;= m; ++i) &#123; std::string str; std::cin &gt;&gt; str; for(int j = 1; j &lt;= n; ++j) if(mp[j].find(str) != mp[j].end()) std::cout &lt;&lt; j &lt;&lt; ' '; std::cout &lt;&lt; '\\n'; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"暴力","slug":"暴力","permalink":"https://leverimmy.top/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"set","slug":"set","permalink":"https://leverimmy.top/tags/set/"}]},{"title":"【CodeForces】CF600A Extract Numbers","slug":"【CodeForces】CF600A-Extract-Numbers","date":"2020-07-09T00:30:10.000Z","updated":"2020-07-09T00:36:19.804Z","comments":true,"path":"2020/07/09/【CodeForces】CF600A-Extract-Numbers/","link":"","permalink":"https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600A-Extract-Numbers/","excerpt":"题意简述：给定一个字符串，你要将其中的「非负整数」串与其他串分离出来，并输出这两堆字符串。 $1 \\le n \\le 10^5$。 题目链接","text":"题意简述：给定一个字符串，你要将其中的「非负整数」串与其他串分离出来，并输出这两堆字符串。 $1 \\le n \\le 10^5$。 题目链接 解题思路：如果一个串是空串，我们就补上一个字符 $\\$$，然后输出的时候跳过这个字符即可。 然后在遍历整个 $S$ 的时候，将答案放到两个另外的字符串 $A$ 和 $B$ 中去，最后输出 $A, B$。 代码实现 极其细节，建议自己动手实现一下。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e5 + 5;int n, m, lens, lena, lenb, firsta = 1, firstb = 1;char tmp[N], str[N], S[N], A[N], B[N];bool valid(char ch) &#123; return ch != ',' &amp;&amp; ch != ';';&#125;void Output() &#123; if(!lena) puts(\"-\"); else &#123; printf(\"\\\"\"); for(int i = 1; i &lt;= lena; ++i) &#123; if(A[i] == '$') continue; putchar(A[i]); &#125; puts(\"\\\"\"); &#125; if(!lenb) putchar('-'); else &#123; printf(\"\\\"\"); for(int i = 1; i &lt;= lenb; ++i) &#123; if(B[i] == '$') continue; putchar(B[i]); &#125; printf(\"\\\"\"); &#125;&#125;void solve() &#123; int flg = 1; for(int i = 1; i &lt;= lens; ++i) if(!isdigit(S[i])) flg = 0; if(!lens || lens &gt;= 2 &amp;&amp; S[1] == '0') flg = 0; if(flg) &#123; if(!firsta) A[++lena] = ','; for(int i = 1; i &lt;= lens; ++i) A[++lena] = S[i]; firsta = 0; lens = 0; &#125; else &#123; if(!firstb) B[++lenb] = ','; for(int i = 1; i &lt;= lens; ++i) B[++lenb] = S[i]; firstb = 0; lens = 0; &#125;&#125;int32_t main() &#123; scanf(\"%s\", tmp + 1); m = strlen(tmp + 1); if(!valid(tmp[1])) str[++n] = '$'; for(int i = 1; i &lt;= m; ++i) &#123; if(!valid(tmp[i]) &amp;&amp; !valid(tmp[i - 1])) str[++n] = '$'; str[++n] = tmp[i]; &#125; if(!valid(str[n])) str[++n] = '$'; // 添加 '$' 字符来处理空串 /*for(int i = 1; i &lt;= n; ++i) putchar(str[i]); puts(\"\");*/ for(int i = 1; i &lt;= n; ++i) &#123; if(valid(str[i])) S[++lens] = str[i]; else &#123; int flg = 1; for(int i = 1; i &lt;= lens; ++i) if(!isdigit(S[i])) flg = 0; if(!lens || lens &gt;= 2 &amp;&amp; S[1] == '0') flg = 0; if(flg) &#123; if(!firsta) A[++lena] = ','; for(int i = 1; i &lt;= lens; ++i) A[++lena] = S[i]; firsta = 0; lens = 0; &#125; else &#123; if(!firstb) B[++lenb] = ','; for(int i = 1; i &lt;= lens; ++i) B[++lenb] = S[i]; firstb = 0; lens = 0; &#125; &#125; &#125; solve(); Output(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"字符串","slug":"字符串","permalink":"https://leverimmy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"暴力","slug":"暴力","permalink":"https://leverimmy.top/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"模拟","slug":"模拟","permalink":"https://leverimmy.top/tags/%E6%A8%A1%E6%8B%9F/"}]},{"title":"【AtCoder】ABC171F Strivore","slug":"【AtCoder】ABC171F-Strivore","date":"2020-07-08T04:17:56.000Z","updated":"2020-07-08T14:26:37.418Z","comments":true,"path":"2020/07/08/【AtCoder】ABC171F-Strivore/","link":"","permalink":"https://leverimmy.top/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC171F-Strivore/","excerpt":"题意简述：给定一个字符串 $S$ 和数字 $k$，求所有本质不同的字符串 $T$ 的个数，使得 $\\left|T\\right| = \\left|S\\right| + k$，且 $S$ 为 $T$ 的 子序列。 $1 \\le \\left|S\\right|, k \\le 10^6$。 题目链接","text":"题意简述：给定一个字符串 $S$ 和数字 $k$，求所有本质不同的字符串 $T$ 的个数，使得 $\\left|T\\right| = \\left|S\\right| + k$，且 $S$ 为 $T$ 的 子序列。 $1 \\le \\left|S\\right|, k \\le 10^6$。 题目链接 解题思路： 令 $n = \\left|S\\right|, m = \\left|S\\right| + k$。 正着计算 $S$ 为 $T$ 的子序列时 $T$ 的个数不方便，因此我们可以考虑计算 $S$ 不为 $T’$ 的 子序列 时 $T’$ 的个数。 再用 $26^m$ 减去 $T’$ 的个数，即为 $T$ 的个数。 $T’$ 中可能包含 $S$ 的前缀 $S[1], S[1..2], S[1..3], \\cdots, S[1.. n - 1]$； 当然，也可能不包含 $S$ 的任意一个前缀，可以看做包含 $S[1\\ldots0] = \\epsilon$。 当 $T’$ 中 仅 包含 $S[1.. i] \\quad i \\in [0, n)$ 时，从 $m$ 个位置里选取 $i$ 个位置来填这些字符有 $\\dbinom{m}{i}$ 种方法， 而要求剩下的 $m - i$ 个位置不能包含 $S[i + 1]$ 这个字母（因为包含了就会组成 $S[1..i + 1]$ 这个子序列了）， 因此有 $25^{m - i}$ 种方法。 答案即为$$26^{m}-\\sum_{i = 0}^{n - 1}\\binom{m}{i}\\cdot25^{m - i}$$值得一提的是，此题的答案与 $S$ 具体是什么无关，只与 $\\left|S\\right|$ 有关。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;#define LL long longconst int mod = 1e9 + 7;const int N = 1e6 + 5;const int M = 2e6 + 5;int n, k;int m, fac[M] = &#123; 1 &#125;, inv[M];char str[N];LL tot, mis;int mul(int ta, int tb) &#123; int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret;&#125;int qpow(int bas, int po) &#123; int res = 1; while(po) &#123; if(po &amp; 1) res = mul(res, bas); bas = mul(bas, bas); po &gt;&gt;= 1; &#125; return res;&#125;int C(int tn, int tm) &#123; return mul(fac[tn], mul(inv[tm], inv[tn - tm]));&#125;int32_t main() &#123; scanf(\"%d %s\", &amp;k, str + 1); n = strlen(str + 1); m = n + k; tot = qpow(26, m); for(int i = 1; i &lt;= m; ++i) fac[i] = mul(fac[i - 1], i); for(int i = 0; i &lt;= m; ++i) inv[i] = qpow(fac[i], mod - 2); for(int i = 0; i &lt;= n - 1; ++i) &#123; mis = (mis + mul(C(m, i), qpow(25, m - i))) % mod; &#125; tot = ((tot - mis) % mod + mod) % mod; printf(\"%d\", tot); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"AtCoder","slug":"题解/AtCoder","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/AtCoder/"}],"tags":[{"name":"组合数学","slug":"组合数学","permalink":"https://leverimmy.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"快速幂","slug":"快速幂","permalink":"https://leverimmy.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"},{"name":"容斥原理","slug":"容斥原理","permalink":"https://leverimmy.top/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"}]},{"title":"【CodeForces】CF598E Chocolate Bar","slug":"【CodeForces】CF598E-Chocolate-Bar","date":"2020-07-08T03:09:34.000Z","updated":"2020-07-08T03:33:29.777Z","comments":true,"path":"2020/07/08/【CodeForces】CF598E-Chocolate-Bar/","link":"","permalink":"https://leverimmy.top/2020/07/08/%E3%80%90CodeForces%E3%80%91CF598E-Chocolate-Bar/","excerpt":"题意简述：给定一个 $n\\times m$ 的矩阵，将 $r\\times c$ 的矩阵切成 $r \\times c’$ 和 $r\\times (c - c’)$ 的矩阵需要 $r^2$ 的花费。 求切出大小和为 $k$ 的矩阵所需最小花费。 多组数据。 $1 \\le T \\le 40910$，$1 \\le n, m \\le 30$，$1 \\le k \\le \\min(n\\cdot m, 50)$。 题目链接","text":"题意简述：给定一个 $n\\times m$ 的矩阵，将 $r\\times c$ 的矩阵切成 $r \\times c’$ 和 $r\\times (c - c’)$ 的矩阵需要 $r^2$ 的花费。 求切出大小和为 $k$ 的矩阵所需最小花费。 多组数据。 $1 \\le T \\le 40910$，$1 \\le n, m \\le 30$，$1 \\le k \\le \\min(n\\cdot m, 50)$。 题目链接 解题思路：设 $f(x, y, z)$ 表示要从 $x\\times y$ 的矩阵中切出大小和为 $z$ 的矩阵所需最小花费。 我们可以枚举要将 $x\\times y$ 切成 $x \\times y’$ 和 $x\\times (y - y’)$，还是切成 $x’\\times y$ 和 $(x - x’)\\times y$。 不难发现转移方程为$$f(x, y, z) = \\min\\begin{cases} x^2 + f(x, y’, z’) + f(x, y - y’, z - z’) \\quad(y’ \\in [1, \\left\\lfloor\\dfrac{y}{2}\\right\\rfloor], z’ \\in [0, z]) \\\\ y^2 + f(x’, y, z’) + f(x - x’, y, z - z’) \\quad(x’ \\in [1, \\left\\lfloor\\dfrac{x}{2}\\right\\rfloor], z’ \\in [0, z])\\end{cases}$$答案即为 $f(n, m, k)$。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334#include &lt;bits/stdc++.h&gt;#define LL long longconst int inf = 0x3f3f3f3f;const int N = 30 + 5;const int M = 30 + 5;const int K = 50 + 5;int n, m, k, f[N][M][K];int F(int x, int y, int z) &#123; if(f[x][y][z]) return f[x][y][z]; if(z == x * y || !z) return 0; int res = inf; for(int i = 1; i &lt;= x - i; ++i) for(int j = 0; j &lt;= z; ++j) res = std::min(res, y * y + F(i, y, j) + F(x - i, y, z - j)); for(int i = 1; i &lt;= y - i; ++i) for(int j = 0; j &lt;= z; ++j) res = std::min(res, x * x + F(x, i, j) + F(x, y - i, z - j)); return f[x][y][z] = res;&#125;int32_t main() &#123; int __tests; scanf(\"%d\", &amp;__tests); while(__tests--) &#123; scanf(\"%d %d %d\", &amp;n, &amp;m, &amp;k); printf(\"%d\\n\", F(n, m, k)); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"暴力","slug":"暴力","permalink":"https://leverimmy.top/tags/%E6%9A%B4%E5%8A%9B/"}]},{"title":"【AtCoder】ABC172E NEQ","slug":"【AtCoder】ABC172E-NEQ","date":"2020-07-08T01:10:51.000Z","updated":"2020-07-08T14:27:17.192Z","comments":true,"path":"2020/07/08/【AtCoder】ABC172E-NEQ/","link":"","permalink":"https://leverimmy.top/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC172E-NEQ/","excerpt":"题意简述：求长度为 $n$，满足以下条件的序列对 $(A, B)$ 的个数： $\\forall i \\in [1, n], A_i \\in [1, m], B_i \\in [1, m]$ $\\forall i \\in [1, n], A_i \\neq B_i$ $\\forall 1 \\le i &lt; j \\le n, A_i \\neq A_j, B_i \\neq B_j$ 答案对 $10^9 + 7$ 取模。 $1 \\le n \\le m \\le 5\\cdot10^5$。 题目链接","text":"题意简述：求长度为 $n$，满足以下条件的序列对 $(A, B)$ 的个数： $\\forall i \\in [1, n], A_i \\in [1, m], B_i \\in [1, m]$ $\\forall i \\in [1, n], A_i \\neq B_i$ $\\forall 1 \\le i &lt; j \\le n, A_i \\neq A_j, B_i \\neq B_j$ 答案对 $10^9 + 7$ 取模。 $1 \\le n \\le m \\le 5\\cdot10^5$。 题目链接 解题思路：首先我们可以发现，满足 $\\forall i \\in S, A_i = B_i$ 的序列对 $(A, B)$ 有 $A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2$ 个。 然后根据容斥原理，我们发现答案为 $\\sum\\limits_{S \\subseteq [1, n]}(-1)^{\\left|S\\right|}\\cdot A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2$。 （加上 $\\left|S\\right| = 0$ ，减去 $\\left|S\\right| = 1$，加上 $\\left|S\\right| = 2$……） 枚举子集是不必要的，我们可以从组合意义的角度来处理上式， 将所有 $\\left|S\\right| = k$ 的所有子集 $S$ 合并处理，这样的 $S$ 有 $\\dbinom{n}{k}$ 个。 答案即$$\\sum_{k = 0}^{n}\\binom{n}{k}(-1)^k\\cdot A_{m}^{k}\\cdot\\left(A_{m - k}^{n - k}\\right)^2$$ 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;bits/stdc++.h&gt;#define LL long longconst int mod = 1e9 + 7;const int N = 5e5 + 5;int n, m, fac[N] = &#123; 1 &#125;, inv[N] = &#123; 1 &#125;;LL ans;int mul(int ta, int tb) &#123; int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret;&#125;int qpow(int bas, int po) &#123; int res = 1; while(po) &#123; if(po &amp; 1) res = mul(res, bas); bas = mul(bas, bas); po &gt;&gt;= 1; &#125; return res;&#125;int C(int tn, int tm) &#123; return mul(fac[tn], mul(inv[tm], inv[tn - tm]));&#125;int A(int tn, int tm) &#123; return mul(fac[tn], inv[tn - tm]);&#125;int32_t main() &#123; scanf(\"%d %d\", &amp;n, &amp;m); for(int i = 1; i &lt;= m; ++i) fac[i] = mul(fac[i - 1], i); inv[m] = qpow(fac[m], mod - 2); for(int i = m; i &gt;= 2; --i) inv[i - 1] = mul(inv[i], i); for(int i = 0; i &lt;= n; ++i) &#123; int flg = (i &amp; 1) ? -1 : 1; int tmp = mul(C(n, i), mul(A(m, i), qpow(A(m - i, n - i), 2))); ans += flg * tmp; ans %= mod, (ans += mod) %= mod; &#125; printf(\"%lld\", ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"AtCoder","slug":"题解/AtCoder","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/AtCoder/"}],"tags":[{"name":"组合数学","slug":"组合数学","permalink":"https://leverimmy.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"容斥原理","slug":"容斥原理","permalink":"https://leverimmy.top/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"}]},{"title":"【CodeForces】CF598C Nearest vectors","slug":"【CodeForces】CF598C-Nearest-vectors","date":"2020-07-07T15:29:47.000Z","updated":"2020-07-08T03:33:44.334Z","comments":true,"path":"2020/07/07/【CodeForces】CF598C-Nearest-vectors/","link":"","permalink":"https://leverimmy.top/2020/07/07/%E3%80%90CodeForces%E3%80%91CF598C-Nearest-vectors/","excerpt":"题意简述：给定 $n$ 个向量的坐标表示 $(x, y)$，求任意两对向量的夹角的最小值所对应的那两个向量。 $1 \\le n \\le 10^5$，$\\left|x \\right|, \\left|y\\right| \\le 10^4$，$x^2 + y^2 &gt; 0$。 题目链接","text":"题意简述：给定 $n$ 个向量的坐标表示 $(x, y)$，求任意两对向量的夹角的最小值所对应的那两个向量。 $1 \\le n \\le 10^5$，$\\left|x \\right|, \\left|y\\right| \\le 10^4$，$x^2 + y^2 &gt; 0$。 题目链接 解题思路：首先考虑把所有的向量按照极角排序，但这也是有技巧的。 考虑把整个坐标系分为 $8$ 个部分：$4$ 个象限和 $4$ 个半坐标轴。 如果在同一个象限内，就很容易判断出极角的大小关系，否则就直接按照象限与象限之间的位置关系直接比较了。 注意 std::atan2(a, b) 的用法，它返回坐标表示为 $(b, a)$ 的向量的极角。 开 long double 枚举两个相邻的向量的极角差的大小即可。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;#define LL long longconst long double PI = 3.1415926535897932384626;const int N = 1e5 + 5;int n, ansx, ansy;long double ans = 1e9;int quad(int x, int y) &#123; if(x &gt; 0 &amp;&amp; y &gt; 0) return 1; else if(x == 0 &amp;&amp; y &gt; 0) return 2; else if(x &lt; 0 &amp;&amp; y &gt; 0) return 3; else if(x &lt; 0 &amp;&amp; y == 0) return 4; else if(x &lt; 0 &amp;&amp; y &lt; 0) return 5; else if(x == 0 &amp;&amp; y &lt; 0) return 6; else if(x &gt; 0 &amp;&amp; y &lt; 0) return 7; else if(x &gt; 0 &amp;&amp; y == 0) return 8;&#125; // 得到这个向量在哪里struct POINT &#123; int id, x, y; long double deg; bool operator&lt;(const POINT &amp;rhs) const &#123; int quad1 = quad(x, y), quad2 = quad(rhs.x, rhs.y); if(quad1 != quad2) return quad1 &lt; quad2; else return y * rhs.x &lt; x * rhs.y; // 通过分五类讨论得到的通式 &#125;&#125; p[N];int32_t main() &#123; scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; ++i) &#123; scanf(\"%d %d\", &amp;p[i].x, &amp;p[i].y); p[i].id = i; p[i].deg = atan2(1.0 * p[i].y, 1.0 * p[i].x); if(p[i].deg &lt; 0) p[i].deg += 2 * PI; &#125; std::sort(p + 1, p + n + 1); p[0] = p[n]; for(int i = 1; i &lt;= n; ++i) &#123; long double cur_ans = p[i].deg - p[i - 1].deg; if(cur_ans &lt; 0) cur_ans += 2 * PI; if(cur_ans &lt; ans) &#123; ans = cur_ans; ansx = p[i].id, ansy = p[i - 1].id; &#125; &#125; printf(\"%d %d\", ansx, ansy); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"计算几何","slug":"计算几何","permalink":"https://leverimmy.top/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"}]},{"title":"【CodeForces】Educational CodeForces Rounds 汇总","slug":"【CodeForces】Educational-CodeForces-Rounds-汇总","date":"2020-07-07T13:41:21.000Z","updated":"2020-07-09T14:45:19.688Z","comments":true,"path":"2020/07/07/【CodeForces】Educational-CodeForces-Rounds-汇总/","link":"","permalink":"https://leverimmy.top/2020/07/07/%E3%80%90CodeForces%E3%80%91Educational-CodeForces-Rounds-%E6%B1%87%E6%80%BB/","excerpt":"刷不动 AGC，就来刷 EDU 吧。","text":"刷不动 AGC，就来刷 EDU 吧。 ID 何时完成 题解链接 备注 Educational Codeforces Round 1 2020.07.08 C E 代码：A B D；F 是个憨批计算几何，不写。 Educational Codeforces Round 2 2020.07.09 A D E F 代码：B；C 是个憨批模拟，不写。 Educational Codeforces Round 3 Educational Codeforces Round 4 Educational Codeforces Round 5 Educational Codeforces Round 6 Educational Codeforces Round 7 Educational Codeforces Round 8 Educational Codeforces Round 9 Educational Codeforces Round 10 Educational Codeforces Round 11 Educational Codeforces Round 12 Educational Codeforces Round 13 Educational Codeforces Round 14 Educational Codeforces Round 15 Educational Codeforces Round 16 Educational Codeforces Round 17 Educational Codeforces Round 18 Educational Codeforces Round 19 Educational Codeforces Round 20 Educational Codeforces Round 21 Educational Codeforces Round 22","categories":[{"name":"做题记录","slug":"做题记录","permalink":"https://leverimmy.top/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"CodeForces","slug":"做题记录/CodeForces","permalink":"https://leverimmy.top/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/CodeForces/"}],"tags":[{"name":"CodeForces","slug":"CodeForces","permalink":"https://leverimmy.top/tags/CodeForces/"}]},{"title":"【CodeForces】CF1375F Integer Game","slug":"【CodeForces】CF1375F-Integer-Game","date":"2020-07-07T04:03:35.000Z","updated":"2020-07-07T13:42:08.176Z","comments":true,"path":"2020/07/07/【CodeForces】CF1375F-Integer-Game/","link":"","permalink":"https://leverimmy.top/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375F-Integer-Game/","excerpt":"题意简述：这是一道交互题。 给定三堆数量分别为 $a, b, c$ 的石子，先手每轮将给后手 $y_i$ 个石子，后手将这些石子合并到某一堆里。 后手不能在相邻的两轮中将先手给的石子合并到同一堆里，如果有两堆石子个数相同，则先手胜；若经过 $1000$ 轮后先手仍未获得胜利，则后手胜。 如果是你，你怎么保证你必胜？ $1 \\le a, b, c \\le 10^9$，$1 \\le y \\le 10^{11}$，保证 $a, b, c$ 两两不同。 题目链接","text":"题意简述：这是一道交互题。 给定三堆数量分别为 $a, b, c$ 的石子，先手每轮将给后手 $y_i$ 个石子，后手将这些石子合并到某一堆里。 后手不能在相邻的两轮中将先手给的石子合并到同一堆里，如果有两堆石子个数相同，则先手胜；若经过 $1000$ 轮后先手仍未获得胜利，则后手胜。 如果是你，你怎么保证你必胜？ $1 \\le a, b, c \\le 10^9$，$1 \\le y \\le 10^{11}$，保证 $a, b, c$ 两两不同。 题目链接 解题思路：不妨设 $a &lt; b &lt; c$，三堆名称分别为 $A, B, C$，可以证明，先手能在 $3$ 轮之内获胜。 取 $y_1 = 2c - a - b$： 若后手合并到 $A$ 中，则此时三堆石子分别为：$2c - b, b, c$。 取 $y_2 = c - b$，则无论是合并到 $B$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。 若后手合并到 $B$ 中，则此时三堆石子分别为：$a, 2c - a, c$。 取 $y_2 = c - a$，则无论是合并到 $A$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。 若后手合并到 $C$ 中，则此时三堆石子分别为 $a, b, 3c - a - b$。 显然此时有 $a &lt; b &lt; 3c - a - b$，令 $a’ = a, b’ = b, c’ = 3c - a - b$，则取 $y_2 = 6c - 3a - 3b$： 若后手合并到 $a$ 中，则此时三堆石子分别为：$6c - 2a - 3b, b, 3c - a - b$。 取 $y_3 = 3c - a - 2b$，则无论是合并到 $B$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。 若后手合并到 $b$ 中，则此时三堆石子分别为：$a, 6c - 3a - 2b, 3c - a - b$。 取 $y_3 = 3c - 2a - b$，则无论是合并到 $A$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。 至此，先手必胜。 参考代码： Code 123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;#define LL long longLL a[4], x;int rk[4] = &#123; 0, 1, 2, 3 &#125;;bool cmp(LL tx, LL ty) &#123; return a[tx] &lt; a[ty];&#125;int32_t main() &#123; scanf(\"%lld %lld %lld\", &amp;a[1], &amp;a[2], &amp;a[3]); puts(\"First\"), fflush(stdout); std::sort(rk + 1, rk + 4, cmp); printf(\"%lld\\n\", 2 * a[rk[3]] - a[rk[1]] - a[rk[2]]), fflush(stdout); while(~scanf(\"%lld\", &amp;x) &amp;&amp; x) &#123; if(x == rk[1]) printf(\"%lld\\n\", a[rk[3]] - a[rk[2]]), fflush(stdout); else if(x == rk[2]) printf(\"%lld\\n\", a[rk[3]] - a[rk[1]]), fflush(stdout); else &#123; a[rk[3]] += 2 * a[rk[3]] - a[rk[1]] - a[rk[2]]; printf(\"%lld\\n\", 2 * a[rk[3]] - a[rk[1]] - a[rk[2]]), fflush(stdout); &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"构造","slug":"构造","permalink":"https://leverimmy.top/tags/%E6%9E%84%E9%80%A0/"}]},{"title":"【CodeForces】CF1375E Inversion SwapSort","slug":"【CodeForces】CF1375E-Inversion-SwapSort","date":"2020-07-07T00:12:43.000Z","updated":"2020-07-07T05:47:46.678Z","comments":true,"path":"2020/07/07/【CodeForces】CF1375E-Inversion-SwapSort/","link":"","permalink":"https://leverimmy.top/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375E-Inversion-SwapSort/","excerpt":"题意简述：给定一个长度为 $n$ 的序列 $a$，求 $a$ 中的所有逆序对 $(i_1, j_1), (i_2, j_2), \\cdots, (i_m, j_m)$ 的一个排列 $p$， 使得依次交换 $(a_{i_{p_1}}, a_{j_{p_1}}), (a_{i_{p_2}}, a_{j_{p_2}}), \\cdots, (a_{i_{p_m}}, a_{j_{p_m}})$ 后序列单调不降。 $1 \\le n \\le 10^3$，$1 \\le a_i \\le 10^9$。 题目链接","text":"题意简述：给定一个长度为 $n$ 的序列 $a$，求 $a$ 中的所有逆序对 $(i_1, j_1), (i_2, j_2), \\cdots, (i_m, j_m)$ 的一个排列 $p$， 使得依次交换 $(a_{i_{p_1}}, a_{j_{p_1}}), (a_{i_{p_2}}, a_{j_{p_2}}), \\cdots, (a_{i_{p_m}}, a_{j_{p_m}})$ 后序列单调不降。 $1 \\le n \\le 10^3$，$1 \\le a_i \\le 10^9$。 题目链接 解题思路：首先我们考虑对一个排列 $q$ 怎么处理，令 $\\textrm{pos}[x] = i,\\textrm{s.t. }a_i = x$。 我们可以每次先将最大的安排好，然后将次大的安排好……以此类推。 第 $i$ 轮操作我们尝试着把第 $i$ 大的元素（也就是 $i$）归位（也就是放到第 $i$ 个位置）。 此时我们已经处理完了$[i + 1, n]$，第 $i$ 个位置上的元素是 $q_i$，但本来这个地方应该放 $i$。 那么 $q_i + 1, q_i + 2, \\cdots, i$ 和 $q_i$ 都构成逆序对， 显然，依次交换 $(\\textrm{pos}[q_i + 1], i), (\\textrm{pos}[q_i + 2], i), \\cdots, (\\textrm{pos}[i], i)$ 可以将 $i$ 归位。 而且我们交换的这些位置，都构成逆序对。 然后我们考虑存在 $i &lt; j, a_i = a_j$ 的情况怎么转化为上面的排列。 我们强行规定 $i &lt; j, a_i = a_j$ 时有 $a_i$ 排在 $a_j$ 前面，即 按照值为第一关键字、数组下标为第二关键字 将 $a$ 进行重新标号。 这样就将 $a$ 转化为了一个排列；容易看出，这样修改后，逆序对的个数并没有改变。 总的时间复杂度为 $O(n^2)$。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e3 + 5;int n, cntAns, a[N], pos[N];struct PAIR &#123; int ff, ss; bool operator&lt;(const PAIR &amp;rhs) const &#123; if(ff == rhs.ff) return ss &lt; rhs.ss; return ff &lt; rhs.ff; &#125; PAIR(int _f = 0, int _s = 0) &#123; ff = _f, ss = _s; &#125;&#125; b[N], ans[N * N];int32_t main() &#123; scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; ++i) &#123; scanf(\"%d\", &amp;a[i]); b[i] = PAIR(a[i], i); &#125; std::sort(b + 1, b + n + 1); for(int i = 1; i &lt;= n; ++i) b[i].ff = b[i - 1].ff + 1; for(int i = 1; i &lt;= n; ++i) a[b[i].ss] = b[i].ff; // turned into a permutation for(int i = 1; i &lt;= n; ++i) pos[ a[i] ] = i; for(int i = n; i &gt;= 1; --i) &#123; for(int j = a[i] + 1; j &lt;= i; ++j) &#123; int p1 = pos[j]; int p2 = i; pos[a[p1]] = p2; pos[a[p2]] = p1; std::swap(a[p1], a[p2]); ans[++cntAns] = PAIR(p1, p2); &#125; &#125; printf(\"%d\\n\", cntAns); for(int i = 1; i &lt;= cntAns; ++i) printf(\"%d %d\\n\", ans[i].ff, ans[i].ss); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"暴力","slug":"暴力","permalink":"https://leverimmy.top/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"逆序对","slug":"逆序对","permalink":"https://leverimmy.top/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"}]},{"title":"【CodeForces】CF1326E Bombs","slug":"【CodeForces】CF1326E-Bombs","date":"2020-07-05T15:24:58.000Z","updated":"2020-07-08T03:58:29.005Z","comments":true,"path":"2020/07/05/【CodeForces】CF1326E-Bombs/","link":"","permalink":"https://leverimmy.top/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1326E-Bombs/","excerpt":"题意简述：给定两个长度均为 $n$ 的排列 $p, q$。对一个初始为空的集合 $S$ 进行如下操作： 对于每个 $i$ ，将 $p_i$ 放入集合； 如果 $i$ 被 标记 了，则此时将 $S$ 中最大的数删除。 求 $n$ 次操作后 $S$ 中最大的数。 排列 $q$ 的意义是，对于每个 $i$，询问将 $q_1, q_2 \\cdots q_{i-1}$ 都标记之后的上述操作的结果。 $1 \\le n \\le 3\\cdot 10^5$。 题目链接","text":"题意简述：给定两个长度均为 $n$ 的排列 $p, q$。对一个初始为空的集合 $S$ 进行如下操作： 对于每个 $i$ ，将 $p_i$ 放入集合； 如果 $i$ 被 标记 了，则此时将 $S$ 中最大的数删除。 求 $n$ 次操作后 $S$ 中最大的数。 排列 $q$ 的意义是，对于每个 $i$，询问将 $q_1, q_2 \\cdots q_{i-1}$ 都标记之后的上述操作的结果。 $1 \\le n \\le 3\\cdot 10^5$。 题目链接 解题思路：注意到一个性质，就是答案从左至右是单调不增的。 很好理解，因为当一个炸弹爆炸的时候总会删除 $A$ 中的最大值而不是次大值，利用反证法即可得到答案单调不增。 因此我们可以维护当前答案 $ans$，若 $ans$ 被从 $A$ 中删掉就 $ans \\gets ans - 1$。 考虑什么时候 $ans$ 会从 $A$ 中被删掉。 如果我们希望 $ans$ 被留下来，那么必须满足在 $ans$ 右边 存在 一个 $i$ 使得 $i$ 及以后的炸弹数 小于 $i$ 及以后大于 $ans$ 的数的个数。 也就是说，$i$ 及以后的炸弹炸不够 $ans$。 因此我们只需要考虑是否 所有 的位置 $i$ 都有 $i$ 及以后的炸弹数 都大于等于 $i$ 及以后大于 $ans$ 的数的个数。 维护每个位置 $i$ 及以后的炸弹数与大于 $ans$ 的数的个数的差，然后如果最大值小于等于 $0$，则 $ans \\gets ans - 1$。 记 $\\textrm{rev}(x) = i, \\textrm{s.t. }p_i = x$。 每个炸弹在处理的时候就是区间修改 $[1, q_i]$ 上的值减一，当 $ans \\gets ans - 1$ 的时候要区间修改 $[1, \\textrm{rev}(ans - 1)]$ 上的值加一。 因为我们是实时更新的，所以每次输出 $ans$ 即可。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define LL long longconst int inf = 0x3f3f3f3f;const int N = 3e5 + 5;int n, p[N], q[N], rev[N], ans;struct SEGTREE &#123; static const int MS = N &lt;&lt; 2; int lc[MS], rc[MS], dat[MS], tag[MS]; void pushup(int p) &#123; dat[p] = std::max(dat[p &lt;&lt; 1], dat[p &lt;&lt; 1 | 1]); &#125; void build(int p, int l, int r) &#123; lc[p] = l, rc[p] = r, dat[p] = tag[p] = 0; if(l == r) return; int mid = l + r &gt;&gt; 1; build(p &lt;&lt; 1, l, mid); build(p &lt;&lt; 1 | 1, mid + 1, r); pushup(p); &#125; void spread(int p) &#123; if(tag[p]) &#123; tag[p &lt;&lt; 1] += tag[p], tag[p &lt;&lt; 1 | 1] += tag[p]; dat[p &lt;&lt; 1] += tag[p], dat[p &lt;&lt; 1 | 1] += tag[p]; tag[p] = 0; &#125; &#125; void add(int p, int l, int r, int v) &#123; if(l &lt;= lc[p] &amp;&amp; rc[p] &lt;= r) &#123; tag[p] += v, dat[p] += v; return; &#125; spread(p); int mid = lc[p] + rc[p] &gt;&gt; 1; if(l &lt;= mid) add(p &lt;&lt; 1, l, r, v); if(mid &lt; r) add(p &lt;&lt; 1 | 1, l, r, v); pushup(p); &#125; int query(int p, int l, int r) &#123; if(l &lt;= lc[p] &amp;&amp; rc[p] &lt;= r) return dat[p]; spread(p); int mid = lc[p] + rc[p] &gt;&gt; 1, res = inf; if(l &lt;= mid) res = std::max(res, query(p &lt;&lt; 1, l, r)); if(mid &lt; r) res = std::max(res, query(p &lt;&lt; 1 | 1, l, r)); return res; &#125;&#125; t;int32_t main() &#123; scanf(\"%d\", &amp;n); for(int i = 1; i &lt;= n; ++i) &#123; scanf(\"%d\", &amp;p[i]); rev[p[i]] = i; &#125; for(int i = 1; i &lt;= n; ++i) scanf(\"%d\", &amp;q[i]); t.build(1, 1, n), t.add(1, 1, rev[n], 1); printf(\"%d \", ans = n); for(int i = 1; i &lt; n; ++i) &#123; t.add(1, 1, q[i], -1); while(t.query(1, 1, n) &lt;= 0) &#123; --ans; t.add(1, 1, rev[ans], 1); &#125; printf(\"%d \", ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://leverimmy.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"}]},{"title":"【CodeForces】CF708C Centroids","slug":"【CodeForces】CF708C-Centroids","date":"2020-07-05T12:32:03.000Z","updated":"2020-07-05T13:56:53.623Z","comments":true,"path":"2020/07/05/【CodeForces】CF708C-Centroids/","link":"","permalink":"https://leverimmy.top/2020/07/05/%E3%80%90CodeForces%E3%80%91CF708C-Centroids/","excerpt":"题意简述：给定一棵 $n$ 个点的树，你可以删除一条边并增加一条边，形成一棵新树。 问每个点在进行这样的操作后，是否可能成为新树的重心。 $1 \\le n \\le 4\\cdot 10^5$。 题目链接","text":"题意简述：给定一棵 $n$ 个点的树，你可以删除一条边并增加一条边，形成一棵新树。 问每个点在进行这样的操作后，是否可能成为新树的重心。 $1 \\le n \\le 4\\cdot 10^5$。 题目链接 解题思路：一个不可否认的事实是，如果一个节点 $u$ 是原树的重心，那么它一定可以成为新树的重心。 如果一个节点 $u$ 有一棵子树 $v$ 的大小大于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$，我们可以尝试着将 $v$ 的子树中最大的一棵接到 $u$ 上，看能否使 $u$ 成为重心。 显然这样的子树 $v$ 对于 $u$ 而言最多只有一个。 令：$$\\begin{aligned} &amp; \\textrm{siz}(u) = \\begin{cases} 1 &amp; \\textrm{son}(u) = \\varnothing \\\\ \\sum\\limits_{v \\in \\textrm{son}(u)}\\textrm{siz}(v) &amp; \\textrm{son}(u) \\neq \\varnothing \\end{cases} \\\\ &amp; \\textrm{maxson}(u) = \\begin{cases} 0 &amp; \\textrm{son}(u) = \\varnothing \\\\ \\max\\limits_{v \\in \\textrm{son}(u)}\\textrm{siz}(v) &amp; \\textrm{son}(u) \\neq \\varnothing \\end{cases} \\\\ &amp; f(u, 0) = \\max\\limits_{v \\in \\textrm{son}(u)} \\begin{cases} \\textrm{siz}(v) &amp; \\textrm{siz}(v) \\le \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor \\\\ f(v, 0) &amp; \\textrm{otherwise} \\end{cases} \\\\ &amp; f(u, 1) = \\mathop{\\operatorname{second max}}\\limits_{v \\in \\textrm{son}(u)} \\begin{cases} \\textrm{siz}(v) &amp; \\textrm{siz}(v) \\le \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor \\\\ f(v, 0) &amp; \\textrm{otherwise} \\end{cases} \\\\ &amp; g(u) = \\mathop{\\operatorname{argmax}}\\limits_{v \\in \\textrm{son}(u)} \\begin{cases} \\textrm{siz}(v) &amp; \\textrm{siz}(v) \\le \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor \\\\ f(v, 0) &amp; \\textrm{otherwise} \\end{cases}\\end{aligned}$$至此，我们求出来了每个节点 $u$ 的重儿子 $\\textrm{son}(u)$，最大的小于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 的子树 $g(u)$ 以及其大小 $f(u, 0)$，次大的小于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 的子树大小 $f(u, 1)$ 。 对一个节点 $u$ 求上述所有值的时间复杂度为 $O(n)$。 那么如何解决问题呢？ 考虑换根dp，用 $h(u)$ 来维护不是 $u$ 的子树中，小于等于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 的最大子树大小。 令：$$u = \\textrm{parent}(v), h(v) = \\max\\{\\begin{cases} n - \\textrm{siz}(u) &amp; n - \\textrm{siz}(u) \\le \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor \\\\ h(u) &amp; n - \\textrm{siz}(u) &gt; \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor \\\\ f(u, 1) &amp; g(u) = v \\\\ f(u, 0) &amp; g(u) \\neq v\\end{cases}\\}$$这样我们就可以用 $h(u)$ 来解决「原来 $v$ 是 $u$ 的孩子但现在 $u$ 是 $v$ 的孩子」的情况了。 最后，对于每个点： 如果 $\\textrm{siz}(\\textrm{maxson}(u)) &gt; \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 我们就只需要检查 $\\textrm{siz}(\\textrm{maxson}(u)) - f(\\textrm{maxson}(u), 0)$ 是否小于等于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 即可； 如果 $n - \\textrm{siz}(u) &gt; \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 我们就只需要检查 $n - \\textrm{siz}(u) - h(u)$ 是否小于等于 $\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 即可； 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 4e5 + 5;const int M = 8e5 + 5;int n, cnt, first[N], siz[N], maxson[N], f[N][2], g[N], h[N], ans[N];struct EDGE &#123; int to, _next;&#125; e[M];void add(int u, int v) &#123; e[cnt].to = v, e[cnt]._next = first[u]; first[u] = cnt++;&#125;void dfs1(int x, int p) &#123; siz[x] = 1; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p) continue; dfs1(y, x); siz[x] += siz[y]; if(siz[y] &gt; siz[maxson[x]]) maxson[x] = y; int cur = (siz[y] &lt;= n / 2) ? siz[y] : f[y][0]; if(cur &gt; f[x][0]) &#123; f[x][1] = f[x][0]; f[x][0] = cur; g[x] = y; &#125; else if(cur &gt; f[x][1]) f[x][1] = cur; &#125;&#125;void dfs2(int x, int p) &#123; ans[x] = 1; if(siz[maxson[x]] &gt; n / 2) ans[x] = (siz[maxson[x]] - f[maxson[x]][0] &lt;= n / 2); else if(n - siz[x] &gt; n / 2) ans[x] = (n - siz[x] - h[x] &lt;= n / 2); for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(y == p) continue; int cur = (n - siz[x] &lt;= n / 2) ? (n - siz[x]) : h[x]; h[y] = std::max(h[y], cur); h[y] = std::max(h[y], f[x][g[x] == y]); dfs2(y, x); &#125;&#125;int32_t main() &#123; scanf(\"%d\", &amp;n); memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n - 1; ++i) &#123; int u, v; scanf(\"%d %d\", &amp;u, &amp;v); add(u, v), add(v, u); &#125; dfs1(1, 0), dfs2(1, 0); for(int i = 1; i &lt;= n; ++i) printf(\"%d \", ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"换根dp","slug":"换根dp","permalink":"https://leverimmy.top/tags/%E6%8D%A2%E6%A0%B9dp/"}]},{"title":"【CodeForces】CF1200E Compress Words","slug":"【CodeForces】CF1200E-Compress-Words","date":"2020-07-05T11:04:57.000Z","updated":"2020-07-05T11:38:37.061Z","comments":true,"path":"2020/07/05/【CodeForces】CF1200E-Compress-Words/","link":"","permalink":"https://leverimmy.top/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1200E-Compress-Words/","excerpt":"题意简述：给定 $n$ 个字符串 $S_1, S_2, \\cdots S_n$，从左至依次合并两个字符串 $S_i, S_{i + 1}\\quad(i &lt; n)$。 每次合并时，找到最大的 $j$，使得 $S_i$ 长度为 $j$ 的后缀等于 $S_{i + 1}$ 长度为 $j$ 的前缀，将 $S_{i + 1}$ 替换为 $\\overline{S_iS_{i+1}[j+1..\\left|S_{j + 1}\\right|]}$。 求所有操作都进行完后的 $S_n$。 $1 \\le n \\le 10^5$，$1 \\le \\sum\\left|S_i\\right| \\le 10^6$。 题目链接","text":"题意简述：给定 $n$ 个字符串 $S_1, S_2, \\cdots S_n$，从左至依次合并两个字符串 $S_i, S_{i + 1}\\quad(i &lt; n)$。 每次合并时，找到最大的 $j$，使得 $S_i$ 长度为 $j$ 的后缀等于 $S_{i + 1}$ 长度为 $j$ 的前缀，将 $S_{i + 1}$ 替换为 $\\overline{S_iS_{i+1}[j+1..\\left|S_{j + 1}\\right|]}$。 求所有操作都进行完后的 $S_n$。 $1 \\le n \\le 10^5$，$1 \\le \\sum\\left|S_i\\right| \\le 10^6$。 题目链接 解题思路：设当前答案为 $S$，我们要把 $T$ 与 $S$ 合并，令 $\\sum\\left|S_i\\right| = m$。 则我们要求 $\\overline{T\\$S}$ 的最长公共前后缀的长度 $q$，然后把 $T[q+1..\\left|T\\right|]$ 补充到 $S$ 之后即可。 但有一个小细节，若每次我们都构造出 $\\overline{T\\$S}$，那么时间复杂度是 $O(m^2)$ 的，因为 $S$ 最坏可达到 $m^2$ 级别。 注意到一个性质，令 $p = \\min\\{\\left|S\\right|, \\left|T\\right|\\}$，则 $q \\le p$，我们每次只用构造出 $\\overline{T\\$S[1..p]}$ 即可。 不难发现这样时间复杂度为 $O(m)$。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e5 + 5;const int M = 1e6 + 5;int n, pi[M], lenans, lenx, leny;char ans[M], x[M], y[M];int32_t main() &#123; scanf(\"%d\", &amp;n); scanf(\"%s\", ans + 1); lenans = strlen(ans + 1); for(int i = 2; i &lt;= n; ++i) &#123; scanf(\"%s\", x + 1); lenx = strlen(x + 1); x[++lenx] = '#'; int m = std::min(lenx, lenans); for(int i = 1; i &lt;= lenx; ++i) y[i] = x[i]; leny = lenx; for(int i = lenans - m + 1; i &lt;= lenans; ++i) y[++leny] = ans[i]; for(int j = 2, k = 0; j &lt;= leny; ++j) &#123; while(k &gt; 0 &amp;&amp; y[k + 1] != y[j]) k = pi[k]; if(y[k + 1] == y[j]) ++k; pi[j] = k; &#125; for(int i = pi[leny] + 1; i &lt;= lenx - 1; ++i) ans[++lenans] = x[i]; &#125; for(int i = 1; i &lt;= lenans; ++i) putchar(ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"字符串","slug":"字符串","permalink":"https://leverimmy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"【POJ】1961-Period","slug":"【POJ】1961-Period","date":"2020-07-04T11:15:16.000Z","updated":"2020-07-04T11:48:16.059Z","comments":true,"path":"2020/07/04/【POJ】1961-Period/","link":"","permalink":"https://leverimmy.top/2020/07/04/%E3%80%90POJ%E3%80%911961-Period/","excerpt":"题意简述：给定一个长度为 $n$ 的字符串 $S$，$\\forall i \\in [1, n]$，求$$k \\in (1, n], \\text{s.t. } \\exists x \\in \\Sigma^{\\star}, S_i = x^k$$多组数据。 $2 \\le n \\le 10^6$。 题目链接","text":"题意简述：给定一个长度为 $n$ 的字符串 $S$，$\\forall i \\in [1, n]$，求$$k \\in (1, n], \\text{s.t. } \\exists x \\in \\Sigma^{\\star}, S_i = x^k$$多组数据。 $2 \\le n \\le 10^6$。 题目链接 解题思路： 引理：$x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$。 证明 先证明 $x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$：$\\because k\\cdot\\left|x\\right| = n$ 且 $\\left|x\\right| \\ge 1$$\\therefore k | n$若 $x^k = S$，则 $\\forall i \\in [1, \\dfrac{n}{k} - 1], S[(i - 1)\\cdot k + 1..i\\cdot k] = S[i\\cdot k + 1..(i + 1)\\cdot k]$。则 $S[1..n - k] = S[1..k]^{\\dfrac{n}{k} - 1} = S[k + 1..n]$。$\\therefore x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$再证明 $x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$：$\\because k | n$$\\therefore k | (n - k)$$\\therefore k \\le n - k$$\\because S[1..n - k] = S[k + 1..n]$ 且 $k \\le n - k$$\\therefore S[1..k] = S[k + 1..2k]$以此类推可得 $S[1..k] = S[k + 1..2k] = S[2k + 1..3k]\\cdots$（严谨证明可用数学归纳法）此时有 $x = S[1..k]$。$\\therefore x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$综上所述，$x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]$。 假设对于某一个前缀 $S_i$ 有 $S[1..i - k] = S[k + 1..i]$，由引理知 $k$ 即为循环节。 不难发现此时 $i - k \\in \\pi^{\\star}[i]$，题中要求最短周期，则每周期单位长度要最长，即 $i - k$ 应取 $\\pi[i]$。 记得还要满足 $k | i$，即 $(i - \\pi[i]) | i$；此时 $\\dfrac{i - \\pi[i]}{i}$ 即为最长周期。 喔，$\\pi[i] = 0$ 的情况我们应该跳过。 参考代码： Code 123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#define LL long longconst int N = 1e6 + 5;int n, kase, pi[N];char S[N];int main() &#123; while(scanf(\"%d\", &amp;n) &amp;&amp; n) &#123; scanf(\"%s\", S + 1); for(int i = 2, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; &#125; printf(\"Test case #%d\\n\", ++kase); for(int i = 2; i &lt;= n; ++i) &#123; if(i % (i - pi[i]) == 0 &amp;&amp; i != i - pi[i]) printf(\"%d %d\\n\", i, i / (i - pi[i])); &#125; putchar('\\n'); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"POJ","slug":"题解/POJ","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/POJ/"}],"tags":[{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"字符串","slug":"字符串","permalink":"https://leverimmy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"【洛谷】P2375 [NOI2014]动物园","slug":"【洛谷】P2375-NOI2014-动物园","date":"2020-07-04T02:16:32.000Z","updated":"2020-07-04T10:23:04.250Z","comments":true,"path":"2020/07/04/【洛谷】P2375-NOI2014-动物园/","link":"","permalink":"https://leverimmy.top/2020/07/04/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2375-NOI2014-%E5%8A%A8%E7%89%A9%E5%9B%AD/","excerpt":"题意简述：给定一个长度为 $n$ 的字符串 $S$，求$$\\prod_{i = 2}^{n}(\\left|\\{x \\in \\pi^{\\star}[i] : x \\le \\left\\lfloor\\dfrac{i}{2}\\right\\rfloor\\}\\right| + 1)\\pmod{10^9 + 7}$$每个测试点有 $T$ 组数据。 $1 \\le T \\le 5$，$1 \\le n \\le 10^6$。 题目链接","text":"题意简述：给定一个长度为 $n$ 的字符串 $S$，求$$\\prod_{i = 2}^{n}(\\left|\\{x \\in \\pi^{\\star}[i] : x \\le \\left\\lfloor\\dfrac{i}{2}\\right\\rfloor\\}\\right| + 1)\\pmod{10^9 + 7}$$每个测试点有 $T$ 组数据。 $1 \\le T \\le 5$，$1 \\le n \\le 10^6$。 题目链接 解题思路：思路 1一个比较显然的思路是倍增 $\\pi$ 数组，然后像求 LCA 一样跳 $k$ 级父亲。 我们第一步找到满足 $u = \\pi^{(j)}[i] \\le \\left\\lfloor\\dfrac{i}{2}\\right\\rfloor$ 的最大值 $u$，然后利用倍增数组求出 $u$ 之和即可。 不难发现时间复杂度是 $O(Tn\\log n)$ 的，有点难卡。 思路 2我们先求出 $\\left|\\pi^{\\star}[i]\\right|$，然后考虑怎么去除掉重叠的前后缀个数。 对于 $\\left|\\pi^{\\star}[i]\\right|$，我们能轻松地求出：$$\\left|\\pi^{\\star}[i]\\right| =\\begin{cases}1 &amp; \\pi[i] = 0\\\\\\left|\\pi^{\\star}[\\pi[i]]\\right| + 1 &amp; \\pi[i] \\neq 0\\end{cases}$$我们只需要维护一个小于等于 $\\left\\lfloor\\dfrac{i}{2}\\right\\rfloor$ 的指针 $k$，每次乘上 $\\left|\\pi^{\\star}[k]\\right| + 1$ 就可以了。 参考代码： Code1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e6 + 5;const int mod = 1e9 + 7;int T, n, pi[N], f[21][N];char S[N];int mul(int ta, int tb) &#123; int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret;&#125;int32_t main() &#123; scanf(\"%d\", &amp;T); while(T--) &#123; scanf(\"%s\", S + 1); n = strlen(S + 1); for(int i = 2, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; f[0][i] = pi[i]; &#125; for(int j = 1; j &lt;= 20; ++j) for(int i = 1; i &lt;= n; ++i) f[j][i] = f[j - 1][f[j - 1][i]]; int ans = 1; for(int i = 2; i &lt;= n; ++i) &#123; int u = i, cnt = 0; for(int j = 20; j &gt;= 0; --j) if(f[j][u] * 2 &gt; i) u = f[j][u]; for(int j = 20; j &gt;= 0; --j) if(f[j][u]) &#123; cnt += 1 &lt;&lt; j; u = f[j][u]; &#125; ans = mul(ans, cnt + 1); &#125; printf(\"%d\\n\", ans); &#125; return 0;&#125; Code2 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 1e6 + 5;const int mod = 1e9 + 7;int T, n, pi[N], dep[N] = &#123; 0, 1 &#125;, num[N];char S[N];int mul(int ta, int tb) &#123; int ret; __asm__ __volatile__ (\"\\tmull %%ebx\\n\\tdivl %%ecx\\n\":\"=d\"(ret):\"a\"(ta), \"b\"(tb), \"c\"(mod)); return ret;&#125;int32_t main() &#123; scanf(\"%d\", &amp;T); while(T--) &#123; scanf(\"%s\", S + 1); n = strlen(S + 1); for(int i = 2, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; dep[i] = dep[pi[i]] + 1; &#125; int ans = 1; for(int i = 2, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; while(k * 2 &gt; i) k = pi[k]; ans = mul(ans, dep[k] + 1); &#125; printf(\"%d\\n\", ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"},{"name":"NOI2014","slug":"NOI2014","permalink":"https://leverimmy.top/tags/NOI2014/"}]},{"title":"【学习笔记】KMP 算法学习笔记","slug":"【学习笔记】KMP-算法学习笔记","date":"2020-06-29T03:41:18.000Z","updated":"2020-07-12T08:14:48.431Z","comments":true,"path":"2020/06/29/【学习笔记】KMP-算法学习笔记/","link":"","permalink":"https://leverimmy.top/2020/06/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91KMP-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"发现自己不会 KMP 的模板了，借此机会复习一下 KMP，顺便更深入地研究前缀函数 $\\pi$ 的应用。","text":"发现自己不会 KMP 的模板了，借此机会复习一下 KMP，顺便更深入地研究前缀函数 $\\pi$ 的应用。 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： 字符串通常用 $S, T$ 等表示，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； 字符串长度用 $\\left|S\\right|$ 表示； 字符集大小用 $\\left|\\Sigma\\right|$ 表示； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； 空串用 $\\epsilon$ 表示； $S$ 是 $T$ 的前缀，用 $S \\sqsubset T$ 表示；$S$ 是 $T$ 的后缀，用 $S \\sqsupset T$ 表示； $S$ 的第 $i$ 个前缀，即 $S[1..i]$，用 $S_i$ 表示。 特殊地，本文的字符串下标、$\\pi$ 数组下标 均从 $1$ 开始。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； $S_4 = \\mathtt{ABCB}$。 前缀函数数组定义对于一个字符串 $S$，我们定义其前缀函数 $\\pi(S)$ 的值为 $S$ 的最长相等的真前缀和真后缀的长度，即：$$\\begin{aligned}\\pi(S) &amp; = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; \\left|S\\right|}\\{S[1..k] = S[\\left|S\\right| - k + 1..\\left|S\\right|]\\}\\\\&amp; = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; \\left|S\\right|}\\{S_k \\sqsupset S\\}\\end{aligned}$$对于一个字符串 $S$，我们定义其前缀函数数组 $\\pi$ 为 $\\pi[i] = \\pi(S_i)$。 特殊地，当 $\\left|S\\right| = 1$ 时 $\\pi(S) = \\mathop{\\operatorname{argmax}}\\limits_{k &lt; 1}\\{S[1..k] = S[2 - k..1]\\}$当 $k = 0$ 时 $S[1..0] = S[2..1] = \\epsilon$，故 $\\pi(S) = 0$。 性质 1：$\\pi(S_i) = \\pi[i] &lt; i$。 证明 由定义知 $\\pi[i] &lt; i$，即得证。$\\blacksquare$ 算法流程 根据定义，$\\pi[1] = 0$； 假设我们循环到了要求 $\\pi[i]\\quad(i \\ge 2)$，令 $k \\gets \\pi[i - 1]$。 由 $\\pi$ 数组的定义得，此时 $S[1..k] = S[i - k, i - 1]$。 我们现在要做的，就是从 $\\pi[1..i - 1]$ 递推到 $\\pi[i]$： 考虑到 $\\pi$ 数组的定义，我们不断地枚举共同的前后缀（即使用 $k = \\pi[k]$ 来迭代）。 结束这个迭代，有且仅有两种情况：$k = 0$ 或 $S[k + 1] = S[i]$。 对于前者，说明对于字符串 $S[1..i]$，不存在任何两个真前缀与真后缀相同，$\\pi[i] = 0$。 对于后者，说明我们找到了一个 $k$，使得 $S[1..k + 1] = S[i - k..i]$，根据定义，有 $\\pi[i] = k + 1$。 至此，我们求出了字符串 $S$ 的前缀函数数组 $\\pi$。 代码实现1234567891011void calcPi(char* S) &#123; pi[1] = 0; int len = strlen(S + 1); for(int i = 2, k = 0; i &lt;= len; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; &#125;&#125; 正确性 引理 1（后缀重叠引理）：对于 $x, y$ 满足 $x \\sqsupset z, y \\sqsupset z$ 而言，有若 $\\left|x\\right| \\le \\left|y\\right|$，则 $x \\sqsupset y$；若 $\\left|x\\right| \\ge \\left|y\\right|$，则 $y \\sqsupset x$；若 $\\left|x\\right| = \\left|y\\right|$，则 $x = y$。 证明 过于显然，证明略。$\\blacksquare$ 设$$\\pi^{\\star}[q] = \\{\\pi[q], \\pi^{(2)}[q], \\cdots, \\pi^{(t)}[q]\\}$$其中$$\\pi^{(i)}[q] = \\begin{cases}q &amp; i = 0 \\\\ \\pi[\\pi^{(i - 1)}[q]] &amp; i \\ge 1\\end{cases}$$ 当 $\\pi^{(t)}[q] = 0$ 时 $\\pi^{\\star}[q]$ 中的序列终止。 引理 2（前缀函数迭代引理）：对任意长度为 $n$ 的字符串 $S$，有$$\\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k &lt; q \\land S_k \\sqsupset S_q\\}$$ 证明 先证明 $\\pi^{\\star}[q] \\subseteq \\{k:k &lt; q \\land S_k \\sqsupset S_q\\}$，即证明 $\\forall x \\in \\pi^{\\star}[q], x &lt; q \\land S_x \\sqsupset S_q$。任取 $x \\in \\pi^{\\star}[q]$，不妨设 $x = \\pi^{u}[q] \\quad (u &gt; 0)$，下面通过对 $u$ 的数学归纳法证明命题成立。（基础）当 $u = 1$ 时，$x = \\pi[q]$，由 $\\pi$ 数组的定义可知 $\\pi[q] &lt; q \\land S_{\\pi[q]} \\sqsupset S_q$。（假设）假设当 $u = v$ 时 $\\pi^{v}[q] &lt; q \\land S_{\\pi^{v}[q]} \\sqsupset S_q$。（推导）则当 $u = v + 1$ 时，$\\pi^{v + 1}[q] = \\pi[\\pi^{v}[q]] &lt; \\pi^{v}[q] &lt; q$（性质 1）；$S_{\\pi^{v + 1}[q]} \\sqsupset S_{\\pi^{v}[q]} \\sqsupset S_q$（由性质 1 得到下标的大小关系，由引理 1 得到前缀之间的关系）因此 $\\forall x \\in \\pi^{\\star}[q], x &lt; q \\land S_x \\sqsupset S_q$。再证明 $\\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$，即证明 $\\forall x \\in \\{k:k &lt; q \\land S_x \\sqsupset S_q\\}, x \\in\\pi^{\\star}[q]$考虑使用反证法来证明命题成立。假设集合 $M = \\{k:k &lt; q \\land S_k \\sqsupset S_q\\} - \\pi^{\\star}[q]$ 非空，$j$ 是 $M$ 中的最大值。$\\because$ $\\pi[q]$ 是 $\\{k:k &lt; q \\land S_x \\sqsupset S_q\\}$ 中的最大值，且 $j \\in \\{k:k &lt; q \\land S_x \\sqsupset S_q\\}$$\\therefore j &lt; \\pi[q], S_j \\sqsupset S_q$又 $\\because \\pi[q] \\in \\pi^{\\star}[q]$$\\therefore \\exists j’ \\in \\pi^{\\star}[q], \\text{s.t. }j’ &gt; j$设 $j’$ 表示 $\\pi^{\\star}[q]$ 中比 $j$ 大的最小整数。$\\because \\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$ 且 $j’ \\in \\pi^{\\star}[q]$$\\therefore S_{j’} \\sqsupset S_q$$\\because j’ &gt; j$ 且 $j$ 是小于 $j’$ 的最大值$\\therefore S_j \\sqsupset S_{j’}$（引理 1）由 $\\pi$ 数组的定义知 $\\pi[j’] = j$$\\because j’ \\in \\pi^{\\star}[q]$$\\therefore j = \\pi[j’] \\in \\pi^{\\star}[q]$，与假设矛盾因此 $\\{k:k &lt; q \\land S_k \\sqsupset S_q\\} \\subseteq \\pi^{\\star}[q]$。综上所述，对任意长度为 $n$ 的字符串 $S$，有 $\\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k &lt; q \\land S_k \\sqsupset S_q\\}$。$\\blacksquare$ 引理 3：对任意长度为 $n$ 的字符串 $S$，有 $\\forall q \\in [1, n]$，若 $\\pi[q] &gt; 0$，则 $\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$。 证明 令 $x = \\pi[q] &gt; 0$，则 $x &lt; q, S_x \\sqsupset S_q$$\\because x &gt; 0$，则 $x - 1$ 有意义$\\therefore x - 1 &lt; q - 1, S_{x - 1} \\sqsupset S_{q - 1}$（把 $S_x$ 和 $S_q$ 的最后一个字符去掉） 由引理 2 知 $x - 1 \\in \\pi^{\\star}[q - 1]$$\\therefore \\forall q \\in [1, n] \\land \\pi[q] &gt; 0,\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$$\\blacksquare$ 对 $q \\in [2, n]$ 定义子集 $E_{q - i} \\subseteq \\pi^{\\star}[q - 1]$ 为： $$E_{q - 1} = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\}$$ 则有： $$\\begin{aligned} E_{q - 1} &amp; = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} \\\\ &amp; = \\{k: k &lt; q - 1, S_k \\sqsupset S_{q - 1}, S[k + 1] = S[q]\\} \\\\ &amp; = \\{k: k &lt; q - 1, S_{k + 1} \\sqsupset S_q\\}\\end{aligned}$$ 因此，$E_{q - 1}$ 是由 $\\pi^{\\star}[q - 1]$ 中的值组成的、能满足 $S_{k + 1}$ 与 $S_q$ 的某个后缀相等的 $k$ 组成的集合。 推论 1：对任意长度为 $n$ 的字符串 $S$，有$$\\forall q \\in [2, n],\\pi[q] = \\begin{cases}0 &amp; E_{q - 1} = \\varnothing \\\\ 1 + \\max\\{k \\in E_{q - 1}\\} &amp; E_{q - 1} \\neq \\varnothing\\end{cases}$$ 证明 当 $E_{q - 1} = \\varnothing$ 时，不存在任何一个 $k \\in \\pi^{\\star}[q - 1]$，使得 $S_{k + 1} \\sqsupset S_q$。显然此时 $\\pi[q]$ 只能为 $0$。当 $E_{q - 1} \\neq \\varnothing$ 时，$\\forall k \\in E_{q - 1}, k &lt; q - 1 \\land S_{k + 1} \\sqsupset S_q \\Longrightarrow k + 1 &lt; q$则由 $\\pi[q]$ 的定义，$k$ 是拓展到 $S_q$ 的某一后缀的备选项，$\\pi[q] \\ge 1 + \\max\\{k \\in E_{q - 1}\\}$。注意到此时 $\\pi[q] &gt; 0$，设 $r = \\pi[q] - 1$。则 $r + 1 = \\pi[q] &lt; q, S_{r + 1} = S_{\\pi[q]} \\sqsupset S_q$。$\\because r + 1 &gt; 0$$\\therefore S_{r + 1} = S_q$由引理 3 可得 $r = \\pi[q] - 1 \\in \\pi^{\\star}[q - 1]$$\\therefore r \\in E_{q - 1}$$\\therefore \\pi[q] - 1 = r \\le \\max\\{k \\in E_{q - 1}\\}$即 $\\pi[q] \\le 1 + \\max\\{k \\in E_{q - 1}\\}$综上所述，当 $E_{q - 1} \\neq \\varnothing$，$\\pi[q] = 1 + \\max\\{k \\in E_{q - 1}\\}$。$\\blacksquare$ 再来看看代码： 1234567891011void calcPi(char* S) &#123; pi[1] = 0; int len = strlen(S + 1); for(int i = 2, k = 0; i &lt;= len; ++i) &#123; while(k &gt; 0 &amp;&amp; S[k + 1] != S[i]) k = pi[k]; if(S[k + 1] == S[i]) ++k; pi[i] = k; &#125;&#125; 接下来我们将使用循环不变式来证明上述代码的正确性。 证明 初始化在第 4 行的迭代开始前，有 $i = 1, k = \\pi[i] = 0$，不变式成立。保持在每次迭代开始前，有 $k = \\pi[i - 1]$：若是第一次迭代，此等式由第 4 行保证；其余迭代均由第 9 行保证。接下来要证明每次迭代结束后均有 $k = \\pi[i]$ 成立。若 $k \\neq \\pi[i]$，则会在第 5-8 行将 $k$ 调整至 $\\pi[i]$。第 5 行的 while 循环遍历每一个 $k \\in \\pi^{\\star}[i - 1]$，直至找到一个 $k$，使得 $S[k + 1] = S[i]$。（引理 2）若找不到这样的值，则在第 7 行 $k = 0$。若找到了这样的值，此时 $k$ 为满足条件的集合中的最大值，应将 $\\pi[i] \\gets k + 1$。（推论 1）第 9 行的赋值语句使得 $k = \\pi[i]$ 恒成立。终止当 $i = n + 1$ 时，迭代终止，此时我们求出了 $\\pi[1..n]$。至此，算法结束。因此，上述代码实现能正确地求出字符串 $S$ 的前缀函数数组。$\\blacksquare$ 时间复杂度不难发现，第 7-9 行代码的时间复杂度均为 $O(n)$，唯一棘手的是第 6-7 行代码。 考虑 $k$ 的变化，$k$ 在第 7-8 行增加的次数不超过 $n$ 次，即 $k \\le n$； $k$ 在第 6 行的操作中，因为有 $\\pi(S_i) &lt; i$ 的性质，导致每次迭代至少使 $k$ 减小 $1$，即最多迭代 $n$ 次。 综上所述，用上述方法求一个字符串的前缀函数数组的时间复杂度为 $O(n)$。 空间复杂度易知用此种方法求前缀函数数组的空间复杂度为 $O(n)$。 KMP 算法算法流程我们举一个例子：用 $S = \\mathtt{CCFCCFMONEY}$ 被 $T = \\mathtt{CCFCCFSB}$ 匹配。 我们定义两个指针 $i,k$，表示 $S[i - k..i - 1] = T[1..k]$。 我们要拓展的，就是 $S[i]$ 与 $T[k + 1]$ 之间的关系。 首先我们考虑朴素算法的弊端：当你匹配到了 $i = 8, k = 7$ 时：$$\\begin{aligned}S &amp; = \\mathtt{\\color{green}CCFXCCF\\color{red}M\\color{black}ONEY}\\\\T &amp; = \\mathtt{\\color{green}CCFXCCF\\color{red}S\\color{black}B}\\\\\\text{index} &amp; =\\mathtt{123456789}\\end{aligned}$$你发现 $S[i] = S[8] = \\mathtt{M}$，可 $T[k + 1] = T[8] = \\mathtt{S}$，我们前功尽弃，只能将 $T$ 往右平移一格。 而且要重新开始：$i = 1, k = 1$。$$\\begin{aligned}S &amp; = \\mathtt{CCFXCCFMONEY}\\\\T &amp; = \\mathtt{\\text{ }CCFXCCFSB}\\\\\\text{index} &amp; =\\mathtt{123456789}\\end{aligned}$$显然朴素算法的时间复杂度为 $O(nm)$。 再考虑使用前缀函数 $\\pi$ 来优化匹配的过程。 不难求出 $T$ 的前缀数组 $\\pi[1..n] = \\{0, 1, 0, 0, 1, 2, 3, 0, 0\\}$。 考虑前缀数组的意义：$T_i$ 的最长的相等的前后缀长度。 你知道了当 $i = 8, k = 7$ 时，有 $S[1..7] = T[1..7]$，而且 $T[1..3] = T[5..7]$。 在上述的例子中，也就是我们可以把 $T[1..3]$ 这个地方匹配到的 $\\mathtt{\\color{green}CCF}$ 移动到 $S[5..8]$ 去。 这样就直接节省了三次移动。 总结一下使用前缀函数 $\\pi$ 时我们的匹配过程： 使用 $i, k$ 来表示当前 $S[i - k..i - 1] = T[1..k]$； 如果 $S[i] \\neq T[k + 1]$，我们就用 $\\pi$ 函数来实现大幅度的跳跃； 否则 $k’ \\gets k + 1$，表示 $S[i - k..i] = T[1..k + 1]$； 当 $k = m$ 时，说明找到了一个匹配 $S[i - m + 1..i] = T[1..m]$。 代码实现12345678910for(int i = 1, k = 0; i &lt;= n; ++i) &#123; while(k &gt; 0 &amp;&amp; T[k + 1] != S[i]) k = pi[k]; if(T[k + 1] == S[i]) ++k; if(k == m) &#123; printf(\"%d\\n\", i - m + 1); // S[i - m + 1..i] = T[1..m] k = pi[k]; &#125;&#125; 正确性可以证明，上述代码实现是正确的。 时间复杂度依葫芦画瓢地使用求前缀函数数组时的摊还分析方法，不难得出 KMP 算法的时间复杂度为 $O(n + m)$。 空间复杂度不难发现 KMP 算法的空间复杂度为 $O(n + m)$。 例题 「NOI2014」动物园 POJ 1961-Period CF1200E Compress Words 「POI2006」OKR-Periods of Words 写在最后《算法导论》是本好书，上面的算法均有使用循环不变式的正确性证明，很值得一看。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"}]},{"title":"【CodeForces】CF1369D TediousLee","slug":"【CodeForces】CF1369D-TediousLee","date":"2020-06-24T07:37:18.000Z","updated":"2020-07-03T10:00:35.723Z","comments":true,"path":"2020/06/24/【CodeForces】CF1369D-TediousLee/","link":"","permalink":"https://leverimmy.top/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369D-TediousLee/","excerpt":"题意简述：题面比较复杂，建议到原 OJ 上查看。 题目链接","text":"题意简述：题面比较复杂，建议到原 OJ 上查看。 题目链接 解题思路：注意到每个 $i$ 级的「爪子」是由两个 $i - 2$ 级的「爪子」（左右两分支）和一个 $i - 1$ 级的「爪子」（中间下面一个分支）组成的。 每当 $3 | i$ 时，都能多形成一个「爪子」（如图）；所以转移方程是 $f_i = 2f_{i - 2} + f_{i - 1} + 4 \\cdot [3 | i]$。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int mod = 1e9 + 7;const int N = 2e6 + 5;int f[N];int32_t main() &#123; for(int i = 3; i &lt;= 2e6; ++i) f[i] = (2LL * f[i - 2] + f[i - 1] + 4 * (i % 3 == 0)) % mod; int __tests; scanf(\"%d\", &amp;__tests); while(__tests--) &#123; int n; io::read(n); printf(\"%d\\n\", f[n]); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"【CodeForces】CF1369C RationalLee","slug":"【CodeForces】CF1369C-RationalLee","date":"2020-06-24T05:51:10.000Z","updated":"2020-07-03T08:01:06.183Z","comments":true,"path":"2020/06/24/【CodeForces】CF1369C-RationalLee/","link":"","permalink":"https://leverimmy.top/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369C-RationalLee/","excerpt":"题意简述：给定 $n$ 个价值分别为 $a_i$ 的元素以及 $k$ 个容量分别为 $w_i$ 的背包，其中每个元素的体积均为 $1$。求每个背包内的最大价值与最小价值之和的和的最大值。 $1 \\le n, k \\le 2\\cdot 10^5$，保证 $\\sum w_i = n$。 题目链接","text":"题意简述：给定 $n$ 个价值分别为 $a_i$ 的元素以及 $k$ 个容量分别为 $w_i$ 的背包，其中每个元素的体积均为 $1$。求每个背包内的最大价值与最小价值之和的和的最大值。 $1 \\le n, k \\le 2\\cdot 10^5$，保证 $\\sum w_i = n$。 题目链接 解题思路：首先，将 $a, w$ 按降序排列。 当存在 $w_i = 1$ 时，从 $a$ 的较大头开始取 $1$ 个元素分给它。 其次，将剩下的元素分给其他的 $w$： 每个容量为 $w_i$ 的背包，从 $a$ 的较大头开始取 $1$ 个、从 $a$ 的较小端取 $w_i - 1$ 个，这样一定保证是最优的。 为什么这个策略是最优的？ 若把较大的 $a_i$ 分给容量大于 $1$ 的背包，显然那个背包的较小值不为 $a_i$，则 $a_i$ 只能被算一次； 但将 $a_i$ 分给容量为 $1$ 的背包，$a_i$ 将会被算两次，这样一定比某个 $a_j \\le a_i$ 的 $j$ 放入这个容量为 $1$ 的背包要不劣。 $a$ 从小往大考虑，最小的数一定会被放进某个背包，且这个背包的最小值一定是这个最小的数； 那么我们就应该尽量地消耗较小的数，从小到大把 $w_i - 2$ 个数也放进这个背包，并配上一个较大的数。 考虑排序后的 $a_n$ 与 $a_{n - 1}$： 显然 $a_{n - 1} \\le a_{n - 2}$，这导致令 $a_{n - 2}$ 为另一背包的最小元素一定要比 $a_{n - 1}$ 不劣，则我们就应该将 $a_{n - 1}$ 与 $a_n$ 放入同一背包而不是将 $a_{n - 2}$ 与 $a_n$ 放入同一背包。 剩下的 $a$ 同理。 总的时间复杂度为 $O(n\\log n)$。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int inf = 0x3f3f3f3f;const int N = 2e5 + 5;const int K = 2e5 + 5;int n, k, a[N], w[K];int32_t main() &#123; int __tests; scanf(\"%d\", &amp;__tests); while(__tests--) &#123; io::read(n, k); LL ans = 0; for(int i = 1; i &lt;= n; ++i) io::read(a[i]); for(int i = 1; i &lt;= k; ++i) io::read(w[i]); std::sort(a + 1, a + n + 1, std::greater &lt;int&gt; ()); std::sort(w + 1, w + k + 1, std::greater &lt;int&gt; ()); int l = 1, r = n, ones = 0; for(int i = k; i &gt;= 1; --i) &#123; if(w[i] &gt; 1) break; ans += a[l] * 2; ++l, ++ones; &#125; for(int i = 1; i &lt;= k - ones; ++i) &#123; ans += a[l] + a[r]; ++l, r -= (w[i] - 1); &#125; printf(\"%lld\\n\", ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"}],"tags":[{"name":"贪心","slug":"贪心","permalink":"https://leverimmy.top/tags/%E8%B4%AA%E5%BF%83/"},{"name":"排序","slug":"排序","permalink":"https://leverimmy.top/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"【学习笔记】EERTREE 学习笔记","slug":"【学习笔记】EERTREE-学习笔记","date":"2020-06-22T14:51:07.000Z","updated":"2020-07-18T14:16:47.650Z","comments":true,"path":"2020/06/22/【学习笔记】EERTREE-学习笔记/","link":"","permalink":"https://leverimmy.top/2020/06/22/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91EERTREE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"EERTREE，又称回文树（Palindrome tree）、回文自动机（PAM），是一种能在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内处理与 回文串 有关问题的数据结构。 EERTREE 是一个 回文串，也许这就是这个数据结构的名字的来历。 回文树的高级应用慢慢写，持续更新。 pdf 论文","text":"EERTREE，又称回文树（Palindrome tree）、回文自动机（PAM），是一种能在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内处理与 回文串 有关问题的数据结构。 EERTREE 是一个 回文串，也许这就是这个数据结构的名字的来历。 回文树的高级应用慢慢写，持续更新。 pdf 论文 写在前面为了更方便地描述字符串相关内容，我们做出以下规定： $S, T$ 通常表示一个字符串，$c$ 通常表示一个字符，$\\Sigma$ 表示字符集； $\\left|S\\right|$ 表示字符串长度； $\\left|\\Sigma\\right|$ 表示字符集大小； $S[l..r]$ 表示 $S[l], S[l + 1], \\ldots, S[r - 1], S[r]$； $\\epsilon$ 表示空串； $S \\subset T$ 表示 $S$ 为 $T$ 的子串，即 $\\exists i \\in [1, \\left|T\\right| - \\left|S\\right|], \\text{s.t. } \\forall j \\in [1, \\left|S\\right|], S[j] = T[i + j - 1]$； $\\overleftarrow{S}$ 表示 $S$ 的翻转，即 $\\forall i \\in [1, \\left|S\\right|], \\overleftarrow{S[i]} = S[\\left|S\\right|- i + 1]$； $S$ 为回文串当且仅当 $S = \\overleftarrow{S}$，即 $\\forall i \\in [1, \\left|S\\right|], S[i] = S[\\left|S\\right| - i + 1]$； 若 $S$ 为回文串，则定义 $r(S)$ 为其最长回文半径，即 $r(S) = \\max\\{\\left\\lfloor\\dfrac{\\left|T\\right| + 1}{2}\\right\\rfloor\\}, T \\subset S, T = \\overleftarrow{T}$。 特殊地，本文的字符串下标、回文树内节点编号 均从 $1$ 开始。 一些例子：对于 $S = \\mathtt{ABCBAD}$ 而言： $\\left|S\\right| = 6$； $\\left|\\Sigma\\right| = 4$； $S[2..4] = \\mathtt{BCBA}$； $S[1..4] \\subset S[1..5]$； $\\overleftarrow{S[3..5]} = \\mathtt{DAB}$； $S[1..5] = \\mathtt{ABCBA} = \\overleftarrow{S[1..5]}$ 为回文串。 结构、操作与建立为什么我们考虑一个长度为 $n$ 的回文串 $S$，令 $P = { T : T = S[i..n - i + 1] \\quad i \\in [1, \\left\\lfloor\\dfrac{n + 1}{2}\\right\\rfloor]}$，则 $\\forall x \\in P, x = \\overleftarrow{x}$。 那么 $\\forall x \\in P$ 之间又有什么样的关系呢？ 不难发现，一个回文串，是很多 子回文串层层嵌套 而成的。 也就是说，一个回文串，通过 在两端添加相同的字符，可以形成一个新的回文串。 至此，我们寻觅到了回文树上 边的意义。 在回文树中，$u$ 的父亲连向 $u$ 的边上存储着字符 $c$ 的意义是 $u$ 的父亲表示的回文串，在两端加上 $c$ 后，能形成 $u$。 是什么 引理 1：向 $S$ 末尾添加一个字符 $c$ ，最多只会新生成一个回文子串。 证明 这个子串是 $S$ 的 最长回文后缀 末端增加 $c$，且原来的前端恰好也是 $c$，所产生的。也就是说，每次在 $S$ 的末尾添加一个字符，最多只会新建一个节点。$\\blacksquare$ 回文树的内部结构，是一个包含着额外信息的有向图。 在后文中，我们可能会用回文子串来表示一个节点。 回文树支持两个操作：$\\text{add}(c)$ 和 $\\text{eertree}(S)$。 $\\text{add}(c)$ 表示在回文树内插入 $c$，返回此次操作新增的回文子串个数。 通过引理 1，我们可以知道 $\\text{add}(c)$ 总是返回 $0$ 或 $1$。 不难发现，每次 $\\text{add}$ 操作之后，我们都能在 $O(1)$ 的时间内得到已经处理了的字符串 $T$ 的最长回文后缀，即 $\\text{maxSuf}(T)$。 $\\text{eertree}(S)$ 表示将 $S$ 内的字符，从左至右逐个插入后形成的回文树。 小结 1：$S$ 中包含的本质不同的回文子串数量为 $\\text{eertree}(S)$ 的节点中的最大编号。 一棵回文树上的每一个节点上要存储的信息有： 这个点的序号 $u$； 表示的回文串的长度 $len_u$； 从这个点出发的一条标为 $c$ 的出边指向的节点的编号 $ch_{u, c}$； 回文链接 $fail_u$； 为了以后的方便，我们需要在初始化的时候新建两个节点，长度和编号分别为 $-1$ 和 $0$。 $0$ 表示着空串，称之为「偶根」；而 $-1$ 表示着「虚串」，称之为「奇根」。 偶根（即 $0$）连出的边（如果存在），指向 $cc$，表示在 $\\epsilon$ 的两侧同时添加 $c$ 所形成的的字符串为 $cc$； 奇根（即 $-1$）连出的边（如果存在），指向 $c$，表示原来长度为 $-1$ 的串，在两侧同时添加 $c$ 形成了长度为 $1$ 的字符串 $c$。 节点 $u$ 连至 $v$ 的回文链接 $fail_u$ 意味着 $v$ 表示的回文串 $S$ 是 $u$ 表示的回文串 $T$ 的次长回文后缀子串（因为最长的是自己本身）。 我们 定义 $fail_c = 0, fail_0 = fail_{-1} = -1$。 引理 2：任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$（注意，这里的「入度」不将「后缀链接」计算在内）。 证明 若 $len_u = 1$，则其唯一的入边必为 $-1 \\to u$；若 $len_u = 2$，则其唯一的入边必为 $0 \\to u$；若 $len_u \\ge 3$，则其唯一的入边必为 $v \\to u$，满足：$v$ 表示的回文子串 $T$ 的两端添加某个字符 $c$ 能使得 $u$ 表示的回文子串 $S$ 满足 $S = cTc$。综上所述，任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$。$\\blacksquare$ 命题 1：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的空间复杂度为 $O(n)$。 证明 由引理 1 可知，在 $S$ 的逐步插入过程中，最多会新建 $n$ 个节点；而还有 $2$ 个初始化时新建的节点。所以节点个数为最多为 $n + 2$ 个。由引理 2 可知，边的个数最多为 $n$ 个；后缀链接最多有 $n$ 个。综上所述，建立 $\\text{eertree}(S)$ 的空间复杂度为 $O(n)$。$\\blacksquare$ 怎么做以 $S_0 = \\mathtt{EERTREE}$ 为例，我们对它建立一棵回文树。 首先，我们先新建两个点，钦定它们为「奇根 $1$」和「偶根 $0$」。 一棵空的回文树是这样的（红色边为 $fail$ 边，蓝色边为 $ch$ 边，后同）： 然后我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{E}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EE}$。 接着我们插入 $\\mathtt{R}$，现在 $S = \\mathtt{EER}$。 接着我们插入 $\\mathtt{T}$，现在 $S = \\mathtt{EERT}$。 接着我们插入 $\\mathtt{R}$，现在 $S = \\mathtt{EERTR}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EERTRE}$。 接着我们插入 $\\mathtt{E}$，现在 $S = \\mathtt{EERTREE}$。 我们应该如何实现这个过程呢？ 命题 2：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\\log\\left|\\Sigma\\right|)$。 证明 在初始化的时候，我们得到了 $\\text{eertree}(\\epsilon)$，即一个「奇根」和一个「偶根」加上它们的后缀链接。对 $S$ 建造回文树的时候，我们会依次向回文树中插入 $S[1], S[2], \\ldots, S[n]$。我们要使得在每次 $\\text{add}$ 操作之后，回文树中的所有节点之间的边以及回文链接都被正确维护。考虑进行完了第 $i$ 次操作后的状态，我们已经处理了 $T = S[1, i]$ 的回文树，现在要插入 $c = S[i + 1]$。我们现在的目标是寻找 $S[1..i + 1] = Tc$ 的最长回文后缀 $P$。显然，要么 $P = c$，要么 $P = cQc$（显然 $Q$ 为 $S[1..i]$ 的某一回文后缀）。也就是说，我们需要找到 $T$ 中，以 开头的前一位 为 $c$ 的最长回文后缀 $Q$。我们从 $\\text{maxSuf}(T)$ 开始，沿着回文链接遍历，设当前节点为 $v$，比较 $c$ 和 $T[i - len_v - 1]$。怎么理解呢？$T[i - len_v..i - 1]$ 是某一回文串 $Q$，我们要找的，是满足 $Q$ 开头的前一位为 $c$ 的某一回文串。也就是要保证 $c = T[i - len_v - 1]$。不难发现，特殊地，当 $P = c$ 时，$Q$ 对应的节点为「奇根」。若 $P = c$：检查 $ch_{-1, c}$ 是否存在：若不存在，则新建一个节点 $v$，使 $ch_{-1, c} = v, len_v = 1, fail_v = 0$。若存在，根据定义，$fail_v = 0$ 不需要更新。若 $P = cQc$：设 $Q$ 对应的节点的序号为 $u$。检查 $ch_{u, c}$ 是否存在：若不存在，则新建一个节点 $v$，使 $len_v = len_u + 2$，连接 $u \\to v$，还要更新 $fail_v$。若存在，我们只需要考虑更新 $fail_v$。考虑 $fail_v$ 到底会指向哪里？会指向 $S[1, i + 1] = Tc$ 的次长回文后缀。即 $cQc$ 中 开头的前一位 为 $c$ 的次长回文后缀 $R$。若我们从 $u$ 开始遍历后缀链接，那么找到的会是 $cQc$ 这个最长回文后缀；因此我们应从 $fail_u$ 开始遍历，仍然是比较 $c$ 和 $T[i - len_v - 1]$。接下来我们来分析 $\\text{add}$ 操作的时间复杂度。我们每次检查 $ch_{u, c}$（或是检查 $ch_{-1, c}$）是否存在，需要 $O(\\log\\left|\\Sigma\\right|)$ 的时间复杂度（std::map 之类的数据结构实现）实际情况下，我们使用子节点数组来实现，单次 $\\text{add}$ 的时间复杂度是 $O(\\left|\\Sigma\\right|)$ 的。则一共 $n$ 次，共 $O(n \\log\\left|\\Sigma\\right|)$。令已经处理了的字符串 $S[1..i] = T$，考虑 $\\text{maxSuf}(T)$ 的末尾在 $S$ 中的下标 $j$ 的变化：一个 $fail$ 的转移会使 $j$ 向左至少移动 $1$ 格；一个 $ch$ 转移会使 $j$ 向右至少移动一格。在处理整个 $S$ 的过程中，向左最多移动 $n$ 格，也就是最多 $n$ 次；向右最多移动 $n$ 格，也就是最多 $n$ 次。因此转移部分的时间复杂度为总共 $O(n)$。总时间复杂度为 $O(n) + O(n\\log\\left|\\Sigma\\right|) = O(n\\log\\left|\\Sigma\\right|)$。综上所述，建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\\log\\left|\\Sigma\\right|)$。$\\blacksquare$ 代码实现后文有吧。 性质我们称一个节点 $u$ 是「奇」的，当且仅当 $len_u$ 为奇数；称一个节点 $v$ 是「偶」的，当且仅当 $len_v$ 为偶数。 引理 3：一棵回文树本质上是两个弱连通图：以「奇根」和「奇点」构成的一个弱连通子图和以「偶根」和「偶点」构成的一个弱连通子图，且均为树。「奇点」和与其相连的边构成的树是 $S$ 右半部分长度为奇数的回文子串构成的 trie；「偶点」和与其相连的边构成的树是 $S$ 右半部分长度为偶数的回文子串构成的 trie。一棵回文树中的所有节点与连接在每个节点上的回文链接的反向链接构成一棵有向基环树，其中环为 $-1$ 节点的自环。 证明 如果边 $e = u \\to v$ 存在，则 $len_v = len_u + 2$，显然 $u, v$ 奇偶性相同，则「奇点」与「偶点」之间互不相通。结合引理 2，此性质得证。这是回文树上边的定义和 trie 的定义。注意到，除了 $fail_{-1}$，其他的回文链接均会使 $len$ 减小，且回文树中的每个点均有唯一的后缀链接。则每个点都仅有唯一简单路径到达 $-1$，这显然是一棵（带有一个环）的树。$\\blacksquare$ 小结 2：一些基本的字符串数据结构如回文 trie、后缀 trie 的空间复杂度都是 $O(n^2)$ 的；像后缀树和 Compressed trie 这样很复杂的数据结构空间复杂度是 $O(n)$ 的。但回文树这么简明易懂的数据结构的空间复杂度也是 $O(n)$ 的。岂不妙哉？ 更重要的是，一个字符串中本质不同的回文串期望个数 是 $O(\\sqrt{\\left|S\\right|\\cdot\\left|\\Sigma\\right|})$ 的。也就是说，回文树的期望空间复杂度更佳。 小结 3：我们定义一个映射 $\\theta :\\Sigma \\to \\Sigma, \\text{s.t. } \\theta^2(S) = S$。我们称一个字符串 $S$ 是 $\\theta$-回文的，当且仅当 $S = \\theta(\\overleftarrow{S})$。一个长度为 $n$ 的字符串 $S$ 的 $\\theta$-回文树仍可以在 $O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})$ 的时间与 $O(\\left|S\\right|)$ 的空间内建立起来。 基础应用 「APIO2014」回文串 题意：给定一个长度为 $n$ 的字符串 $S$，求 $\\max\\{\\left|T\\right|\\cdot \\text{occ}(S, T)\\}, T \\subset S \\land T = \\overleftarrow{T}$。 其中 $\\text{occ}(S, T)$ 表示 $T$ 在 $S$ 中的出现次数，$1 \\le \\left|S\\right| \\le 3 \\cdot 10^5$。 「MIPT Fall Programming Training Camp2014」B. Pairs 题意：给定一个长度为 $n$，字符集为 $\\Sigma$ 的字符串 $S$，求满足 $1 \\le i \\le j &lt; k \\le n \\land (S[i..j] = \\overleftarrow{S[i..j]}) \\land (S[j + 1..k] = \\overleftarrow{S[j + 1..k]})$ 的三元组 $(i, j, k)$ 的个数。 $1 \\le n \\le 3 \\cdot 10^5$ 性质 3：「APIO2014」回文串 能用回文树在 额外 $O(n)$ 的时间和空间 内解决。 证明 令 $\\text{occ}[u]$ 表示节点 $u$ 对应的字符串 $T$ 在 $S$ 中的出现次数。令 $\\text{occAsMax}[u]$ 表示满足 $\\text{maxSuf}(S[1, i]) = T$ 的 $i$ 的个数，这个可以直接在每次 $\\text{add}$ 之后实时维护。不难发现，$$\\text{occ}[u] = \\text{occAsMax}[u] + \\sum_{v:fail_v = u}\\text{occ}[v]$$因为，$T$ 在 $S$ 中出现，要么是以 $T = \\text{maxSuf}(S[1..i])$ 的形式出现，要么是以 $T = \\text{maxSuf}(S[l..r]), S[l..r] = \\overleftarrow{S[l..r]}$ 的形式出现。考虑到前者即 $\\text{occAsMax}[u]$，后者即满足 $fail_v = u$ 的 $\\text{occ}[v]$，则上述式子成立。由引理 3 可知，我们可以自底向上地维护 $\\text{occ}[u]$。（maxNode 是最大节点编号）1234for(int i = maxNode; i &gt;= 1; --i) occ[i] = occAsMax[i];for(int i = maxNode; i &gt;= 1; --i) occ[ fail[i] ] += occ[i];我们得到了 $\\text{occ}$ 之后，答案即为 $\\mathop{\\operatorname{argmax}}\\limits_{\\text{occ}[u]}(\\text{occ}[u]\\cdot len_u)$。不难发现，这额外维护的一部分时间复杂度和空间复杂度均为 $O(n)$。在实现的过程中，因为 C++ 不支持访问负数数组下标，所以我们 整体把下标加一，即 $0$ 代表「奇根」，$1$ 代表「偶根」……以此类推。此时 maxNode 即为 cntNode - 1，$1$ 号节点的编号实际上为 $2$（处理 $\\text{occ}$ 的时候要注意）。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 3e5 + 5;const int C = 26 + 5;int m;char str[N];struct EERTREE &#123; static const int MS = N; int n, cntNode, last, s[MS], len[MS], ch[MS][C], fail[MS]; int occAsMax[MS], occ[MS]; int make(int ll) &#123; len[cntNode] = ll; for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; return cntNode++; &#125; int getfail(int x) &#123; while(s[n] != s[n - len[x] - 1]) x = fail[x]; return x; &#125; bool add(int x) &#123; s[++n] = x; int u = getfail(last), flg = 0; if(!u) &#123; if(!ch[u][x]) &#123; int v = make(1); ch[u][x] = v; fail[v] = 1; flg = 1; &#125; &#125; else &#123; if(!ch[u][x]) &#123; int v = make(len[u] + 2); ch[u][x] = v; flg = 1; &#125; fail[ ch[u][x] ] = ch[getfail(fail[u])][x]; &#125; last = ch[u][x]; ++occAsMax[last]; return flg; &#125; LL getocc() &#123; LL ans = -1; // 这里要注意迭代的范围 for(int i = cntNode - 1; i &gt;= 2; --i) occ[i] = occAsMax[i]; for(int i = cntNode - 1; i &gt;= 2; --i) occ[ fail[i] ] += occ[i]; for(int i = cntNode - 1; i &gt;= 2; --i) ans = std::max(ans, 1LL * occ[i] * len[i]); return ans; &#125; void init() &#123; n = cntNode = last = 0; make(-1), make(0); &#125;&#125; t;int main() &#123; scanf(\"%s\", str + 1); m = strlen(str + 1); t.init(); for(int i = 1; i &lt;= m; ++i) t.add(str[i] - 'a' + 1); printf(\"%lld\", t.getocc()); return 0;&#125;$\\blacksquare$ 性质 4：「MIPT Fall Programming Training Camp2014」B. Pairs 能用回文树在 额外 $O(n\\log\\left|\\Sigma\\right|)$ 的时间和 $O(n)$ 的空间 内解决。 证明 首先，我们建立起 $\\text{eertree}(S)$。我们用 $\\text{maxSuf}[i]$ 来表示 $\\text{maxSuf}(S[1..i])$，这个显然能在 $O(n)$ 的空间内在每次 $\\text{add}$ 操作之后维护。我们令 $\\text{sufCount}[u]$ 表示编号为 $u$ 的节点对应的字符串的回文后缀的个数。同理我们还要求出 $\\text{maxPre}$ 与 $\\text{preCount}$。注意到它们分别对应的是 $\\overleftarrow{S}$ 的 $\\text{maxSuf}$ 和 $\\text{sufCount}$（记为 $\\text{maxSuf}’$ 和 $\\text{sufCount}’$。。于是，我们建立起 $\\text{eertree}(\\overleftarrow{S})$。答案即为$$\\sum_{i = 1}^{n - 1}\\text{sufCount}[\\text{maxSuf}[i]]\\cdot\\text{sufCount}’[\\text{maxSuf}’[n - i]]$$不难发现这部分的时间复杂度是 $O(n\\log\\left|\\Sigma\\right|)$ 的，空间复杂度是 $O(n)$ 的。md 没得地方交这道题，代码仅供参考。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;#define LL long longconst int N = 3e5 + 5;const int C = 26 + 5;int m;char str[N];LL ans;struct EERTREE &#123; static const int MS = N; int n, cntNode, s[MS], len[MS], ch[MS][C], fail[MS]; int sufCount[MS], maxSuf[MS]; int make(int ll) &#123; len[cntNode] = ll; for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; return cntNode++; &#125; int getfail(int x) &#123; while(s[n] != s[n - len[x] - 1]) x = fail[x]; return x; &#125; bool add(int x) &#123; s[++n] = x; int u = getfail(maxSuf[n - 1]), flg = 0; if(!u) &#123; if(!ch[u][x]) &#123; int v = make(1); fail[v] = 1; ch[u][x] = v; flg = 1; &#125; &#125; else &#123; if(!ch[u][x]) &#123; int v = make(len[u] + 2); ch[u][x] = v; flg = 1; &#125; fail[ ch[u][x] ] = ch[getfail(fail[u])][x]; &#125; sufCount[ch[u][x]] = sufCount[ fail[ch[u][x]] ] + 1; maxSuf[n] = ch[u][x]; return flg; &#125; void init() &#123; n = cntNode; memset(maxSuf, 0, sizeof(maxSuf)); make(-1), make(0); &#125;&#125; t1, t2;int main() &#123; scanf(\"%s\", str + 1); m = strlen(str + 1); t1.init(), t2.init(); for(int i = 1; i &lt;= m; ++i) t1.add(str[i] - 'a' + 1); for(int i = m; i &gt;= 1; --i) t2.add(str[i] - 'a' + 1); for(int i = 1; i &lt;= m - 1; ++i) ans += t1.sufCount[ t1.maxSuf[i] ] * t2.sufCount[ t2.maxSuf[m - i] ]; printf(\"%lld\", ans); return 0;&#125;$\\blacksquare$ 有关回文树的高级应用，请查阅论文。 写在最后回文树真的能很巧妙地解决与回文串有关的问题， 而且很多与回文串有关的问题的暴力的时间复杂度极劣无比， 这也能从侧面体现出回文树的巧妙。 与字符串有关的数据结构都巧夺天工。 用一首前人写的诗作结尾： $$\\begin{aligned} &amp; \\textit{I think that I shall never see} \\\\ &amp; \\textit{A poem lovely as a tree.} \\\\ &amp; \\textit{Poems are made by fools like me,} \\\\ &amp; \\textit{But only God can make a tree.}\\end{aligned}$$ 接下来就开始努力钻研后缀树吧。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}],"tags":[{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"}]},{"title":"【游记】HBOI2020 游记","slug":"【游记】HBOI2020-游记","date":"2020-06-19T14:19:16.000Z","updated":"2020-07-03T08:10:46.217Z","comments":true,"path":"2020/06/19/【游记】HBOI2020-游记/","link":"","permalink":"https://leverimmy.top/2020/06/19/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91HBOI2020-%E6%B8%B8%E8%AE%B0/","excerpt":"呐，又到了省选季了呢。","text":"呐，又到了省选季了呢。 Day 0上午还是依然在家里上学校的网课，《廉颇蔺相如列传》中的侧面烘托好妙啊…… 下午去学校试机，打了个 PAM，显然不会考（但我也不会其他的了） 真的一个月埋在文化课的苦海里啊……这个月好像只打了几场 cf，啥东西也没学。 成功在学校面基到了自己的同学（大雾 已经半年没有见面了……寒假上一次见面是一月下旬吧。 晚上在家里打了一下 splay 板子，复习了一下 dinic，发现洛谷上的「普通平衡树（加强版）」好毒瘤啊……过不去。 然后就洗洗睡了。 明天也许拿三个题的第一档暴力分吧（运气好能拿第二档吧？）。 Day 1早上差点睡过头了，六点二十才起来。于是在车上眯了一会儿，没睡多久就到学校了。 在大门，保安把我拦住了，问我是干嘛的，发现才 7:20。 把准考证给他看了他就放我进去了。我很不相信那个测体温的东西是否准确，我总觉得红外测温会有很大误差吧。 到的太早了，先去自己的机房里坐了一会儿，不让进考场机房。 到时间了才进考场，抽到了序号最大的机子（暗示垫底），8:25 准时开题。 T1 是个数据结构，T2 是个数论，T3 是不知道啥玩意。 T1 先写了第一档的暴力 10pts，然后发现第二档答案单调不减，随便写了写就跟暴力拍过了。 后面的 2e5 感觉可以维护前后缀和来解决，先放着。 T2 前两个档都能拿到，第一档 p 不是质数，就预处理组合数来解决；第二档直接费马小定理推逆元。 后面的档感觉不会做。 T3 看了几眼，搜都不想搜。 考完了要我们待在另外一个机房等着，然后一堆队爷在讨论题目，我不会；zzy 切了 t2（Orz） 然后每五个人回到考场机房看自己的代码有没有收漏的，不一会儿就解放了。 下午 2:00 才吃到午饭，饿死了；然后睡大觉直到 17:00 才起来。 晚上随便打了点代码，就睡了。 奶明天字符串和网络流。 Day 2去学校还是很早，然后在自己的机房里水了水洛谷之类的，玩了下 QQ，然后就去抽签了。 一遍过压缩包密码，非常舒服。 开了题后的我：？为啥不考字符串啊？（考了我也不会） T1 是个状压，T2 是个数据结构，T3 是个计数。 T1 写了暴力 30pts。 T2 只会 10pts 的暴力，发现问题可以用 dfs 序转化为区间加一，区间异或和，但我不会，爬了。 T3 只会 30pts 的暴力，不会图的生成树计数，爬了。 然后发现外高这次考得不好。 晚上补周五到周日的文化课了，完全没有状态。 周四的时候能随便切的物理实验题完全不会了，找不着感觉，枯了。 Day 4出成绩了吧。 滚粗。","categories":[{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"游记","slug":"杂笔/游记","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E6%B8%B8%E8%AE%B0/"}],"tags":[{"name":"HBOI2020","slug":"HBOI2020","permalink":"https://leverimmy.top/tags/HBOI2020/"}]},{"title":"【学习笔记】类欧几里得算法学习笔记","slug":"【学习笔记】类欧几里得算法学习笔记","date":"2020-05-04T08:27:33.000Z","updated":"2020-07-03T08:14:52.791Z","comments":true,"path":"2020/05/04/【学习笔记】类欧几里得算法学习笔记/","link":"","permalink":"https://leverimmy.top/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"「类欧几里得算法」与「欧几里得算法」的共同之处—— 仅是均使用了「辗转相除」来证明复杂度。","text":"「类欧几里得算法」与「欧几里得算法」的共同之处—— 仅是均使用了「辗转相除」来证明复杂度。 简介已知 $a, b, c, n$，求 $$\\begin{aligned} f(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ g(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ h(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2\\end{aligned}$$ 共 $t (1 \\le t \\le 10^5)$ 组数据，$0 \\le a, b, c, n \\le 10^9$，$c \\neq 0$。 理论推导推导之前记 $m = \\left\\lfloor\\dfrac{an + b}{c}\\right\\rfloor, t = \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor$，下文的方括号均为 艾佛森括号。 在推式子之前，我们先要证明一个常用的结论。 $$\\begin{aligned} \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i &gt; t\\right]\\end{aligned}$$ 证明 注意到$$\\begin{aligned} j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor &amp; \\Leftrightarrow j + 1 \\le \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ &amp; \\Leftrightarrow j + 1 \\le \\dfrac{ai + b}{c} \\\\ &amp; \\Leftrightarrow cj + c \\le ai + b \\\\ &amp; \\Leftrightarrow cj + c - 1 &lt; ai + b \\\\ &amp; \\Leftrightarrow cj - b + c - 1 &lt; ai \\\\ &amp; \\Leftrightarrow i &gt; \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\ &amp; \\Leftrightarrow i &gt; t\\end{aligned}$$所以原命题得证。 f首先我们来求 $f(a, b, c, n)$ 的递推式。 我们 定义 $f(a, b, c, n) = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor$。 当 $a \\ge c$ 或 $b \\ge c$ 时： $$\\begin{aligned} f(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ &amp; = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor \\\\ &amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ &amp; = \\left(\\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) + \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i\\right) + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}1\\right)\\\\ &amp; = f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\end{aligned}$$ 当 $a &lt; c$ 且 $b &lt; c$ 时： $$\\begin{aligned} f(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ &amp; = \\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1 \\\\ &amp; = \\sum_{i = 0}^{n}\\sum_{j = 0}^{m - 1}\\left[j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i &gt; t\\right] \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\left(n - t\\right) \\\\ &amp; = \\sum_{j = 0}^{m - 1}n + \\sum\\limits_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor \\\\ &amp; = nm - f(c, c - b - 1, a, m - 1)\\end{aligned}$$ 综上所述，我们得到了 $f$ 的递推式： $$f(a, b, c, n) =\\begin{cases}f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor &amp; (a \\ge n \\lor b \\ge n)\\\\nm - f(c, c - b - 1, a, m - 1) &amp; \\text{otherwise}\\end{cases}$$ g一切都变得套路了起来。 我们 定义 $g(a, b, c, n) = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)$。 当 $a \\ge c$ 或 $b \\ge c$ 时： $$\\begin{aligned} g(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ &amp; = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ &amp; = \\sum_{i = 0}^{n}\\left(i\\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ &amp; = \\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i^2 + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i + \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ &amp; = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n)\\end{aligned}$$ 当 $a &lt; c$ 且 $b &lt; c$ 时： $$\\begin{aligned} g(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ &amp; = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1\\right) \\\\ &amp; = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{m}\\left[j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right]\\right) \\\\ &amp; = \\sum_{j = 0}^{m - 1}i\\cdot\\sum_{i = 0}^{n}\\left[i &gt; t\\right] \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i &gt; t\\right]\\cdot i \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\cdot\\sum_{i = t + 1}^{n}1 \\\\ &amp; = \\sum_{j = 0}^{m - 1}\\dfrac{(t + n + 1)(n - t)}{2} \\\\ &amp; = \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\bigg(n(n + 1) - t^2 - t\\bigg) \\\\ &amp; = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t \\\\ &amp; = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right)^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right) \\\\ &amp; = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1)\\end{aligned}$$ 综上所述，我们得到了 $g$ 的递推式： $$g(a, b, c, n) =\\begin{cases}\\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor +(n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n) &amp; (a \\ge c \\lor b \\ge c) \\\\\\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1) &amp; \\text{otherwise}\\end{cases}$$ h我们 定义 $h(a, b, c, n) = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2$。 当 $a \\ge c$ 或 $b \\ge c$ 时： $$\\begin{aligned}h(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\&amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\&amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\&amp; = \\sum_{i = 0}^{n}\\Bigg(\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)^2 + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 + \\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\&amp; + 2 \\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + 2 \\cdot \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor \\\\&amp; + 2\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\Bigg) \\\\&amp; = \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n}i^2 + 2\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n}1 \\\\&amp; + \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\&amp; + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\&amp; = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\&amp; + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) + h(a \\bmod c, b \\bmod c, c, n)\\end{aligned}$$ 当 $a &lt; c$ 且 $b &lt; c$ 时： $$\\begin{aligned}h(a, b, c, n) &amp; = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\&amp; = \\sum_{i = 0}^{n}\\left(2\\cdot\\dfrac{\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor + 1\\right)}{2} - \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\&amp; = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\&amp; = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 1}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\&amp; = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}(j + 1) \\\\&amp; = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[j &lt; \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\&amp; = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[i &gt; t\\right] \\\\&amp; = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)(n - t) \\\\&amp; = -f(a, b, c, n) + 2n\\sum_{j = 0}^{m - 1}(j + 1) - 2\\sum_{j = 0}^{m - 1}(j + 1)t \\\\&amp; = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}jt - \\sum_{j = 0}^{m - 1}t \\\\&amp; = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}\\left(j\\cdot\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor\\right) - \\sum_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\&amp; = -f(a, b, c, n) + nm(m + 1) - 2g(c, c - b - 1, a, m - 1) - 2f(c, c - b - 1, a, m - 1);\\end{aligned}$$ 综上所述，我们得到了 $h$ 的递推式： $$h(a, b, c, n) =\\begin{cases}\\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 &amp; + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\&amp; + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) \\\\&amp; + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) \\\\ &amp; + h(a \\bmod c, b \\bmod c, c, n) &amp; (a \\ge c \\lor b \\ge c) \\\\f(a, b, c, n) + nm(m + 1) &amp; - 2g(c, c - b - 1, a, m - 1) \\\\ &amp; - 2f(c, c - b - 1, a, m - 1) &amp; \\text{otherwise}\\end{cases}$$ 时间复杂度证明不会。 代码实现这里给出 【模板】类欧几里得算法 的代码实现。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int mod = 998244353;const int inv2 = 499122177;const int inv6 = 166374059;LL t, A, B, C, N;struct QUERY &#123; LL f, g, h;&#125;;QUERY solve(LL a, LL b, LL c, LL n) &#123; QUERY res, tmp; if(!a) &#123; res.f = (b / c) * (n + 1) % mod; res.g = (b / c) * inv2 % mod * n % mod * (n + 1) % mod; res.h = (b / c) * (b / c) % mod * (n + 1) % mod; return res; &#125; else if(a &gt;= c || b &gt;= c) &#123; tmp = solve(a % c, b % c, c, n); res.f = (tmp.f + (a / c) * inv2 % mod * n % mod * (n + 1) % mod + (b / c) * (n + 1) % mod) % mod; res.g = (tmp.g + (a / c) * inv6 % mod * n % mod * (n + 1) % mod * (2 * n + 1) % mod + (b / c) * inv2 % mod * n % mod * (n + 1) % mod) % mod; res.h = (tmp.h + (b / c) * 2 % mod * tmp.f % mod + (a / c) * 2 % mod * tmp.g % mod + (a / c) * (a / c) % mod * inv6 % mod * n % mod * (n + 1) % mod * (2 * n + 1) % mod + (b / c) * (b / c) % mod * (n + 1) % mod + (a / c) * (b / c) % mod * n % mod * (n + 1) % mod) % mod; return res; &#125; else &#123; LL m = (a * n + b) / c; tmp = solve(c, c - b - 1, a, m - 1); res.f = ((m * n % mod - tmp.f) % mod + mod) % mod; res.g = inv2 * (((m * n % mod * (n + 1) % mod - tmp.f - tmp.h) % mod + mod) % mod) % mod; res.h = ((n * m % mod * (m + 1) % mod - res.f - 2 * tmp.g % mod - 2 * tmp.f % mod) % mod + mod) % mod; return res; &#125;&#125;int main() &#123;#ifdef LOCAL freopen(\"sim.in\", \"r\", stdin); freopen(\"sim.out\", \"w\", stdout);#endif io::read(t); while(t--) &#123; io::read(N, A, B, C); QUERY cur = solve(A, B, C, N); io::write(cur.f, ' ', cur.h, ' ', cur.g, '\\n'); &#125; return 0;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"数论","slug":"学习笔记/数论","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E8%AE%BA/"}],"tags":[{"name":"递归","slug":"递归","permalink":"https://leverimmy.top/tags/%E9%80%92%E5%BD%92/"},{"name":"类欧几里德算法","slug":"类欧几里德算法","permalink":"https://leverimmy.top/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/"}]},{"title":"【学习笔记】Karatsuba 乘法学习笔记","slug":"【学习笔记】Karatsuba-乘法学习笔记","date":"2020-05-04T07:40:30.000Z","updated":"2020-07-03T08:14:36.078Z","comments":true,"path":"2020/05/04/【学习笔记】Karatsuba-乘法学习笔记/","link":"","permalink":"https://leverimmy.top/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Karatsuba-%E4%B9%98%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"上个学期在联赛前听 EternalAlexander 提到了一下这个玄学的算法，现在就学习一下吧。","text":"上个学期在联赛前听 EternalAlexander 提到了一下这个玄学的算法，现在就学习一下吧。 简介「Karatsuba 乘法」是 1960 年由 Anatolii Alexeevitch Karatsuba 提出的可用于大整数乘法的算法。 理论推导不妨设我们要相乘的两个数字分别为 $a$ 和 $b$，其乘积，也就是我们要求的数，为 $c$。 设 $a = x_1\\cdot10^m + x_0, b = y_1\\cdot10^m + y_0$，其中 $0 &lt; x_1, x_0, y_1, y_0 &lt; 10^m$，则 $\\begin{aligned}c = ab &amp; = (x_1\\cdot10^m + x_0) \\cdot (y_1\\cdot10^m + y_0) \\\\ &amp; = (x_1\\cdot y_1)10^{2m} + (x_1\\cdot y_0 + x_0\\cdot y_1)10^m + x_0\\cdot y_0\\end{aligned}$ 记 $z_2 = x_1\\cdot y_1, z_1 = x_1\\cdot y_0 + x_0\\cdot y_1, z_0 = x_0\\cdot y_0$。 注意到，$z_1 = (x_1 + x_0)(y_1 + y_0) - z_2 - z_0$。 于是我们可以分步计算 $(x_1 + x_0)(y_1 + y_0), z_2, z_0$ 即可。 时间复杂度我们实质上是把一个 $n \\times n$ 的乘法化简为了三个长度更小的乘法。 当 $m = \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor$ 时，有递推式 $T(n) = 3T(\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor) + O(n)$。 不难由主定理得知 $T(n) = \\Theta(n^{\\log_{2}3}) \\approx \\Theta(n^{1.585})$ 代码实现这个是 MUL - Fast Multiplication 的代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int N = 1e4 + 5;int t, n, m;int a[N], b[N], c[N &lt;&lt; 1];char A[N], B[N];int *Kmul(int len, int ra[], int rb[]) &#123; if(len &lt;= 32) &#123; int *r = new int[len * 2 + 1](); for(int i = 0; i &lt;= len; ++i) for(int j = 0; j &lt;= len; ++j) r[i + j] += ra[i] * rb[j]; return r; &#125; int hf = len / 2 + 1; int *r = new int[hf * 4 + 1](); int *z0, *z1, *z2; z0 = Kmul(hf - 1, ra, rb); z2 = Kmul(len - hf, ra + hf, rb + hf); for(int i = 0; i + hf &lt;= len; ++i) ra[i] += ra[i + hf]; for(int i = 0; i + hf &lt;= len; ++i) rb[i] += rb[i + hf]; z1 = Kmul(hf - 1, ra, rb); for(int i = 0; i + hf &lt;= len; ++i) ra[i] -= ra[i + hf]; for(int i = 0; i + hf &lt;= len; ++i) rb[i] -= rb[i + hf]; for(int i = 0; i &lt;= (hf - 1) * 2; ++i) z1[i] -= z0[i]; for(int i = 0; i &lt;= (len - hf) * 2; ++i) z1[i] -= z2[i]; for(int i = 0; i &lt;= (hf - 1) * 2; ++i) r[i] += z0[i]; for(int i = 0; i &lt;= (hf - 1) * 2; ++i) r[i + hf] += z1[i]; for(int i = 0; i &lt;= (len - hf) * 2; ++i) r[i + hf * 2] += z2[i]; delete[] z0; delete[] z1; delete[] z2; return r;&#125;void Karatsuba(int ra[], int rb[], int rc[]) &#123; int *r = Kmul(n - 1, ra, rb); memcpy(rc, r, sizeof(int) * m); for(int i = 0; i &lt; m - 1; ++i) &#123; if(rc[i] &gt;= 10) &#123; rc[i + 1] += rc[i] / 10; rc[i] %= 10; &#125; &#125; delete[] r;&#125;int main() &#123;#ifdef LOCAL freopen(\"mul.in\", \"r\", stdin); freopen(\"mul.out\", \"w\", stdout);#endif io::read(t); while(t--) &#123; int len1, len2; scanf(\"%s %s\", A + 1, B + 1); len1 = strlen(A + 1), len2 = strlen(B + 1); n = std::max(len1, len2); for(int i = len1, j = len2, k = 0; k &lt; n; --i, --j, ++k) &#123; if(i &gt;= 1) a[k] = A[i] - '0'; else a[k] = 0; if(j &gt;= 1) b[k] = B[j] - '0'; else b[k] = 0; &#125; /*for(int i = 1; i &lt;= n; ++i) printf(\"%d\", a[i]); putchar('\\n'); for(int i = 1; i &lt;= n; ++i) printf(\"%d\", b[i]); putchar('\\n');*/ m = len1 + len2 - 1; Karatsuba(a, b, c); while(!c[m - 1] &amp;&amp; m &gt; 1) --m; for(int i = m - 1; i &gt;= 0; --i) io::write(c[i]); io::write('\\n'); &#125; return 0;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"杂项","slug":"学习笔记/杂项","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"高精度","slug":"高精度","permalink":"https://leverimmy.top/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"},{"name":"分治","slug":"分治","permalink":"https://leverimmy.top/tags/%E5%88%86%E6%B2%BB/"},{"name":"技巧","slug":"技巧","permalink":"https://leverimmy.top/tags/%E6%8A%80%E5%B7%A7/"}]},{"title":"【学习笔记】经典动态规划模型学习笔记","slug":"【学习笔记】经典动态规划模型学习笔记","date":"2020-04-27T03:35:44.000Z","updated":"2020-07-03T08:16:12.208Z","comments":true,"path":"2020/04/27/【学习笔记】经典动态规划模型学习笔记/","link":"","permalink":"https://leverimmy.top/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"「用集合的角度来理解dp。」 $\\gets$ 这个东西好像不是很好用。 大概这篇博文就只能熟悉一下各大dp模型吧？","text":"「用集合的角度来理解dp。」 $\\gets$ 这个东西好像不是很好用。 大概这篇博文就只能熟悉一下各大dp模型吧？ 区间dp概述区间dp是dp的一种，一般处理在一个序列上的关于区间的一些问题。 因为 $[l, r]$ 这个区间，可以用很多个 $[l, k] \\bigcap (k, r]$ 重复地 覆盖， 也就是通过枚举断点 $k$，来实现区间 $[l, r] \\gets [l, k] + (k, r]$ 信息的转移。 即 $f(l, r) = \\operatorname{op}\\{f(l, k) + f(k + 1, r)\\} \\quad k \\in [l, r)$。 需要注意的是 $k$ 的范围也不一定是 $[l, r)$，也有许多题是 $k \\in (l, r)$ 的， 这个时候我们就需要处理出 $len = 2$ 的，然后 for 循环从 $len = 3$ 开始。 例题 「NOI1995」石子合并 拆环成链，令 $a[n + 1\\ldots 2n] \\gets a[1 \\ldots n]$，这样就把一个环形的问题转化到了序列上。 设 $f(l, r)$ 表示第 $l$ 堆石子一直合并到第 $r$ 堆石子，能获得的最大值； 设 $g(l, r)$ 表示第 $l$ 堆石子一直合并到第 $r$ 堆石子，能获得的最小值。 因为 $[l, r]$ 可以被分成 $[l, k]$ 和 $(k, r]$，所以我们可以这么转移： $$\\begin{aligned} f(l, r) &amp; = \\max\\{sum_r - sum_{l - 1} + f(l, k) + f(k + 1, r)\\} \\quad k \\in [l, r) \\\\ g(l, r) &amp; = \\max\\{sum_r - sum_{l - 1} + g(l, k) + g(k + 1, r)\\} \\quad k \\in [l, r)\\end{aligned}$$ 「一本通 5.1 例 3」凸多边形的划分 我们将这个凸多边形的每个顶点顺时针排成一行，环上的顶点其实和序列没有区别。 设 $f(l, r)$ 表示第 $l$ 个顶点到第 $r$ 个顶点所组成的凸多边形划分后，能得到的最小值。 因为 $S(l, r)$ 可以被分成 $(l, k)$ 和 $(k, r)$，再加上 $a_l, a_r, a_k$ 的贡献，所以我们可以这么转移： $$f(l, r) = \\min\\{f(l, k) + f(k, r) + a_l\\cdot a_k\\cdot a_r\\} \\quad k \\in (l, r)$$ 「NOIP2007」矩阵取数游戏 注意到每一行的贡献其实是互不干扰的，所以我们分别对每一行进行 dp。 设 $f(l, r)$ 表示这一行取了 $m - (r - l + 1)$ 步后，还剩 $[l, r]$ 能得到的最大值。 因为 $S(l, r)$ 可以是 $S(l - 1, r) - a_{l - 1}$ 得来的，也可以是 $S(l, r + 1) - a_{r + 1}$ 得来的，所以我们可以这么转移： $$f(l, r) = \\max \\begin{cases} f(l - 1, r) + a_{l - 1} \\cdot 2^{m - (r - l + 1)} \\\\ f(l, r + 1) + a_{r + 1} \\cdot 2^{m - (r - l + 1)} \\end{cases}$$ 「CF Edu #83」E. Array Shrinking 这题比较综合，要先用区间dp预处理，然后再线性递推。 设 $f(l, r)$ 表示 $[l, r]$ 能缩合得到的数字（如果无法缩合，则 $f(l, r) = 0$） 设 $g(i)$ 表示 $[1, i]$ 可以被分成的段数的最小值。 如果 $[l, r]$ 能从 $[l, k]$ 和 $(k, r]$ 组成，那么 $f(l, k)$ 是应该等于 $f(k + 1, r)$ 的，这样才能「缩合」。所以这么转移 $f$： $$f(l, r) = \\max\\{f(l, k) + 1\\} \\quad (k \\in [l, r) \\bigwedge f(l, k) = f(k + 1, r) &gt; 0)$$ 因为 $[1, i]$ 能被分成 $[1, j]$ 和 $(j, i]$ 两段，我们只用考虑 $(j, i]$ 能否缩合得到。所以我们可以这么转移： $$g(i) = \\min\\{g(j) + 1\\} \\quad (j \\in [1, i) \\bigwedge f(j + 1, i) \\neq 0)$$ 树型dp概述树型dp是dp的一种，一般处理子树中最优解的一些问题。当然，也有「换根dp」之类的处理 整棵树 上最优解的一些问题。 例题 「一本通 5.2 例 4」战略游戏 树型dp入门题。 设 $f(u, 0)$ 表示 $u$ 上不放士兵，使得所有以 $u$ 为根的子树中的 边 被「瞭望」到，所需放置的士兵最少个数。 设 $f(u, 1)$ 表示 $u$ 上放士兵，使得所有以 $u$ 为根的子树中的 边 被「瞭望」到，所需放置的士兵最少个数。 若 $u$ 上不放置士兵，那么所有的 $v \\in \\text{son}(u)$ 上都得放士兵，才能使所有的边 $(u, v) \\quad (v \\in \\text{son}(u))$ 被瞭望到； 若 $u$ 上放置了士兵，那么所有的 $v \\in \\text{son}(u)$ 上需不需要放置士兵是随意的。所以我们可以这么转移： $$\\begin{aligned} f(u, 0) &amp; = \\sum_{v \\in \\text{son}(u)} f(v, 1) \\\\ f(u, 1) &amp; = \\sum_{v \\in \\text{son}(u)} \\min f(v, 0), f(v, 1)\\end{aligned}$$ 「一本通 5.2 练习 2」旅游规划 一个比较基础的换根dp。 首先我们钦定一个根，对这棵有根树进行dfs；再换根，算出换根后的贡献。 设 $f(u, 0)$ 表示以 $u$ 为根的子树中，最远的点的距离。 设 $f(u, 1)$ 表示以 $u$ 为根的子树中，次远的点的距离。 设 $g(u)$ 表示以 $u$ 为根的子树中，最远的点是在 哪一个孩子的子树中。 设 $h(u)$ 表示不经过 $u$ 的子树，最远的点的距离。 不难发现，原来的无根树的直径，为 $\\max\\{f(i, 0), \\max\\{f(i, 1), h(i)\\}\\}$，即 从自己的某个孩子的子树中有一条路径一直延伸到另一个孩子，或者是这棵树的「另一半部分」。 最后我们输出的，就是所有 $f(i, 0), \\max\\{f(i, 1), h(i)\\}$ 等于直径长度的 $i$。 在第一次dfs中，我们是 从孩子往双亲 转移的，方程是显然的： $$\\begin{aligned} f(u, 0) &amp; = \\max_{v \\in \\text{son}(u)}\\{f(v, 0) + 1\\} \\\\ f(u, 1) &amp; = \\text{second}\\max_{v \\in \\text{son}(u)}\\{f(v, 0) + 1\\}\\end{aligned}$$ 转移时顺便更新 $g$ 即可。接下来我们要重点考虑的是 第二次dfs 会带来什么样的影响，也就是应该如何计算 $h$ 值。 第二次dfs是自顶向下的，也就是 从双亲往孩子 转移的。 从 $u$ 不经过子树的最长距离，肯定是 $u$ 的父亲 $x$ 能走一条特别远的路径出来。 那么这条路径有两种可能：要么是 $x$ 往 $x$ 的孩子（但不是 $u$）的方向走，要么是 $x$ 往 $x$ 的父亲 $y$ 的方向走。 如果 $u$ 是 $g$ 中记录的最大孩子，那么第一种可能，就只能走次大孩子，即 $f(x, 1)$；第二种可能就是 $h(x)$； 如果 $u$ 不是 $g$ 中记录的最大孩子，那么第一种可能，就能走最大孩子，即 $f(x, 0)$；第二种可能还是 $h(x)$； 那么我们可以推导出转移方程： $$h(v) = \\begin{cases}\\max\\{h(u), f(u, 1)\\} &amp; v = g(u), u = \\text{father}(v) \\\\ \\max\\{h(u), f(u, 0)\\} &amp; v \\neq g(u), u = \\text{father}(v)\\end{cases}$$ 状压dp概述假设有一行格子，要你黑白染色，你会怎么考虑表示这一行的状态呢？ 假设 $1$ 表示黑色，$0$ 表示白色，那这一行是不是就等价于一个二进制数呢？ 状压dp 就是通过用二进制数来表示状态的一种dp类型。 通常除了二进制，还有三进制（不能使用位运算，但是能暴力拆位）。 例题 「SCOI2005」互不侵犯 状压dp 入门题。 我们可以用一个 $n$ 位二进制数 $st$ 来表示这一行的状态，第 $i$ 位为 $1$ 表示这个格子上有王，为 $0$ 则表示这个格子是空的。 显然如果一个状态 $st$ 是合法的，当且仅当 $st \\&amp; (st / 2) = 0 \\bigwedge st \\&amp; (st \\cdot 2) = 0$。 然后还要枚举上一行的状态，判断上一行的状态会不会和这一行的状态冲突。 状态转移方程便是： $$ f(i, st, cnt) = \\sum_{pr}f(i - 1, pr, cnt - \\operatorname{popcount}(st))$$ 其中 $st, pr$ 均为合法状态，且 $st$ 与 $pr$ 不冲突，后文同。 $\\operatorname{popcount}(x)$ 表示 $x$ 的二进制表示中 $1$ 的个数。 答案即为 $\\sum_{st}f(n, st, k)$。 「一本通 5.4 练习 1」涂抹果酱 稍微有点复杂的三进制状态压缩。 首先，一个状态是否是合法的，我们可以暴力求出这个状态的三进制表示。 然后逐个判断相邻的两个位是否不同即可。 其次，相邻两行的状态是否不会冲突，我们可以暴力同时取出这两个状态在三进制表示下的每一位，逐个比较是否相同即可。 然后是转移，因为已经固定了第 $k$ 行，我们可以看做是把这个棋盘分割成了 互不干扰 的 $[1, k)$ 和 $(k, n]$ 两部分。 分别求出来方案数然后 相乘 即可得到最终答案。 剩下的部分与 「SCOI2005」互不侵犯 类似，就不再赘述。 状态转移方程如下： $$ f(i, st) = \\sum_{pr}f(i - 1, pr)$$ 答案即为 $$ ans_{k}\\cdot ans_{n - k + 1} = \\left(\\sum_{st}f(k, st)\\right)\\cdot\\left(\\sum_{st}f(n - k + 1, st)\\right)$$ 「APIO2007」动物园 比较有技巧性的一道状压dp题。 我们可以发现，一个人只能看见长度为 $5$ 的「窗口」，所以我们可以利用这一点来进行状态压缩。我们把一个人能看到的动物压缩成一个二进制数，第 $i$ 位为 $1$ 表示能看见 $i$ 这个动物，否则就看不见这个动物。 首先我们预处理出 $g(i, st)$，表示从第 $i$ 个动物开始，往后的 $5$ 个动物被移走，即移走状态为 $st$ 时的满意人数。 其次我们设 $f(i, st)$ 表示 $[1, i]$，往后的 $5$ 个动物被移走，即移走状态为 $st$ 时的最大满意人数。 可以推出状态转移方程： $$ f(i, st) = \\max\\{f(i - 1, st \\cdot 2), f(i - 1, st \\cdot 2 + 1) + g(i, st)\\}$$ 我们从第 $1$ 个开始枚举，然后要满足第 $n + 1$ 个的状态和第 $1$ 个状态相同即可。 数位dp","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"动态规划","slug":"学习笔记/动态规划","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"【洛谷】P3356 火星探险问题","slug":"【洛谷】P3356-火星探险问题","date":"2020-04-19T08:31:44.000Z","updated":"2020-07-03T08:06:59.449Z","comments":true,"path":"2020/04/19/【洛谷】P3356-火星探险问题/","link":"","permalink":"https://leverimmy.top/2020/04/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3356-%E7%81%AB%E6%98%9F%E6%8E%A2%E9%99%A9%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个 $p \\times q$ 的矩阵和 $n$ 个位于 $(1, 1)$ 的机器人，每个格子里为下列三种状态之一： 「无障碍」，机器人可以通过； 「有障碍」，机器人不能通过； 「有矿物」，机器人通过后会得到 $1$ 个单位的石头，只能被获得一次。 每个机器人只能 $(x, y) \\to (x + 1, 1)$ 或 $(x, y) \\to (x, y + 1)$。 求使得所有机器人到达 $(p, q)$ 时，石头总量最多的一种方案。 $1 \\le p, q, n \\le 35$。 题目链接","text":"题意简述：给定一个 $p \\times q$ 的矩阵和 $n$ 个位于 $(1, 1)$ 的机器人，每个格子里为下列三种状态之一： 「无障碍」，机器人可以通过； 「有障碍」，机器人不能通过； 「有矿物」，机器人通过后会得到 $1$ 个单位的石头，只能被获得一次。 每个机器人只能 $(x, y) \\to (x + 1, 1)$ 或 $(x, y) \\to (x, y + 1)$。 求使得所有机器人到达 $(p, q)$ 时，石头总量最多的一种方案。 $1 \\le p, q, n \\le 35$。 题目链接 解题思路：这类有限制通过的问题，我们考虑拆点来转化。 将每个点分为 $(x, y, 1)$ 和 $(x, y, 2)$。 若 $(x, y)$ 为「无障碍」，则在 $(x, y, 1)$ 与 $(x, y, 2)$ 间连一条流量为 $\\inf$，费用为 $0$ 的边。 若 $(x, y)$ 为「有障碍」，则不连边。 若 $(x, y)$ 为「有矿物」，则在 $(x, y, 1)$ 与 $(x, y, 2)$ 间连一条流量为 $\\inf$，费用为 $0$ 的边，表示不取这块石头；再连一条流量为 $1$，费用为 $-1$ 的边，表示取走这块石头。 最后求最小费用最大流即可，石头总量即为费用的相反数。 读入和 zkw 我就不贴了。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALconst int inf = 0x3f3f3f3f;const int N = 1e6 + 5;const int M = 1e6 + 5;const int S = 50 + 5;int n, m, p, q, idx, a[S][S], id[S][S];int cnt, first[N], s, t, min_cost, max_flow;int len, ans[N], tmp[N];int id1(int x, int y) &#123; return id[x][y];&#125;int id2(int x, int y) &#123; return id[x][y] + idx;&#125;bool valid(int x, int y) &#123; if(x &lt; 1 || x &gt; q || y &lt; 1 || y &gt; p) return 0; return a[x][y] != 1;&#125;void dfs(int x, int y) &#123; int u = id2(x, y); for(int i = first[u]; ~i; i = e[i]._next) &#123; int v = e[i].to; if(tmp[i] &gt;= e[i ^ 1].wt) continue; if(v == id1(x + 1, y)) &#123; ++tmp[i], ans[++len] = 0; dfs(x + 1, y); return; &#125; if(v == id1(x, y + 1)) &#123; ++tmp[i], ans[++len] = 1; dfs(x, y + 1); return; &#125; &#125;&#125;int main() &#123;#ifdef LOCAL freopen(\"mars.in\", \"r\", stdin); freopen(\"mars.out\", \"w\", stdout);#endif io::read(n, p, q); memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= q; ++i) for(int j = 1; j &lt;= p; ++j) io::read(a[i][j]), id[i][j] = ++idx; s = 0, t = idx * 2 + 1; for(int i = 1; i &lt;= q; ++i) &#123; for(int j = 1; j &lt;= p; ++j) &#123; if(a[i][j] == 0) Connect(id1(i, j), id2(i, j), inf, 0); else if(a[i][j] == 2) &#123; Connect(id1(i, j), id2(i, j), inf, 0); Connect(id1(i, j), id2(i, j), 1, -1); &#125; &#125; &#125; Connect(s, id1(1, 1), n, 0); Connect(id2(q, p), t, inf, 0); for(int i = 1; i &lt;= q; ++i) for(int j = 1; j &lt;= p; ++j) &#123; if(valid(i, j) &amp;&amp; valid(i + 1, j)) Connect(id2(i, j), id1(i + 1, j), inf, 0); if(valid(i, j) &amp;&amp; valid(i, j + 1)) Connect(id2(i, j), id1(i, j + 1), inf, 0); &#125; zkw.solve(s, t); for(int i = 1; i &lt;= max_flow; ++i) &#123; len = 0, dfs(1, 1); for(int j = 1; j &lt;= len; ++j) io::write(i, ' ', ans[j], '\\n'); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P4009 汽车加油行驶问题","slug":"【洛谷】P4009-汽车加油行驶问题","date":"2020-04-18T14:51:32.000Z","updated":"2020-07-03T08:29:18.182Z","comments":true,"path":"2020/04/18/【洛谷】P4009-汽车加油行驶问题/","link":"","permalink":"https://leverimmy.top/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4009-%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98/","excerpt":"题意简述：题意比较复杂，建议到 OJ 上查看。 题目链接","text":"题意简述：题意比较复杂，建议到 OJ 上查看。 题目链接 解题思路：考虑分层图建最短路。 每一个点，都可以免费到达下一层的自己，或者是 若有加油站，可以加满油，即到达第 $1$ 层的自己，边权为 $A$； 坐标（$x$ 或 $y$）减小，则边权为 $B$； 坐标（$x$ 或 $y$）增大，免费； 若无加油站，可以增设加油站，直接到达第 $1$ 层的自己，边权为 $A + C$。 最后跑一边最短路即可，记得空间要开够，不然会 RE，答案即为每一层终点的 dis 的最小值。 Dijkstra 我就不贴了。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int inf = 0x3f3f3f3f;const int N = 2e6 + 5;const int M = 2e6 + 5;const int S = 1e2 + 5;int n, k, A, B, C, cnt, s, t, ans = inf;int first[N], vis[N], dis[N], pos[N];int G(int x, int y, int lvl) &#123; return S * S * (x - 1) + S *(y - 1) + lvl;&#125;int main() &#123;#ifdef LOCAL freopen(\"car.in\", \"r\", stdin); freopen(\"car.out\", \"w\", stdout);#endif io::read(n, k, A, B, C); memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n; ++i) &#123; for(int j = 1; j &lt;= n; ++j) &#123; int opt; io::read(opt); for(int lv = 1; lv &lt;= k; ++lv) Add_Edge(G(i, j, lv), G(i, j, lv + 1), 0); switch (opt) &#123; case 0: for(int lv = 1; lv &lt;= k; ++lv) &#123; if(i &lt; n) Add_Edge(G(i, j, lv), G(i + 1, j, lv + 1), 0); if(j &lt; n) Add_Edge(G(i, j, lv), G(i, j + 1, lv + 1), 0); if(i &gt; 1) Add_Edge(G(i, j, lv), G(i - 1, j, lv + 1), B); if(j &gt; 1) Add_Edge(G(i, j, lv), G(i, j - 1, lv + 1), B); &#125; for(int lv = 2; lv &lt;= k + 1; ++lv) Add_Edge(G(i, j, lv), G(i, j, 1), A + C); break; case 1: for(int lv = 2; lv &lt;= k + 1; ++lv) Add_Edge(G(i, j, lv), G(i, j, 1), A); if(i &lt; n) Add_Edge(G(i, j, 1), G(i + 1, j, 2), 0); if(j &lt; n) Add_Edge(G(i, j, 1), G(i, j + 1, 2), 0); if(i &gt; 1) Add_Edge(G(i, j, 1), G(i - 1, j, 2), B); if(j &gt; 1) Add_Edge(G(i, j, 1), G(i, j - 1, 2), B); break; &#125; &#125; &#125; Dijkstra(G(1, 1, 1)); for(int lv = 1; lv &lt;= k + 1; ++lv) ans = std::min(ans, dis[G(n, n, lv)]); io::write(ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"最短路","slug":"最短路","permalink":"https://leverimmy.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}]},{"title":"【洛谷】P4013 数字梯形问题","slug":"【洛谷】P4013-数字梯形问题","date":"2020-04-18T09:59:51.000Z","updated":"2020-07-03T08:08:34.423Z","comments":true,"path":"2020/04/18/【洛谷】P4013-数字梯形问题/","link":"","permalink":"https://leverimmy.top/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4013-%E6%95%B0%E5%AD%97%E6%A2%AF%E5%BD%A2%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个如图所示的梯形，梯形的第一行有 $m$ 个数字，共有 $n$ 行。 从梯形的顶部的 $m$ 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶至底的路径。 从梯形的顶至底的 $m$ 条路径互不相交； 从梯形的顶至底的 $m$ 条路径仅在数字结点处相交； 从梯形的顶至底的 $m$ 条路径允许在数字结点相交或边相交。 分别求在这三种约束下，能得到的数字和的最大值。 $1 \\le m, n \\le 20$。 题目链接","text":"题意简述：给定一个如图所示的梯形，梯形的第一行有 $m$ 个数字，共有 $n$ 行。 从梯形的顶部的 $m$ 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶至底的路径。 从梯形的顶至底的 $m$ 条路径互不相交； 从梯形的顶至底的 $m$ 条路径仅在数字结点处相交； 从梯形的顶至底的 $m$ 条路径允许在数字结点相交或边相交。 分别求在这三种约束下，能得到的数字和的最大值。 $1 \\le m, n \\le 20$。 题目链接 解题思路：task 1考虑拆点，每个具有 $w_{i, j}$ 的价值的点 $(i, j)$ 拆成 $u(i, j) \\overset{w_{i, j}\\quad}\\Longrightarrow u’(i, j)$。 这样就能保证每个点都只被经过一次。 task 2既然每个点可以被重复经过，而每条边都不行，那么就设置每条转移的边的流量为 $1$ 即可。 task 3直接自底向顶 dp 就好了，状态转移方程是 $f(i, j) = \\max\\{f(i + 1, j), f(i + 1, j + 1)\\} + w_{i, j}$； 答案为 $\\sum_{i = 1}^{m}f(1, i)$。 技巧这类求 最大值 的题目，通常采用把价值 取相反数 后跑最小费用最大流的方式，来解决问题。 zkw 和快读我就不贴了。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALconst int inf = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;const int S = 50 + 5;int n, m, a[S][S];int s, t, min_cost, max_flow;int cnt, first[N], idx, id[S][S];struct EDGE &#123; int to, _next, wt, ct;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w, int c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u]; first[u] = cnt++;&#125;void Connect(int u, int v, int w, int c) &#123; Add_Edge(u, v, w, c), Add_Edge(v, u, 0, -c);&#125;namespace task1 &#123; int id1(int x, int y) &#123; return id[x][y]; &#125; int id2(int x, int y) &#123; return id[x][y] + idx; &#125; void solve() &#123; memset(first, -1, sizeof(first)), cnt = min_cost = 0; for(int i = 1; i &lt;= n - 1; ++i) for(int j = 1; j &lt;= m + i - 1; ++j) &#123; Connect(id2(i, j), id1(i + 1, j), 1, 0); Connect(id2(i, j), id1(i + 1, j + 1), 1, 0); &#125; for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= m + i - 1; ++j) Connect(id1(i, j), id2(i, j), 1, -a[i][j]); for(int i = 1; i &lt;= m; ++i) Connect(s, id1(1, i), 1, 0); for(int i = 1; i &lt;= m + n - 1; ++i) Connect(id2(n, i), t, 1, 0); zkw.solve(s, t); io::write(-min_cost, '\\n'); &#125;&#125;namespace task2 &#123; int Id(int x, int y) &#123; return id[x][y]; &#125; void solve() &#123; memset(first, -1, sizeof(first)), cnt = min_cost = 0; for(int i = 1; i &lt;= n - 1; ++i) for(int j = 1; j &lt;= m + i - 1; ++j) &#123; Connect(Id(i, j), Id(i + 1, j), 1, -a[i][j]); Connect(Id(i, j), Id(i + 1, j + 1), 1, -a[i][j]); &#125; for(int i = 1; i &lt;= m; ++i) Connect(s, Id(1, i), 1, 0); for(int i = 1; i &lt;= m + n - 1; ++i) Connect(Id(n, i), t, inf, -a[n][i]); zkw.solve(s, t); io::write(-min_cost, '\\n'); &#125;&#125;namespace task3 &#123; int ans = 0, f[S][S] = &#123;0&#125;; void solve() &#123; for(int i = 1; i &lt;= m + n - 1; ++i) f[n][i] = a[n][i]; for(int i = n - 1; i &gt;= 1; --i) for(int j = 1; j &lt;= m + i - 1; ++j) f[i][j] = a[i][j] + std::max(f[i + 1][j], f[i + 1][j + 1]); for(int i = 1; i &lt;= m; ++i) ans += f[1][i]; io::write(ans, '\\n'); &#125;&#125;int main() &#123;#ifdef LOCAL freopen(\"number.in\", \"r\", stdin); freopen(\"number.out\", \"w\", stdout);#endif io::read(m, n); memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= m + i - 1; ++j) io::read(a[i][j]), id[i][j] = ++idx; s = ++idx, t = ++idx; task1::solve(); task2::solve(); task3::solve(); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P4012 深海机器人问题","slug":"【洛谷】P4012-深海机器人问题","date":"2020-04-18T08:05:03.000Z","updated":"2020-07-03T08:36:44.747Z","comments":true,"path":"2020/04/18/【洛谷】P4012-深海机器人问题/","link":"","permalink":"https://leverimmy.top/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4012-%E6%B7%B1%E6%B5%B7%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个 $P \\cdot Q$ 的 网格图，点 $(x, y)$ 到 右方或上方的格子的 有向边 上有一定的价值，每个价值只会被计算一遍。 其中有 $a$ 个点 $(x_{1, i}, y_{1, i}) \\quad (i \\in [1, a])$ 会放出机器人，并且有 $b$ 个点 $(x_{2, i}, y_{2, i}) \\quad(i \\in [1, b])$ 可以回收机器人。 机器人必须被回收，求最大总价值。 $1 \\le P, Q \\le 15$，$1 \\le a \\le 4$，$1 \\le b \\le 6$。 题目链接","text":"题意简述：给定一个 $P \\cdot Q$ 的 网格图，点 $(x, y)$ 到 右方或上方的格子的 有向边 上有一定的价值，每个价值只会被计算一遍。 其中有 $a$ 个点 $(x_{1, i}, y_{1, i}) \\quad (i \\in [1, a])$ 会放出机器人，并且有 $b$ 个点 $(x_{2, i}, y_{2, i}) \\quad(i \\in [1, b])$ 可以回收机器人。 机器人必须被回收，求最大总价值。 $1 \\le P, Q \\le 15$，$1 \\le a \\le 4$，$1 \\le b \\le 6$。 题目链接 解题思路：考虑费用流模型。 把超级汇点连向所有能 放出 机器人的点，流量为 $a$，费用为 $0$； 把所有能 回收 机器人的点连向超级汇点，流量为 $b$，费用为 $0$。 然后是格点与格点之间的边，流量为 $\\inf$，费用为 $-c$。 这样，就能转化为最小费用最大流（其实最小费用的相反数就是最大价值）的模型了。 zkw 费用流的模板我就不贴了。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;#define LL long long#define LOCALnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int inf = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;int a, b, P, Q, s, t, min_cost, max_flow;int cnt, first[N];struct EDGE &#123; int to, _next, wt, ct;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w, int c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u]; first[u] = cnt++;&#125;void Connect(int u, int v, int w, int c) &#123; Add_Edge(u, v, w, c); Add_Edge(v, u, 0, -c);&#125;int Id(int x, int y) &#123; return x * (Q + 1) + y;&#125;int main() &#123;#ifdef LOCAL freopen(\"robot.in\", \"r\", stdin); freopen(\"robot.out\", \"w\", stdout);#endif io::read(a, b, P, Q), s = (P + 1) * (Q + 1) + 1, t = (P + 1) * (Q + 1) + 2; memset(first, -1, sizeof(first)); for(int i = 0; i &lt;= P; ++i) &#123; for(int j = 0; j &lt; Q; ++j) &#123; int cost; io::read(cost); Connect(Id(i, j), Id(i, j + 1), 1, -cost); Connect(Id(i, j), Id(i, j + 1), inf, 0); &#125; &#125; for(int i = 0; i &lt;= Q; ++i) &#123; for(int j = 0; j &lt; P; ++j) &#123; int cost; io::read(cost); Connect(Id(j, i), Id(j + 1, i), 1, -cost); Connect(Id(j, i), Id(j + 1, i), inf, 0); &#125; &#125; for(int i = 1; i &lt;= a; ++i) &#123; int k, x, y; io::read(k, x, y); Connect(s, Id(x, y), k, 0); &#125; for(int i = 1; i &lt;= b; ++i) &#123; int r, x, y; io::read(r, x, y); Connect(Id(x, y), t, r, 0); &#125; zkw.solve(s, t); io::write(-min_cost); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P4014 分配问题","slug":"【洛谷】P4014-分配问题","date":"2020-04-17T06:44:51.000Z","updated":"2020-07-03T08:39:10.489Z","comments":true,"path":"2020/04/17/【洛谷】P4014-分配问题/","link":"","permalink":"https://leverimmy.top/2020/04/17/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4014-%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/","excerpt":"题意简述：有 $n$ 件事情要分给 $n$ 个人做，第 $i$ 个人做第 $j$ 件事情会得到 $a_{i, j}$ 的利润，求总利润的最大及最小值。 $1 \\le n \\le 100，-100 \\le a_{i, j} \\le 100$ 题目链接","text":"题意简述：有 $n$ 件事情要分给 $n$ 个人做，第 $i$ 个人做第 $j$ 件事情会得到 $a_{i, j}$ 的利润，求总利润的最大及最小值。 $1 \\le n \\le 100，-100 \\le a_{i, j} \\le 100$ 题目链接 解题思路：二分图的最大带权匹配模板题。 考虑使用费用流的方法（而不是二分图的相关算法）来解决这个问题。 建立超级源点，向每个人连一条流量为 $1$，费用为 $0$ 的边； 建立超级汇点，从每个事情连一条流量为 $1$，费用为 $0$ 的边。 第 $i$ 个人和第 $j$ 个事情间连一条 流量为 $1$，费用为 $a_{i, j}$ 的边。 这样可以保证每个人 仅会被使用一次。 至于最小带权匹配，边权取相反数即可。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include &lt;bits/stdc++.h&gt;#define LL long long// #define LOCALnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int inf = 0x3f3f3f3f;const int N = 1e2 + 5;const int M = 1e5 + 5;int n, m, s, t, min_cost, ans1, ans2, a[N][N];int cnt, first[N * N];struct EDGE &#123; int to, _next, wt, ct;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w, int c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u]; first[u] = cnt++;&#125;void Connect(int u, int v, int w, int c) &#123; Add_Edge(u, v, w, c); Add_Edge(v, u, 0, -c);&#125;struct ZKW &#123; static const int MS = N; int dis[MS], vis[MS]; bool spfa(int st, int ed) &#123; memset(vis, 0, sizeof(vis)); memset(dis, 0x3f, sizeof(dis)); std::queue &lt;int&gt; q; q.push(ed), vis[ed] = 1, dis[ed] = 0; while(!q.empty()) &#123; int x = q.front(); q.pop(), vis[x] = 0; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(e[i ^ 1].wt &amp;&amp; dis[y] &gt; dis[x] - e[i].ct) &#123; dis[y] = dis[x] - e[i].ct; if(!vis[y]) &#123; vis[y] = 1; q.push(y); &#125; &#125; &#125; &#125; return dis[st] ^ inf; &#125; int aug(int x, int in) &#123; vis[x] = 1; if(x == t) return in; int used = 0; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(!vis[y] &amp;&amp; e[i].wt &amp;&amp; dis[y] == dis[x] - e[i].ct) &#123; int cur_flow = aug(y, std::min(in - used, e[i].wt)); if(cur_flow) &#123; min_cost += cur_flow * e[i].ct; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; used += cur_flow; &#125; if(used == in) break; &#125; &#125; return used; &#125; void solve(int st, int ed) &#123; memset(vis, 0, sizeof(vis)); memset(dis, 0, sizeof(dis)); min_cost = 0; while(spfa(st, ed)) &#123; vis[ed] = 1; while(vis[ed]) &#123; memset(vis, 0, sizeof(vis)); aug(st, inf); &#125; &#125; &#125;&#125; zkw;void Build_Graph(int mul) &#123; memset(first, -1, sizeof(first)), cnt = 0; for(int i = 1; i &lt;= n; ++i) Connect(s, i, 1, 0); for(int i = n + 1; i &lt;= n + n; ++i) Connect(i, t, 1, 0); for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= n; ++j) Connect(i, j + n, 1, a[i][j] * mul);&#125;int main() &#123;#ifdef LOCAL freopen(\"arrange.in\", \"r\", stdin); freopen(\"arrange.out\", \"w\", stdout);#endif io::read(n); s = 2 * n + 1, t = 2 * n + 2; for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= n; ++j) io::read(a[i][j]); Build_Graph(1), zkw.solve(s, t); ans1 = min_cost; Build_Graph(-1), zkw.solve(s, t); ans2 = -min_cost; io::write(ans1, '\\n', ans2); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P6396 要有光","slug":"【洛谷】P6396-要有光","date":"2020-04-13T13:03:35.000Z","updated":"2020-07-03T09:58:17.893Z","comments":true,"path":"2020/04/13/【洛谷】P6396-要有光/","link":"","permalink":"https://leverimmy.top/2020/04/13/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6396-%E8%A6%81%E6%9C%89%E5%85%89/","excerpt":"题意简述：给定一个字符串 $S_0$，有 $q$ 组询问，每次问由 $S_0$ 变为 $S_0[l \\ldots r]$ 所需要经过的最小花费。 操作 1：$S \\gets T$，其中 $T$ 为 $S$ 的最长回文后缀，此操作花费为 $A$； 操作 2：$S \\gets T$，其中 $S$ 为 $T$ 的最长回文后缀，且 $T$ 为 $S_0$ 的子串，此操作花费为 $B$； 操作 3：对于非空的 $S \\gets T$，其中 $T$ 为 $S$ 删除长度 不大于 $k$ 的前缀与后缀得到的，此操作花费为 $C$； 操作 4：对于非空的 $S \\gets T$，其中 $T$ 为 $S_1+S+\\overleftarrow{S_1}$，且 $T$ 为 $S_0$ 的子串，此操作花费为 $D$； 操作 5：对于非空的 $S \\gets T$，其中 $T$ 为 $c + S$，$c$ 为任意字符，且 使用此操作后，在以后的操作中，不允许再使用其他操作，此操作花费为 $E$； $1 \\le \\left|S_0\\right|, q \\le 10^5$，$1 \\le \\left|\\Sigma\\right| \\le 52$。 题目链接","text":"题意简述：给定一个字符串 $S_0$，有 $q$ 组询问，每次问由 $S_0$ 变为 $S_0[l \\ldots r]$ 所需要经过的最小花费。 操作 1：$S \\gets T$，其中 $T$ 为 $S$ 的最长回文后缀，此操作花费为 $A$； 操作 2：$S \\gets T$，其中 $S$ 为 $T$ 的最长回文后缀，且 $T$ 为 $S_0$ 的子串，此操作花费为 $B$； 操作 3：对于非空的 $S \\gets T$，其中 $T$ 为 $S$ 删除长度 不大于 $k$ 的前缀与后缀得到的，此操作花费为 $C$； 操作 4：对于非空的 $S \\gets T$，其中 $T$ 为 $S_1+S+\\overleftarrow{S_1}$，且 $T$ 为 $S_0$ 的子串，此操作花费为 $D$； 操作 5：对于非空的 $S \\gets T$，其中 $T$ 为 $c + S$，$c$ 为任意字符，且 使用此操作后，在以后的操作中，不允许再使用其他操作，此操作花费为 $E$； $1 \\le \\left|S_0\\right|, q \\le 10^5$，$1 \\le \\left|\\Sigma\\right| \\le 52$。 题目链接 解题思路：操作 1直接连 $(i, fail_i)$，边权为 $A$ 的边即可。 操作 2直接连 $(fail_i, i)$，边权为 $B$ 的边即可。 操作 3预处理出 $i$ 的父亲 $fa_i$，然后连 $k$ 条 $(i, fa_i)$，边权为 $C$ 的边。 操作 4这个操作，本质上是从 $i$ 以 $D$ 的代价转移到 $i$ 子树中的任意一个结点。 但是，考虑到 $i$ 的子树可能会非常大，依次连接于边数或是时间复杂度上均不合理。 考虑虚树的思想，对每个点建立一个对应的虚点，而虚点 只能往儿子的方向 转移（花费为 $0$）。 那么，连一条 $(i, i’)$，边权为 $D$ 的边，以及 $(i’, i)$，边权为 $0$ 的边即可。 操作 5操作 5 是独立于上述四个操作的，因为进行完一次操作 5 后 不能再使用 上述四个操作了。 这个倍增一下 level ancestor，结合 dp 转移即可。 设 $dis_i$ 表示 Dijkstra 求出来的最短路的距离， 设 $f(i)$ 表示使用五种操作到达 $i$ 的最少花费，则 $f(i) = \\min\\{dis_i, f(fail_i) + E\\cdot(len_i - len_{fail_i})\\}$ 时间复杂度分析记 $\\left|S\\right| = n$。 显然边的数量是线性的，不难得出最后的时间复杂度为 $O((n + q)\\log(n))$。 可以使用配对堆优化 Dijkstra。 参考代码：Dijkstra 我就不贴了。 Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;bits/stdc++.h&gt;#define LL long longconst LL inf = 0x3f3f3f3f3f3f3f3fLL;const int N = 1e6 + 5;const int M = 2e6 + 5;int n, m, k, ta, tb, tc, td, te, q, flag = 1;int cnt, first[N], pos[N];LL dis[N], f[N];int lg2, anc[N][40 + 5];char str[N];struct EERTREE &#123; static const int MS = N; static const int C = 50 + 5; int n, cntNode, last, s[MS], len[MS], fail[MS], par[MS], ch[MS][C], lst[MS]; int make(int l) &#123; for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; len[cntNode] = l; return cntNode++; &#125; int GetFail(int x) &#123; while(s[n] != s[n - len[x] - 1]) x = fail[x]; return x; &#125; void extend(int x) &#123; s[++n] = x; int fa = GetFail(last); if(!ch[fa][x]) &#123; int now = make(len[fa] + 2); fail[now] = ch[ GetFail(fail[fa]) ][x]; ch[fa][x] = now; &#125; last = ch[fa][x]; par[last] = fa, lst[n] = last; &#125; void init() &#123; n = cntNode = last = 0; make(0), make(-1); fail[0] = 1, fail[1] = 0; s[0] = -1; &#125; EERTREE() &#123; init(); &#125;&#125; t;int I(char ch) &#123; if('a' &lt;= ch &amp;&amp; ch &lt;= 'z') return ch - 'a' + 1; else return 26 + ch - 'A' + 1;&#125;int G(int x) &#123; return x + t.cntNode - 1;&#125;void Build_Graph() &#123; for(int i = 2; i &lt;= t.cntNode - 1; ++i) &#123; if(t.fail[i] &gt; 1) Add_Edge(i, t.fail[i], ta), Add_Edge(t.fail[i], i, tb); else Add_Edge(i, 1, ta), Add_Edge(1, i, tb); for(int j = 1, fa = t.par[i]; j &lt;= k &amp;&amp; fa &gt; 1; ++j, fa = t.par[fa]) Add_Edge(i, fa, tc); Add_Edge(i, G(i), td); Add_Edge(G(i), i, 0); for(int j = 0; j &lt; t.C; ++j) if(t.ch[i][j]) Add_Edge( G(i), G(t.ch[i][j]), 0 ); &#125; for( ; 1LL &lt;&lt; lg2 &lt; m; ++lg2); for(int i = 2; i &lt;= t.cntNode - 1; ++i) anc[i][0] = std::max(t.fail[i], 1); for(int j = 1; j &lt;= lg2; ++j) for(int i = 2; i &lt;= t.cntNode - 1; ++i) anc[i][j] = anc[anc[i][j - 1]][j - 1];&#125;int Find(int x, int len) &#123; if(t.len[x] &lt;= len) return x; for(int j = lg2; j &gt;= 0; --j) if(anc[x][j] &gt; 1 &amp;&amp; t.len[anc[x][j]] &gt; len) x = anc[x][j]; return anc[x][0];&#125;void solve(int l, int r) &#123; if(l == 1 &amp;&amp; r == m) &#123; puts(\"0\"); return; &#125; int p = Find(t.lst[r], r - l + 1); printf(\"%lld\\n\", f[p] + 1LL * (r - l + 1 - t.len[p]) * te + (!flag) * ta);&#125;int main() &#123; scanf(\"%s\", str + 1), m = strlen(str + 1); memset(first, -1, sizeof(first)); scanf(\"%d %d %d %d %d %d %d\", &amp;k, &amp;ta, &amp;tb, &amp;tc, &amp;td, &amp;te, &amp;q); for(int i = 1; i &lt;= m; ++i) t.extend( I(str[i]) ); Build_Graph(); Dijkstra(t.last); for(int i = 1; i &lt;= m; ++i) flag &amp;= (str[i] == str[m - i + 1]); f[0] = inf, f[1] = dis[1]; for(int i = 2; i &lt;= t.cntNode - 1; ++i) f[i] = std::min(dis[i], f[t.fail[i]] + 1LL * te * (t.len[i] - t.len[t.fail[i]])); while(q--) &#123; int l, r; scanf(\"%d %d\", &amp;l, &amp;r); solve(l, r); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"},{"name":"最短路","slug":"最短路","permalink":"https://leverimmy.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"倍增","slug":"倍增","permalink":"https://leverimmy.top/tags/%E5%80%8D%E5%A2%9E/"}]},{"title":"【洛谷】P1251 餐巾计划问题","slug":"【洛谷】P1251-餐巾计划问题","date":"2020-04-11T09:11:27.000Z","updated":"2020-07-03T08:40:27.718Z","comments":true,"path":"2020/04/11/【洛谷】P1251-餐巾计划问题/","link":"","permalink":"https://leverimmy.top/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P1251-%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/","excerpt":"题意简述：有一家餐厅，在接下来的 $N$ 天中，每天需要 $a_i$ 条餐巾。 每天你可以进行下列四种操作之一： 以 $p$ 元/条的单价购买新的毛巾（数量自选）； 延一天洗手上已有的毛巾（数量自选）； 将脏毛巾（数量自选）以 $f$ 元/条的单价送到慢洗店，$n$ 天后送回来； 将脏毛巾（数量自选）以 $s$ 元/条的单价送到快洗店，$m$ 天后送回来。 在第 $i$ 天买的餐巾可以供第 $j\\quad(j \\in [i + 1, N])$ 天使用，但 曾被用过的餐巾 在第二次用之前必须要洗一下。 餐厅需要保证每天 不能供不应需，求最小花费。 $1 \\le N \\le 10^3$，$1 \\le a_i \\le 10^9$。 题目链接","text":"题意简述：有一家餐厅，在接下来的 $N$ 天中，每天需要 $a_i$ 条餐巾。 每天你可以进行下列四种操作之一： 以 $p$ 元/条的单价购买新的毛巾（数量自选）； 延一天洗手上已有的毛巾（数量自选）； 将脏毛巾（数量自选）以 $f$ 元/条的单价送到慢洗店，$n$ 天后送回来； 将脏毛巾（数量自选）以 $s$ 元/条的单价送到快洗店，$m$ 天后送回来。 在第 $i$ 天买的餐巾可以供第 $j\\quad(j \\in [i + 1, N])$ 天使用，但 曾被用过的餐巾 在第二次用之前必须要洗一下。 餐厅需要保证每天 不能供不应需，求最小花费。 $1 \\le N \\le 10^3$，$1 \\le a_i \\le 10^9$。 题目链接 解题思路：这题的建模好有意思。 考虑拆点建模，每个点被分为了“起始点”（即 $S(i)$）和“结束点”（即 $E(i)$）两个点。 我们将在“起始点”考虑毛巾的输出，在“结束点”考虑毛巾的收集。 操作 1 即为从超级源点连向 $S(i)$，流量为 $\\inf$，费用为 $p$。因为我们能无限供应新的毛巾，而新的毛巾是 $p$ 元/条的。 操作 2 即为从某个点 $S(i)$ 直接连到 $S(i + 1)$。注意，这里我们是从起始点连向起始点，因为我们将在 $S(i + 1)$ 的时候考虑 $S(i)$ 延一天没洗的毛巾。 操作 3 即为从某个点 $S(i)$ 直接送到 $E(i + n)$，流量为 $\\inf$，费用为 $f$。因为我们将在第 $i + n$ 的末尾收到一些毛巾，而这些毛巾是 $f$ 元/条的。 操作 4 即为从某个点 $S(i)$ 直接送到 $E(i + m)$，流量为 $\\inf$，费用为 $s$。因为我们将在第 $i + m$ 的末尾收到一些毛巾，而这些毛巾是 $s$ 元/条的。 最后跑费用流即可，记得开 long long。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int oo = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;int n, c, a, p, b, q, S, T, cnt;int first[N], dis[N], inq[N], pre[N], arc[N], need[N];LL min_cost, flow[N];struct EDGE &#123; int to, _next, ct; LL wt;&#125; e[M];void Add_Edge(int u, int v, int w, int _c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = _c, e[cnt]._next = first[u]; first[u] = cnt++; e[cnt].to = u, e[cnt].wt = 0, e[cnt].ct = -_c, e[cnt]._next = first[v]; first[v] = cnt++;&#125;bool spfa(int st, int ed) &#123; std::queue &lt;int&gt; q; while(!q.empty()) q.pop(); memset(inq, 0, sizeof(inq)); memset(dis, 0x3f, sizeof(dis)); memset(flow, 0x3f, sizeof(flow)); q.push(st), inq[st] = 1, dis[st] = 0, pre[ed] = -1; while(!q.empty()) &#123; int x = q.front(); q.pop(), inq[x] = 0; for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &gt; 0 &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123; dis[y] = dis[x] + e[i].ct; pre[y] = x, arc[y] = i; flow[y] = std::min(flow[x], e[i].wt); if(!inq[y]) &#123; q.push(y), inq[y] = 1; &#125; &#125; &#125; &#125; return ~pre[ed];&#125;void mcmf() &#123; while(spfa(S, T)) &#123; min_cost += 1LL * flow[T] * dis[T]; for(int i = T; i != S; i = pre[i]) &#123; e[ arc[i] ].wt -= flow[T]; e[ arc[i] ^ 1 ].wt += flow[T]; &#125; &#125;&#125;int main() &#123; io::read(n), S = 0, T = n &lt;&lt; 1 | 1; memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n; ++i) io::read(need[i]); io::read(c, a, p, b, q); for(int i = 1; i &lt;= n; ++i) &#123; Add_Edge(S, i, need[i], 0); // 起始点 Add_Edge(i + n, T, need[i], 0); // 结束点 Add_Edge(S, i + n, oo, c); // 买新的餐巾 if(i + 1 &lt;= n) Add_Edge(i, i + 1, oo, 0); // 拖到明天 if(i + a &lt;= n) Add_Edge(i, i + a + n, oo, p); // 快洗店 if(i + b &lt;= n) Add_Edge(i, i + b + n, oo, q); // 慢洗店 &#125; mcmf(); io::write(min_cost); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P2761 软件补丁问题","slug":"【洛谷】P2761-软件补丁问题","date":"2020-04-11T04:25:09.000Z","updated":"2020-07-03T09:57:10.751Z","comments":true,"path":"2020/04/11/【洛谷】P2761-软件补丁问题/","link":"","permalink":"https://leverimmy.top/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2761-%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98/","excerpt":"题意简述：题意比较复杂，建议到 OJ 上查看。 题目链接","text":"题意简述：题意比较复杂，建议到 OJ 上查看。 题目链接 解题思路：由于 $1 \\le n \\le 20$，因此考虑状压。 于是有 $2^n - 1$ 个点，每个点分别表示着所有漏洞被打补丁的所有情况（被打补丁或没被打补丁）。 点与点之间的转移即为每个补丁，边权就是打这个补丁所花费的时间。 转移条件需要额外判断： 包含 $B_{1, i}$ 中的所有元素，即 b1[i] &amp; x == b1[i]； 不包含 $B_{2, i}$ 中的任意一个元素，即 b2[i] &amp; x == 0； 由于点、边的数量较多，我们考虑枚举每个补丁来转移： 修复了 $F_{1, i}$ 中的错误，即 &amp; (~f1[i])； 带进来了新的 $F_{2, i}$ 中的错误，即 | f2[i]； 所以 spfa 松弛的点应为 y = (x &amp; (~f1[i])) | f2[i];。 最后，求最短路即可。 参考代码： Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int oo = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;const int V = 1 &lt;&lt; 22 | 1;int n, m;int tim[M], b1[N], b2[N], f1[N], f2[N], inq[V], dis[V];char str1[N], str2[N];void spfa(int s) &#123; memset(inq, 0, sizeof(inq)); memset(dis, 0x3f, sizeof(dis)); std::queue &lt;int&gt; q; while(!q.empty()) q.pop(); inq[s] = 1, q.push(s), dis[s] = 0; while(!q.empty()) &#123; int x = q.front(); q.pop(), inq[x] = 0; for(int i = 1; i &lt;= m; ++i) &#123; if((b1[i] &amp; x) == b1[i] &amp;&amp; (b2[i] &amp; x) == 0) &#123;// int y = ((x | f1[i]) | f2[i]) ^ f1[i]; int y = (x &amp; (~f1[i])) | f2[i]; if(dis[x] + tim[i] &lt; dis[y]) &#123; dis[y] = dis[x] + tim[i]; if(!inq[y]) &#123; inq[y] = 1; q.push(y); &#125; &#125; &#125; &#125; &#125;&#125;int main() &#123; io::read(n, m); for(int i = 1; i &lt;= m; ++i) &#123; io::read(tim[i]); scanf(\"%s %s\", str1 + 1, str2 + 1); for(int j = 1; j &lt;= n; ++j) &#123; b1[i] |= ((str1[j] == '+') &lt;&lt; j - 1); b2[i] |= ((str1[j] == '-') &lt;&lt; j - 1); f1[i] |= ((str2[j] == '-') &lt;&lt; j - 1); f2[i] |= ((str2[j] == '+') &lt;&lt; j - 1); &#125; &#125; spfa((1 &lt;&lt; n) - 1); printf(\"%d\", dis[0] == oo ? 0 : dis[0]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"状压","slug":"状压","permalink":"https://leverimmy.top/tags/%E7%8A%B6%E5%8E%8B/"},{"name":"最短路","slug":"最短路","permalink":"https://leverimmy.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"}]},{"title":"【洛谷】P2762 太空飞行计划问题","slug":"【洛谷】P2762-太空飞行计划问题","date":"2020-04-10T13:27:17.000Z","updated":"2020-07-03T09:56:12.082Z","comments":true,"path":"2020/04/10/【洛谷】P2762-太空飞行计划问题/","link":"","permalink":"https://leverimmy.top/2020/04/10/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2762-%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个二分图 $G = (V_1, V_2, E)$，其中 $V_{1, i}$ 有 正 权值 $a_i$，$V_{2, i}$ 有 负 权值 $b_i$。 若选择了 $V_{1, i}$ 则必须选择与 $V_{1, i}$ 相连的所有 $V_{2, j}$，问能达到的权值和最大为多少。 $1 \\le \\left|V_1\\right|, \\left|V_2\\right| \\le 50$。 题目链接","text":"题意简述：给定一个二分图 $G = (V_1, V_2, E)$，其中 $V_{1, i}$ 有 正 权值 $a_i$，$V_{2, i}$ 有 负 权值 $b_i$。 若选择了 $V_{1, i}$ 则必须选择与 $V_{1, i}$ 相连的所有 $V_{2, j}$，问能达到的权值和最大为多少。 $1 \\le \\left|V_1\\right|, \\left|V_2\\right| \\le 50$。 题目链接 解题思路：考虑最小割模型。 建立超级源点和超级汇点， 超级源点向每个 $V_{1, i}$ 连一条流量为 $a_i$ 的边， 每个 $V_{2, i}$ 向超级汇点连一条流量为 $b_i$ 的边。 然后对于每个 $e = (u, v)$，在 $u, v$ 之间连一条流量为 $\\inf$ 的边。 那么这个最小割，显然不会割断 $e = (u, v)$，而是只会割断两侧的边，即放弃费用或者赞助。 总和减去最小割的大小即为答案。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;bits/stdc++.h&gt;#define LL long longint flag = 0;namespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; if(ch == '\\r' || ch == '\\n') flag = 1; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int oo = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;int n, m, s, t, sum, cnt, max_flow;int a[N], b[N], c[N], first[N], cur[N], dep[N];struct EDGE &#123; int to, _next, wt;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool bfs(int S, int T) &#123; std::queue &lt;int&gt; q; memset(dep, 0, sizeof(dep)); q.push(S), dep[S] = 1; while(!q.empty()) &#123; int x = q.front(); q.pop(); for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(!dep[y] &amp;&amp; e[i].wt) &#123; dep[y] = dep[x] + 1; q.push(y); if(y == T) return 1; &#125; &#125; &#125; return 0;&#125;int dinic(int x, int in) &#123; if(x == t) return in; int out = in; for(int &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &amp;&amp; dep[y] == dep[x] + 1) &#123; int cur_flow = dinic(y, std::min(e[i].wt, out)); if(!cur_flow) dep[y] = 0; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; out -= cur_flow; &#125; &#125; return in - out;&#125;int main() &#123; io::read(m, n); memset(first, -1, sizeof(first)); s = 0, t = m + n + 1; for(int i = 1; i &lt;= m; ++i) &#123; flag = 0; io::read(a[i]), sum += a[i]; Add_Edge(s, i, a[i]); Add_Edge(i, s, 0); while(!flag) &#123; io::read(c[i]); Add_Edge(i, c[i] + m, oo); Add_Edge(c[i] + m, i, 0); &#125; &#125; for(int i = 1; i &lt;= n; ++i) &#123; io::read(b[i]); Add_Edge(i + m, t, b[i]); Add_Edge(t, i + m, 0); &#125; while(bfs(s, t)) &#123; memcpy(cur, first, sizeof(first)); max_flow += dinic(s, oo); &#125; for(int i = 1; i &lt;= m; ++i) if(dep[i] &gt; 0) io::write(i, ' '); io::write('\\n'); for(int i = 1; i &lt;= n; ++i) if(dep[i + m] &gt; 0) io::write(i, ' '); io::write('\\n'); io::write(sum - max_flow); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"}]},{"title":"【文化课】数列不动点浅探","slug":"【文化课】数列不动点浅探","date":"2020-04-08T10:08:00.000Z","updated":"2020-07-03T08:25:12.052Z","comments":true,"path":"2020/04/08/【文化课】数列不动点浅探/","link":"","permalink":"https://leverimmy.top/2020/04/08/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E6%95%B0%E5%88%97%E4%B8%8D%E5%8A%A8%E7%82%B9%E6%B5%85%E6%8E%A2/","excerpt":"数列不动点可以辅助我们快速解题。","text":"数列不动点可以辅助我们快速解题。 基础知识定义 已知函数 $f(x)$，若存在 $x_0$ 使得 $f(x_0) = x_0$，则称 $x_0$ 为 $f(x)$ 的一个不动点。 若数列 $\\{a_n\\}$ 满足 $a_{n + 1} = g(a_n) \\quad(n \\in \\mathbb{N}^{*})$，则称 $g(x)$ 为数列 $\\{a_n\\}$ 的递推函数。 定理一若 $f(x) = ax + b\\quad(a \\notin \\{0, 1\\})$ 为数列 $\\{a_n\\}$ 的递推函数，且 $p$ 为 $f(x)$ 的不动点，则数列 $\\{a_n - p\\}$ 为公比为 $a$ 的等比数列。 证明 $\\because$ $p$ 为 $f(x)$ 的不动点$\\therefore p = f(p) = ap + b$，即 $b - p = -ap$又 $a_{n + 1} = f(a_n) = a\\cdot a_n + b$$\\begin{aligned}\\therefore a_{n + 1} - p &amp; = a\\cdot a_n + b - p \\\\ &amp; = a\\cdot a_n - ap \\\\ &amp; = a(a_n - p)\\end{aligned}$$\\therefore$ $\\{a_n - p\\}$ 为公比为 $a$ 的等比数列 定理二 若 $f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)$ 为数列 $\\{a_n\\}$ 的递推函数，且 $p, q$ 为 $f(x)$ 的两 相异 不动点，则数列 $\\{\\dfrac{a_n - p}{a_n - q}\\}$ 为公比为 $\\dfrac{a - pc}{a - qc}$ 的等比数列。 证明 由 $x = f(x) = \\dfrac{ax + b}{cx + d}$ 知 $cx^2 + (d - a)x - b = 0$将 $x_1 = p, x_2 = q$ 代入得 $\\begin{cases}cp^2 + (d - a)p - b = 0 \\\\ cq^2 + (d - a)q - b = 0\\end{cases}$整理得 $\\begin{cases}p = \\dfrac{pd - b}{a - pc} \\\\ q = \\dfrac{qd - b}{a - qc}\\end{cases}$$\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} &amp; = \\dfrac{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - q} \\\\ &amp; = \\dfrac{(a - pc)a_n + b - pd}{(a - qc)a_n + b - qd} \\\\ &amp; = \\dfrac{a - pc}{a - qc} \\cdot \\dfrac{a_n - \\dfrac{pd - b}{a - pc}}{a_n - \\dfrac{qd - b}{a - qc}} \\\\ &amp; = \\dfrac{a_n - p}{a_n - q}\\cdot\\dfrac{a - pc}{a - qc}\\end{aligned}$$\\therefore$ $\\{\\dfrac{a_n - p}{a_n - q}\\}$ 为公比为 $\\dfrac{a - pc}{a - qc}$ 的等比数列 若 $f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)$ 为数列 $\\{a_n\\}$ 的递推函数，且 $p$ 为 $f(x)$ 的 唯一 不动点，则数列 $\\{\\dfrac{1}{a_n - p}\\}$ 为公差为 $\\dfrac{2c}{a + d}$ 的等差数列。 证明 由 $x = f(x) = \\dfrac{ax + b}{cx + d}$ 知 $cx^2 + (d - a)x - b = 0$$\\therefore cp^2 + (d - a)p - b = 0$，即 $b - pd = cp^2 - ap$$\\begin{aligned}\\therefore \\dfrac{1}{a_{n + 1} - p} &amp; = \\dfrac{1}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p} \\\\ &amp; = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + b - pd} \\\\ &amp; = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + cp^2 - ap} \\\\ &amp; = \\dfrac{c\\cdot a_n + d}{(a - cp)(a_n - p)} \\\\ &amp; = \\dfrac{1}{a - cp}\\cdot\\dfrac{c(a_n - p) + cp + d}{a_n - p} \\\\ &amp; = \\dfrac{c}{a - cp} + \\dfrac{cp + d}{a - cp}\\cdot\\dfrac{1}{a_n - p} \\\\ &amp; = \\dfrac{1}{a_n - p} + \\dfrac{2c}{a + d}\\end{aligned}$$\\therefore$ $\\{\\dfrac{1}{a_n - p}\\}$ 为公差为 $\\dfrac{2c}{a + d}$ 的等差数列 定理三若 $f(x) = \\dfrac{ax^2 + bx + c}{ex + f}$ 为数列 $\\{a_n\\}$ 的递推函数，且 $p, q$ 为 $f(x)$ 的两 相异 不动点，则 当且仅当 $b = 0, e = 2a$ 时有 $\\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2$。 证明 $\\because$ $p, q$ 为 $f(x)$ 的两相异不动点$\\therefore \\begin{cases}c - pf = (e - a)p^2 - bp \\\\ c - qf = (e - a)q^2 - bq\\end{cases}$$\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} &amp; = \\dfrac{a\\cdot a_n^2 + b\\cdot a_n + c - p(e\\cdot a_n + f)}{a\\cdot a_n^2 + b\\cdot a_n + c - q(e\\cdot a_n + f)} \\\\ &amp; = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + c - pf}{a\\cdot a_n^2 + (b - eq)\\cdot a_n + c - qf} \\\\ &amp; = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq}\\end{aligned}$$\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2 &amp; \\iff \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq} = \\dfrac{a_n^2 - 2p\\cdot a_n + p^2}{a_n^2 - 2q\\cdot a_n + q^2} \\\\ &amp; \\iff \\begin{cases}b - ep = -2ap \\\\ b - eq = -2aq\\end{cases} \\\\ &amp; \\iff \\begin{cases}(2a - e)p + b = 0 \\\\ (2a - e)q + b = 0\\end{cases} \\\\ &amp; \\iff \\begin{cases}b = 0 \\\\ e = 2a\\end{cases} \\quad(p \\neq q)\\end{aligned}$ 例题讲解例1设数列 $\\{a_n\\}$ 满足 $a_1 = 1, a_{n + 1} = \\dfrac{a_n + 2}{a_n}$，求数列 $\\{a_n\\}$ 的通项公式。 解析 特征方程为 $x = \\dfrac{x + 2}{x}$，解得 $x_1 = -1, x_2 = 2$$\\therefore$ $\\{\\dfrac{a_n + 1}{a_n - 2}\\}$ 为首项为 $-2$，公比为 $-2$ 的等比数列$\\therefore \\dfrac{a_n +1}{a_n - 2} = (-2)^n$$\\therefore a_n = \\dfrac{2\\cdot (-2)^n +1}{(-2)^n - 1}$ 例2数列 $\\{a_n\\}$ 满足下列关系：$a_1 = 2a, a_{n + 1} = 2a - \\dfrac{a^2}{a_n}\\quad(a \\neq 0)$，求数列 $\\{a_n\\}$ 的通项公式。 解析 特征方程为 $x = \\dfrac{2ax - a^2}{x}$，解得 $x_1 = x_2 = a$$\\therefore$ $\\{\\dfrac{1}{a_n - a}\\}$ 为首项为 $\\dfrac{1}{a}$，公比为 $\\dfrac{1}{a}$ 的等比数列$\\therefore \\dfrac{1}{a_n - a} = \\dfrac{n}{a}$$\\therefore a_n = \\dfrac{a + na}{n}$ 例3已知数列 $\\{a_n\\}$ 满足 $a_1 = 2, a_{n + 1} = \\dfrac{a_n^2 + 2}{2a_n}$，求数列 $\\{a_n\\}$ 的通项公式。 解析 特征方程为 $x = \\dfrac{x^2 + 2}{2x}$，解得 $x_1 = \\sqrt{2}, x_2 = -\\sqrt{2}$$\\therefore \\dfrac{a_{n + 1} - \\sqrt{2}}{a_{n + 1} + \\sqrt{2}} = (\\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}})^2$$\\therefore \\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}} = (3 - 2\\sqrt{2})^{2^{n - 1}} = (\\sqrt{2} - 1)^{2^n}$$\\therefore a_n = \\sqrt{2}\\cdot\\dfrac{1 + (\\sqrt{2} - 1)^{2^n}}{1 - (\\sqrt{2} - 1)^{2^n}}$ 总结就是套公式。","categories":[{"name":"文化课","slug":"文化课","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/"},{"name":"数学","slug":"文化课/数学","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"https://leverimmy.top/tags/%E6%95%B0%E5%AD%A6/"},{"name":"数列","slug":"数列","permalink":"https://leverimmy.top/tags/%E6%95%B0%E5%88%97/"}]},{"title":"【洛谷】P4015 运输问题","slug":"【洛谷】P4015-运输问题","date":"2020-04-07T15:10:51.000Z","updated":"2020-07-03T08:04:47.496Z","comments":true,"path":"2020/04/07/【洛谷】P4015-运输问题/","link":"","permalink":"https://leverimmy.top/2020/04/07/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4015-%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定两个长度分别为 $m$ 和 $n$ 的序列 $A$ 和 $B$， 每次操作，使 $A_i \\gets A_i - 1$，且 $B_j \\gets B_j + 1$ 有代价 $C_{i, j}$， 求使得 $\\sum_{j = 1}^{m}A_j = \\sum_{j = 1}^{n}B_j$ 的最小费用。 $1 \\le m, n \\le 100$。 题目链接","text":"题意简述：给定两个长度分别为 $m$ 和 $n$ 的序列 $A$ 和 $B$， 每次操作，使 $A_i \\gets A_i - 1$，且 $B_j \\gets B_j + 1$ 有代价 $C_{i, j}$， 求使得 $\\sum_{j = 1}^{m}A_j = \\sum_{j = 1}^{n}B_j$ 的最小费用。 $1 \\le m, n \\le 100$。 题目链接 解题思路：建立超级源点，连向序列 $A_i$，流量为 $A_i$，费用为 $0$，表示有这么多的储存量； 再建立超级汇点，连向序列 $B_i$，流量为 $B_i$，费用为 $0$，表示需要这么多的货物。 第一问，$A_i$ 到 $B_j$ 连一条容量为 $B_j$，费用为 $C_{i, j}$ 的边，然后跑费用流求最小费用即可； 第二问，$A_i$ 到 $B_j$ 连一条容量为 $B_j$，费用为 $-C_{i, j}$ 的边，然后跑费用流求最小费用即可。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int oo = 0x3f3f3f3f;const int N = 1e5 + 5;const int M = 1e5 + 5;int n, m, S, T, cnt, min_cost;int first[N], inq[N], a[N], b[N], dis[N], flow[N], pre[N], arc[N], d[110][110];struct EDGE &#123; int to, _next, wt, ct;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w, int c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool spfa(int st, int ed) &#123; std::queue &lt;int&gt; q; memset(inq, 0, sizeof(inq)); memset(dis, 0x3f, sizeof(dis)); memset(flow, 0x3f, sizeof(flow)); q.push(st), dis[st] = 0, inq[st] = 1, pre[ed] = -1; while (!q.empty()) &#123; int x = q.front(); q.pop(), inq[x] = 0; for (int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if (e[i].wt &gt; 0 &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123; dis[y] = dis[x] + e[i].ct; pre[y] = x, arc[y] = i; flow[y] = std::min(flow[x], e[i].wt); if (!inq[y]) q.push(y), inq[y] = 1; &#125; &#125; &#125; return ~pre[ed];&#125;void MCMF() &#123; while(spfa(S, T)) &#123; min_cost += flow[T] * dis[T]; for(int i = T; i != S; i = pre[i]) &#123; e[ arc[i] ].wt -= flow[T]; e[ arc[i] ^ 1 ].wt += flow[T]; &#125; &#125;&#125;void Build(int mul) &#123; memset(first, -1, sizeof(first)); cnt = min_cost = 0; for(int i = 1; i &lt;= m; ++i) &#123; Add_Edge(S, i, a[i], 0); Add_Edge(i, S, 0, 0); &#125; for(int i = 1; i &lt;= n; ++i) &#123; Add_Edge(i + m, T, b[i], 0); Add_Edge(T, i + m, 0, 0); &#125; for(int i = 1; i &lt;= m; ++i) &#123; for(int j = 1; j &lt;= n; ++j) &#123; Add_Edge(i, j + m, b[j], d[i][j] * mul); Add_Edge(j + m, i, 0, -d[i][j] * mul); &#125; &#125;&#125;int main() &#123; io::read(m, n); S = 0, T = 2001; for(int i = 1; i &lt;= m; ++i) io::read(a[i]); for(int i = 1; i &lt;= n; ++i) io::read(b[i]); for(int i = 1; i &lt;= m; ++i) for(int j = 1; j &lt;= n; ++j) io::read(d[i][j]); Build(1); MCMF(); io::write(min_cost, '\\n'); Build(-1); MCMF(); io::write(-min_cost); return 0;&#125;/*2 3220 280170 120 21077 39 105150 186 122*/","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【洛谷】P6216 回文匹配","slug":"【洛谷】P6216-回文匹配","date":"2020-04-06T00:59:24.000Z","updated":"2020-07-03T08:30:52.087Z","comments":true,"path":"2020/04/06/【洛谷】P6216-回文匹配/","link":"","permalink":"https://leverimmy.top/2020/04/06/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6216-%E5%9B%9E%E6%96%87%E5%8C%B9%E9%85%8D/","excerpt":"题意简述：给定 $S, T$，求 $T$ 在 $S$ 的所有奇数长度的回文子串中出现的次数之和。 $1\\le\\left|S\\right|, \\left|T\\right| \\le 3\\cdot10^6$。 题目链接","text":"题意简述：给定 $S, T$，求 $T$ 在 $S$ 的所有奇数长度的回文子串中出现的次数之和。 $1\\le\\left|S\\right|, \\left|T\\right| \\le 3\\cdot10^6$。 题目链接 解题思路：记 $n = \\left|S\\right|, m = \\left|T\\right|$。 在回文树上，从长度为 $-1$ 的虚拟节点 $1$ 开始 dfs，即可遍历所有奇数长度的回文子串。 注意到，即使回文树上的某个点对应的回文串在 $S$ 中多次出现，其本质上是相同的。 我们考虑记录一下每个回文串在 $S$ 中对应的右界，并用 KMP 处理出 $T$ 在 $S$ 的每一个前缀中出现的次数。 利用差分的思想，$T$ 在 $S[l..r]$ 中出现的次数就是 $sum_r - sum_{l + m - 2}$ 答案即为 $$ \\sum_{u \\in \\text{subtree of node }1}(sum_r - sum_{l + m - 2})\\cdot cnt_u$$ 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;bits/stdc++.h&gt;#define LL long long#define uint64 unsigned intconst int N = 3e6 + 5;const int C = 26 + 5;int n, m, sum[N], _next[N];char str1[N], str2[N];uint64 ans;struct EERTREE &#123; static const int MS = N; int n; int last; int cntNode; int len[MS]; int R[MS]; int cnt[MS]; int link[MS]; int ch[MS][C]; int make(int l) &#123; len[cntNode] = l; return cntNode++; &#125; int GetFail(int x) &#123; while(str1[n] != str1[n - len[x] - 1]) x = link[x]; return x; &#125; void extend(int x) &#123; ++n; int fa = GetFail(last); if(!ch[fa][x]) &#123; int now = make(len[fa] + 2); link[now] = ch[ GetFail(link[fa]) ][x]; ch[fa][x] = now; &#125; last = ch[fa][x]; R[last] = n; ++cnt[last]; &#125; void init() &#123; n = cntNode = last = 0; make(0), make(-1); link[0] = 1, link[1] = 0; str1[0] = -1; &#125; void refresh() &#123; for(int i = cntNode - 1; i &gt;= 0; --i) cnt[ link[i] ] += cnt[i]; &#125; void dfs(int x) &#123; if(len[x] &gt;= m) ans += (sum[ R[x] ] - sum[ R[x] - len[x] + m - 1]) * cnt[x]; for(int i = 1; i &lt;= C; ++i) if (ch[x][i]) dfs(ch[x][i]); &#125; EERTREE() &#123; init(); &#125;&#125; t;void Get_Next(char *S, int len) &#123; for(int i = 1, j = 0; i &lt; len; ++i, j = _next[i]) &#123; while(j &gt; 0 &amp;&amp; S[i + 1] != S[j + 1]) j = _next[j]; if(S[i + 1] == S[j + 1]) j++; _next[i + 1] = j; &#125;&#125;void KMP(char *S, int len1, char *T, int len2) &#123; for(int i = 0, j = 0; i &lt;= len1; ) &#123; if(j == len2) sum[i] = 1; if(S[i + 1] == T[j + 1]) ++i, ++j; else &#123; if (j == 0) ++i; else j = _next[j]; &#125; &#125;&#125;int main() &#123; scanf(\"%d %d\", &amp;n, &amp;m); scanf(\"%s %s\", str1 + 1, str2 + 1); Get_Next(str2, m); KMP(str1, n, str2, m); for(int i = 1; i &lt;= n; ++i) sum[i] += sum[i - 1]; for(int i = 1; i &lt;= n; ++i) t.extend(str1[i] - 'a' + 1); t.refresh(); t.dfs(1); printf(\"%u\", ans); return 0;&#125;/*10 2ccbccbbcbb bc20 2cbcaacabcbacbbabacca ba*/","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"},{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"},{"name":"前缀和","slug":"前缀和","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"},{"name":"差分","slug":"差分","permalink":"https://leverimmy.top/tags/%E5%B7%AE%E5%88%86/"}]},{"title":"【置顶】近期的小计划","slug":"【置顶】近期的小计划","date":"2020-03-30T14:43:30.000Z","updated":"2020-07-07T13:54:47.845Z","comments":true,"path":"2020/03/30/【置顶】近期的小计划/","link":"","permalink":"https://leverimmy.top/2020/03/30/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E8%BF%91%E6%9C%9F%E7%9A%84%E5%B0%8F%E8%AE%A1%E5%88%92/","excerpt":"众所周知，$\\text{Clever_Jimmy}$ 是只鸽子。","text":"众所周知，$\\text{Clever_Jimmy}$ 是只鸽子。 OI 相关字符串 KMP 2020.07.04 完成 AC 自动机 后缀树 后缀数组 最小表示法 回文树 2020.06.26 完成 图论 矩阵树定理 最小树形图 点双/边双 2-SAT 欧拉路径 三元环 Prufer 序列 强连通分量 数据结构 K-D Tree 笛卡尔树 动态树 数学 类欧几里得算法 2020.05.05 完成 中国剩余定理 BSGS 卢卡斯定理 莫比乌斯反演 杜教筛 Min_25 筛 FFT NTT 拉格朗日插值 FWT 线性基 高斯消元 二项式反演 动态规划 区间dp 2020.05.01 完成 树型dp 2020.05.02 完成 状压dp 2020.05.03 完成 数位dp 单调队列优化dp 斜率优化dp 四边形不等式优化dp 插头dp 动态dp 计算几何 叉乘 凸包 扫描线 旋转卡壳 半平面交 杂项 01 分数规划 悬线法 CDQ 分治 整体二分 Karatsuba 乘法 2020.05.04 完成","categories":[{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"计划","slug":"杂笔/计划","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"生活","slug":"生活","permalink":"https://leverimmy.top/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"【洛谷】P3649 [APIO2014]回文串","slug":"【洛谷】P3649-APIO2014-回文串","date":"2020-03-27T03:49:44.000Z","updated":"2020-07-03T08:34:34.260Z","comments":true,"path":"2020/03/27/【洛谷】P3649-APIO2014-回文串/","link":"","permalink":"https://leverimmy.top/2020/03/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3649-APIO2014-%E5%9B%9E%E6%96%87%E4%B8%B2/","excerpt":"题意简述：给定一个字符串 $S$，求其所有回文子串的出现次数与其长度的乘积之和。 $1 \\le \\left|S\\right| \\le 3\\cdot10^5$。 题目链接","text":"题意简述：给定一个字符串 $S$，求其所有回文子串的出现次数与其长度的乘积之和。 $1 \\le \\left|S\\right| \\le 3\\cdot10^5$。 题目链接 解题思路：直接对 $S$ 建造回文树，最终 $\\max_{i \\in T}\\{len_i\\cdot occ_i\\}$ 即为所求。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int N = 3e5 + 5;const int C = 26 + 5;int m;LL ans;char str[N];struct EERTREE &#123; int n; // 已处理的字符串长度 int cntNode; // 结点个数 int last; // 指向字符串中，上一个字符为结尾的最长回文串 int s[N]; // 已处理的字符串 int len[N]; // 点 i 表示的回文串的长度 int ch[N][C]; // 边集 int link[N]; // 回文后缀链接 int occ[N]; // 点 i 表示的回文串出现的次数// int num[N]; // link[i] 最多能迭代的次数 int make(int l) &#123; // 生成一个长度为 l 的新点 for(int i = 0; i &lt; C; ++i) ch[cntNode][i] = 0; occ[cntNode] = 0;// num[cntNode] = 0; len[cntNode] = l; return cntNode++; &#125; int getfail(int x) &#123; // 暴力回溯指针 while(s[n - len[x] - 1] != s[n]) x = link[x]; return x; &#125; void add(int c) &#123; s[++n] = c; int fa = getfail(last); // last 的在树中的父结点 if(!ch[fa][c]) &#123; int now = make(len[fa] + 2); link[now] = ch[ getfail(link[fa]) ][c]; ch[fa][c] = now;// num[now] = num[ link[now] ] + 1; &#125; last = ch[fa][c]; ++occ[last]; &#125; void refresh() &#123; for(int i = cntNode - 1; i &gt;= 0; --i) occ[ link[i] ] += occ[i]; &#125; EERTREE() &#123; cntNode = n = last = 0; make(0), make(-1); // 长度分别为偶数、奇数的两个根 s[0] = -1, link[0] = 1; &#125;&#125; t;int main() &#123; scanf(\"%s\", str + 1); m = strlen(str + 1); for(int i = 1; i &lt;= m; ++i) t.add(str[i] - 'a' + 1); t.refresh(); for(int i = 0; i &lt; t.cntNode; ++i) ans = std::max(ans, 1LL * t.len[i] * t.occ[i]); io::write(ans); return 0;&#125;/*abacaba*/","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"字符串","slug":"字符串","permalink":"https://leverimmy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"}]},{"title":"【洛谷】P3355 骑士共存问题","slug":"【洛谷】P3355-骑士共存问题","date":"2020-03-26T13:19:40.000Z","updated":"2020-07-03T08:45:45.036Z","comments":true,"path":"2020/03/26/【洛谷】P3355-骑士共存问题/","link":"","permalink":"https://leverimmy.top/2020/03/26/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3355-%E9%AA%91%E5%A3%AB%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个大小为 $n \\times n$ 的棋盘，其中 $m$ 个格子上有障碍，问最多能放多少个骑士（即「马」）。 $1 \\le n \\le 200$，$0 \\le m \\le n^2$。 题目链接","text":"题意简述：给定一个大小为 $n \\times n$ 的棋盘，其中 $m$ 个格子上有障碍，问最多能放多少个骑士（即「马」）。 $1 \\le n \\le 200$，$0 \\le m \\le n^2$。 题目链接 解题思路：还是考虑奇偶建图。 所有棋盘上的白点是不会互相攻击到的，所有黑点也是。 于是超级源点与所有白点连一条流量为 $1$ 的边，所有黑点与超级汇点连一条流量为 $1$ 的边。 两个 会互相攻击到的 点之间连一条流量为 $\\inf$ 的边。 特殊地，有障碍的格子不连任何边。 题目要求 最多 能放多少个马，就用 $n^2 - m$ 减去最大流即可。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#include &lt;bits/stdc++.h&gt;#define LL long longnamespace io &#123; template &lt;typename T&gt; inline void read(T &amp; _x) &#123; int f = 0, ch; _x = 0; while(!isdigit(ch = getchar())) f |= ch == '-'; while(isdigit(ch)) _x = _x * 10 + ch - '0', ch = getchar(); if(f) _x = -_x; &#125; template &lt;typename T, typename ... Args&gt; inline void read(T &amp;_f, Args&amp; ... args) &#123; read(_f), read(args ...); &#125; inline void _deal(char ch) &#123; putchar(ch); &#125; template &lt;typename T&gt; inline void _deal(T _x) &#123; if (_x &lt; 0) putchar('-'), _x = -_x; if (_x &gt; 9) _deal(_x / 10); putchar(_x % 10 + '0'); &#125; inline void write() &#123;&#125; template &lt;typename T, typename ... Args&gt; inline void write(T _f, Args ... args) &#123; _deal(_f), write(args...); &#125;&#125;const int oo = 0x3f3f3f3f;const int N = 2e5 + 5;const int M = 1e6 + 5;const int C = 2e2 + 5;const int dx[8]=&#123;-2, -1, 1, 2, 2, 1, -1, -2&#125;;const int dy[8]=&#123;-1, -2, -2, -1, 1, 2, 2, 1&#125;;int n, m, s, t, cnt, max_flow, first[N], cur[N], dep[N], E[C][C];struct EDGE &#123; int to, _next, wt;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool bfs(int S, int T) &#123; std::queue &lt;int&gt; q; memset(dep, 0, sizeof(dep)); q.push(S), dep[S] = 1; while(!q.empty()) &#123; int x = q.front(); q.pop(); for(int i = first[x]; ~i; i = e[i]._next) &#123; int y = e[i].to; if(!dep[y] &amp;&amp; e[i].wt) &#123; dep[y] = dep[x] + 1; q.push(y); if(y == T) return 1; &#125; &#125; &#125; return 0;&#125;int dinic(int x, int in) &#123; if(x == t) return in; int out = in; for(int &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &amp;&amp; dep[y] == dep[x] + 1) &#123; int cur_flow = dinic(y, std::min(e[i].wt, out)); if(!cur_flow) dep[y] = 0; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; out -= cur_flow; &#125; &#125; return in - out;&#125;int id(int x, int y) &#123; return (x - 1) * n + y; &#125;bool valid(int x, int y) &#123; return !E[x][y] &amp;&amp; x &gt;= 1 &amp;&amp; x &lt;= n &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= n; &#125;int main() &#123; io::read(n, m); memset(first, -1, sizeof(first)); s = 0, t = n * n + 1; for(int i = 1; i &lt;= m; ++i) &#123; int x, y; io::read(x, y); E[x][y] = 1; &#125; for(int i = 1; i &lt;= n; ++i) for(int j = 1; j &lt;= n; ++j) if(!E[i][j]) &#123; if((i + j) % 2 == 0) &#123; Add_Edge(s, id(i, j), 1); Add_Edge(id(i, j), s, 0); &#125; else &#123; Add_Edge(id(i, j), t, 1); Add_Edge(t, id(i, j), 0); &#125; &#125; for(int i = 1; i &lt;= n; ++i) &#123; for(int j = 1; j &lt;= n; ++j) if((i + j) % 2 == 0) &#123; for(int k = 0; k &lt; 8; ++k) &#123; int nx = i + dx[k], ny = j + dy[k]; if(valid(nx, ny)) &#123; Add_Edge(id(i, j), id(nx, ny), oo); Add_Edge(id(nx, ny), id(i, j), 0); &#125; &#125; &#125; &#125; while(bfs(s, t)) &#123; memcpy(cur, first, sizeof(first)); max_flow += dinic(s, oo); &#125; io::write(n * n - m - max_flow); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"},{"name":"最大流","slug":"最大流","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"}]},{"title":"【洛谷】P4430 小猴打架","slug":"【洛谷】P4430-小猴打架","date":"2020-03-19T01:10:07.000Z","updated":"2020-07-03T08:31:58.397Z","comments":true,"path":"2020/03/19/【洛谷】P4430-小猴打架/","link":"","permalink":"https://leverimmy.top/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4430-%E5%B0%8F%E7%8C%B4%E6%89%93%E6%9E%B6/","excerpt":"题意简述：求点数为 $n$ 的完全图中，构成生成树的不同连接方式的方案数。 $1 \\le n \\le 10^6$。 题目链接","text":"题意简述：求点数为 $n$ 的完全图中，构成生成树的不同连接方式的方案数。 $1 \\le n \\le 10^6$。 题目链接 解题思路：一共有 $n$ 个点，你只能选 $n - 1$ 个点，每个点向外连一条边。 每个点向外有 $n - 1$ 条边，那么构成一个有 $n$ 个点的树的方案数为 $n^{n - 2}$。 生成这个有 $n - 1$ 条边的树的方案数为 $(n - 1)!$。 所以答案为 $(n - 1)!\\cdot n^{n - 2}$。 参考代码： Code 123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;#define LL long longconst int mod = 9999991;const int N = 1e6 + 5;LL n, fac[N] = &#123; 1 &#125;;LL qpow(LL base, LL power) &#123; LL res = 1LL; while(power) &#123; if(power &amp; 1) res = res * base % mod; base = base * base % mod; power &gt;&gt;= 1; &#125; return res;&#125;int main() &#123; scanf(\"%lld\", &amp;n); for(int i = 1; i &lt;= n; ++i) fac[i] = fac[i - 1] * i % mod; printf(\"%lld\", qpow(n, n - 2) * fac[n - 1] % mod); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"快速幂","slug":"快速幂","permalink":"https://leverimmy.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"},{"name":"计数","slug":"计数","permalink":"https://leverimmy.top/tags/%E8%AE%A1%E6%95%B0/"},{"name":"最小生成树","slug":"最小生成树","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"}]},{"title":"【洛谷】P4016 负载平衡问题","slug":"【洛谷】P4016-负载平衡问题","date":"2020-03-19T00:25:28.000Z","updated":"2020-07-03T09:54:25.846Z","comments":true,"path":"2020/03/19/【洛谷】P4016-负载平衡问题/","link":"","permalink":"https://leverimmy.top/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4016-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个长度为 $n$ 的序列 $a$， 每次你可以以 $1$ 的代价使得 $a_i - k$，$a_{i + 1} + k$，其中 $k \\le \\min\\{a_i, a_{i + 1}\\}, i \\in [1, n)$。 问使得 $\\forall i \\in [1, n), a_i = \\dfrac{\\sum_{j = 1}^na_j}{n}$ 的所需代价最小为多少。 $1 \\le n \\le 100$，保证 $n | \\sum_{j = 1}^na_j$。 题目链接","text":"题意简述：给定一个长度为 $n$ 的序列 $a$， 每次你可以以 $1$ 的代价使得 $a_i - k$，$a_{i + 1} + k$，其中 $k \\le \\min\\{a_i, a_{i + 1}\\}, i \\in [1, n)$。 问使得 $\\forall i \\in [1, n), a_i = \\dfrac{\\sum_{j = 1}^na_j}{n}$ 的所需代价最小为多少。 $1 \\le n \\le 100$，保证 $n | \\sum_{j = 1}^na_j$。 题目链接 解题思路：先建立超级源点 $S$ 和超级汇点 $T$。 不妨令 $v = \\dfrac{\\sum_{j = 1}^na_j}{n}$。 对于所有的满足 $a_i &lt; v$ 的 $i$，构造边 $(S, i)$，流量为 $v - a[i]$，费用为 $0$； 这条边的意义是，将 超级源点 作为老大，免费给这个点提供自己应有的 $v - a[i]$ 的流量。 对于所有的满足 $a_i &gt; v$ 的 $i$，构造边 $(i, T)$，流量为 $a[i] - v$，费用为 $0$。 这条边的意义是，将 超级汇点 作为儿子，自己一定要得到 $a[i] - v$ 的流量。 对于所有的 $i \\in [1, n)$，构造边 $(i, i + 1)$，流量为 $\\inf$，费用为 $1$。 这条边的意义是，$i$ 向 $i + 1$ 尽可能地 提供自己的流量，费用为 $1$ 表示一次操作的代价为 $1$。 对于所有的 $i \\in (1, n]$，构造边 $(i, i - 1)$，流量为 $\\inf$，费用为 $1$。 这条边的意义是，$i$ 向 $i - 1$ 尽可能地 提供自己的流量，费用为 $1$ 表示一次操作的代价为 $1$。 最后在这张图上跑最小费用最大流就好了。 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;bits/stdc++.h&gt;#define LL long longconst int oo = 0x3f3f3f3f;const int N = 1e2 + 5;const int M = 1e5 + 5;int n, s, t, cnt, sum, min_cost, max_flow;int first[N], a[N], inq[N], dis[N], flow[N], pre[N], arc[N];struct EDGE &#123; int to, _next, wt, ct;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w, int c) &#123; e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c; e[cnt]._next = first[u], first[u] = cnt++;&#125;bool spfa(int st, int ed) &#123; std::queue &lt;int&gt; q; memset(inq, 0, sizeof(inq)); memset(dis, 0x3f, sizeof(dis)); memset(flow, 0x3f, sizeof(flow)); q.push(st), dis[st] = 0, inq[st] = 1, pre[ed] = -1; while (!q.empty()) &#123; int x = q.front(); q.pop(), inq[x] = 0; for (int i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to) if (e[i].wt &gt; 0 &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123; dis[y] = dis[x] + e[i].ct; pre[y] = x, arc[y] = i; flow[y] = std::min(flow[x], e[i].wt); if (!inq[y]) q.push(y), inq[y] = 1; &#125; &#125; return ~pre[ed];&#125;void mcmf() &#123; while(spfa(s, t)) &#123; max_flow += flow[t]; min_cost += flow[t] * dis[t]; for(int i = t; i != s; i = pre[i]) &#123; e[ arc[i] ].wt -= flow[t]; e[ arc[i] ^ 1 ].wt += flow[t]; &#125; &#125;&#125;int main() &#123; scanf(\"%d\", &amp;n); s = n + 1, t = n + 2; memset(first, -1, sizeof(first)); for(int i = 1; i &lt;= n; ++i) scanf(\"%d\", a + i), sum += a[i]; for(int i = 1; i &lt;= n; ++i) &#123; int delta = a[i] - sum / n; if(delta &gt; 0) &#123; Add_Edge(s, i, delta, 0); Add_Edge(i, s, 0, 0); &#125; else &#123; Add_Edge(i, t, -delta, 0); Add_Edge(t, i, 0, 0); &#125; if(i != n) &#123; Add_Edge(i, i + 1, oo, 1); Add_Edge(i + 1, i, 0, -1); &#125; if(i != 1) &#123; Add_Edge(i, i - 1, oo, 1); Add_Edge(i - 1, i, 0, -1); &#125; &#125; Add_Edge(1, n, oo, 1); Add_Edge(n, 1, 0, -1); Add_Edge(n, 1, oo, 1); Add_Edge(1, n, 0, -1); mcmf(); printf(\"%d\", min_cost); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"}]},{"title":"【文化课】巧记等比数列求和公式","slug":"【文化课】巧记等比数列求和公式","date":"2020-03-18T02:08:10.000Z","updated":"2020-07-03T08:26:31.572Z","comments":true,"path":"2020/03/18/【文化课】巧记等比数列求和公式/","link":"","permalink":"https://leverimmy.top/2020/03/18/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E5%B7%A7%E8%AE%B0%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C%E5%85%AC%E5%BC%8F/","excerpt":"感觉 $S_n = \\dfrac{a_1 - q\\cdot a_n}{1 - q}(q\\neq 1)$ 这个公式实在是太愚蠢了， 于是自己整理了两个更漂亮的，也更容易记住的公式。","text":"感觉 $S_n = \\dfrac{a_1 - q\\cdot a_n}{1 - q}(q\\neq 1)$ 这个公式实在是太愚蠢了， 于是自己整理了两个更漂亮的，也更容易记住的公式。 $$\\boxed{S_n = a_n + \\dfrac{a_n - a_1}{q - 1}(q \\neq 1)}$$ 用斜率的概念来理解比较方便。 $$\\boxed{S_n = a_1\\cdot\\dfrac{q^n - 1}{q - 1}(q \\neq 1)}$$","categories":[{"name":"文化课","slug":"文化课","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/"},{"name":"数学","slug":"文化课/数学","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/%E6%95%B0%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"https://leverimmy.top/tags/%E6%95%B0%E5%AD%A6/"},{"name":"等比数列","slug":"等比数列","permalink":"https://leverimmy.top/tags/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97/"}]},{"title":"【游记】CSP-S2019 游记","slug":"【游记】CSP-S2019-游记","date":"2020-03-17T03:15:37.000Z","updated":"2020-07-03T08:11:38.080Z","comments":true,"path":"2020/03/17/【游记】CSP-S2019-游记/","link":"","permalink":"https://leverimmy.top/2020/03/17/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91CSP-S2019-%E6%B8%B8%E8%AE%B0/","excerpt":"CSP 已经过去四个月了，让我凭着仅存的记忆，书写下这段记忆吧。","text":"CSP 已经过去四个月了，让我凭着仅存的记忆，书写下这段记忆吧。 Day ?~-1终于停课了，在机房有一天没一天地打模拟赛，订正，打模拟赛…… 不过停课的这段时间倒是挺愉快的，每天早上吃完早饭可以直接去机房打代码，中午能有 early lunch。 更重要的是，下午能摆脱 17:30 的束缚，舒舒服服地洗一个澡。 Day 0最后一天当然是颓了。 尝试着把所有会的在洛谷上有“模板”标签的题都打了一遍，LCA 差点写挂，逆元忘记怎么推？这要退役啊。 然后就开始 CS1.6 了。 中途 mj 还来慰问了一下全机房，（你们要去全部一等奖啊）吓得大家都一惊。 中午睡了一觉，下午继续打板子，晚上就到叔叔家去了。 退 役 预 定。 Day 1早上吃了一碗面，没喝牛奶，肚子有点疼（这是要退役的节奏吧） 起得比较早，于是 07:05 就到了华科，没有什么人；不过一会儿同学们都陆陆续续地来了，抽签进了考场。 T1 （格雷码是啥？不会怎么办） 乱搞了一下，发现答案树和 01Trie 有些关系，开始猛地找规律。 最后发现逆推出答案的每一位就好了，此时大概 09:12，测了极限情况，没有问题。 T2感觉还可以做，推了一下树是一条链（也就是一个序列）上的情况 （飞速过大样例） 然后感觉可以把一棵树拆成很多条链，分别用序列搞，但是不同链上的贡献不会统计啊（（（（。 第二个样例 WA 了，调试的时候 RE 了（并不知道为什么 （第三个样例也太水了吧） 早知道就打 $O(n^3)$ 的暴力了。 T3感觉不可做，打了 10pts 的暴力就滚了，然而最后还是没拿分。 然后继续看 T2，越看越觉得自己的链写挂了，然后调了半天，最后就交卷了。 出考场，全世界都100 + 100 + 10 = 210。 似乎全世界 T2 都过了，T3 也都拿了10pts。 自己真的省一无缘了吧 晚上测了下洛谷和牛客的数据，感觉自己 Day 1 也就 100 多分吧。 退 役 预 定。 Day 2本来还想上 350 的，但现在看来没啥希望了。 昨天的心情不好一直持续到了今天。 T1, T2 都是 dp，T3 是一个树上问题。 然后完全没有掌握 dp 的我只会搜索，然后写了 T1, T2 的暴力。 然后发现 T3 的 $n^2$ 很好写，写了 40pts 的部分分；再加上链的部分分。 然后就不知道怎么办了。 最后 45min 发现 T2 可以剪枝，然后剪挂了； 最后 15min 发现 T3 的链写挂了，然后没改。 就这么结束了。 Day inf哦出成绩了。 本来水平就不咋地，然后成为了 HB 提高 1= 倒数第二名。","categories":[{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"游记","slug":"杂笔/游记","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E6%B8%B8%E8%AE%B0/"}],"tags":[{"name":"CSP2019S","slug":"CSP2019S","permalink":"https://leverimmy.top/tags/CSP2019S/"}]},{"title":"LaTeX 索引","slug":"【备忘录】LaTeX-索引","date":"2020-03-16T03:50:44.000Z","updated":"2020-07-03T08:04:30.185Z","comments":true,"path":"2020/03/16/【备忘录】LaTeX-索引/","link":"","permalink":"https://leverimmy.top/2020/03/16/%E3%80%90%E5%A4%87%E5%BF%98%E5%BD%95%E3%80%91LaTeX-%E7%B4%A2%E5%BC%95/","excerpt":"这个是 $\\LaTeX$ 的索引，可使用 Ctrl + F 进行查询中文关键词。","text":"这个是 $\\LaTeX$ 的索引，可使用 Ctrl + F 进行查询中文关键词。 逻辑非，非，not $\\neg$ \\neg 数码，digit，上划线，overline $\\overline{abc}$ \\overline{} 逻辑或，或，or $\\vee$，$\\bigvee$ \\vee, \\bigvee 逻辑与，与，and $\\wedge$，$\\bigwedge$ \\wedge, \\bigwedge 不存在，not exist $\\nexists$ \\nexists 圆，circle $\\odot$，$\\bigodot$ \\odot, \\bigodot 不同余 $ax\\not\\equiv1\\pmod{p}$ \\not\\equiv 全等，congruent $\\cong$ \\cong 赋值，def $:=$ := 真子集 $\\subsetneqq$，$\\supsetneqq$ \\subsetneqq, \\supsetneqq 非子集 $\\nsubseteq$，$\\nsupseteq$ \\nsubseteq, \\nsupseteq 子集，subset $\\subseteq$，$\\supseteq$ \\subseteq, \\supseteq 自交 $\\otimes$，$\\bigotimes$ \\otimes, \\bigotimes 异或，xor $\\oplus$，$\\bigoplus$ \\oplus, \\bigoplus 除号，除，除以 $\\div$ \\div 乘除号，乘除 $\\divideontimes$ \\divideontimes 负正号，减加，负正 $\\mp$ \\mp 正负号，加减，正负 $\\pm$ \\pm 整除，约数 $a|b$ | 不整除 $a \\nmid b$ \\nmid 取模，模运算，模 $a % b$，$a \\mod b$，$a \\equiv1\\pmod{b}$ \\%, \\mod, \\pmod{} 最大公约数，gcd $\\gcd(a, b)$ \\gcd 最小公倍数，lcm $\\operatorname{lcm}(a, b)$ \\operatorname{lcm} 补集，C $\\complement_{U}A$，$\\bar{A}$，$\\overline{A}$ \\complement_{}, \\bar{}, \\overline{} 无穷，正无穷，负无穷，无限大 $\\infty$ \\infty 最小值，min，minimum，较小的 $\\min(a, b)$ \\min 最大值，max，maximum，较大的 $\\max(a, b)$ \\max 余切，cotangent，cot $\\cot\\theta$ \\cot 指数函数，指数，exponent $\\exp_a b = a^b$ \\exp_{} 正割，secant，sec $\\sec\\alpha$ \\sec 余割，cosecant，csc $\\csc\\beta$ \\csc 相似，similar，sim $\\sim$ \\sim 勾，对，是的，正确，完成，tick，correct $\\checkmark$ \\checkmark 同余 $\\equiv$ \\equiv LaTeX，拉泰赫 $\\LaTeX$ \\latex 斜着的点，斜点 $\\ddots$ \\ddots 竖着的点，竖点 $\\vdots$ \\vdots 组合 $\\dbinom{n}{m}$，$\\binom{n}{m}$，$\\tbinom{n}{m}$ \\dbinom{}{}, \\binom{}{}, \\tbinom{}{} 求和，连加，西格玛，sum $\\sum_{j = 1}^{10}a_j$ \\sum_{}^{} 求积，连乘，product，派 $\\prod_{j = 1}^{10}a_j$ \\prod_{}^{} 分数，fraction $\\dfrac{1}{2}$，$\\frac{1}{2}$，$\\tfrac{1}{2}$ \\dfrac{}{}, \\frac{}{}, \\tfrac{}{} alpha，阿尔法 $\\alpha$ \\alpha beta，贝塔 $\\beta$ \\beta Delta，德尔塔，变化量 $\\Delta$ \\Delta 三角形，triangle $\\triangle$ \\triangle 向量 $\\vec{AB}$，$\\overrightarrow{AB}$，$\\mathbf{e}$ \\vec{}, \\overrightarrow{} \\mathbf{} 数集，实数集，整数集，自然数集，有理数集，复数集，R，Z，N，Q，C $\\mathbb{R}$，$\\mathbb{Z}$，$\\mathbb{N}$，$\\mathbb{Q}$，$\\mathbb{C}$ \\mathbb{R}, \\mathbb{Z}, \\mathbb{N}, \\mathbb{Q}, \\mathbb{C} 根号，sqrt，root $\\sqrt[3]{2}$ \\sqrt[]{} 次幂，次方，方，power，上标 $a^{2}$ ^ 下标，序号，index $a_i$ _ theta，西塔 $\\theta$ \\theta 角，角度，triangle $\\angle AOB$ \\angle 正弦，sin，sine $\\sin\\theta$ \\sin 余弦，cos，cosine $\\cos\\varphi$ \\cos 绝对值，absolute value $\\left|-1\\right|$ \\left| \\right| tangent，正切，tan $\\tan\\alpha$ \\tan\\alpha 夹角，向量的夹角 $&lt;\\mathbf{a}, \\mathbf{b}&gt;$，$\\left&lt;\\mathbf{a}, \\mathbf{b}\\right&gt;$ &lt; &gt; \\left&lt; \\right&gt; 下取整，floor $\\lfloor \\dfrac{1}{2} \\rfloor$，$\\left\\lfloor \\dfrac{1}{2} \\right\\rfloor$ \\lfloor \\rfloor \\left\\lfloor \\right\\rfloor 上取整，ceil，ceiling $\\lceil \\dfrac{1}{2}\\rceil$，$\\left\\lceil \\dfrac{1}{2}\\right\\rceil$ \\lceil \\rceil \\left\\lceil \\right\\rceil 派，pi，圆周率 $\\pi$ \\pi fai，phi $\\phi$，$\\varphi$ \\phi, \\varphi 空集，empty $\\emptyset$，$\\varnothing$ \\emptyset \\varnothing 左右，放大，left，right $\\left|-\\dfrac{1}{2}\\right|$ \\left \\right mu，miu，莫比乌斯 $\\mu$ \\mu 大于等于，不小于 $\\ge$，$\\geqslant$ \\ge, \\geqslant 小于等于，不大于 $\\le$，$\\leqslant$ \\le, \\leqslant 不等于 $\\neq$ \\neq 约等于，约，近似 $\\approx$ \\approx 远大于 $\\gg$ \\gg 远小于 $\\ll$ \\ll 平行, parallel $\\parallel$ \\parallel 垂直，互质 $\\perp$ \\perp 点乘，times，multiply，数量积，内积 $\\cdot$ \\cdot 叉乘，times，multiply，向量积，外积 $\\times$ \\times 省略号，横着的点，横点 $\\cdots$，$\\ldots$ \\cdots, \\ldots 上箭头，向上，up arrow $\\uparrow$，$\\Uparrow$，$\\upharpoonleft$，$\\upharpoonright$，$\\upuparrows$ \\uparrow, \\Uparrow, \\upharpoonleft, \\upharpoonright, \\upuparrows 下箭头，向下，down arrow $\\downarrow$，$\\Downarrow$，$\\downharpoonleft$，$\\downharpoonright$，$\\downdownarrows$ \\downarrow, \\Downarrow, \\downharpoonleft, \\downharpoonright, \\downdownarrows 度，分类讨论 $1^{\\circ}$ \\circ 因为，because $\\because$ \\because 所以，therefore $\\therefore$ \\therefore 对于所有，全称量词，forall $\\forall$ \\forall 存在量词，存在，exist $\\exists$ \\exists 否，否定，不，neg $\\neg$ \\neg 弧，arc $\\overset{\\frown}{AB}$ \\overset{\\frown} 交集，交 $\\cap$，$\\bigcap$ \\cap, \\bigcap 并集，并 $\\cup$，$\\bigcup$ \\cup, \\bigcup 矩阵，matrix $\\begin{bmatrix}1 &amp; 1 \\\\ 1 &amp; 0\\end{bmatrix}$ \\begin{bmatrix} \\end{bmatrix} 条件，cases，分段函数，方程组，不等式组 $f(x) = \\begin{cases}1 &amp; x \\in \\mathbb{Q} \\\\ 0 &amp; x \\notin \\mathbb{Q}\\end{cases}$ \\begin{cases} \\end{cases} 属于 $\\in, \\ni$ \\in, \\ni 不属于 $\\notin, \\not\\ni$ \\notin, \\not\\ni 文本，正体 $\\text{otherwise}$ \\text{} 欧米伽，omega $\\omega$ \\omega 下划线 $\\underline{ABC}$ \\underline{} 加热，heat $\\triangleq$ \\triangleq 上括号 $\\overbrace{1+2+\\cdots+100}$ \\overbrace{} 积分 $\\int_{0}^{1}e^x\\text{d}x$ \\int_{}^{} 对齐 $\\begin{aligned}f(x) &amp; = (x + 1)^2 \\\\ &amp; = x^2 + 2x + 1\\end{aligned}$ \\begin{aligned}\\end{aligned} 双重积分 $\\iint_{S}^{T}\\text{d}x\\text{d}y$ \\iint_{}^{} 三重积分 $\\iiint_{S}^{T}\\text{d}x\\text{d}y\\text{d}z$ \\iiint_{}^{} 曲面积分 $\\oint_{C}x^3\\text{d}x$ \\oint_{} 极限，limit $\\lim_{n\\to\\infty}x_n$，$\\lim\\limits_{n\\to\\infty}x_n$ \\lim_{}, \\lim\\limits_{} 下括号 $\\underbrace{1+2+\\cdots+100}$ \\underbrace{}","categories":[{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"备忘录","slug":"杂笔/备忘录","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"tags":[{"name":"LaTeX","slug":"LaTeX","permalink":"https://leverimmy.top/tags/LaTeX/"}]},{"title":"【学习笔记】DLX 学习笔记","slug":"【学习笔记】DLX-学习笔记","date":"2020-03-16T02:39:11.000Z","updated":"2020-07-05T23:35:23.427Z","comments":true,"path":"2020/03/16/【学习笔记】DLX-学习笔记/","link":"","permalink":"https://leverimmy.top/2020/03/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91DLX-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"DLX 指使用 Dancing Links 优化后的 X 算法，在随机情况下能极快速地解决精确覆盖问题。","text":"DLX 指使用 Dancing Links 优化后的 X 算法，在随机情况下能极快速地解决精确覆盖问题。 问题引入 就在刚才，你的同学终于写完了 P4205 『NOI2005』智慧珠游戏，并向你展示了他的 500+ 行的代码。 小时候，你玩智慧珠；长大后，智慧珠玩你，你准备怎么办？ 就在刚才，你的同学码力全开写完了 P1784 数独，感觉有了暴力搜索，他就能 AK 学生会组织的所有数独比赛。 面对数独，你不愿去打那恼人的暴力，你又准备怎么办？ 精确覆盖问题 定义： 精确覆盖问题 (Exact Cover Problem) 是指给定许多集合 $S_i (1 \\le i \\le n)$ 以及一个集合 $X$，求满足以下条件的无序多元组 $(T_1, T_2, \\cdots , T_m)$： (1) $\\forall i, j \\in [1, m],T_i\\bigcap T_j = \\varnothing (i \\neq j)$ (2) $X = \\bigcup\\limits_{i = 1}^{m}T_i$ (3) $\\forall i \\in[1, m], T_i \\in {S_1, S_2, \\cdots, S_n}$ 例如，若给出 $$\\begin{aligned} &amp; S_1 = {5, 9, 17} \\\\ &amp; S_2 = {1, 8, 119} \\\\ &amp; S_3 = {3, 5, 17} \\\\ &amp; S_4 = {1, 8} \\\\ &amp; S_5 = {3, 119} \\\\ &amp; S_6 = {8, 9, 119} \\\\ &amp; X = {1, 3, 5, 8, 9, 17, 119}\\end{aligned}$$ 则 $(S_1, S_4, S_5)$ 为一组合法解。 问题转化 我们将 $\\bigcup\\limits_{i = 1}^{n}S_i$ 中的所有数离散化，那么可以得到这么一个模型： 给定一个 01 矩阵，你可以选择一些行，使得最终每列都恰好有一个 1。 举个例子，我们对 (2.1) 中的例子进行建模，可以得到这么一个矩阵： $$\\begin{pmatrix} 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1\\end{pmatrix}$$ 其中第 $i$ 行表示着 $S_i$，而这一行的每个数依次表示 $[1 \\in S_i],[3 \\in S_i],[5 \\in S_i],\\cdots,[119 \\in S_i]$。 第一个不优秀的做法： 我们可以枚举选择哪些行，最后检查这个方案是否合法。 因为每一行都有选或者不选两种状态，所以枚举行的时间复杂度是 $O(2^n)$ 的； 而每次检查都需要 $O(nm)$ 的时间复杂度。所以总的复杂度是 $O(nm\\cdot2^n)$。 Code 123456789101112131415161718192021int ok = 0;for(int state = 0; state &lt; 1 &lt;&lt; n; ++state) &#123; // 枚举每行是否被选 for(int i = 1; i &lt;= n; ++i) if((1 &lt;&lt; i - 1) &amp; state) for(int j = 1; j &lt;= m; ++j) a[i][j] = 1; int flag = 1; for(int j = 1; j &lt;= m; ++j) for(int i = 1, bo = 0; i &lt;= n; ++i) if(a[i][j]) &#123; if(bo) flag = 0; else bo = 1; &#125; if(!flag) continue; else &#123; ok = 1; for(int i = 1; i &lt;= n; ++i) if((1 &lt;&lt; i - 1) &amp; state) printf(\"%d \", i); puts(\"\"); &#125; memset(a, 0, sizeof(a));&#125;if(!ok) puts(\"No solution.\"); 第二个不那么优秀的做法： 考虑到 01 矩阵的特殊性质，我们可以把每一行都看做成一个 $m$ 位二进制数。 因此被转化为了 给你 $n$ 个 $m$ 位二进制数，要求选择一些数，使得任意两个数的与都为0，且所有数的或为 $2^m - 1$。 tmp 表示的是截至目前的所有被选择了的 $m$ 位二进制数的或。 因为每一行都有选或者不选两种状态，所以枚举行的时间复杂度是 $O(2^n)$ 的； 而每次计算 tmp 都需要 $O(n)$ 的时间复杂度。所以总的复杂度是 $O(n\\cdot2^n)$。 Code 123456789101112131415161718int ok = 0;for(int i = 1; i &lt;= n; ++i) for(int j = m; j &gt;= 1; --j) num[i] = num[i] &lt;&lt; 1 | a[i][j];for(int state = 0; state &lt; 1 &lt;&lt; n; ++state) &#123; int tmp = 0; for(int i = 1; i &lt;= n; ++i) if((1 &lt;&lt; i - 1) &amp; state) &#123; if(tmp &amp; num[i]) break; tmp |= num[i]; &#125; if(tmp == (1 &lt;&lt; m) - 1) &#123; ok = 1; for(int i = 1; i &lt;= n; ++i) if((1 &lt;&lt; i - 1) &amp; state) printf(\"%d \", i); puts(\"\"); &#125;&#125;if(!ok) puts(\"No solution.\"); X 算法刚才的暴力实在是太菜了！连 $1 \\le n,m \\le 200$ 都跑不过…… Donald E. Knuth 提出了一个叫做 X 算法 (Algorithm X) 的东西，其思想与刚才的暴力差不多，但是方便优化。 继续以 (2.1) 中提到的例子为载体，我们得到的是一个这样的 01 矩阵： $$\\begin{pmatrix} 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1\\end{pmatrix}$$ 此时第一行有 $3$ 个 $1$，第二行有 $3$ 个 $1$，第三行有 $3$ 个 $1$，第四行有 $2$ 个 $1$，第五行有 $2$ 个 $1$，第六行有 $3$ 个 $1$。选择第一行，将它删除，并将所有 $1$ 所在的列打上标记； $$ \\begin{pmatrix} \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ 1 &amp; 0 &amp; \\color{Red}0 &amp; 1 &amp; \\color{Red}0 &amp; \\color{Red}0 &amp; 1 \\\\ 0 &amp; 1 &amp; \\color{Red}1 &amp; 0 &amp; \\color{Red}0 &amp; \\color{Red}1 &amp; 0 \\\\ 1 &amp; 0 &amp; \\color{Red}0 &amp; 1 &amp; \\color{Red}0 &amp; \\color{Red}0 &amp; 0 \\\\ 0 &amp; 1 &amp; \\color{Red}0 &amp; 0 &amp; \\color{Red}0 &amp; \\color{Red}0 &amp; 1 \\\\ 0 &amp; 0 &amp; \\color{Red}0 &amp; 1 &amp; \\color{Red}1 &amp; \\color{Red}0 &amp; 1 \\end{pmatrix} $$ 选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记； $$ \\begin{pmatrix} \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ 1 &amp; 0 &amp; \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 1 \\\\ \\color{Red}0 &amp; \\color{Red}1 &amp; \\color{Blue}1 &amp; \\color{Red}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Red}0 \\\\ 1 &amp; 0 &amp; \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 0 \\\\ 0 &amp; 1 &amp; \\color{Blue}0 &amp; 0 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 1 \\\\ \\color{Red}0 &amp; \\color{Red}0 &amp; \\color{Blue}0 &amp; \\color{Red}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Red}1 \\end{pmatrix} $$ 选择所有被标记的行，将它们删除； $$ \\begin{pmatrix} \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ 1 &amp; 0 &amp; \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 1 \\\\ \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ 1 &amp; 0 &amp; \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 0 \\\\ 0 &amp; 1 &amp; \\color{Blue}0 &amp; 0 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; 1 \\\\ \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 \\end{pmatrix} $$ 这表示表示我们选择了一行，且这一行的所有 $1$ 所在的列不能有其他 $1$ 了。 于是我们得到了这样的一个新的小 01 矩阵：$$\\begin{pmatrix} 1 &amp; 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 1\\end{pmatrix}$$ 此时第一行（原来的第二行）有 $3$ 个 $1$，第二行（原来的第四行）有 $2$ 个 $1$，第三行（原来的第五行）有 $2$ 个 $1$。选择第一行（原来的第二行），将它删除，并将所有 $1$ 所在的列打上标记； $$ \\begin{pmatrix} \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 \\\\ \\color{Red}1 &amp; 0 &amp; \\color{Red}1 &amp; \\color{Red}0 \\\\ \\color{Red}0 &amp; 1 &amp; \\color{Red}0 &amp; \\color{Red}1 \\end{pmatrix} $$ 选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记； $$ \\begin{pmatrix} \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 \\\\ \\color{Blue}1 &amp; \\color{Red}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ \\color{Blue}0 &amp; \\color{Red}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 \\end{pmatrix} $$ 选择所有被标记的行，将它们删除； $$ \\begin{pmatrix} \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 \\\\ \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 \\end{pmatrix} $$ 于是我们得到了一个空矩阵。但是上次删除的行 “1 0 1 1” 不是全 $1$ 的，说明选择有误； $$\\begin{pmatrix}\\end{pmatrix}$$ 回溯到步骤 $4$，我们考虑选择第二行（原来的第四行），将它删除，并将所有 $1$ 所在的列打上标记； $$ \\begin{pmatrix} \\color{Red}1 &amp; 0 &amp; \\color{Red}1 &amp; 1 \\\\ \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ \\color{Red}0 &amp; 1 &amp; \\color{Red}0 &amp; 1 \\end{pmatrix} $$ 选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记； $$ \\begin{pmatrix} \\color{Blue}1 &amp; \\color{Red}0 &amp; \\color{Blue}1 &amp; \\color{Red}1 \\\\ \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; 1 \\end{pmatrix} $$ 选择所有被标记的行，将它们删除； $$ \\begin{pmatrix} \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}1 \\\\ \\color{Blue}1 &amp; \\color{Blue}0 &amp; \\color{Blue}1 &amp; \\color{Blue}0 \\\\ \\color{Blue}0 &amp; 1 &amp; \\color{Blue}0 &amp; 1 \\end{pmatrix} $$ 于是我们得到了这样的一个矩阵：$$\\begin{pmatrix} 1 &amp; 1\\end{pmatrix}$$ 此时第一行（原来的第五行）有 $2$ 个 $1$，将它们全部删除，我们得到了一个空矩阵：$$\\begin{pmatrix}\\end{pmatrix}$$ 上一次删除的时候，删除的是全 $1$ 的行，因此成功，算法结束。 答案即为我们删除的三行：$1, 4, 5$。 强烈建议自己模拟一遍矩阵删除、还原与回溯的过程后再接着阅读下文。 我们可以概括出 X 算法的过程： 对于现在的矩阵 $M$，选择并标记一列 $r$，将 $r$ 添加至 $S$ 中； 如果尝试了所有的 $r$ 却无解，则算法结束，输出无解。 标记与 $r$ 相关的行 $r_i$ 和 $c_i$； 删除所有标记的行和列，得到新矩阵 $M’$； 如果 $M’$ 为空，且 $r$ 为全 $1$ 的，则算法结束，输出被删除的行组成的集合 $S$； 如果 $M’$ 为空，且 $r$ 不为全 $1$ 的，则恢复与 $r$ 相关的行 $r_i$ 以及列 $c_i$，跳转至步骤 $1$； 如果 $M’$ 不为空，则跳转至步骤 $1$； 不难看出，X 算法需要大量的 “删除行”、“删除列” 和 “恢复行”、“恢复列” 的操作。 Donald E. Knuth 想到了用双向十字链表来维护这些操作。 而在双向十字链表上不断跳跃的过程被形象地比喻成“跳跃”，因此被用来优化 X 算法的双向十字链表也被称为 “Dancing Links”。 Dancing Links 优化的 X 算法 预编译命令 这句话太好用了 1#define IT(i, A, x) for(i = A[x]; i != x; i = A[i]) 定义 既然是双向十字链表，那么一定是有四个指针域的：一个指上方的元素，一个指下方的元素，一个指左边的元素，一个指右边的元素。而每个元素 $i$ 在整个双向十字链表系中都对应着一个格子，因此还要表示 $i$ 所在的列和所在的行。像这样： 是不是非常简单？ 而其实大型双向链表其实是长这样的： 每一行都有一个行首指示，每一列都有一个列指示。 行首指示为 first[]，列指示是我们虚拟出的 $c + 1$ 个结点。 同时，每一列都有一个 siz[] 表示这一列的元素个数。 特殊地，$0$ 号结点无右结点等价于这个 Dancing Links 为空。 1234static const int MS = 1e5 + 10;int n, m, idx, first[MS + 10], siz[MS + 10];int L[MS + 10], R[MS + 10], U[MS + 10], D[MS + 10];int col[MS + 10], row[MS + 10]; $\\text{remove(c)}$ 操作 $\\text{remove(c)}$ 表示在 Dancing Links 中删除第 $c$ 列以及与其相关的行和列。 我们先将 $c$ 删除，此时： (1) $c$ 左侧的结点的右结点应为 $c$ 的右结点； (2) $c$ 右侧的结点的左结点应为 $c$ 的左结点。 即 L[R[c]] = L[c], R[L[c]] = R[c];。 然后我们要顺着这一列往下走，把走过的每一行都删掉。 如何删掉每一行呢？枚举当前行的指针 $j$，此时： (1) $j$ 上方的结点的下结点应为 $j$ 的下结点； (2) $j$ 下方的结点的上结点应为 $j$ 的上结点。 注意要修改每一列的元素个数。 即 U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]];。 因此 $\\text{remove(c)}$ 的代码实现就非常简单了： 其中第一个 IT(i, D, c) 等价于 for(i = D[c]; i != c; i = D[i])，即在顺着这一列从上往下遍历； 第二个 IT(j, R, i) 等价于 for(j = R[i]; j != i; j = R[j])，即在顺着这一行从左往右遍历。 123456void remove(const int &amp;c) &#123; int i, j; L[R[c]] = L[c], R[L[c]] = R[c]; IT(i, D, c) IT(j, R, i) U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]];&#125; $\\text{recover(c)}$ 操作 $\\text{recover(c)}$ 表示在 Dancing Links 中还原第 $c$ 列以及与其相关的行和列。 $\\text{recover(c)}$ 即 $\\text{remove(c)}$ 的逆操作，在这里就不多赘述了。 值得注意的是， $\\text{recover(c)}$ 的所有操作的顺序与 $\\text{remove(c)}$ 的操作恰好相反。 在这里给出 $\\text{recover(c)}$ 的代码实现： 123456void recover(const int &amp;c) &#123; int i, j; IT(i, U, c) IT(j, L, i) U[D[j]] = D[U[j]] = j, ++siz[col[j]]; L[R[c]] = R[L[c]] = c;&#125; $\\text{build(r, c)}$ 操作 $\\text{build(r, c)}$ 表示新建一个大小为 $r \\times c$，即有 $r$ 行，$c$ 列的 Dancing Links。 我们新建 $c + 1$ 个结点，为列指示。 第 $i$ 个点的左结点为 $i - 1$，右结点为 $i + 1$，上结点为 $i$，下结点为 $i$。 特殊地， $0$ 结点的左结点为 $c$，$c$ 结点的右结点为 $0$。 于是我们得到了一条链： 12345678910void build(const int &amp;r, const int &amp;c) &#123; n = r, m = c; for(int i = 0; i &lt;= c; ++i) &#123; L[i] = i - 1, R[i] = i + 1; U[i] = D[i] = i; &#125; L[0] = c, R[c] = 0, idx = c; memset(first, 0, sizeof(first)); memset(siz, 0, sizeof(siz));&#125; 这样就初始化了一个 Dancing Links。 $\\text{insert(r, c)}$ 操作 $\\text{insert(r, c)}$ 表示在第 $r$ 行，第 $c$ 列插入一个结点。 我们分两种情况来操作： (1) 如果第 $r$ 行没有元素，那么直接插入一个元素，并使 $first(r)$ 指向这个元素； (2) 如果第 $r$ 行有元素，那么将这个新元素 用一种奇异的方式 与 $c$ 和 $first(r)$ 连接起来。 对于 (1)，我们可以通过 first[r] = L[idx] = R[idx] = idx; 来实现； 对于 (2)，（我们称这个新元素为 $idx$）： 我们把 $idx$ 插入到 $c$ 的正下方，此时： (1) $idx$ 下方的结点为原来 $c$ 的下结点； (2) $idx$ 下方的结点（即原来 $c$ 的下结点）的上结点为 $idx$; (3) $idx$ 的上结点为 $c$； (4) $c$ 的下结点为 $idx$。 注意记录 $idx$ 的所在列和所在行，以及更新这一列的元素个数。 12col[++idx] = c, row[idx] = r, ++siz[c];U[idx] = c, D[idx] = D[c], U[D[c]] = idx, D[c] = idx; 强烈建议读者完全掌握这几步的顺序后再继续阅读本文。 我们把 $idx$ 插入到 $first(r)$ 的正右方，此时： (1) $idx$ 右侧的结点为原来 $first(r)$ 的右结点； (2) 原来 $first(r)$ 右侧的结点的左结点为 $idx$； (3) $idx$ 的左结点为 $first(r)$； (4) $first(r)$ 的右结点为 $idx$。 12L[idx] = first[r], R[idx] = R[first[r]];R[first[r]] = idx, L[R[first[r]]] = idx; 强烈建议读者完全掌握这几步的顺序后再继续阅读本文。 对于 $\\text{insert(r, c)}$ 这个操作，我们可以画图来辅助理解： 留心曲线箭头的方向。 在这里给出 $\\text{insert(r, c)}$ 的代码： 123456789void insert(const int &amp;r, const int &amp;c) &#123; row[++idx] = r, col[idx] = c, ++siz[c]; U[idx] = D[idx] = c, U[D[c]] = idx, D[c] = idx; if(!first[r]) first[r] = L[idx] = R[idx] = idx; else &#123; L[idx] = first[r], R[idx] = R[first[r]]; L[R[first[r]]] = idx, R[first[r]] = idx; &#125;&#125; $\\text{dance()}$ 操作 $\\text{dance()}$ 即为递归地删除以及还原各个行列的过程。 (1) 如果 $0$ 号结点没有右结点，那么矩阵为空，记录答案并返回； (2) 选择列元素个数最少的一列，并删掉这一列； (3) 遍历这一列所有有 $1$ 的行，枚举它是否被选择； (4) 递归调用 $\\text{dance()}$，如果可行，则返回；如果不可行，则恢复被选择的行； (5) 如果无解，则返回； 在这里给出 $\\text{dance()}$ 的代码实现： 12345678910111213141516bool dance(int dep) &#123; int i, j, c = R[0]; if(!R[0]) &#123; ans = dep; return 1; &#125; IT(i, R, 0) if(siz[i] &lt; siz[c]) c = i; remove(c); IT(i, D, c) &#123; stk[dep] = row[i]; IT(j, R, i) remove(col[j]); if(dance(dep + 1)) return 1; IT(j, L, i) recover(col[j]); &#125; recover(c); return 0;&#125; 其中 stk[] 用来记录答案。 注意我们每次优先选择列元素个数最少的一列进行删除，这样能保证程序具有一定的启发性（乱扯的），是搜索树分支最少（不会证）。 时间复杂度分 (luàn) 析 (chě)DLX 的时间复杂度是 指数级 的，它递归及回溯的次数与矩阵中 $1$ 的个数有关，与矩阵的 $r, c$ 等参数无关。 因此理论复杂度大概在 $O(c^n)$ 左右，其中 $c$ 为某个非常接近于 $1$ 的常数，$n$ 为矩阵中 $1$ 的个数。 但实际情况下 DLX 表现良好，一般能解决大部分的问题。 如何建模DLX 的难点，除了垃圾链表连这连那就是建模。 请确保已经完全掌握 DLX 模板后再继续阅读本文。 我们每拿到一个题，应该考虑行和列所表示的意义： 行表示 决策，因为每行对应着一个集合，也就对应着选 / 不选； 列表示 状态，因为第 $i$ 列对应着某个条件 $P_i$。 对于某一行而言，由于不同的列的值不尽相同，我们 由不同的状态，定义了一个决策。 【洛谷】 P1784 数独 题目链接 解析 先考虑决策是什么。在这一题中，每一个决策可以用形如 $(r, c, w)$ 的有序三元组表示。注意到 “宫” 并不是决策的参数，因为它 可以被每个确定的 $(r, c)$ 表示。因此有 $9 \\times 9 \\times 9 = 729$ 行。再考虑状态是什么。我们思考一下 $(r, c, w)$ 这个决将会造成什么影响。记 $(r, c)$ 所在的宫为 $b$。(1) 第 $r$ 行用了一个 $w$（用 $9 \\times 9 = 81$ 列表示）；(2) 第 $c$ 列用了一个 $w$（用 $9 \\times 9 = 81$ 列表示）；(3) 第 $b$ 宫用了一个 $w$（用 $9 \\times 9 = 81$ 列表示）；(4) $(r, c)$ 中填入了一个数（用 $9 \\times 9 = 81$ 列表示）。因此有 $81 \\times 4 = 324$ 列，共 $729 \\times 4 = 2916$ 个 $1$。至此，我们成功地将 $9 \\times 9$ 的数独问题转化成了一个有 $729$ 行，$324$ 列，共 $2916$ 个 $1$ 的精确覆盖问题。 【洛谷】 P1074 靶形数独 题目链接 解析 这一题与 (5.1) 的模型构建 一模一样，主要区别在于答案的更新。这一题可以开一个权值数组，每次找到一组数独的解时，每个位置上的数乘上对应的权值计入答案即可。 【洛谷】 P4205 『NOI2005』智慧珠游戏 题目链接 解析 终于，我们打到了大 boss。定义：题中给我们的智慧珠的形态，称为这个智慧珠的 标准形态。显然，我们可以通过改变两个参数 $d$（表示顺时针旋转 $90^{\\circ}$ 的次数）和 $f$（是否水平翻转）来改变这个智慧珠的形态。仍然，我们先考虑决策是什么。在这一题中，每一个决策可以用形如 $(v, d, f, i)$ 的有序五元组表示。表示第 $i$ 个智慧珠的 标准形态 的左上角的位置，序号为 $v$，经过了 $d$ 次顺时针转 $90^{\\circ}$。巧合的是，我们可以令 $f = 1$ 时不水平翻转，$f = -1$ 时水平翻转，从而达到简化代码的目的。因此有 $55 \\times 4 \\times 2 \\times 12 = 5280$ 行。需要注意的是，因为一些不合法的填充，如 $(1, 0, 1, 4)$，所以在实际操作中，空的智慧珠棋盘也只需要建出 $2730$ 行。再考虑状态是什么。这一题的状态比较简单。我们思考一下，$(v, d, f, i)$ 这个决策会造成什么影响。(1) 某些格子被占了（用 $55$ 列表示）；(2) 第 $i$ 个智慧珠被用了（用 $12$ 列表示）。因此有 $55 + 12 = 67$ 列，共 $5280 \\times (5 + 1) = 31680$ 个 $1$。至此，我们成功地将智慧珠游戏转化成了一个有 $5280$ 行，$67$ 列，共 $31680$ 个 $1$ 的精确覆盖问题。 练习 SP1110 SUDOKU - Sudoku 题目链接 『kuangbin带你飞』专题三 Dancing Links 题表链接 总结DLX 能用来解决精确覆盖问题，而适当地建立起模型后能解决一些毒瘤的大模拟。 参考资料 [1]英雄哪里出来 的 《夜深人静写算法（九）- Dancing Links X（跳舞链）》 [2]万仓一黍 的 《跳跃的舞者，舞蹈链（Dancing Links）算法——求解精确覆盖问题》 [3]zhangjianjunab 的 《DLX 算法一览》 [4]静听风吟。的 《搜索：DLX 算法》 [5]刘汝佳，陈锋 的 《算法竞赛入门经典：训练指南》","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"杂项","slug":"学习笔记/杂项","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"DLX","slug":"DLX","permalink":"https://leverimmy.top/tags/DLX/"},{"name":"搜索","slug":"搜索","permalink":"https://leverimmy.top/tags/%E6%90%9C%E7%B4%A2/"}]},{"title":"【洛谷】P2774 方格取数问题","slug":"【洛谷】P2774-方格取数问题","date":"2020-02-28T13:53:46.000Z","updated":"2020-07-03T09:50:52.674Z","comments":true,"path":"2020/02/28/【洛谷】P2774-方格取数问题/","link":"","permalink":"https://leverimmy.top/2020/02/28/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2774-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个 $m$ 行 $n$ 列的矩阵 $M$，在这个矩阵中取出一些数，每取出一个数后，在之后的操作中禁止取与它 相邻 的方格中的数。求取出的数的和的最大值。 $1 \\le m, n \\le 100$，$1 \\le M_{i, j} \\le 10^5$。 题目链接","text":"题意简述：给定一个 $m$ 行 $n$ 列的矩阵 $M$，在这个矩阵中取出一些数，每取出一个数后，在之后的操作中禁止取与它 相邻 的方格中的数。求取出的数的和的最大值。 $1 \\le m, n \\le 100$，$1 \\le M_{i, j} \\le 10^5$。 题目链接 解题思路：我们将整个棋盘进行黑板染色，就像国际象棋一样。 对于每个点 $(i, j)$，如果 $i + j$ 为奇数，那么就染成白的；否则，染成黑的。 这样我们就可以以颜色来建二分图。 如果是个白点，我们就连超级源点，容量为点权； 如果是个黑点，我们就连超级汇点，容量为点权。 两个互斥的点之间我们连 $\\inf$。 这样，总点权和 - 最小割即为答案。 参考代码： Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;bits/stdc++.h&gt;const int oo = 0x3f3f3f3f;const int N = 100 + 5;const int M = 1e5 + 5;int m, n, s, t, cnt, sum, max_flow;int first[M], cur[M], dep[M], a[N][N];struct EDGE &#123; int to, _next, wt;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w) &#123; e[cnt].to = v, e[cnt].wt = w; e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool bfs(int st, int ed) &#123; std::queue &lt;int&gt; q; memset(dep, 0, sizeof(dep)); q.push(st), dep[st] = 1; while(!q.empty()) &#123; int x = q.front(); q.pop(); for(int i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to) if(e[i].wt &amp;&amp; !dep[y]) &#123; dep[y] = dep[x] + 1; q.push(y); if(y == ed) return 1; &#125; &#125; return 0;&#125;int dinic(int x, int in) &#123; if(x == t) return in; int out = in; for(int &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &amp;&amp; dep[y] == dep[x] + 1) &#123; int cur_flow = dinic(y, std::min(e[i].wt, out)); if(!cur_flow) dep[y] = 0; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; out -= cur_flow; &#125; &#125; return in - out;&#125;int Get(int x, int y) &#123; return (x - 1) * n + y;&#125;bool valid(int x, int y) &#123; return x &gt;= 1 &amp;&amp; x &lt;= m &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= n;&#125;int main() &#123; // freopen(\"test.in\", \"r\", stdin); scanf(\"%d %d\", &amp;m, &amp;n); memset(first, -1, sizeof(first)); s = 0, t = m * n + 1; for(int i = 1; i &lt;= m; ++i) &#123; for(int j = 1; j &lt;= n; ++j) &#123; int num = Get(i, j); scanf(\"%d\", &amp;a[i][j]); if((i + j) &amp; 1) &#123; Add_Edge(s, num, a[i][j]); Add_Edge(num, s, 0); if(valid(i - 1, j)) Add_Edge(num, Get(i - 1, j), oo), Add_Edge(Get(i - 1, j), num, 0); if(valid(i, j - 1)) Add_Edge(num, Get(i, j - 1), oo), Add_Edge(Get(i, j - 1), num, 0); if(valid(i + 1, j)) Add_Edge(num, Get(i + 1, j), oo), Add_Edge(Get(i + 1, j), num, 0); if(valid(i, j + 1)) Add_Edge(num, Get(i, j + 1), oo), Add_Edge(Get(i, j + 1), num, 0); &#125; else &#123; Add_Edge(num, t, a[i][j]); Add_Edge(t, num, 0); &#125; sum += a[i][j]; &#125; &#125; while(bfs(s, t)) &#123; memcpy(cur, first, sizeof(first)); max_flow += dinic(s, oo); &#125; printf(\"%d\", sum - max_flow); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"},{"name":"最大流","slug":"最大流","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"}]},{"title":"【洛谷】P2764 最小路径覆盖问题","slug":"【洛谷】P2764-最小路径覆盖问题","date":"2020-02-27T14:31:00.000Z","updated":"2020-07-03T09:51:48.279Z","comments":true,"path":"2020/02/27/【洛谷】P2764-最小路径覆盖问题/","link":"","permalink":"https://leverimmy.top/2020/02/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2764-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个有向无环图 $G = (V, E)$，求其最小路径覆盖。 $1 \\le \\left|V\\right| \\le 150$，$1 \\le \\left|E\\right| \\le 6\\cdot10^3$。 题目链接","text":"题意简述：给定一个有向无环图 $G = (V, E)$，求其最小路径覆盖。 $1 \\le \\left|V\\right| \\le 150$，$1 \\le \\left|E\\right| \\le 6\\cdot10^3$。 题目链接 解题思路：对于每个有向边 $e = (i, j)$，构造边 $e’ = (x_i, y_j)$ 然后建立一个超级源点和超级汇点，分别连向 $x_i$ 和 $y_i$，然后跑最大流即可。 似乎可以找到所有 方案输出题 的技巧： 对于每条边，我们看它是否流量为 $0$，如果为 $0$，则这个 ”搭配“ 是被选择了的。 记录下这条边的来源以及去处，最后顺着一条链暴力跳即可。 如果有流量且这条边不是辅助边，那么就输出。 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;#define LL long longconst int oo = 0x3f3f3f3f;const int N = 150 + 5;const int M = 6e3 + 5;int n, m, s, t, cnt, max_flow;int first[N &lt;&lt; 1], cur[N &lt;&lt; 1], dep[N &lt;&lt; 1], nxt[N &lt;&lt; 1], vis[N &lt;&lt; 1];struct EDGE &#123; int from, to, _next, wt;&#125; e[M &lt;&lt; 3];void Add_Edge(int u, int v, int w) &#123; e[cnt].from = u; e[cnt].to = v; e[cnt].wt = w; e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool bfs(int st, int ed) &#123; std::queue &lt;int&gt; q; memset(dep, 0, sizeof(dep)); q.push(st), dep[st] = 1; while (!q.empty()) &#123; int x = q.front(); q.pop(); for (int i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to) if (e[i].wt &amp;&amp; !dep[y]) &#123; dep[y] = dep[x] + 1; q.push(y); if (y == t) return 1; &#125; &#125; return 0;&#125;int dinic(int x, int in) &#123; if(x == t) return in; int out = in; for(int &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &amp;&amp; dep[y] == dep[x] + 1) &#123; int cur_flow = dinic(y, std::min(e[i].wt, out)); if(!cur_flow) dep[y] = 0; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; out -= cur_flow; &#125; &#125; return in - out;&#125;int main() &#123; scanf(\"%d %d\", &amp;n, &amp;m); memset(first, -1, sizeof(first)); for (int i = 1; i &lt;= n; ++i) Add_Edge(0, i, 1), Add_Edge(i, 0, 0); for (int i = 1; i &lt;= m; ++i) &#123; int u, v; scanf(\"%d %d\", &amp;u, &amp;v); Add_Edge(u, v + n, 1); Add_Edge(v + n, u, 0); &#125; for (int i = 1; i &lt;= n; ++i) Add_Edge(i + n, n * 2 + 1, 1), Add_Edge(n * 2 + 1, i + n, 0); s = 0, t = 2 * n + 1; while (bfs(s, t)) &#123; memcpy(cur, first, sizeof(first)); max_flow += dinic(s, oo); &#125; for (int i = n &lt;&lt; 1; i &lt;= (n * 2 + m) &lt;&lt; 1; i += 2) &#123; if (!e[i].wt) &#123; nxt[ e[i].from ] = e[i].to - n; vis[ e[i].to - n ] = 1; &#125; &#125; for (int i = 1; i &lt;= n; ++i) if (!vis[i]) &#123; for (int j = i; ; j = nxt[j]) &#123; printf(\"%d \", j); if(!nxt[j]) break; &#125; putchar('\\n'); &#125; printf(\"%d\", n - max_flow); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"}]},{"title":"【洛谷】P2756 飞行员配对方案问题","slug":"【洛谷】P2756-飞行员配对方案问题","date":"2020-02-09T06:16:11.000Z","updated":"2020-07-03T09:53:30.659Z","comments":true,"path":"2020/02/09/【洛谷】P2756-飞行员配对方案问题/","link":"","permalink":"https://leverimmy.top/2020/02/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2756-%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/","excerpt":"题意简述：给定一个二分图 $(V_1, V_2, E)$，求其最大匹配。 $1\\le \\left|V_1\\right|, \\left|V_2\\right| \\le 100$，$1 \\le \\left|E\\right| \\le \\left|V_1\\right|\\cdot\\left|V_2\\right|$。 题目链接","text":"题意简述：给定一个二分图 $(V_1, V_2, E)$，求其最大匹配。 $1\\le \\left|V_1\\right|, \\left|V_2\\right| \\le 100$，$1 \\le \\left|E\\right| \\le \\left|V_1\\right|\\cdot\\left|V_2\\right|$。 题目链接 解题思路：建立超级源点 $S$ 以及 超级汇点 $T$， $S$ 到 $[1, n]$ 的点，$T$ 到 $[m + 1, n]$ 的点都分别连一条容量为 $1$ 的辅助边， 然后如果有 $(u, v)$ 这个配对，那么 $u$ 到 $v$ 再连一条容量为 $1$ 的实际边， 跑最大流就好了。 注意匹配方案的输出方法，检查每条 正向边 的反向边是否有流量， 如果有流量且这条边不是辅助边，那么就输出。 参考代码： Code 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;bits/stdc++.h&gt;#define LL long long#define s (n + 1)#define t (n + 2)const int oo = 0x3f3f3f3f;const int N = 100 + 10;const int M = 1e5 + 10;int n, m, tmpu, tmpv, max_flow;int cnt, first[N], dep[N], cur[N], to[N];struct EDGE &#123; int to, _next, wt;&#125; e[M &lt;&lt; 1];void Add_Edge(int u, int v, int w) &#123; e[cnt].to = v; e[cnt].wt = w; e[cnt]._next = first[u]; first[u] = cnt++;&#125;bool bfs(int u, int v) &#123; memset(dep, 0, sizeof(dep)); std::queue &lt;int&gt; q; q.push(u), dep[u] = 1; while(!q.empty()) &#123; int x = q.front(); q.pop(); for(int i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to) if(e[i].wt &amp;&amp; !dep[y]) &#123; dep[y] = dep[x] + 1; q.push(y); if(y == v) return 1; &#125; &#125; return 0;&#125;int dinic(int x, int in) &#123; if(x == t) return in; int out = in; for(int &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123; int y = e[i].to; if(e[i].wt &amp;&amp; dep[y] == dep[x] + 1) &#123; int cur_flow = dinic(y, std::min(e[i].wt, out)); if(!cur_flow) dep[y] = 0; e[i].wt -= cur_flow; e[i ^ 1].wt += cur_flow; out -= cur_flow; &#125; &#125; return in - out;&#125;int main() &#123; scanf(\"%d %d\", &amp;m, &amp;n); memset(first, -1, sizeof(first)); while(1) &#123; int u, v; scanf(\"%d %d\", &amp;u, &amp;v); if(!~u || !~v) break; Add_Edge(u, v, 1); Add_Edge(v, u, 0); &#125; for(int i = 1; i &lt;= m; ++i) &#123; Add_Edge(s, i, 1); Add_Edge(i, s, 0); &#125; for(int i = m + 1; i &lt;= n; ++i) &#123; Add_Edge(i, t, 1); Add_Edge(t, i, 0); &#125; while(bfs(s, t)) &#123; memcpy(cur, first, sizeof(first)); max_flow += dinic(s, oo); &#125; if(max_flow) &#123; printf(\"%d\\n\", max_flow); for(int i = 0; i &lt; cnt; i += 2) &#123; if(e[i].to != s &amp;&amp; e[i].to != t) if(e[i ^ 1].to != s &amp;&amp; e[i ^ 1].to != t) if(e[i ^ 1].wt != 0) printf(\"%d %d\\n\", e[i].to, e[i ^ 1].to); &#125; &#125; else puts(\"No Solution!\"); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"}],"tags":[{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"},{"name":"最大流","slug":"最大流","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"}]},{"title":"【游记】记游 8102 PION","slug":"【游记】记游-8102-PION","date":"2018-11-25T04:18:21.000Z","updated":"2020-07-03T08:23:08.920Z","comments":true,"path":"2018/11/25/【游记】记游-8102-PION/","link":"","permalink":"https://leverimmy.top/2018/11/25/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91%E8%AE%B0%E6%B8%B8-8102-PION/","excerpt":"就在两周之前，差不多这个时间段，人生中的第一次$NOIP$结束了。 这一次纵然有许多遗憾，也让我获取到了许多经验。","text":"就在两周之前，差不多这个时间段，人生中的第一次$NOIP$结束了。 这一次纵然有许多遗憾，也让我获取到了许多经验。 Day -3屋漏偏逢连夜雨，学校的期中考试竟然在$11.8-11.9$号举行，而$10$号就要$NOIP$了啊！ Day 0在叔叔家复习了模拟、搜索等基本内容。刷了$3$道水题。 Day 1T1 铺设道路我并不知道这是一道原题，因此我打了一个暴力搜索，小样例过了，大样例T了，慌得一批的我出了几组小的数据，过了，然后就没管这一题了。 我发现搜索的基本功很有用，毕竟它能使你暴力弄点分回来。 知道它是原题的我被震惊到了，立志下次NOIP之前要把以前的题都做一遍 我做题的思路大概是这样的：先遍历一遍，如果有地方是零，就左右分别递归 并不知道记录是否为0的book数组的优化是否有用…… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;cstdio&gt;using namespace std;int n,cnt,minn=99999;int d[100010],book[100010];void search(int l,int r)&#123; if(l&gt;=r) &#123; cnt+=d[l]; d[l]=0; return; &#125; int flag=1; for(int i=l;i&lt;=r;i++) if(d[i]==0) &#123; flag=0; book[i]=1; int left=i-1,right=i+1; for(int j=i-1;j&gt;=l;j--) if(book[j]==1) left=j; search(l,left);//左右分别递归 for(int j=i+1;j&lt;=r;j++) if(book[j]==1) right=j; search(right,r);//左右分别递归 &#125; if(flag==1) &#123; cnt++; for(int i=l;i&lt;=r;i++) d[i]--; search(l,r); &#125;&#125;int main()&#123; //freopen(\"road.in\",\"r\",stdin); //freopen(\"road.out\",\"w\",stdout); scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;i++) &#123; scanf(\"%d\",&amp;d[i]); minn=minn&gt;d[i]?d[i]:minn; &#125; for(int i=1;i&lt;=n;i++) d[i]-=minn;//先处理一遍 cnt+=minn; search(1,n); printf(\"%d\",cnt); return 0;&#125; T2 货币系统并不会做这道题，所以就只准备拿前6个测试点的分（可是只得了15分？？？）（肯定有个地方出锅了） 话说 1namespace point_x&#123; &#125; 很好用，这让我的代码可读性很高，很容易调试 T3 赛道修建然而还是不会做 分了namespace的我还是只得了5分 （肯定又有哪里出锅了） 原因暂未查明 普及组T1 标题统计这题甚是奇怪，在我的记忆中……NOIP普及组可是不曾考过字符串的啊 想都没想，5分钟就肝了这道题 考试源代码： 123456789101112131415161718#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;string s;int len;int main()&#123; //freopen(\"title.in\",\"r\",stdin); //freopen(\"title.out\",\"w\",stdout); while(cin&gt;&gt;s) len+=s.length(); cout&lt;&lt;len; return 0;&#125; T2 龙虎斗好复杂的模拟，为介绍清楚背景，CCF花了好多心思啊 不开$long$ $long$会后悔一生的！ 考场上其实我是A了这道题的，但是莫名其妙洛谷只给了我80 考试源代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;cstdio&gt;using namespace std;long long n,m,p1,p2,s1,s2,sum,minn=2000000000;long long c[100010];long long tiger,dragon;long long abs(long long a)&#123; if(a&lt;0) return -a; else return a;&#125;int main()&#123; //freopen(\"fight.in\",\"r\",stdin); //freopen(\"fight.out\",\"w\",stdout); scanf(\"%d\",&amp;n); for(int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;c[i]); scanf(\"%d %d %d %d\",&amp;m,&amp;p1,&amp;s1,&amp;s2); c[p1]+=s1; for(int i=1;i&lt;=m-1;i++) dragon+=(m-i)*c[i]; for(int i=n;i&gt;=m+1;i--) tiger+=(i-m)*c[i]; for(int i=1;i&lt;=n;i++) &#123; if(i&lt;=m) sum=abs(dragon+s2*(m-i)-tiger); else if(i&gt;m) sum=abs(tiger+s2*(i-m)-dragon); if(sum&lt;minn) &#123; minn=sum; p2=i; &#125; else if(sum==minn &amp;&amp; i&lt;=p2) &#123; p2=i; &#125; &#125; printf(\"%d\",p2); return 0;&#125; T3 摆渡车这是道dp题，刚出考场的我就意识到了这一点 可是考场上我却打的是个模拟 在$1$~$m$之间枚举车子出发的时间 于是我们得到了一个$O(m\\times max\\sum\\limits_{i=1}^{n}t_i+n)$的算法： 12345678910111213141516171819202122232425262728293031323334#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;int n,m,maxn=-99999;int t[4000010];long long ans=999999999;int main()&#123; //freopen(\"bus.in\",\"r\",stdin); //freopen(\"bus.out\",\"w\",stdout); scanf(\"%d %d\",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++) &#123; int tim; scanf(\"%d\",&amp;tim); t[tim]++; if(tim&gt;maxn) maxn=tim; &#125; for(int i=0;i&lt;m;i++) &#123; long long tot=0; for(int j=0;j&lt;=maxn;j++) if(t[j]&gt;0) tot+=(m+i-j%m)%m; if(tot&lt;ans) ans=tot; &#125; printf(\"%d\",ans); return 0;&#125; 然而只得了10分。希望有$dalao$能指出错误 T4 对称二叉树当时时间不多了，再加上本来就没想着要得多少分，果断地放弃了正解，而是准备拿前三个测试点 然而事与愿违，我只拿到了前两个测试点得分 普及总分218，（在我们省）还算可以吧 这是我第一次也是最后一次参加普及组，以后要在提高组里被人虐啦！ Day 2T1 旅行dfs裸搜 感觉可以得 50，因为我自己造了几组m=n-1的数据，然而只得了20 感觉还是特判没有判干净吧。 T2 填数游戏考场上手算了几组数据，然而却CE了 原因竟是 1rand() 在#include &lt;cstdlib&gt; 里 这导致我偷鸡不成蚀把米，要记住，下次可不能犯这样的错误啊！本可以在拿15分的。 T3 保卫王国 这道题完全没思路，不说了。 人生中的第一次NOIP就这么过去了，我懂得了许多： 练好基本功，搜索、模拟不能落下 要多熟悉各种基本算法 要多做历年的NOIP真题 NOIP，我们明年再见！","categories":[{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"游记","slug":"杂笔/游记","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E6%B8%B8%E8%AE%B0/"}],"tags":[{"name":"NOIP2018","slug":"NOIP2018","permalink":"https://leverimmy.top/tags/NOIP2018/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"字符串","slug":"学习笔记/字符串","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"题解","slug":"题解","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/"},{"name":"洛谷","slug":"题解/洛谷","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/"},{"name":"CodeForces","slug":"题解/CodeForces","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/CodeForces/"},{"name":"AtCoder","slug":"题解/AtCoder","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/AtCoder/"},{"name":"做题记录","slug":"做题记录","permalink":"https://leverimmy.top/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"},{"name":"CodeForces","slug":"做题记录/CodeForces","permalink":"https://leverimmy.top/categories/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/CodeForces/"},{"name":"POJ","slug":"题解/POJ","permalink":"https://leverimmy.top/categories/%E9%A2%98%E8%A7%A3/POJ/"},{"name":"杂笔","slug":"杂笔","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/"},{"name":"游记","slug":"杂笔/游记","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E6%B8%B8%E8%AE%B0/"},{"name":"数论","slug":"学习笔记/数论","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E8%AE%BA/"},{"name":"杂项","slug":"学习笔记/杂项","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%82%E9%A1%B9/"},{"name":"动态规划","slug":"学习笔记/动态规划","permalink":"https://leverimmy.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"文化课","slug":"文化课","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/"},{"name":"数学","slug":"文化课/数学","permalink":"https://leverimmy.top/categories/%E6%96%87%E5%8C%96%E8%AF%BE/%E6%95%B0%E5%AD%A6/"},{"name":"计划","slug":"杂笔/计划","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E8%AE%A1%E5%88%92/"},{"name":"备忘录","slug":"杂笔/备忘录","permalink":"https://leverimmy.top/categories/%E6%9D%82%E7%AC%94/%E5%A4%87%E5%BF%98%E5%BD%95/"}],"tags":[{"name":"Lyndon 分解","slug":"Lyndon-分解","permalink":"https://leverimmy.top/tags/Lyndon-%E5%88%86%E8%A7%A3/"},{"name":"Duval 算法","slug":"Duval-算法","permalink":"https://leverimmy.top/tags/Duval-%E7%AE%97%E6%B3%95/"},{"name":"最小表示法","slug":"最小表示法","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"},{"name":"前缀函数","slug":"前缀函数","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%87%BD%E6%95%B0/"},{"name":"记忆化","slug":"记忆化","permalink":"https://leverimmy.top/tags/%E8%AE%B0%E5%BF%86%E5%8C%96/"},{"name":"AC 自动机","slug":"AC-自动机","permalink":"https://leverimmy.top/tags/AC-%E8%87%AA%E5%8A%A8%E6%9C%BA/"},{"name":"二分图","slug":"二分图","permalink":"https://leverimmy.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"},{"name":"dsu on tree","slug":"dsu-on-tree","permalink":"https://leverimmy.top/tags/dsu-on-tree/"},{"name":"计算几何","slug":"计算几何","permalink":"https://leverimmy.top/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"},{"name":"余弦定理","slug":"余弦定理","permalink":"https://leverimmy.top/tags/%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86/"},{"name":"暴力","slug":"暴力","permalink":"https://leverimmy.top/tags/%E6%9A%B4%E5%8A%9B/"},{"name":"set","slug":"set","permalink":"https://leverimmy.top/tags/set/"},{"name":"字符串","slug":"字符串","permalink":"https://leverimmy.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"模拟","slug":"模拟","permalink":"https://leverimmy.top/tags/%E6%A8%A1%E6%8B%9F/"},{"name":"组合数学","slug":"组合数学","permalink":"https://leverimmy.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"},{"name":"快速幂","slug":"快速幂","permalink":"https://leverimmy.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"},{"name":"容斥原理","slug":"容斥原理","permalink":"https://leverimmy.top/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"},{"name":"动态规划","slug":"动态规划","permalink":"https://leverimmy.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https://leverimmy.top/tags/CodeForces/"},{"name":"构造","slug":"构造","permalink":"https://leverimmy.top/tags/%E6%9E%84%E9%80%A0/"},{"name":"逆序对","slug":"逆序对","permalink":"https://leverimmy.top/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"},{"name":"线段树","slug":"线段树","permalink":"https://leverimmy.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"},{"name":"换根dp","slug":"换根dp","permalink":"https://leverimmy.top/tags/%E6%8D%A2%E6%A0%B9dp/"},{"name":"KMP","slug":"KMP","permalink":"https://leverimmy.top/tags/KMP/"},{"name":"NOI2014","slug":"NOI2014","permalink":"https://leverimmy.top/tags/NOI2014/"},{"name":"贪心","slug":"贪心","permalink":"https://leverimmy.top/tags/%E8%B4%AA%E5%BF%83/"},{"name":"排序","slug":"排序","permalink":"https://leverimmy.top/tags/%E6%8E%92%E5%BA%8F/"},{"name":"回文树","slug":"回文树","permalink":"https://leverimmy.top/tags/%E5%9B%9E%E6%96%87%E6%A0%91/"},{"name":"HBOI2020","slug":"HBOI2020","permalink":"https://leverimmy.top/tags/HBOI2020/"},{"name":"递归","slug":"递归","permalink":"https://leverimmy.top/tags/%E9%80%92%E5%BD%92/"},{"name":"类欧几里德算法","slug":"类欧几里德算法","permalink":"https://leverimmy.top/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/"},{"name":"高精度","slug":"高精度","permalink":"https://leverimmy.top/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"},{"name":"分治","slug":"分治","permalink":"https://leverimmy.top/tags/%E5%88%86%E6%B2%BB/"},{"name":"技巧","slug":"技巧","permalink":"https://leverimmy.top/tags/%E6%8A%80%E5%B7%A7/"},{"name":"费用流","slug":"费用流","permalink":"https://leverimmy.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"},{"name":"网络流 24 题","slug":"网络流-24-题","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81-24-%E9%A2%98/"},{"name":"最短路","slug":"最短路","permalink":"https://leverimmy.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"},{"name":"倍增","slug":"倍增","permalink":"https://leverimmy.top/tags/%E5%80%8D%E5%A2%9E/"},{"name":"状压","slug":"状压","permalink":"https://leverimmy.top/tags/%E7%8A%B6%E5%8E%8B/"},{"name":"网络流","slug":"网络流","permalink":"https://leverimmy.top/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"},{"name":"Dinic","slug":"Dinic","permalink":"https://leverimmy.top/tags/Dinic/"},{"name":"数学","slug":"数学","permalink":"https://leverimmy.top/tags/%E6%95%B0%E5%AD%A6/"},{"name":"数列","slug":"数列","permalink":"https://leverimmy.top/tags/%E6%95%B0%E5%88%97/"},{"name":"前缀和","slug":"前缀和","permalink":"https://leverimmy.top/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"},{"name":"差分","slug":"差分","permalink":"https://leverimmy.top/tags/%E5%B7%AE%E5%88%86/"},{"name":"生活","slug":"生活","permalink":"https://leverimmy.top/tags/%E7%94%9F%E6%B4%BB/"},{"name":"最大流","slug":"最大流","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"},{"name":"计数","slug":"计数","permalink":"https://leverimmy.top/tags/%E8%AE%A1%E6%95%B0/"},{"name":"最小生成树","slug":"最小生成树","permalink":"https://leverimmy.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"},{"name":"等比数列","slug":"等比数列","permalink":"https://leverimmy.top/tags/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97/"},{"name":"CSP2019S","slug":"CSP2019S","permalink":"https://leverimmy.top/tags/CSP2019S/"},{"name":"LaTeX","slug":"LaTeX","permalink":"https://leverimmy.top/tags/LaTeX/"},{"name":"DLX","slug":"DLX","permalink":"https://leverimmy.top/tags/DLX/"},{"name":"搜索","slug":"搜索","permalink":"https://leverimmy.top/tags/%E6%90%9C%E7%B4%A2/"},{"name":"NOIP2018","slug":"NOIP2018","permalink":"https://leverimmy.top/tags/NOIP2018/"}]}