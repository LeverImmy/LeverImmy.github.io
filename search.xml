<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【CodeForces】CF600E Lomsat gelral</title>
      <link href="/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600E-Lomsat-gelral/"/>
      <url>/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600E-Lomsat-gelral/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一棵大小为 $n$ 的一棵树，每个结点都有一个颜色 $c_i$，每种颜色有一个编号，求树中每个子树的最多的颜色 <strong>编号</strong> 的和。</p><p>$1 \le n, c_i \le 10^5$。</p><p><a href="http://codeforces.com/problemset/problem/600/E" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>设 $\textrm{occ}(i)$ 表示 $i$ 这种颜色出现的次数。</p><p>在处理每个并列的子树时，我们发现每次要清空一次 $\text{occ}$，这很浪费时间；</p><p>但最后一个子树的 $\textrm{occ}$ 不需要清空，可以直接贡献到父亲节点上去。</p><p>考虑 dsu on tree，我们不清空的重儿子所在的子树，直接合并到父亲节点上。</p><hr><p>分析时间复杂度，一个节点被暴力清空，只可能因为它的某个祖先是轻儿子。</p><p>而每条轻链上的节点个数是 $O(\log n)$ 的，于是总复杂度为 $O(n\log n)$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c[N], cnt, first[N];</span><br><span class="line"><span class="keyword">int</span> son[N], occ[N], siz[N], maxocc;</span><br><span class="line">LL sum, ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(y, x);</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        <span class="keyword">if</span>(siz[y] &gt; siz[son[x]])</span><br><span class="line">            son[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    --occ[c[x]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        clear(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line">    ++occ[c[x]];</span><br><span class="line">    <span class="keyword">if</span>(occ[c[x]] &gt; maxocc) &#123;</span><br><span class="line">        maxocc = occ[c[x]];</span><br><span class="line">        sum = c[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(occ[c[x]] == maxocc)</span><br><span class="line">        sum += c[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p || y == g)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        calc(y, x, g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p || y == son[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(y, x);</span><br><span class="line">        clear(y, x);</span><br><span class="line">        sum = maxocc = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(son[x])</span><br><span class="line">        dfs2(son[x], x);</span><br><span class="line">    calc(x, p, son[x]);</span><br><span class="line">    ans[x] = sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v);</span><br><span class="line">        add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dsu on tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF600D Area of Two Circles&#39; Intersection</title>
      <link href="/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600D-Area-of-Two-Circles-Intersection/"/>
      <url>/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600D-Area-of-Two-Circles-Intersection/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>求两个圆的交的面积。</p><p>$-10^9 \le x_1, y_1, x_2, y_2 \le 10^9$，$1 \le r_1, r_2 \le 10^9$。</p><p><a href="http://codeforces.com/problemset/problem/600/D" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>用余弦定理解三角形即可，然后用 $S = \dfrac{1}{2}ab\sin C$ 来求三角形面积，$S = \dfrac{1}{2}\alpha r^2$ 来求扇形面积，相减即可得到答案。</p><p>卡精度。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD long double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LD PI = <span class="built_in">std</span>::<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">LD ra, rb;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">POINT</span> &#123;</span></span><br><span class="line">    LD x, y;</span><br><span class="line">&#125; A, B;</span><br><span class="line"></span><br><span class="line"><span class="function">LD <span class="title">dist</span><span class="params">(POINT a, POINT b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LD <span class="title">solve</span><span class="params">(LD a, LD b, LD c)</span> </span>&#123;</span><br><span class="line">    LD cosC = (a * a + b * b - c * c)/(<span class="number">2</span> * a * b);</span><br><span class="line">    LD angC = <span class="built_in">std</span>::<span class="built_in">acos</span>(cosC) * <span class="number">2</span>;</span><br><span class="line">    LD sin2C = <span class="built_in">std</span>::<span class="built_in">sin</span>(ang2C);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a * a * ang2C / <span class="number">2</span> - a * a * sin2C / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; A.x &gt;&gt; A.y &gt;&gt; ra;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; B.x &gt;&gt; B.y &gt;&gt; rb;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ra &gt; rb)</span><br><span class="line">        <span class="built_in">std</span>::swap(A, B), <span class="built_in">std</span>::swap(ra, rb);</span><br><span class="line">    </span><br><span class="line">    LD dis = dist(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(dis &gt;= ra + rb)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dis + ra &lt;= rb)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.20f"</span>, (<span class="keyword">double</span>)(PI * ra * ra));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.20f"</span>, (<span class="keyword">double</span>)(solve(ra, dis, rb) + solve(rb, dis, ra)));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 余弦定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】「TJOI2010」阅读理解</title>
      <link href="/2020/07/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91%E3%80%8CTJOI2010%E3%80%8D%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
      <url>/2020/07/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91%E3%80%8CTJOI2010%E3%80%8D%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定 $n$ 篇文章和 $m$ 个单词，问每个单词在哪些文章中出现过。</p><p>$1 \le n \le 10^3$，$1 \le m \le 10^4$，每篇文章长度不超过 $5\cdot 10^3$ 个字符，每个单词长度不超过 $20$ 个字符。</p><p><a href="https://www.luogu.com.cn/problem/P3879" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>不难想到用 <code>std::map</code> 来维护这些文章，然后对每个询问而言，遍历所有的 <code>std::map</code>，直接查找是否存在即可。</p><p>但是可恶的毒瘤们卡了空间，于是就可以用 <code>std::set</code> 来维护。</p><p>同样的道理，我们用一些元素类型为 <code>std::string</code> 的 <code>std::set</code> 来维护每篇文章。</p><p>询问直接查 <code>s[i].find(str)</code> 是否等于 <code>s[i].end()</code> 即可。</p><p>挺短的，才 30 行，还比 trie 树好写。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><p>用了较多 <code>std::cin</code> 和 <code>std::cout</code>，开个 O2 就过了。</p><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span> &lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; mp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num; ++j) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">            mp[i].insert(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(mp[j].find(str) != mp[j].end())</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力 </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF600A Extract Numbers</title>
      <link href="/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600A-Extract-Numbers/"/>
      <url>/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600A-Extract-Numbers/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个字符串，你要将其中的「非负整数」串与其他串分离出来，并输出这两堆字符串。</p><p>$1 \le n \le 10^5$。</p><p><a href="https://codeforces.com/contest/600/problem/A" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>如果一个串是空串，我们就补上一个字符 $\$$，然后输出的时候跳过这个字符即可。</p><p>然后在遍历整个 $S$ 的时候，将答案放到两个另外的字符串 $A$ 和 $B$ 中去，最后输出 $A, B$。</p><p>代码实现 <strong>极其细节</strong>，建议自己动手实现一下。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, lens, lena, lenb, firsta = <span class="number">1</span>, firstb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> tmp[N], str[N], S[N], A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch != <span class="string">','</span> &amp;&amp; ch != <span class="string">';'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!lena)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\""</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lena; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == <span class="string">'$'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">putchar</span>(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"\""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!lenb)</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\""</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenb; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(B[i] == <span class="string">'$'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">putchar</span>(B[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flg = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isdigit</span>(S[i]))</span><br><span class="line">            flg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!lens || lens &gt;= <span class="number">2</span> &amp;&amp; S[<span class="number">1</span>] == <span class="string">'0'</span>)</span><br><span class="line">        flg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flg) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!firsta)</span><br><span class="line">            A[++lena] = <span class="string">','</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">            A[++lena] = S[i];</span><br><span class="line">        firsta = <span class="number">0</span>;</span><br><span class="line">        lens = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!firstb)</span><br><span class="line">            B[++lenb] = <span class="string">','</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">            B[++lenb] = S[i];</span><br><span class="line">        firstb = <span class="number">0</span>;</span><br><span class="line">        lens = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">strlen</span>(tmp + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!valid(tmp[<span class="number">1</span>]))</span><br><span class="line">        str[++n] = <span class="string">'$'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!valid(tmp[i]) &amp;&amp; !valid(tmp[i - <span class="number">1</span>]))</span><br><span class="line">            str[++n] = <span class="string">'$'</span>;</span><br><span class="line">        str[++n] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!valid(str[n]))</span><br><span class="line">        str[++n] = <span class="string">'$'</span>;</span><br><span class="line">    <span class="comment">// 添加 '$' 字符来处理空串</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="comment">        putchar(str[i]);</span></span><br><span class="line"><span class="comment">    puts("");*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(valid(str[i]))</span><br><span class="line">            S[++lens] = str[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> flg = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isdigit</span>(S[i]))</span><br><span class="line">                    flg = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(!lens || lens &gt;= <span class="number">2</span> &amp;&amp; S[<span class="number">1</span>] == <span class="string">'0'</span>)</span><br><span class="line">                flg = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(flg) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!firsta)</span><br><span class="line">                    A[++lena] = <span class="string">','</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">                    A[++lena] = S[i];</span><br><span class="line">                firsta = <span class="number">0</span>;</span><br><span class="line">                lens = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!firstb)</span><br><span class="line">                    B[++lenb] = <span class="string">','</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lens; ++i)</span><br><span class="line">                    B[++lenb] = S[i];</span><br><span class="line">                firstb = <span class="number">0</span>;</span><br><span class="line">                lens = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    Output();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AtCoder】ABC171F Strivore</title>
      <link href="/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC171F-Strivore/"/>
      <url>/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC171F-Strivore/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个字符串 $S$ 和数字 $k$，求所有本质不同的字符串 $T$ 的个数，使得 $\left|T\right| = \left|S\right| + k$，且 $S$ 为 $T$ 的 <strong>子序列</strong>。</p><p>$1 \le \left|S\right|, k \le 10^6$。</p><p><a href="https://atcoder.jp/contests/abc171/tasks/abc171_f" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><blockquote><p>令 $n = \left|S\right|, m = \left|S\right| + k$。</p></blockquote><p>正着计算 $S$ 为 $T$ 的子序列时 $T$ 的个数不方便，因此我们可以考虑计算 $S$ 不为 $T’$ 的 <strong>子序列</strong> 时 $T’$ 的个数。</p><p>再用 $26^m$ 减去 $T’$ 的个数，即为 $T$ 的个数。</p><p>$T’$ 中可能包含 $S$ 的前缀 $S[1], S[1..2], S[1..3], \cdots, S[1.. n - 1]$；</p><p>当然，也可能不包含 $S$ 的任意一个前缀，可以看做包含 $S[1\ldots0] = \epsilon$。</p><p>当 $T’$ 中 <strong>仅</strong> 包含 $S[1.. i] \quad i \in [0, n)$ 时，从 $m$ 个位置里选取 $i$ 个位置来填这些字符有 $\dbinom{m}{i}$ 种方法，</p><p>而要求剩下的 $m - i$ 个位置不能包含 $S[i + 1]$ 这个字母（因为包含了就会组成 $S[1..i + 1]$ 这个子序列了），</p><p>因此有 $25^{m - i}$ 种方法。</p><p>答案即为<br>$$<br>26^{m}-\sum_{i = 0}^{n - 1}\binom{m}{i}\cdot25^{m - i}<br>$$<br>值得一提的是，此题的答案与 $S$ 具体是什么无关，只与 $\left|S\right|$ 有关。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> m, fac[M] = &#123; <span class="number">1</span> &#125;, inv[M];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line">LL tot, mis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    __asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span>:<span class="string">"=d"</span>(ret):<span class="string">"a"</span>(ta), <span class="string">"b"</span>(tb), <span class="string">"c"</span>(mod));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> bas, <span class="keyword">int</span> po)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(po) &#123;</span><br><span class="line">        <span class="keyword">if</span>(po &amp; <span class="number">1</span>)</span><br><span class="line">            res = mul(res, bas);</span><br><span class="line">        bas = mul(bas, bas);</span><br><span class="line">        po &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> tn, <span class="keyword">int</span> tm)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul(fac[tn], mul(inv[tm], inv[tn - tm]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %s"</span>, &amp;k, str + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    m = n + k;</span><br><span class="line"></span><br><span class="line">    tot = qpow(<span class="number">26</span>, m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i)</span><br><span class="line">        inv[i] = qpow(fac[i], mod - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        mis = (mis + mul(C(m, i), qpow(<span class="number">25</span>, m - i))) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tot = ((tot - mis) % mod + mod) % mod;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, tot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> AtCoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 容斥原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF598E Chocolate Bar</title>
      <link href="/2020/07/08/%E3%80%90CodeForces%E3%80%91CF598E-Chocolate-Bar/"/>
      <url>/2020/07/08/%E3%80%90CodeForces%E3%80%91CF598E-Chocolate-Bar/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个 $n\times m$ 的矩阵，将 $r\times c$ 的矩阵切成 $r \times c’$ 和 $r\times (c - c’)$ 的矩阵需要 $r^2$ 的花费。</p><p>求切出大小和为 $k$ 的矩阵所需最小花费。</p><p>多组数据。</p><p>$1 \le T \le 40910$，$1 \le n, m \le 30$，$1 \le k \le \min(n\cdot m, 50)$。</p><p><a href="https://codeforces.com/contest/598/problem/E" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>设 $f(x, y, z)$ 表示要从 $x\times y$ 的矩阵中切出大小和为 $z$ 的矩阵所需最小花费。</p><p>我们可以枚举要将 $x\times y$ 切成 $x \times y’$ 和 $x\times (y - y’)$，还是切成 $x’\times y$ 和 $(x - x’)\times y$。</p><p>不难发现转移方程为<br>$$<br>f(x, y, z) = \min<br>\begin{cases}<br> x^2 + f(x, y’, z’) + f(x, y - y’, z - z’) \quad(y’ \in [1, \left\lfloor\dfrac{y}{2}\right\rfloor], z’ \in [0, z])<br> \\<br> y^2 + f(x’, y, z’) + f(x - x’, y, z - z’) \quad(x’ \in [1, \left\lfloor\dfrac{x}{2}\right\rfloor], z’ \in [0, z])<br>\end{cases}<br>$$<br>答案即为 $f(n, m, k)$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">30</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, f[N][M][K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x][y][z])</span><br><span class="line">        <span class="keyword">return</span> f[x][y][z];</span><br><span class="line">    <span class="keyword">if</span>(z == x * y || !z)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x - i; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= z; ++j)</span><br><span class="line">            res = <span class="built_in">std</span>::min(res, y * y + F(i, y, j) + F(x - i, y, z - j));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= y - i; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= z; ++j)</span><br><span class="line">            res = <span class="built_in">std</span>::min(res, x * x + F(x, i, j) + F(x, y - i, z - j));</span><br><span class="line">    <span class="keyword">return</span> f[x][y][z] = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> __tests;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;__tests);</span><br><span class="line">    <span class="keyword">while</span>(__tests--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, F(n, m, k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AtCoder】ABC172E NEQ</title>
      <link href="/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC172E-NEQ/"/>
      <url>/2020/07/08/%E3%80%90AtCoder%E3%80%91ABC172E-NEQ/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>求长度为 $n$，满足以下条件的序列对 $(A, B)$ 的个数：</p><ul><li>$\forall i \in [1, n], A_i \in [1, m], B_i \in [1, m]$</li><li>$\forall i \in [1, n], A_i \neq B_i$</li><li>$\forall 1 \le i &lt; j \le n, A_i \neq A_j, B_i \neq B_j$</li></ul><p>答案对 $10^9 + 7$ 取模。</p><p>$1 \le n \le m \le 5\cdot10^5$。</p><p><a href="https://atcoder.jp/contests/abc172/tasks/abc172_e" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>首先我们可以发现，满足 $\forall i \in S, A_i = B_i$ 的序列对 $(A, B)$ 有 $A_{m}^{\left|S\right|}\cdot\left(A_{m - \left|S\right|}^{n - \left|S\right|}\right)^2$ 个。</p><p>然后根据容斥原理，我们发现答案为 $\sum\limits_{S \subseteq [1, n]}(-1)^{\left|S\right|}\cdot A_{m}^{\left|S\right|}\cdot\left(A_{m - \left|S\right|}^{n - \left|S\right|}\right)^2$。</p><p>（加上 $\left|S\right| = 0$ ，减去 $\left|S\right| = 1$，加上 $\left|S\right| = 2$……）</p><p>枚举子集是不必要的，我们可以从组合意义的角度来处理上式，</p><p>将所有 $\left|S\right| = k$ 的所有子集 $S$ 合并处理，这样的 $S$ 有 $\dbinom{n}{k}$ 个。</p><p>答案即<br>$$<br>\sum_{k = 0}^{n}\binom{n}{k}(-1)^k\cdot A_{m}^{k}\cdot\left(A_{m - k}^{n - k}\right)^2<br>$$</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, fac[N] = &#123; <span class="number">1</span> &#125;, inv[N] = &#123; <span class="number">1</span> &#125;;</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    __asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span>:<span class="string">"=d"</span>(ret):<span class="string">"a"</span>(ta), <span class="string">"b"</span>(tb), <span class="string">"c"</span>(mod));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> bas, <span class="keyword">int</span> po)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(po) &#123;</span><br><span class="line">        <span class="keyword">if</span>(po &amp; <span class="number">1</span>)</span><br><span class="line">            res = mul(res, bas);</span><br><span class="line">        bas = mul(bas, bas);</span><br><span class="line">        po &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> tn, <span class="keyword">int</span> tm)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul(fac[tn], mul(inv[tm], inv[tn - tm]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> tn, <span class="keyword">int</span> tm)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mul(fac[tn], inv[tn - tm]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">    inv[m] = qpow(fac[m], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &gt;= <span class="number">2</span>; --i)</span><br><span class="line">        inv[i - <span class="number">1</span>] = mul(inv[i], i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> flg = (i &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = mul(C(n, i), mul(A(m, i), qpow(A(m - i, n - i), <span class="number">2</span>)));</span><br><span class="line">        ans += flg * tmp;</span><br><span class="line">        ans %= mod, (ans += mod) %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> AtCoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 容斥原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF598C Nearest vectors</title>
      <link href="/2020/07/07/%E3%80%90CodeForces%E3%80%91CF598C-Nearest-vectors/"/>
      <url>/2020/07/07/%E3%80%90CodeForces%E3%80%91CF598C-Nearest-vectors/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定 $n$ 个向量的坐标表示 $(x, y)$，求任意两对向量的夹角的最小值所对应的那两个向量。</p><p>$1 \le n \le 10^5$，$\left|x \right|, \left|y\right| \le 10^4$，$x^2 + y^2 &gt; 0$。</p><p><a href="http://codeforces.com/problemset/problem/598/C" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>首先考虑把所有的向量按照极角排序，但这也是有技巧的。</p><p>考虑把整个坐标系分为 $8$ 个部分：$4$ 个象限和 $4$ 个半坐标轴。</p><p>如果在同一个象限内，就很容易判断出极角的大小关系，否则就直接按照象限与象限之间的位置关系直接比较了。</p><p>注意 <code>std::atan2(a, b)</code> 的用法，它返回坐标表示为 $(b, a)$ 的向量的极角。</p><p>开 <code>long double</code> 枚举两个相邻的向量的极角差的大小即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> PI = <span class="number">3.1415926535897932384626</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ansx, ansy;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quad</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">&#125; <span class="comment">// 得到这个向量在哪里</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">POINT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, x, y;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> deg;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> POINT &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> quad1 = quad(x, y), quad2 = quad(rhs.x, rhs.y);</span><br><span class="line">        <span class="keyword">if</span>(quad1 != quad2)</span><br><span class="line">            <span class="keyword">return</span> quad1 &lt; quad2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> y * rhs.x &lt; x * rhs.y; <span class="comment">// 通过分五类讨论得到的通式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        p[i].id = i;</span><br><span class="line">        p[i].deg = <span class="built_in">atan2</span>(<span class="number">1.0</span> * p[i].y, <span class="number">1.0</span> * p[i].x);</span><br><span class="line">        <span class="keyword">if</span>(p[i].deg &lt; <span class="number">0</span>)</span><br><span class="line">            p[i].deg += <span class="number">2</span> * PI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line">    p[<span class="number">0</span>] = p[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> cur_ans = p[i].deg - p[i - <span class="number">1</span>].deg;</span><br><span class="line">        <span class="keyword">if</span>(cur_ans &lt; <span class="number">0</span>)</span><br><span class="line">            cur_ans += <span class="number">2</span> * PI;</span><br><span class="line">        <span class="keyword">if</span>(cur_ans &lt; ans) &#123;</span><br><span class="line">            ans = cur_ans;</span><br><span class="line">            ansx = p[i].id, ansy = p[i - <span class="number">1</span>].id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, ansx, ansy);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】Educational CodeForces Rounds 汇总</title>
      <link href="/2020/07/07/%E3%80%90CodeForces%E3%80%91Educational-CodeForces-Rounds-%E6%B1%87%E6%80%BB/"/>
      <url>/2020/07/07/%E3%80%90CodeForces%E3%80%91Educational-CodeForces-Rounds-%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>刷不动 AGC，就来刷 EDU 吧。</p><a id="more"></a><table><thead><tr><th align="center">ID</th><th align="center">何时完成</th><th align="center">题解链接</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><a href="https://codeforces.com/contest/598" target="_blank" rel="noopener">Educational Codeforces Round 1</a></td><td align="center">2020.07.08</td><td align="center"><a href="https://leverimmy.top/2020/07/07/%E3%80%90CodeForces%E3%80%91CF598C-Nearest-vectors/">C</a> <a href="https://leverimmy.top/2020/07/08/%E3%80%90CodeForces%E3%80%91CF598E-Chocolate-Bar/">E</a></td><td align="center">代码：<a href="https://codeforces.com/contest/598/submission/86212341" target="_blank" rel="noopener">A</a> <a href="https://codeforces.com/contest/598/submission/86212298" target="_blank" rel="noopener">B</a> <a href="https://codeforces.com/contest/598/submission/86214469" target="_blank" rel="noopener">D</a>；F 是个憨批计算几何，不写。</td></tr><tr><td align="center"><a href="https://codeforces.com/contest/600" target="_blank" rel="noopener">Educational Codeforces Round 2</a></td><td align="center"></td><td align="center"><a href="https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600A-Extract-Numbers/">A</a> <a href="https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600D-Area-of-Two-Circles-Intersection/">D</a> <a href="https://leverimmy.top/2020/07/09/%E3%80%90CodeForces%E3%80%91CF600E-Lomsat-gelral/">E</a></td><td align="center">代码：<a href="https://codeforces.ml/contest/600/submission/86311034" target="_blank" rel="noopener">B</a>；C 是个憨批模拟，不写。</td></tr><tr><td align="center"><a href="https://codeforces.com/contest/609" target="_blank" rel="noopener">Educational Codeforces Round 3</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/612" target="_blank" rel="noopener">Educational Codeforces Round 4</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/616" target="_blank" rel="noopener">Educational Codeforces Round 5</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/620" target="_blank" rel="noopener">Educational Codeforces Round 6</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/622" target="_blank" rel="noopener">Educational Codeforces Round 7</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/628" target="_blank" rel="noopener">Educational Codeforces Round 8</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/632" target="_blank" rel="noopener">Educational Codeforces Round 9</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/652" target="_blank" rel="noopener">Educational Codeforces Round 10</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/660" target="_blank" rel="noopener">Educational Codeforces Round 11</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/665" target="_blank" rel="noopener">Educational Codeforces Round 12</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/678" target="_blank" rel="noopener">Educational Codeforces Round 13</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/691" target="_blank" rel="noopener">Educational Codeforces Round 14</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/702" target="_blank" rel="noopener">Educational Codeforces Round 15</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/710" target="_blank" rel="noopener">Educational Codeforces Round 16</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/762" target="_blank" rel="noopener">Educational Codeforces Round 17</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/792" target="_blank" rel="noopener">Educational Codeforces Round 18</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/797" target="_blank" rel="noopener">Educational Codeforces Round 19</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/803" target="_blank" rel="noopener">Educational Codeforces Round 20</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/808" target="_blank" rel="noopener">Educational Codeforces Round 21</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><a href="https://codeforces.com/contest/813" target="_blank" rel="noopener">Educational Codeforces Round 22</a></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 做题记录 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeForces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1375F Integer Game</title>
      <link href="/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375F-Integer-Game/"/>
      <url>/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375F-Integer-Game/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p><strong>这是一道交互题。</strong></p><p>给定三堆数量分别为 $a, b, c$ 的石子，先手每轮将给后手 $y_i$ 个石子，后手将这些石子合并到某一堆里。</p><p>后手不能在相邻的两轮中将先手给的石子合并到同一堆里，如果有两堆石子个数相同，则先手胜；若经过 $1000$ 轮后先手仍未获得胜利，则后手胜。</p><p>如果是你，你怎么保证你必胜？</p><p>$1 \le a, b, c \le 10^9$，$1 \le y \le 10^{11}$，保证 $a, b, c$ 两两不同。</p><p><a href="https://codeforces.com/contest/1375/problem/F" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>不妨设 $a &lt; b &lt; c$，三堆名称分别为 $A, B, C$，可以证明，先手能在 $3$ 轮之内获胜。</p><p>取 $y_1 = 2c - a - b$：</p><ul><li><p>若后手合并到 $A$ 中，则此时三堆石子分别为：$2c - b, b, c$。</p><p>取 $y_2 = c - b$，则无论是合并到 $B$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。</p></li><li><p>若后手合并到 $B$ 中，则此时三堆石子分别为：$a, 2c - a, c$。</p><p>取 $y_2 = c - a$，则无论是合并到 $A$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。</p></li><li><p>若后手合并到 $C$ 中，则此时三堆石子分别为 $a, b, 3c - a - b$。</p><p>显然此时有 $a &lt; b &lt; 3c - a - b$，令 $a’ = a, b’ = b, c’ = 3c - a - b$，则取 $y_2 = 6c - 3a - 3b$：</p><ul><li><p>若后手合并到 $a$ 中，则此时三堆石子分别为：$6c - 2a - 3b, b, 3c - a - b$。</p><p>取 $y_3 = 3c - a - 2b$，则无论是合并到 $B$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。</p></li><li><p>若后手合并到 $b$ 中，则此时三堆石子分别为：$a, 6c - 3a - 2b, 3c - a - b$。</p><p>取 $y_3 = 3c - 2a - b$，则无论是合并到 $A$ 中，还是 $C$ 中，都会导致有两堆石子个数相同。</p></li></ul></li></ul><p>至此，先手必胜。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line">LL a[<span class="number">4</span>], x;</span><br><span class="line"><span class="keyword">int</span> rk[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(LL tx, LL ty)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[tx] &lt; a[ty];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>], &amp;a[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"First"</span>), fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::sort(rk + <span class="number">1</span>, rk + <span class="number">4</span>, cmp);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">2</span> * a[rk[<span class="number">3</span>]] - a[rk[<span class="number">1</span>]] - a[rk[<span class="number">2</span>]]), fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x) &amp;&amp; x) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == rk[<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[rk[<span class="number">3</span>]] - a[rk[<span class="number">2</span>]]), fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x == rk[<span class="number">2</span>])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[rk[<span class="number">3</span>]] - a[rk[<span class="number">1</span>]]), fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[rk[<span class="number">3</span>]] += <span class="number">2</span> * a[rk[<span class="number">3</span>]] - a[rk[<span class="number">1</span>]] - a[rk[<span class="number">2</span>]];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">2</span> * a[rk[<span class="number">3</span>]] - a[rk[<span class="number">1</span>]] - a[rk[<span class="number">2</span>]]), fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1375E Inversion SwapSort</title>
      <link href="/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375E-Inversion-SwapSort/"/>
      <url>/2020/07/07/%E3%80%90CodeForces%E3%80%91CF1375E-Inversion-SwapSort/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个长度为 $n$ 的序列 $a$，求 $a$ 中的所有逆序对 $(i_1, j_1), (i_2, j_2), \cdots, (i_m, j_m)$ 的一个排列 $p$，</p><p>使得依次交换 $(a_{i_{p_1}}, a_{j_{p_1}}), (a_{i_{p_2}}, a_{j_{p_2}}), \cdots, (a_{i_{p_m}}, a_{j_{p_m}})$ 后序列单调不降。</p><p>$1 \le n \le 10^3$，$1 \le a_i \le 10^9$。</p><p><a href="https://codeforces.com/contest/1375/problem/E" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>首先我们考虑对一个排列 $q$ 怎么处理，令 $\textrm{pos}[x] = i,\textrm{s.t. }a_i = x$。</p><p>我们可以每次先将最大的安排好，然后将次大的安排好……以此类推。</p><p>第 $i$ 轮操作我们尝试着把第 $i$ 大的元素（也就是 $i$）归位（也就是放到第 $i$ 个位置）。</p><p>此时我们已经处理完了$[i + 1, n]$，第 $i$ 个位置上的元素是 $q_i$，但本来这个地方应该放 $i$。</p><p>那么 $q_i + 1, q_i + 2, \cdots, i$ 和 $q_i$ 都构成逆序对，</p><p>显然，依次交换 $(\textrm{pos}[q_i + 1], i), (\textrm{pos}[q_i + 2], i), \cdots, (\textrm{pos}[i], i)$ 可以将 $i$ 归位。</p><p>而且我们交换的这些位置，都构成逆序对。</p><hr><p>然后我们考虑存在 $i &lt; j, a_i = a_j$ 的情况怎么转化为上面的排列。</p><p>我们强行规定 $i &lt; j, a_i = a_j$ 时有 $a_i$ 排在 $a_j$ 前面，即 <strong>按照值为第一关键字、数组下标为第二关键字</strong> 将 $a$ 进行重新标号。</p><p>这样就将 $a$ 转化为了一个排列；容易看出，这样修改后，逆序对的个数并没有改变。</p><p>总的时间复杂度为 $O(n^2)$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cntAns, a[N], pos[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PAIR</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ff, ss;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> PAIR &amp;rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ff == rhs.ff)</span><br><span class="line">            <span class="keyword">return</span> ss &lt; rhs.ss;</span><br><span class="line">        <span class="keyword">return</span> ff &lt; rhs.ff;</span><br><span class="line">    &#125;</span><br><span class="line">    PAIR(<span class="keyword">int</span> _f = <span class="number">0</span>, <span class="keyword">int</span> _s = <span class="number">0</span>) &#123;</span><br><span class="line">        ff = _f, ss = _s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; b[N], ans[N * N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        b[i] = PAIR(a[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        b[i].ff = b[i - <span class="number">1</span>].ff + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        a[b[i].ss] = b[i].ff;</span><br><span class="line">    <span class="comment">// turned into a permutation</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        pos[ a[i] ] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = a[i] + <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> p1 = pos[j];</span><br><span class="line">            <span class="keyword">int</span> p2 = i;</span><br><span class="line">            </span><br><span class="line">            pos[a[p1]] = p2;</span><br><span class="line">            pos[a[p2]] = p1;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">std</span>::swap(a[p1], a[p2]);</span><br><span class="line">            ans[++cntAns] = PAIR(p1, p2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cntAns);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntAns; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans[i].ff, ans[i].ss);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力 </tag>
            
            <tag> 逆序对 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1326E Bombs</title>
      <link href="/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1326E-Bombs/"/>
      <url>/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1326E-Bombs/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定两个长度均为 $n$ 的排列 $p, q$。对一个初始为空的集合 $S$ 进行如下操作：</p><ul><li>对于每个 $i$ ，将 $p_i$ 放入集合；</li><li>如果 $i$ 被 <strong>标记</strong> 了，则此时将 $S$ 中最大的数删除。</li></ul><p>求 $n$ 次操作后 $S$ 中最大的数。</p><p>排列 $q$ 的意义是，对于每个 $i$，询问将 $q_1, q_2 \cdots q_{i-1}$ 都标记之后的上述操作的结果。</p><p>$1 \le n \le 3\cdot 10^5$。</p><p><a href="http://codeforces.com/problemset/problem/1326/E" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>注意到一个性质，就是答案从左至右是单调不增的。</p><p>很好理解，因为当一个炸弹爆炸的时候总会删除 $A$ 中的最大值而不是次大值，利用反证法即可得到答案单调不增。</p><p>因此我们可以维护当前答案 $ans$，若 $ans$ 被从 $A$ 中删掉就 $ans \gets ans - 1$。</p><p>考虑什么时候 $ans$ 会从 $A$ 中被删掉。</p><p>如果我们希望 $ans$ 被留下来，那么必须满足在 $ans$ 右边 <strong>存在</strong> 一个 $i$ 使得 $i$ 及以后的炸弹数 <strong>小于</strong> $i$ 及以后大于 $ans$ 的数的个数。</p><p>也就是说，$i$ 及以后的炸弹炸不够 $ans$。</p><p>因此我们只需要考虑是否 <strong>所有</strong> 的位置 $i$ 都有 $i$ 及以后的炸弹数 <strong>都大于等于</strong> $i$ 及以后大于 $ans$ 的数的个数。</p><p>维护每个位置 $i$ 及以后的炸弹数与大于 $ans$ 的数的个数的差，然后如果最大值小于等于 $0$，则 $ans \gets ans - 1$。</p><p>记 $\textrm{rev}(x) = i, \textrm{s.t. }p_i = x$。</p><p>每个炸弹在处理的时候就是区间修改 $[1, q_i]$ 上的值减一，当 $ans \gets ans - 1$ 的时候要区间修改 $[1, \textrm{rev}(ans - 1)]$ 上的值加一。</p><p>因为我们是实时更新的，所以每次输出 $ans$ 即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p[N], q[N], rev[N], ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEGTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> lc[MS], rc[MS], dat[MS], tag[MS];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        dat[p] = <span class="built_in">std</span>::max(dat[p &lt;&lt; <span class="number">1</span>], dat[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        lc[p] = l, rc[p] = r, dat[p] = tag[p] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(p &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        build(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[p]) &#123;</span><br><span class="line">            tag[p &lt;&lt; <span class="number">1</span>] += tag[p], tag[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[p];</span><br><span class="line">            dat[p &lt;&lt; <span class="number">1</span>] += tag[p], dat[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[p];</span><br><span class="line">            tag[p] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= lc[p] &amp;&amp; rc[p] &lt;= r) &#123;</span><br><span class="line">            tag[p] += v, dat[p] += v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        spread(p);</span><br><span class="line">        <span class="keyword">int</span> mid = lc[p] + rc[p] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)</span><br><span class="line">            add(p &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">        <span class="keyword">if</span>(mid &lt; r)</span><br><span class="line">            add(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">        pushup(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= lc[p] &amp;&amp; rc[p] &lt;= r)</span><br><span class="line">            <span class="keyword">return</span> dat[p];</span><br><span class="line">        spread(p);</span><br><span class="line">        <span class="keyword">int</span> mid = lc[p] + rc[p] &gt;&gt; <span class="number">1</span>, res = inf;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid)</span><br><span class="line">            res = <span class="built_in">std</span>::max(res, query(p &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">if</span>(mid &lt; r)</span><br><span class="line">            res = <span class="built_in">std</span>::max(res, query(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">        rev[p[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    t.build(<span class="number">1</span>, <span class="number">1</span>, n), t.add(<span class="number">1</span>, <span class="number">1</span>, rev[n], <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans = n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        t.add(<span class="number">1</span>, <span class="number">1</span>, q[i], <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span>(t.query(<span class="number">1</span>, <span class="number">1</span>, n) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            --ans;</span><br><span class="line">            t.add(<span class="number">1</span>, <span class="number">1</span>, rev[ans], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF708C Centroids</title>
      <link href="/2020/07/05/%E3%80%90CodeForces%E3%80%91CF708C-Centroids/"/>
      <url>/2020/07/05/%E3%80%90CodeForces%E3%80%91CF708C-Centroids/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一棵 $n$ 个点的树，你可以删除一条边并增加一条边，形成一棵新树。</p><p>问每个点在进行这样的操作后，是否可能成为新树的重心。</p><p>$1 \le n \le 4\cdot 10^5$。</p><p><a href="https://codeforces.com/problemset/problem/708/C" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>一个不可否认的事实是，如果一个节点 $u$ 是原树的重心，那么它一定可以成为新树的重心。</p><p>如果一个节点 $u$ 有一棵子树 $v$ 的大小大于 $\left\lfloor\dfrac{n}{2}\right\rfloor$，我们可以尝试着将 $v$ 的子树中最大的一棵接到 $u$ 上，看能否使 $u$ 成为重心。</p><p>显然这样的子树 $v$ 对于 $u$ 而言最多只有一个。</p><p>令：<br>$$<br>\begin{aligned}<br> &amp; \textrm{siz}(u) =<br> \begin{cases}<br>  1 &amp; \textrm{son}(u) = \varnothing<br>  \\<br>  \sum\limits_{v \in \textrm{son}(u)}\textrm{siz}(v) &amp; \textrm{son}(u) \neq \varnothing<br> \end{cases}<br> \\<br> &amp; \textrm{maxson}(u) =<br> \begin{cases}<br>  0 &amp; \textrm{son}(u) = \varnothing<br>  \\<br>  \max\limits_{v \in \textrm{son}(u)}\textrm{siz}(v) &amp; \textrm{son}(u) \neq \varnothing<br> \end{cases}<br> \\<br> &amp; f(u, 0) = \max\limits_{v \in \textrm{son}(u)}<br> \begin{cases}<br>  \textrm{siz}(v) &amp; \textrm{siz}(v) \le \left\lfloor\dfrac{n}{2}\right\rfloor<br>  \\<br>  f(v, 0) &amp; \textrm{otherwise}<br>  \end{cases}<br> \\<br> &amp; f(u, 1) = \mathop{\operatorname{second max}}\limits_{v \in \textrm{son}(u)}<br> \begin{cases}<br>  \textrm{siz}(v) &amp; \textrm{siz}(v) \le \left\lfloor\dfrac{n}{2}\right\rfloor<br>  \\<br>  f(v, 0) &amp; \textrm{otherwise}<br> \end{cases}<br> \\<br> &amp; g(u) = \mathop{\operatorname{argmax}}\limits_{v \in \textrm{son}(u)}<br> \begin{cases}<br>  \textrm{siz}(v) &amp; \textrm{siz}(v) \le \left\lfloor\dfrac{n}{2}\right\rfloor<br>  \\<br>  f(v, 0) &amp; \textrm{otherwise}<br> \end{cases}<br>\end{aligned}<br>$$<br>至此，我们求出来了每个节点 $u$ 的重儿子 $\textrm{son}(u)$，最大的小于 $\left\lfloor\dfrac{n}{2}\right\rfloor$ 的子树 $g(u)$ 以及其大小 $f(u, 0)$，次大的小于 $\left\lfloor\dfrac{n}{2}\right\rfloor$ 的子树大小 $f(u, 1)$ 。</p><p>对一个节点 $u$ 求上述所有值的时间复杂度为 $O(n)$。</p><p>那么如何解决问题呢？</p><p>考虑换根dp，用 $h(u)$ 来维护不是 $u$ 的子树中，小于等于 $\left\lfloor\dfrac{n}{2}\right\rfloor$ 的最大子树大小。</p><p>令：<br>$$<br>u = \textrm{parent}(v), h(v) = \max\{<br>\begin{cases}<br> n - \textrm{siz}(u) &amp; n - \textrm{siz}(u) \le \left\lfloor\dfrac{n}{2}\right\rfloor<br> \\<br> h(u) &amp; n - \textrm{siz}(u) &gt; \left\lfloor\dfrac{n}{2}\right\rfloor<br> \\<br> f(u, 1) &amp; g(u) = v<br> \\<br> f(u, 0) &amp; g(u) \neq v<br>\end{cases}<br>\}<br>$$<br>这样我们就可以用 $h(u)$ 来解决「原来 $v$ 是 $u$ 的孩子但现在 $u$ 是 $v$ 的孩子」的情况了。</p><p>最后，对于每个点：</p><ul><li><p>如果 $\textrm{siz}(\textrm{maxson}(u)) &gt; \left\lfloor\dfrac{n}{2}\right\rfloor$</p><p>我们就只需要检查 $\textrm{siz}(\textrm{maxson}(u)) - f(\textrm{maxson}(u), 0)$ 是否小于等于 $\left\lfloor\dfrac{n}{2}\right\rfloor$ 即可；</p></li><li><p>如果 $n - \textrm{siz}(u) &gt; \left\lfloor\dfrac{n}{2}\right\rfloor$</p><p>我们就只需要检查 $n - \textrm{siz}(u) - h(u)$ 是否小于等于 $\left\lfloor\dfrac{n}{2}\right\rfloor$ 即可；</p></li></ul><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">8e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt, first[N], siz[N], maxson[N], f[N][<span class="number">2</span>], g[N], h[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    siz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(y, x);</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        <span class="keyword">if</span>(siz[y] &gt; siz[maxson[x]])</span><br><span class="line">            maxson[x] = y;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cur = (siz[y] &lt;= n / <span class="number">2</span>) ? siz[y] : f[y][<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(cur &gt; f[x][<span class="number">0</span>]) &#123;</span><br><span class="line">            f[x][<span class="number">1</span>] = f[x][<span class="number">0</span>];</span><br><span class="line">            f[x][<span class="number">0</span>] = cur;</span><br><span class="line">            g[x] = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; f[x][<span class="number">1</span>])</span><br><span class="line">            f[x][<span class="number">1</span>] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    ans[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(siz[maxson[x]] &gt; n / <span class="number">2</span>)</span><br><span class="line">        ans[x] = (siz[maxson[x]] - f[maxson[x]][<span class="number">0</span>] &lt;= n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n - siz[x] &gt; n / <span class="number">2</span>)</span><br><span class="line">        ans[x] = (n - siz[x] - h[x] &lt;= n / <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(y == p)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cur = (n - siz[x] &lt;= n / <span class="number">2</span>) ? (n - siz[x]) : h[x];</span><br><span class="line">        </span><br><span class="line">        h[y] = <span class="built_in">std</span>::max(h[y], cur);</span><br><span class="line">        h[y] = <span class="built_in">std</span>::max(h[y], f[x][g[x] == y]);</span><br><span class="line">        </span><br><span class="line">        dfs2(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        add(u, v), add(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 换根dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1200E Compress Words</title>
      <link href="/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1200E-Compress-Words/"/>
      <url>/2020/07/05/%E3%80%90CodeForces%E3%80%91CF1200E-Compress-Words/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定 $n$ 个字符串 $S_1, S_2, \cdots S_n$，从左至依次合并两个字符串 $S_i, S_{i + 1}\quad(i &lt; n)$。</p><p>每次合并时，找到最大的 $j$，使得 $S_i$ 长度为 $j$ 的后缀等于 $S_{i + 1}$ 长度为 $j$ 的前缀，将 $S_{i + 1}$ 替换为 $\overline{S_iS_{i+1}[j+1..\left|S_{j + 1}\right|]}$。</p><p>求所有操作都进行完后的 $S_n$。</p><p>$1 \le n \le 10^5$，$1 \le \sum\left|S_i\right| \le 10^6$。</p><p><a href="http://codeforces.com/problemset/problem/1200/E" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>设当前答案为 $S$，我们要把 $T$ 与 $S$ 合并，令 $\sum\left|S_i\right| = m$。</p><p>则我们要求 $\overline{T\$S}$ 的最长公共前后缀的长度 $q$，然后把 $T[q+1..\left|T\right|]$ 补充到 $S$ 之后即可。</p><p>但有一个小细节，若每次我们都构造出 $\overline{T\$S}$，那么时间复杂度是 $O(m^2)$ 的，因为 $S$ 最坏可达到 $m^2$ 级别。</p><p>注意到一个性质，令 $p = \min\{\left|S\right|, \left|T\right|\}$，则 $q \le p$，我们每次只用构造出 $\overline{T\$S[1..p]}$ 即可。</p><p>不难发现这样时间复杂度为 $O(m)$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, pi[M], lenans, lenx, leny;</span><br><span class="line"><span class="keyword">char</span> ans[M], x[M], y[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, ans + <span class="number">1</span>);</span><br><span class="line">    lenans = <span class="built_in">strlen</span>(ans + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, x + <span class="number">1</span>);</span><br><span class="line">        lenx = <span class="built_in">strlen</span>(x + <span class="number">1</span>);</span><br><span class="line">        x[++lenx] = <span class="string">'#'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">std</span>::min(lenx, lenans);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenx; ++i)</span><br><span class="line">            y[i] = x[i];</span><br><span class="line">        leny = lenx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = lenans - m + <span class="number">1</span>; i &lt;= lenans; ++i)</span><br><span class="line">            y[++leny] = ans[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>, k = <span class="number">0</span>; j &lt;= leny; ++j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; y[k + <span class="number">1</span>] != y[j])</span><br><span class="line">                k = pi[k];</span><br><span class="line">            <span class="keyword">if</span>(y[k + <span class="number">1</span>] == y[j])</span><br><span class="line">                ++k;</span><br><span class="line">            pi[j] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pi[leny] + <span class="number">1</span>; i &lt;= lenx - <span class="number">1</span>; ++i)</span><br><span class="line">            ans[++lenans] = x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenans; ++i)</span><br><span class="line">        <span class="built_in">putchar</span>(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀函数 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【POJ】1961-Period</title>
      <link href="/2020/07/04/%E3%80%90POJ%E3%80%911961-Period/"/>
      <url>/2020/07/04/%E3%80%90POJ%E3%80%911961-Period/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个长度为 $n$ 的字符串 $S$，$\forall i \in [1, n]$，求<br>$$<br>k \in (1, n], \text{s.t. } \exists x \in \Sigma^{\star}, S_i = x^k<br>$$<br>多组数据。</p><p>$2 \le n \le 10^6$。</p><p><a href="http://poj.org/problem?id=1961" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><div class="note success">            <p>引理：$x^k = S \Longleftrightarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ul><li><p>先证明 $x^k = S \Longrightarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$：</p><p>$\because k\cdot\left|x\right| = n$ 且 $\left|x\right| \ge 1$</p><p>$\therefore k | n$</p><p>若 $x^k = S$，则 $\forall i \in [1, \dfrac{n}{k} - 1], S[(i - 1)\cdot k + 1..i\cdot k] = S[i\cdot k + 1..(i + 1)\cdot k]$。</p><p>则 $S[1..n - k] = S[1..k]^{\dfrac{n}{k} - 1} = S[k + 1..n]$。</p><p>$\therefore x^k = S \Longrightarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$</p></li><li><p>再证明 $x^k = S \Longleftarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$：</p><p>$\because k | n$</p><p>$\therefore k | (n - k)$</p><p>$\therefore k \le n - k$</p><p>$\because S[1..n - k] = S[k + 1..n]$ 且 $k \le n - k$</p><p>$\therefore S[1..k] = S[k + 1..2k]$</p><p>以此类推可得 $S[1..k] = S[k + 1..2k] = S[2k + 1..3k]\cdots$（严谨证明可用数学归纳法）</p><p>此时有 $x = S[1..k]$。</p><p>$\therefore x^k = S \Longleftarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$</p></li></ul><p>综上所述，$x^k = S \Longleftrightarrow [k | n] \land [S[1..n - k] = S[k + 1..n]]$。</p>              </div>            </details><p>假设对于某一个前缀 $S_i$ 有 $S[1..i - k] = S[k + 1..i]$，由引理知 $k$ 即为循环节。</p><p>不难发现此时 $i - k \in \pi^{\star}[i]$，题中要求最短周期，则每周期单位长度要最长，即 $i - k$ 应取 $\pi[i]$。</p><p>记得还要满足 $k | i$，即 $(i - \pi[i]) | i$；此时 $\dfrac{i - \pi[i]}{i}$ 即为最长周期。</p><p>喔，$\pi[i] = 0$ 的情况我们应该跳过。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, kase, pi[N];</span><br><span class="line"><span class="keyword">char</span> S[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">                k = pi[k];</span><br><span class="line">            <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">                ++k;</span><br><span class="line">            pi[i] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, ++kase);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % (i - pi[i]) == <span class="number">0</span> &amp;&amp; i != i - pi[i])</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, i / (i - pi[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀函数 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2375 [NOI2014]动物园</title>
      <link href="/2020/07/04/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2375-NOI2014-%E5%8A%A8%E7%89%A9%E5%9B%AD/"/>
      <url>/2020/07/04/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2375-NOI2014-%E5%8A%A8%E7%89%A9%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个长度为 $n$ 的字符串 $S$，求<br>$$<br>\prod_{i = 2}^{n}(\left|\{x \in \pi^{\star}[i] : x \le \left\lfloor\dfrac{i}{2}\right\rfloor\}\right| + 1)\pmod{10^9 + 7}<br>$$<br>每个测试点有 $T$ 组数据。</p><p>$1 \le T \le 5$，$1 \le n \le 10^6$。</p><p><a href="">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h4><p>一个比较显然的思路是倍增 $\pi$ 数组，然后像求 LCA 一样跳 $k$ 级父亲。</p><p>我们第一步找到满足 $u = \pi^{(j)}[i] \le \left\lfloor\dfrac{i}{2}\right\rfloor$ 的最大值 $u$，然后利用倍增数组求出 $u$ 之和即可。</p><p>不难发现时间复杂度是 $O(Tn\log n)$ 的，有点难卡。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h4><p>我们先求出 $\left|\pi^{\star}[i]\right|$，然后考虑怎么去除掉重叠的前后缀个数。</p><p>对于 $\left|\pi^{\star}[i]\right|$，我们能轻松地求出：<br>$$<br>\left|\pi^{\star}[i]\right| =<br>\begin{cases}<br>1 &amp; \pi[i] = 0<br>\\<br>\left|\pi^{\star}[\pi[i]]\right| + 1 &amp; \pi[i] \neq 0<br>\end{cases}<br>$$<br>我们只需要维护一个小于等于 $\left\lfloor\dfrac{i}{2}\right\rfloor$ 的指针 $k$，每次乘上 $\left|\pi^{\star}[k]\right| + 1$ 就可以了。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code1</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, pi[N], f[<span class="number">21</span>][N];</span><br><span class="line"><span class="keyword">char</span> S[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    __asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span>:<span class="string">"=d"</span>(ret):<span class="string">"a"</span>(ta), <span class="string">"b"</span>(tb), <span class="string">"c"</span>(mod));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">                k = pi[k];</span><br><span class="line">            <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">                ++k;</span><br><span class="line">            pi[i] = k;</span><br><span class="line">            f[<span class="number">0</span>][i] = pi[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                f[j][i] = f[j - <span class="number">1</span>][f[j - <span class="number">1</span>][i]];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = i, cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">20</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                <span class="keyword">if</span>(f[j][u] * <span class="number">2</span> &gt; i)</span><br><span class="line">                    u = f[j][u];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">20</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                <span class="keyword">if</span>(f[j][u]) &#123;</span><br><span class="line">                    cnt += <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">                    u = f[j][u];</span><br><span class="line">                &#125;</span><br><span class="line">            ans = mul(ans, cnt + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details ><summary> <p>Code2</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, pi[N], dep[N] = &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, num[N];</span><br><span class="line"><span class="keyword">char</span> S[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    __asm__ __volatile__ (<span class="string">"\tmull %%ebx\n\tdivl %%ecx\n"</span>:<span class="string">"=d"</span>(ret):<span class="string">"a"</span>(ta), <span class="string">"b"</span>(tb), <span class="string">"c"</span>(mod));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">                k = pi[k];</span><br><span class="line">            <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">                ++k;</span><br><span class="line">            pi[i] = k;</span><br><span class="line">            dep[i] = dep[pi[i]] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">                k = pi[k];</span><br><span class="line">            <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">                ++k;</span><br><span class="line">            <span class="keyword">while</span>(k * <span class="number">2</span> &gt; i)</span><br><span class="line">                k = pi[k];</span><br><span class="line">            ans = mul(ans, dep[k] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀函数 </tag>
            
            <tag> KMP </tag>
            
            <tag> NOI2014 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】KMP 算法学习笔记</title>
      <link href="/2020/06/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91KMP-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91KMP-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>发现自己不会 KMP 的模板了，借此机会复习一下 KMP，顺便更深入地研究前缀函数 $\pi$ 的应用。</p><a id="more"></a><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>为了更方便地描述字符串相关内容，我们做出以下规定：</p><ol><li>字符串通常用 $S, T$ 等表示，$c$ 通常表示一个字符，$\Sigma$ 表示字符集；</li><li>字符串长度用 $\left|S\right|$ 表示；</li><li>字符集大小用 $\left|\Sigma\right|$ 表示；</li><li>$S[l..r]$ 表示 $S[l], S[l + 1], \ldots, S[r - 1], S[r]$；</li><li>空串用 $\epsilon$ 表示；</li><li>$S$ 是 $T$ 的前缀，用 $S \sqsubset T$ 表示；$S$ 是 $T$ 的后缀，用 $S \sqsupset T$ 表示；</li><li>$S$ 的第 $i$ 个前缀，即 $S[1..i]$，用 $S_i$ 表示。</li></ol><p>特殊地，本文的字符串下标、$\pi$ 数组下标 <strong>均从 $1$ 开始</strong>。</p><blockquote><p>一些例子：对于 $S = \mathtt{ABCBAD}$ 而言：</p><ol><li>$\left|S\right| = 6$；</li><li>$\left|\Sigma\right| = 4$；</li><li>$S[2..4] = \mathtt{BCBA}$；</li><li>$S_4 = \mathtt{ABCB}$。</li></ol></blockquote><h3 id="前缀函数数组"><a href="#前缀函数数组" class="headerlink" title="前缀函数数组"></a>前缀函数数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>对于一个字符串 $S$，我们定义其前缀函数 $\pi(S)$ 的值为 $S$ 的最长相等的真前缀和真后缀的长度，即：<br>$$<br>\begin{aligned}<br>\pi(S) &amp; = \mathop{\operatorname{argmax}}\limits_{k &lt; \left|S\right|}\{S[1..k] = S[\left|S\right| - k + 1..\left|S\right|]\}<br>\\<br>&amp; = \mathop{\operatorname{argmax}}\limits_{k &lt; \left|S\right|}\{S_k \sqsupset S\}<br>\end{aligned}<br>$$<br>对于一个字符串 $S$，我们定义其前缀函数数组 $\pi$ 为 $\pi[i] = \pi(S_i)$。</p><div class="note warning">            <p>特殊地，当 $\left|S\right| = 1$ 时 $\pi(S) = \mathop{\operatorname{argmax}}\limits_{k &lt; 1}\{S[1..k] = S[2 - k..1]\}$</p><p>当 $k = 0$ 时 $S[1..0] = S[2..1] = \epsilon$，故 $\pi(S) = 0$。</p>          </div><div class="note success">            <p>性质 1：$\pi(S_i) = \pi[i] &lt; i$。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>由定义知 $\pi[i] &lt; i$，即得证。</p><p align="right">$\blacksquare$ </p>              </div>            </details><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><ol><li><p>根据定义，$\pi[1] = 0$；</p></li><li><p>假设我们循环到了要求 $\pi[i]\quad(i \ge 2)$，令 $k \gets \pi[i - 1]$。</p><p>由 $\pi$ 数组的定义得，此时 $S[1..k] = S[i - k, i - 1]$。</p><p>我们现在要做的，就是从 $\pi[1..i - 1]$ 递推到 $\pi[i]$：</p><p>考虑到 $\pi$ 数组的定义，我们不断地枚举共同的前后缀（即使用 $k = \pi[k]$ 来迭代）。</p><p>结束这个迭代，有且仅有两种情况：$k = 0$ 或 $S[k + 1] = S[i]$。</p><hr><p>对于前者，说明对于字符串 $S[1..i]$，不存在任何两个真前缀与真后缀相同，$\pi[i] = 0$。</p><p>对于后者，说明我们找到了一个 $k$，使得 $S[1..k + 1] = S[i - k..i]$，根据定义，有 $\pi[i] = k + 1$。</p></li><li><p>至此，我们求出了字符串 $S$ 的前缀函数数组 $\pi$。</p></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">char</span>* S)</span> </span>&#123;</span><br><span class="line">    pi[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">            k = pi[k];</span><br><span class="line">       <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">            ++k;</span><br><span class="line">       pi[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h4><div class="note success">            <p>引理 1（后缀重叠引理）：对于 $x, y$ 满足 $x \sqsupset z, y \sqsupset z$ 而言，有</p><ul><li>若 $\left|x\right| \le \left|y\right|$，则 $x \sqsupset y$；</li><li>若 $\left|x\right| \ge \left|y\right|$，则 $y \sqsupset x$；</li><li>若 $\left|x\right| = \left|y\right|$，则 $x = y$。</li></ul>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>过于显然，证明略。</p><p align="right">$\blacksquare$ </p>              </div>            </details><p>设<br>$$<br>\pi^{\star}[q] = \{\pi[q], \pi^{(2)}[q], \cdots, \pi^{(t)}[q]\}<br>$$<br>其中<br>$$<br>\pi^{(i)}[q] = \begin{cases}q &amp; i = 0 \\ \pi[\pi^{(i - 1)}[q]] &amp; i \ge 1\end{cases}<br>$$</p><p>当 $\pi^{(t)}[q] = 0$ 时 $\pi^{\star}[q]$ 中的序列终止。</p><div class="note success">            <p>引理 2（前缀函数迭代引理）：对任意长度为 $n$ 的字符串 $S$，有<br>$$<br>\forall q \in [1, n], \pi^{\star}[q] = \{k: k &lt; q \land S_k \sqsupset S_q\}<br>$$</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ul><li><p>先证明 $\pi^{\star}[q] \subseteq \{k:k &lt; q \land S_k \sqsupset S_q\}$，</p><p>即证明 $\forall x \in \pi^{\star}[q], x &lt; q \land S_x \sqsupset S_q$。</p><p>任取 $x \in \pi^{\star}[q]$，不妨设 $x = \pi^{u}[q] \quad (u &gt; 0)$，下面通过对 $u$ 的数学归纳法证明命题成立。</p><p>（基础）当 $u = 1$ 时，$x = \pi[q]$，由 $\pi$ 数组的定义可知 $\pi[q] &lt; q \land S_{\pi[q]} \sqsupset S_q$。</p><p>（假设）假设当 $u = v$ 时 $\pi^{v}[q] &lt; q \land S_{\pi^{v}[q]} \sqsupset S_q$。</p><p>（推导）则当 $u = v + 1$ 时，$\pi^{v + 1}[q] = \pi[\pi^{v}[q]] &lt; \pi^{v}[q] &lt; q$（性质 1）；$S_{\pi^{v + 1}[q]} \sqsupset S_{\pi^{v}[q]} \sqsupset S_q$（由性质 1 得到下标的大小关系，由引理 1 得到前缀之间的关系）</p><p>因此 $\forall x \in \pi^{\star}[q], x &lt; q \land S_x \sqsupset S_q$。</p></li><li><p>再证明 $\{k:k &lt; q \land S_k \sqsupset S_q\} \subseteq \pi^{\star}[q]$，</p><p>即证明 $\forall x \in \{k:k &lt; q \land S_x \sqsupset S_q\}, x \in\pi^{\star}[q]$</p><p>考虑使用反证法来证明命题成立。</p><p>假设集合 $M = \{k:k &lt; q \land S_k \sqsupset S_q\} - \pi^{\star}[q]$ 非空，$j$ 是 $M$ 中的最大值。</p><p>$\because$ $\pi[q]$ 是 $\{k:k &lt; q \land S_x \sqsupset S_q\}$ 中的最大值，且 $j \in \{k:k &lt; q \land S_x \sqsupset S_q\}$</p><p>$\therefore j &lt; \pi[q], S_j \sqsupset S_q$</p><p>又 $\because \pi[q] \in \pi^{\star}[q]$</p><p>$\therefore \exists j’ \in \pi^{\star}[q], \text{s.t. }j’ &gt; j$</p><p>设 $j’$ 表示 $\pi^{\star}[q]$ 中比 $j$ 大的最小整数。</p><p>$\because \{k:k &lt; q \land S_k \sqsupset S_q\} \subseteq \pi^{\star}[q]$ 且 $j’ \in \pi^{\star}[q]$</p><p>$\therefore S_{j’} \sqsupset S_q$</p><p>$\because j’ &gt; j$ 且 $j$ 是小于 $j’$ 的最大值</p><p>$\therefore S_j \sqsupset S_{j’}$（引理 1）</p><p>由 $\pi$ 数组的定义知 $\pi[j’] = j$</p><p>$\because j’ \in \pi^{\star}[q]$</p><p>$\therefore j = \pi[j’] \in \pi^{\star}[q]$，与假设矛盾</p><p>因此 $\{k:k &lt; q \land S_k \sqsupset S_q\} \subseteq \pi^{\star}[q]$。</p><p>综上所述，对任意长度为 $n$ 的字符串 $S$，有 $\forall q \in [1, n], \pi^{\star}[q] = \{k: k &lt; q \land S_k \sqsupset S_q\}$。</p><p align="right">$\blacksquare$ </p>              </div>            </details></li></ul><div class="note success">            <p>引理 3：对任意长度为 $n$ 的字符串 $S$，有 $\forall q \in [1, n]$，若 $\pi[q] &gt; 0$，则 $\pi[q] - 1 \in \pi^{\star}[q - 1]$。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>令 $x = \pi[q] &gt; 0$，则 $x &lt; q, S_x \sqsupset S_q$</p><p>$\because x &gt; 0$，则 $x - 1$ 有意义</p><p>$\therefore x - 1 &lt; q - 1, S_{x - 1} \sqsupset S_{q - 1}$（把 $S_x$ 和 $S_q$ 的最后一个字符去掉） </p><p>由引理 2 知 $x - 1 \in \pi^{\star}[q - 1]$</p><p>$\therefore \forall q \in [1, n] \land \pi[q] &gt; 0,\pi[q] - 1 \in \pi^{\star}[q - 1]$</p><p align="right">$\blacksquare$ </p>              </div>            </details><hr><p>对 $q \in [2, n]$ 定义子集 $E_{q - i} \subseteq \pi^{\star}[q - 1]$ 为：</p><p>$$<br>E_{q - 1} = \{k\in\pi^{\star}[q - 1]:S_{k + 1} = S_k\}<br>$$</p><p>则有：</p><p>$$<br>\begin{aligned}<br> E_{q - 1} &amp; = \{k\in\pi^{\star}[q - 1]:S_{k + 1} = S_k\}<br> \\<br> &amp; = \{k: k &lt; q - 1, S_k \sqsupset S_{q - 1}, S[k + 1] = S[q]\}<br> \\<br> &amp; = \{k: k &lt; q - 1, S_{k + 1} \sqsupset S_q\}<br>\end{aligned}<br>$$</p><p>因此，$E_{q - 1}$ 是由 $\pi^{\star}[q - 1]$ 中的值组成的、能满足 $S_{k + 1}$ 与 $S_q$ 的某个后缀相等的 $k$ 组成的集合。</p><div class="note success">            <p>推论 1：对任意长度为 $n$ 的字符串 $S$，有<br>$$<br>\forall q \in [2, n],\pi[q] = \begin{cases}0 &amp; E_{q - 1} = \varnothing \\ 1 + \max\{k \in E_{q - 1}\} &amp; E_{q - 1} \neq \varnothing\end{cases}<br>$$</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ul><li><p>当 $E_{q - 1} = \varnothing$ 时，不存在任何一个 $k \in \pi^{\star}[q - 1]$，使得 $S_{k + 1} \sqsupset S_q$。</p><p>显然此时 $\pi[q]$ 只能为 $0$。</p></li><li><p>当 $E_{q - 1} \neq \varnothing$ 时，</p><ul><li><p>$\forall k \in E_{q - 1}, k &lt; q - 1 \land S_{k + 1} \sqsupset S_q \Longrightarrow k + 1 &lt; q$</p><p>则由 $\pi[q]$ 的定义，$k$ 是拓展到 $S_q$ 的某一后缀的备选项，$\pi[q] \ge 1 + \max\{k \in E_{q - 1}\}$。</p></li><li><p>注意到此时 $\pi[q] &gt; 0$，设 $r = \pi[q] - 1$。</p><p>则 $r + 1 = \pi[q] &lt; q, S_{r + 1} = S_{\pi[q]} \sqsupset S_q$。</p><p>$\because r + 1 &gt; 0$</p><p>$\therefore S_{r + 1} = S_q$</p><p>由引理 3 可得 $r = \pi[q] - 1 \in \pi^{\star}[q - 1]$</p><p>$\therefore r \in E_{q - 1}$</p><p>$\therefore \pi[q] - 1 = r \le \max\{k \in E_{q - 1}\}$</p><p>即 $\pi[q] \le 1 + \max\{k \in E_{q - 1}\}$</p></li></ul><p>综上所述，当 $E_{q - 1} \neq \varnothing$，$\pi[q] = 1 + \max\{k \in E_{q - 1}\}$。</p></li></ul><p align="right">$\blacksquare$ </p>              </div>            </details><hr><p>再来看看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calcPi</span><span class="params">(<span class="keyword">char</span>* S)</span> </span>&#123;</span><br><span class="line">    pi[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(S + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k = <span class="number">0</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; S[k + <span class="number">1</span>] != S[i])</span><br><span class="line">            k = pi[k];</span><br><span class="line">       <span class="keyword">if</span>(S[k + <span class="number">1</span>] == S[i])</span><br><span class="line">            ++k;</span><br><span class="line">       pi[i] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们将使用循环不变式来证明上述代码的正确性。</p><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ul><li><p>初始化</p><p>在第 4 行的迭代开始前，有 $i = 1, k = \pi[i] = 0$，不变式成立。</p></li><li><p>保持</p><p>在每次迭代开始前，有 $k = \pi[i - 1]$：</p><ul><li>若是第一次迭代，此等式由第 4 行保证；</li><li>其余迭代均由第 9 行保证。</li></ul><p>接下来要证明每次迭代结束后均有 $k = \pi[i]$ 成立。</p><p>若 $k \neq \pi[i]$，则会在第 5-8 行将 $k$ 调整至 $\pi[i]$。</p><ul><li>第 5 行的 <code>while</code> 循环遍历每一个 $k \in \pi^{\star}[i - 1]$，直至找到一个 $k$，使得 $S[k + 1] = S[i]$。（引理 2）<ul><li>若找不到这样的值，则在第 7 行 $k = 0$。</li><li>若找到了这样的值，此时 $k$ 为满足条件的集合中的最大值，应将 $\pi[i] \gets k + 1$。（推论 1）</li></ul></li></ul><p>第 9 行的赋值语句使得 $k = \pi[i]$ 恒成立。</p></li><li><p>终止</p><p>当 $i = n + 1$ 时，迭代终止，此时我们求出了 $\pi[1..n]$。</p><p>至此，算法结束。</p></li></ul><p>因此，上述代码实现能正确地求出字符串 $S$ 的前缀函数数组。</p><p align="right">$\blacksquare$ </p>              </div>            </details><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>不难发现，第 7-9 行代码的时间复杂度均为 $O(n)$，唯一棘手的是第 6-7 行代码。</p><p>考虑 $k$ 的变化，$k$ 在第 7-8 行增加的次数不超过 $n$ 次，即 $k \le n$；</p><p>$k$ 在第 6 行的操作中，因为有 $\pi(S_i) &lt; i$ 的性质，导致每次迭代至少使 $k$ 减小 $1$，即最多迭代 $n$ 次。</p><p>综上所述，用上述方法求一个字符串的前缀函数数组的时间复杂度为 $O(n)$。</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>易知用此种方法求前缀函数数组的空间复杂度为 $O(n)$。</p><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><h4 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h4><p>我们举一个例子：用 $S = \mathtt{CCFCCFMONEY}$ 被 $T = \mathtt{CCFCCFSB}$ 匹配。</p><p>我们定义两个指针 $i,k$，表示 $S[i - k..i - 1] = T[1..k]$。</p><p>我们要拓展的，就是 $S[i]$ 与 $T[k + 1]$ 之间的关系。</p><p>首先我们考虑朴素算法的弊端：当你匹配到了 $i = 8, k = 7$ 时：<br>$$<br>\begin{aligned}<br>S &amp; = \mathtt{\color{green}CCFXCCF\color{red}M\color{black}ONEY}<br>\\<br>T &amp; = \mathtt{\color{green}CCFXCCF\color{red}S\color{black}B}<br>\\<br>\text{index} &amp; =\mathtt{123456789}<br>\end{aligned}<br>$$<br>你发现 $S[i] = S[8] = \mathtt{M}$，可 $T[k + 1] = T[8] = \mathtt{S}$，我们前功尽弃，只能将 $T$ 往右平移一格。</p><p>而且要重新开始：$i = 1, k = 1$。<br>$$<br>\begin{aligned}<br>S &amp; = \mathtt{CCFXCCFMONEY}<br>\\<br>T &amp; = \mathtt{\text{ }CCFXCCFSB}<br>\\<br>\text{index} &amp; =\mathtt{123456789}<br>\end{aligned}<br>$$<br>显然朴素算法的时间复杂度为 $O(nm)$。</p><hr><p>再考虑使用前缀函数 $\pi$ 来优化匹配的过程。</p><p>不难求出 $T$ 的前缀数组 $\pi[1..n] = \{0, 1, 0, 0, 1, 2, 3, 0, 0\}$。</p><p>考虑前缀数组的意义：$T_i$ 的最长的相等的前后缀长度。</p><p>你知道了当 $i = 8, k = 7$ 时，有 $S[1..7] = T[1..7]$，而且 $T[1..3] = T[5..7]$。</p><p>在上述的例子中，也就是我们可以把 $T[1..3]$ 这个地方匹配到的 $\mathtt{\color{green}CCF}$ 移动到 $S[5..8]$ 去。</p><p>这样就直接节省了三次移动。</p><hr><p>总结一下使用前缀函数 $\pi$ 时我们的匹配过程：</p><ol><li><p>使用 $i, k$ 来表示当前 $S[i - k..i - 1] = T[1..k]$；</p></li><li><p>如果 $S[i] \neq T[k + 1]$，我们就用 $\pi$ 函数来实现大幅度的跳跃；</p><p>否则 $k’ \gets k + 1$，表示 $S[i - k..i] = T[1..k + 1]$；</p></li><li><p>当 $k = m$ 时，说明找到了一个匹配 $S[i - m + 1..i] = T[1..m]$。</p></li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; T[k + <span class="number">1</span>] != S[i])</span><br><span class="line">k = pi[k];</span><br><span class="line"><span class="keyword">if</span>(T[k + <span class="number">1</span>] == S[i])</span><br><span class="line">++k;</span><br><span class="line"><span class="keyword">if</span>(k == m) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i - m + <span class="number">1</span>); <span class="comment">// S[i - m + 1..i] = T[1..m]</span></span><br><span class="line">k = pi[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正确性-1"><a href="#正确性-1" class="headerlink" title="正确性"></a>正确性</h4><p>可以证明，上述代码实现是正确的。</p><h4 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>依葫芦画瓢地使用求前缀函数数组时的摊还分析方法，不难得出 KMP 算法的时间复杂度为 $O(n + m)$。</p><h4 id="空间复杂度-1"><a href="#空间复杂度-1" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>不难发现 KMP 算法的空间复杂度为 $O(n + m)$。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ol><li><p><a href="https://leverimmy.top/2020/07/04/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2375-NOI2014-%E5%8A%A8%E7%89%A9%E5%9B%AD/">「NOI2014」动物园</a></p></li><li><p><a href="https://leverimmy.top/2020/07/04/%E3%80%90POJ%E3%80%911961-Period/">POJ 1961-Period</a></p></li><li><p><a href="https://leverimmy.top/2020/07/05/【CodeForces】CF1200E-Compress-Words/">CF1200E Compress Words</a></p></li></ol><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>《算法导论》是本好书，上面的算法均有使用循环不变式的正确性证明，很值得一看。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀函数 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1369D TediousLee</title>
      <link href="/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369D-TediousLee/"/>
      <url>/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369D-TediousLee/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>题面比较复杂，建议到原 OJ 上查看。</p><p><a href="https://codeforces.com/contest/1369/problem/D" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>注意到每个 $i$ 级的「爪子」是由两个 $i - 2$ 级的「爪子」（左右两分支）和一个 $i - 1$ 级的「爪子」（中间下面一个分支）组成的。</p><p>每当 $3 | i$ 时，都能多形成一个「爪子」（如图）；所以转移方程是 $f_i = 2f_{i - 2} + f_{i - 1} + 4 \cdot [3 | i]$。</p><p><img src="/gallery/tutorials/CF1369D/level-3.png" alt="一个 3 级的「爪子」"></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">2e6</span>; ++i)</span><br><span class="line">        f[i] = (<span class="number">2L</span>L * f[i - <span class="number">2</span>] + f[i - <span class="number">1</span>] + <span class="number">4</span> * (i % <span class="number">3</span> == <span class="number">0</span>)) % mod;</span><br><span class="line">    <span class="keyword">int</span> __tests;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;__tests);</span><br><span class="line">    <span class="keyword">while</span>(__tests--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        io::read(n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CodeForces】CF1369C RationalLee</title>
      <link href="/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369C-RationalLee/"/>
      <url>/2020/06/24/%E3%80%90CodeForces%E3%80%91CF1369C-RationalLee/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定 $n$ 个价值分别为 $a_i$ 的元素以及 $k$ 个容量分别为 $w_i$ 的背包，其中每个元素的体积均为 $1$。求每个背包内的最大价值与最小价值之和的和的最大值。</p><p>$1 \le n, k \le 2\cdot 10^5$，保证 $\sum w_i = n$。</p><p><a href="https://codeforces.com/contest/1369/problem/C" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>首先，将 $a, w$ 按降序排列。</p><p>当存在 $w_i = 1$ 时，从 $a$ 的较大头开始取 $1$ 个元素分给它。</p><p>其次，将剩下的元素分给其他的 $w$：</p><p>每个容量为 $w_i$ 的背包，从 $a$ 的较大头开始取 $1$ 个、从 $a$ 的较小端取 $w_i - 1$ 个，这样一定保证是最优的。</p><p>为什么这个策略是最优的？</p><ol><li><p>若把较大的 $a_i$ 分给容量大于 $1$ 的背包，显然那个背包的较小值不为 $a_i$，则 $a_i$ 只能被算一次；</p><p>但将 $a_i$ 分给容量为 $1$ 的背包，$a_i$ 将会被算两次，这样一定比某个 $a_j \le a_i$ 的 $j$ 放入这个容量为 $1$ 的背包要不劣。</p></li><li><p>$a$ 从小往大考虑，最小的数一定会被放进某个背包，且这个背包的最小值一定是这个最小的数；</p><p>那么我们就应该尽量地消耗较小的数，从小到大把 $w_i - 2$ 个数也放进这个背包，并配上一个较大的数。</p><p>考虑排序后的 $a_n$ 与 $a_{n - 1}$：</p><ul><li>显然 $a_{n - 1} \le a_{n - 2}$，这导致令 $a_{n - 2}$ 为另一背包的最小元素一定要比 $a_{n - 1}$ 不劣，则我们就应该将 $a_{n - 1}$ 与 $a_n$ 放入同一背包而不是将 $a_{n - 2}$ 与 $a_n$ 放入同一背包。</li><li>剩下的 $a$ 同理。</li></ul></li></ol><p>总的时间复杂度为 $O(n\log n)$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, a[N], w[K];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> __tests;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;__tests);</span><br><span class="line">    <span class="keyword">while</span>(__tests--) &#123;</span><br><span class="line">        io::read(n, k);</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            io::read(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            io::read(w[i]);</span><br><span class="line">        <span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, <span class="built_in">std</span>::greater &lt;<span class="keyword">int</span>&gt; ());</span><br><span class="line">        <span class="built_in">std</span>::sort(w + <span class="number">1</span>, w + k + <span class="number">1</span>, <span class="built_in">std</span>::greater &lt;<span class="keyword">int</span>&gt; ());</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n, ones = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i] &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ans += a[l] * <span class="number">2</span>;</span><br><span class="line">            ++l, ++ones;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k - ones; ++i) &#123;</span><br><span class="line">            ans += a[l] + a[r];</span><br><span class="line">            ++l, r -= (w[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> CodeForces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】EERTREE 学习笔记</title>
      <link href="/2020/06/22/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91EERTREE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/22/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91EERTREE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>EERTREE，又称回文树（Palindrome tree）、回文自动机（PAM），是一种能在 $O(\left|S\right|\log{\left|\Sigma\right|})$ 的时间与 $O(\left|S\right|)$ 的空间内处理与 <strong>回文串</strong> 有关问题的数据结构。</p><blockquote><p>EERTREE 是一个 <strong>回文串</strong>，也许这就是这个数据结构的名字的来历。</p></blockquote><p>回文树的高级应用慢慢写，持续更新。</p><p><a href="https://arxiv.org/pdf/1506.04862v2.pdf" target="_blank" rel="noopener">pdf 论文</a></p><a id="more"></a><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>为了更方便地描述字符串相关内容，我们做出以下规定：</p><ol><li>$S, T$ 通常表示一个字符串，$c$ 通常表示一个字符，$\Sigma$ 表示字符集；</li><li>$\left|S\right|$ 表示字符串长度；</li><li>$\left|\Sigma\right|$ 表示字符集大小；</li><li>$S[l..r]$ 表示 $S[l], S[l + 1], \ldots, S[r - 1], S[r]$；</li><li>$\epsilon$ 表示空串；</li><li>$S \subset T$ 表示 $S$ 为 $T$ 的子串，即  $\exists i \in [1, \left|T\right| - \left|S\right|], \text{s.t. } \forall j \in [1, \left|S\right|], S[j] = T[i + j - 1]$；</li><li>$\overleftarrow{S}$ 表示 $S$ 的翻转，即 $\forall i \in [1, \left|S\right|], \overleftarrow{S[i]} = S[\left|S\right|- i + 1]$；</li><li>$S$ 为回文串当且仅当 $S = \overleftarrow{S}$，即 $\forall i \in [1, \left|S\right|], S[i] = S[\left|S\right| - i + 1]$；</li><li>若 $S$ 为回文串，则定义 $r(S)$ 为其最长回文半径，即 $r(S) = \max\{\left\lfloor\dfrac{\left|T\right| + 1}{2}\right\rfloor\}, T \subset S, T = \overleftarrow{T}$。</li></ol><p>特殊地，本文的字符串下标、回文树内节点编号 <strong>均从 $1$ 开始</strong>。</p><blockquote><p>一些例子：对于 $S = \mathtt{ABCBAD}$ 而言：</p><ol><li>$\left|S\right| = 6$；</li><li>$\left|\Sigma\right| = 4$；</li><li>$S[2..4] = \mathtt{BCBA}$；</li><li>$S[1..4] \subset S[1..5]$；</li><li>$\overleftarrow{S[3..5]} = \mathtt{DAB}$；</li><li>$S[1..5] = \mathtt{ABCBA} = \overleftarrow{S[1..5]}$ 为回文串。</li></ol></blockquote><h3 id="结构、操作与建立"><a href="#结构、操作与建立" class="headerlink" title="结构、操作与建立"></a>结构、操作与建立</h3><h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><p>我们考虑一个长度为 $n$ 的回文串 $S$，令 $P = { T : T = S[i..n - i + 1] \quad i \in [1, \left\lfloor\dfrac{n + 1}{2}\right\rfloor]}$，则 $\forall x \in P, x = \overleftarrow{x}$。</p><p>那么 $\forall x \in P$ 之间又有什么样的关系呢？</p><p>不难发现，一个回文串，是很多 <strong>子回文串层层嵌套</strong> 而成的。</p><p>也就是说，一个回文串，通过 <strong>在两端添加相同的字符</strong>，可以形成一个新的回文串。</p><p>至此，我们寻觅到了回文树上 <strong>边的意义</strong>。</p><p>在回文树中，$u$ 的父亲连向 $u$ 的边上存储着字符 $c$ 的意义是 $u$ 的父亲表示的回文串，在两端加上 $c$ 后，能形成 $u$。</p><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><div class="note success">            <p>引理 1：向 $S$ 末尾添加一个字符 ，最多只会新生成一个回文子串。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>这个子串是 $S$ 的 <strong>最长回文后缀</strong> 末端增加 $c$，且原来的前端恰好也是 $c$，所产生的。</p><p>也就是说，每次在 $S$ 的末尾添加一个字符，最多只会新建一个节点。</p><p align="right">$\blacksquare$ </p>              </div>            </details><p>回文树的内部结构，是一个包含着额外信息的有向图。</p><p>在后文中，我们可能会用回文子串来表示一个节点。</p><p>回文树支持两个操作：$\text{add}(c)$ 和 $\text{eertree}(S)$。</p><ul><li><p>$\text{add}(c)$ 表示在回文树内插入 $c$，返回此次操作新增的回文子串个数。</p><p>通过引理 1，我们可以知道 $\text{add}(c)$ 总是返回 $0$ 或 $1$。</p><p>不难发现，每次 $\text{add}$ 操作之后，我们都能在 $O(1)$ 的时间内得到已经处理了的字符串 $T$ 的最长回文后缀，即 $\text{maxSuf}(T)$。</p></li><li><p>$\text{eertree}(S)$ 表示将 $S$ 内的字符，从左至右逐个插入后形成的回文树。</p></li></ul><div class="note warning">            <p>小结 1：$S$ 中包含的本质不同的回文子串数量为 $\text{eertree}(S)$ 的节点中的最大编号。</p>          </div><p>一棵回文树上的每一个节点上要存储的信息有：</p><ol><li>这个点的序号 $u$；</li><li>表示的回文串的长度 $len_u$；</li><li>从这个点出发的一条标为 $c$ 的出边指向的节点的编号 $ch_{u, c}$；</li><li>回文链接 $fail_u$；</li></ol><p>为了以后的方便，我们需要在初始化的时候新建两个节点，长度和编号分别为 $-1$ 和 $0$。</p><p>$0$ 表示着空串，称之为「偶根」；而 $-1$ 表示着「虚串」，称之为「奇根」。</p><ul><li>偶根（即 $0$）连出的边（如果存在），指向 $cc$，表示在 $\epsilon$ 的两侧同时添加 $c$ 所形成的的字符串为 $cc$；</li><li>奇根（即 $-1$）连出的边（如果存在），指向 $c$，表示原来长度为 $-1$ 的串，在两侧同时添加 $c$ 形成了长度为 $1$ 的字符串 $c$。</li></ul><p>节点 $u$ 连至 $v$ 的回文链接 $fail_u$ 意味着 $v$ 表示的回文串 $S$ 是 $u$ 表示的回文串 $T$ 的次长回文后缀子串（因为最长的是自己本身）。</p><p>我们 <strong>定义</strong> $fail_c = 0, fail_0 = fail_{-1} = -1$。 </p><div class="note success">            <p>引理 2：任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$（注意，这里的「入度」不将「后缀链接」计算在内）。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ol><li><p>若 $len_u = 1$，则其唯一的入边必为 $-1 \to u$；</p></li><li><p>若 $len_u = 2$，则其唯一的入边必为 $0 \to u$；</p></li><li><p>若 $len_u \ge 3$，则其唯一的入边必为 $v \to u$，满足：$v$ 表示的回文子串 $T$ 的两端添加某个字符 $c$ 能使得 $u$ 表示的回文子串 $S$ 满足 $S = cTc$。</p></li></ol><p>综上所述，任一满足 $len_u &gt; 0$ 的节点 $u$ 的入度为 $1$。</p><p align="right">$\blacksquare$ </p>              </div>            </details><div class="note success">            <p>命题 1：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\text{eertree}(S)$ 的空间复杂度为 $O(n)$。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>由引理 1 可知，在 $S$ 的逐步插入过程中，最多会新建 $n$ 个节点；而还有 $2$ 个初始化时新建的节点。</p><p>所以节点个数为最多为 $n + 2$ 个。</p><p>由引理 2 可知，边的个数最多为 $n$ 个；后缀链接最多有 $n$ 个。</p><p>综上所述，建立 $\text{eertree}(S)$ 的空间复杂度为 $O(n)$。</p><p align="right">$\blacksquare$ </p>              </div>            </details><h4 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h4><p>以 $S_0 = \mathtt{EERTREE}$ 为例，我们对它建立一棵回文树。</p><ol><li><p>首先，我们先新建两个点，钦定它们为「奇根 $1$」和「偶根 $0$」。</p><p>一棵空的回文树是这样的（红色边为 $fail$ 边，蓝色边为 $ch$ 边，后同）：</p><p><img src="/gallery/lectures/eertree/ex-null.png" alt="一棵空的 EERTREE"></p></li><li><p>然后我们插入 $\mathtt{E}$，现在 $S = \mathtt{E}$。</p><p><img src="/gallery/lectures/eertree/ex-e.png" alt="插入 &#39;E&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{E}$，现在 $S = \mathtt{EE}$。</p><p><img src="/gallery/lectures/eertree/ex-ee.png" alt="插入 &#39;EE&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{R}$，现在 $S = \mathtt{EER}$。</p><p><img src="/gallery/lectures/eertree/ex-eer.png" alt="插入 &#39;EER&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{T}$，现在 $S = \mathtt{EERT}$。</p><p><img src="/gallery/lectures/eertree/ex-eert.png" alt="插入 &#39;EERT&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{R}$，现在 $S = \mathtt{EERTR}$。</p><p><img src="/gallery/lectures/eertree/ex-eertr.png" alt="插入 &#39;EERTR&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{E}$，现在 $S = \mathtt{EERTRE}$。</p><p><img src="/gallery/lectures/eertree/ex-eertre.png" alt="插入 &#39;EERTRE&#39; 后的 EERTREE"></p></li><li><p>接着我们插入 $\mathtt{E}$，现在 $S = \mathtt{EERTREE}$。</p><p><img src="/gallery/lectures/eertree/ex-eertree.png" alt="插入 &#39;EERTREE&#39; 后的 EERTREE"></p></li></ol><p>我们应该如何实现这个过程呢？</p><div class="note success">            <p>命题 2：建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\log\left|\Sigma\right|)$。</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>在初始化的时候，我们得到了 $\text{eertree}(\epsilon)$，即一个「奇根」和一个「偶根」加上它们的后缀链接。</p><p>对 $S$ 建造回文树的时候，我们会依次向回文树中插入 $S[1], S[2], \ldots, S[n]$。</p><p>我们要使得在每次 $\text{add}$ 操作之后，回文树中的所有节点之间的边以及回文链接都被正确维护。</p><p>考虑进行完了第 $i$ 次操作后的状态，也就是我们已经处理了 $T = S[1, i]$ 的回文树，现在要插入 $c = S[i + 1]$。</p><hr><p>我们现在的目标是寻找 $S[1..i + 1] = Tc$ 的最长回文后缀 $P$。</p><p>显然，要么 $P = c$，要么 $P = cQc$（显然 $Q$ 为 $S[1..i]$ 的某一回文后缀）。</p><p>也就是说，我们需要找到 $T$ 中，以 <strong>开头的前一位</strong> 为 $c$ 的最长回文后缀 $Q$。</p><p>我们从 $\text{maxSuf}(T)$ 开始，沿着回文链接遍历，设当前节点为 $v$，比较 $c$ 和 $T[i - len_v - 1]$。</p><p>怎么理解呢？$T[i - len_v..i - 1]$ 是某一回文串 $Q$，我们要找的，是满足 $Q$ 开头的前一位为 $c$ 的某一回文串。</p><p>也就是要保证 $c = T[i - len_v - 1]$。</p><p>不难发现，特殊地，当 $P = c$ 时，$Q$ 对应的节点为「奇根」。</p><hr><ol><li><p>若 $P = c$：</p><p>检查 $ch_{-1, c}$ 是否存在：</p><ol><li>若不存在，则新建一个节点 $v$，使 $ch_{-1, c} = v, len_v = 1, fail_v = 0$。</li><li>若存在，根据定义，$fail_v = 0$ 不需要更新。</li></ol></li><li><p>若 $P = cQc$：</p><p>设 $Q$ 对应的节点的序号为 $u$。</p><p>检查 $ch_{u, c}$ 是否存在：</p><ol><li><p>若不存在，则新建一个节点 $v$，使 $len_v = len_u + 2$，连接 $u \to v$，还要更新 $fail_v$。</p></li><li><p>若存在，我们只需要考虑更新 $fail_v$。</p></li></ol><p>考虑 $fail_v$ 到底会指向哪里？会指向 $S[1, i + 1] = Tc$ 的次长回文后缀。</p><p>即 $cQc$ 中 <strong>开头的前一位</strong> 为 $c$ 的次长回文后缀 $R$。</p><p>若我们从 $u$ 开始遍历后缀链接，那么找到的会是 $cQc$ 这个最长回文后缀；</p><p>因此我们应从 $fail_u$ 开始遍历，仍然是比较 $c$ 和 $T[i - len_v - 1]$。</p></li></ol><hr><p>接下来我们来分析 $\text{add}$ 操作的时间复杂度。</p><ol><li><p>我们每次检查 $ch_{u, c}$（或是检查 $ch_{-1, c}$）是否存在，需要 $O(\log\left|\Sigma\right|)$ 的时间复杂度（<code>std::map</code> 之类的数据结构实现）</p><p>实际情况下，我们使用子节点数组来实现，单次 $\text{add}$ 的时间复杂度是 $O(\left|\Sigma\right|)$ 的。</p><p>则一共 $n$ 次，共 $O(n \log\left|\Sigma\right|)$。</p></li><li><p>令已经处理了的字符串 $S[1..i] = T$，考虑 $\text{maxSuf}(T)$ 的末尾在 $S$ 中的下标 $j$ 的变化：</p><ul><li><p>一个 $fail$ 的转移会使 $j$ 向左至少移动 $1$ 格；</p></li><li><p>一个 $ch$ 转移会使 $j$ 向右至少移动一格。</p></li></ul><p>在处理整个 $S$ 的过程中，向左最多移动 $n$ 格，也就是最多 $n$ 次；向右最多移动 $n$ 格，也就是最多 $n$ 次。</p><p>因此转移部分的时间复杂度为总共 $O(n)$。</p></li></ol><p>总时间复杂度为 $O(n) + O(n\log\left|\Sigma\right|) = O(n\log\left|\Sigma\right|)$。</p><p>综上所述，建立一个长度为 $n$ 的字符串 $S$ 的回文树 $\text{eertree}(S)$ 的时间复杂度可达到在线 $O(n\log\left|\Sigma\right|)$。</p><p align="right">$\blacksquare$ </p>              </div>            </details><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>后文有吧。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>我们称一个节点 $u$ 是「奇」的，当且仅当 $len_u$ 为奇数；称一个节点 $v$ 是「偶」的，当且仅当 $len_v$ 为偶数。</p><div class="note success">            <p>引理 3：</p><ol><li>一棵回文树本质上是两个弱连通图：以「奇根」和「奇点」构成的一个弱连通子图和以「偶根」和「偶点」构成的一个弱连通子图，且均为树。</li><li>「奇点」和与其相连的边构成的树是 $S$ 右半部分长度为奇数的回文子串构成的 trie；「偶点」和与其相连的边构成的树是 $S$ 右半部分长度为偶数的回文子串构成的 trie。</li><li>一棵回文树中的所有节点与连接在每个节点上的回文链接的反向链接构成一棵有向基环树，其中环为 $-1$ 节点的自环。</li></ol>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <ol><li><p>如果边 $e = u \to v$ 存在，则 $len_v = len_u + 2$，显然 $u, v$ 奇偶性相同，则「奇点」与「偶点」之间互不相通。</p><p>结合引理 2，此性质得证。</p></li><li><p>这是回文树上边的定义和 trie 的定义。</p></li><li><p>注意到，除了 $fail_{-1}$，其他的回文链接均会使 $len$ 减小，且回文树中的每个点均有唯一的后缀链接。</p><p>则每个点都仅有唯一简单路径到达 $-1$，这显然是一棵（带有一个环）的树。</p></li></ol><p align="right">$\blacksquare$ </p>              </div>            </details><div class="note warning">            <p>小结 2：一些基本的字符串数据结构如回文 trie、后缀 trie 的空间复杂度都是 $O(n^2)$ 的；像后缀树和 Compressed trie 这样很复杂的数据结构空间复杂度是 $O(n)$ 的。但回文树这么简明易懂的数据结构的空间复杂度也是 $O(n)$ 的。<del>岂不妙哉？</del> 更重要的是，<strong>一个字符串中本质不同的回文串期望个数</strong> 是 $O(\sqrt{\left|S\right|\cdot\left|\Sigma\right|})$ 的。也就是说，回文树的期望空间复杂度更佳。</p>          </div><div class="note warning">            <p>小结 3：我们定义一个映射 $\theta :\Sigma \to \Sigma, \text{s.t. } \theta^2(S) = S$。我们称一个字符串 $S$ 是 $\theta$-回文的，当且仅当 $S = \theta(\overleftarrow{S})$。一个长度为 $n$ 的字符串 $S$ 的 $\theta$-回文树仍可以在 $O(\left|S\right|\log{\left|\Sigma\right|})$ 的时间与 $O(\left|S\right|)$ 的空间内建立起来。</p>          </div><h3 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h3><ol><li><p><a href="https://www.luogu.com.cn/problem/P3649" target="_blank" rel="noopener">「APIO2014」回文串</a></p><blockquote><p>题意：给定一个长度为 $n$ 的字符串 $S$，求 $\max\{\left|T\right|\cdot \text{occ}(S, T)\}, T \subset S \land T = \overleftarrow{T}$。</p><p>其中 $\text{occ}(S, T)$ 表示 $T$ 在 $S$ 中的出现次数，$1 \le \left|S\right| \le 3 \cdot 10^5$。</p></blockquote></li><li><p><a href="https://drive.google.com/file/d/0B_DHLY8icSyNUzRwdkNFa2EtMDQ" target="_blank" rel="noopener">「MIPT Fall Programming Training Camp2014」B. Pairs</a></p><blockquote><p>题意：给定一个长度为 $n$，字符集为 $\Sigma$ 的字符串 $S$，求满足 $1 \le i \le j &lt; k \le n \land (S[i..j] = \overleftarrow{S[i..j]}) \land (S[j + 1..k] = \overleftarrow{S[j + 1..k]})$ 的三元组 $(i, j, k)$ 的个数。</p><p>$1 \le n \le 3 \cdot 10^5$</p></blockquote></li></ol><blockquote><p>性质 3：<a href="https://www.luogu.com.cn/problem/P3649" target="_blank" rel="noopener">「APIO2014」回文串</a> 能用回文树在 <strong>额外 $O(n)$ 的时间和空间</strong> 内解决。</p></blockquote><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>令 $\text{occ}[u]$ 表示节点 $u$ 对应的字符串 $T$ 在 $S$ 中的出现次数。</p><p>令 $\text{occAsMax}[u]$ 表示满足 $\text{maxSuf}(S[1, i]) = T$ 的 $i$ 的个数，这个可以直接在每次 $\text{add}$ 之后实时维护。</p><p>不难发现，<br>$$<br>\text{occ}[u] = \text{occAsMax}[u] + \sum_{v:fail_v = u}\text{occ}[v]<br>$$<br>因为，$T$ 在 $S$ 中出现，要么是以 $T = \text{maxSuf}(S[1..i])$ 的形式出现，要么是以 $T = \text{maxSuf}(S[l..r]), S[l..r] = \overleftarrow{S[l..r]}$ 的形式出现。</p><p>考虑到前者即 $\text{occAsMax}[u]$，后者即满足 $fail_v = u$ 的 $\text{occ}[v]$，则上述式子成立。</p><p>由引理 3 可知，我们可以自底向上地维护 $\text{occ}[u]$。</p><p>（<code>maxNode</code> 是最大节点编号）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = maxNode; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    occ[i] = occAsMax[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = maxNode; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">    occ[ fail[i] ] += occ[i];</span><br></pre></td></tr></table></figure><p>我们得到了 $\text{occ}$ 之后，答案即为 $\mathop{\operatorname{argmax}}\limits_{\text{occ}[u]}(\text{occ}[u]\cdot len_u)$。</p><hr><p>不难发现，这额外维护的一部分时间复杂度和空间复杂度均为 $O(n)$。</p><hr><p>在实现的过程中，因为 C++ 不支持访问负数数组下标，所以我们 <strong>整体把下标加一</strong>，即 $0$ 代表「奇根」，$1$ 代表「偶根」……以此类推。</p><p>此时 <code>maxNode</code> 即为 <code>cntNode - 1</code>，$1$ 号节点的编号实际上为 $2$（处理 $\text{occ}$ 的时候要注意）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EERTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N;</span><br><span class="line">    <span class="keyword">int</span> n, cntNode, last, s[MS], len[MS], ch[MS][C], fail[MS];</span><br><span class="line">    <span class="keyword">int</span> occAsMax[MS], occ[MS];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> ll)</span> </span>&#123;</span><br><span class="line">        len[cntNode] = ll;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i)</span><br><span class="line">            ch[cntNode][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> cntNode++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[n] != s[n - len[x] - <span class="number">1</span>])</span><br><span class="line">            x = fail[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s[++n] = x;</span><br><span class="line">        <span class="keyword">int</span> u = getfail(last), flg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!u) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][x]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = make(<span class="number">1</span>);</span><br><span class="line">                ch[u][x] = v;</span><br><span class="line">                fail[v] = <span class="number">1</span>;</span><br><span class="line">                flg = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][x]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = make(len[u] + <span class="number">2</span>);</span><br><span class="line">                ch[u][x] = v;</span><br><span class="line">                flg = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fail[ ch[u][x] ] = ch[getfail(fail[u])][x];</span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[u][x];</span><br><span class="line">        ++occAsMax[last];</span><br><span class="line">        <span class="keyword">return</span> flg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">getocc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LL ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 这里要注意迭代的范围</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cntNode - <span class="number">1</span>; i &gt;= <span class="number">2</span>; --i)</span><br><span class="line">            occ[i] = occAsMax[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cntNode - <span class="number">1</span>; i &gt;= <span class="number">2</span>; --i)</span><br><span class="line">            occ[ fail[i] ] += occ[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cntNode - <span class="number">1</span>; i &gt;= <span class="number">2</span>; --i)</span><br><span class="line">            ans = <span class="built_in">std</span>::max(ans, <span class="number">1L</span>L * occ[i] * len[i]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = cntNode = last = <span class="number">0</span>;</span><br><span class="line">        make(<span class="number">-1</span>), make(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    t.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        t.add(str[i] - <span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, t.getocc());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="right">$\blacksquare$ </p>              </div>            </details><blockquote><p>性质 4：<a href="https://drive.google.com/file/d/0B_DHLY8icSyNUzRwdkNFa2EtMDQ" target="_blank" rel="noopener">「MIPT Fall Programming Training Camp2014」B. Pairs</a> 能用回文树在 <strong>额外 $O(n\log\left|\Sigma\right|)$ 的时间和 $O(n)$ 的空间</strong> 内解决。</p></blockquote><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>首先，我们建立起 $\text{eertree}(S)$。</p><p>我们用 $\text{maxSuf}[i]$ 来表示  $\text{maxSuf}(S[1..i])$，这个显然能在 $O(n)$ 的空间内在每次 $\text{add}$ 操作之后维护。</p><p>我们令 $\text{sufCount}[u]$ 表示编号为 $u$ 的节点对应的字符串的回文后缀的个数。</p><p>同理我们还要求出 $\text{maxPre}$ 与 $\text{preCount}$。注意到它们分别对应的是 $\overleftarrow{S}$ 的 $\text{maxSuf}$ 和 $\text{sufCount}$（记为 $\text{maxSuf}’$ 和 $\text{sufCount}’$。。</p><p>于是，我们建立起 $\text{eertree}(\overleftarrow{S})$。</p><p>答案即为<br>$$<br>\sum_{i = 1}^{n - 1}\text{sufCount}[\text{maxSuf}[i]]\cdot\text{sufCount}’[\text{maxSuf}’[n - i]]<br>$$</p><hr><p>不难发现这部分的时间复杂度是 $O(n\log\left|\Sigma\right|)$ 的，空间复杂度是 $O(n)$ 的。</p><p><del>md 没得地方交这道题，代码仅供参考。</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EERTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N;</span><br><span class="line">    <span class="keyword">int</span> n, cntNode, s[MS], len[MS], ch[MS][C], fail[MS];</span><br><span class="line">    <span class="keyword">int</span> sufCount[MS], maxSuf[MS];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> ll)</span> </span>&#123;</span><br><span class="line">        len[cntNode] = ll;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i)</span><br><span class="line">            ch[cntNode][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> cntNode++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[n] != s[n - len[x] - <span class="number">1</span>])</span><br><span class="line">            x = fail[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s[++n] = x;</span><br><span class="line">        <span class="keyword">int</span> u = getfail(maxSuf[n - <span class="number">1</span>]), flg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!u) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][x]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = make(<span class="number">1</span>);</span><br><span class="line">                fail[v] = <span class="number">1</span>;</span><br><span class="line">                ch[u][x] = v;</span><br><span class="line">                flg = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[u][x]) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = make(len[u] + <span class="number">2</span>);</span><br><span class="line">                ch[u][x] = v;</span><br><span class="line">                flg = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fail[ ch[u][x] ] = ch[getfail(fail[u])][x];</span><br><span class="line">        &#125;</span><br><span class="line">        sufCount[ch[u][x]] = sufCount[ fail[ch[u][x]] ] + <span class="number">1</span>;</span><br><span class="line">        maxSuf[n] = ch[u][x];</span><br><span class="line">        <span class="keyword">return</span> flg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = cntNode;</span><br><span class="line">        <span class="built_in">memset</span>(maxSuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(maxSuf));</span><br><span class="line">        make(<span class="number">-1</span>), make(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    t1.init(), t2.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        t1.add(str[i] - <span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        t2.add(str[i] - <span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m - <span class="number">1</span>; ++i)</span><br><span class="line">        ans += t1.sufCount[ t1.maxSuf[i] ]</span><br><span class="line">                *</span><br><span class="line">               t2.sufCount[ t2.maxSuf[m - i] ];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align="right">$\blacksquare$ </p>              </div>            </details><div class="note bug red">            <p>有关回文树的高级应用，请查阅论文。</p>          </div><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>回文树真的能很巧妙地解决与回文串有关的问题，</p><p>而且很多与回文串有关的问题的暴力的时间复杂度极劣无比，</p><p>这也能从侧面体现出回文树的巧妙。</p><blockquote><p>与字符串有关的数据结构都巧夺天工。</p></blockquote><p>用一首前人写的诗作结尾：</p><p>$$<br>\begin{aligned}<br> &amp; \textit{I think that I shall never see}<br> \\<br> &amp; \textit{A poem lovely as a tree.}<br> \\<br> &amp; \textit{Poems are made by fools like me,}<br> \\<br> &amp; \textit{But only God can make a tree.}<br>\end{aligned}<br>$$</p><p>接下来就开始努力钻研后缀树吧。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【游记】HBOI2020 游记</title>
      <link href="/2020/06/19/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91HBOI2020-%E6%B8%B8%E8%AE%B0/"/>
      <url>/2020/06/19/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91HBOI2020-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>呐，又到了省选季了呢。</p><p><img src="/gallery/posts/donation.png" alt="一起向 CCF 捐赠吧！"></p></blockquote><a id="more"></a><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>上午还是依然在家里上学校的网课，《廉颇蔺相如列传》中的侧面烘托好妙啊……</p><p>下午去学校试机，打了个 PAM，显然不会考（但我也不会其他的了）</p><p>真的一个月埋在文化课的苦海里啊……这个月好像只打了几场 cf，啥东西也没学。</p><p>成功在学校面基到了自己的同学（大雾</p><p>已经半年没有见面了……寒假上一次见面是一月下旬吧。</p><p>晚上在家里打了一下 splay 板子，复习了一下 dinic，发现洛谷上的「普通平衡树（加强版）」好毒瘤啊……过不去。</p><p>然后就洗洗睡了。</p><p>明天也许拿三个题的第一档暴力分吧（运气好能拿第二档吧？）。</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>早上差点睡过头了，六点二十才起来。于是在车上眯了一会儿，没睡多久就到学校了。</p><p>在大门，保安把我拦住了，问我是干嘛的，发现才 7:20。</p><p>把准考证给他看了他就放我进去了。我很不相信那个测体温的东西是否准确，我总觉得红外测温会有很大误差吧。</p><p>到的太早了，先去自己的机房里坐了一会儿，不让进考场机房。</p><p>到时间了才进考场，抽到了序号最大的机子（暗示垫底），8:25 准时开题。</p><p>T1 是个数据结构，T2 是个数论，T3 是不知道啥玩意。</p><p>T1 先写了第一档的暴力 10pts，然后发现第二档答案单调不减，随便写了写就跟暴力拍过了。</p><p>后面的 2e5 感觉可以维护前后缀和来解决，先放着。</p><p>T2 前两个档都能拿到，第一档 p 不是质数，就预处理组合数来解决；第二档直接费马小定理推逆元。</p><p>后面的档感觉不会做。</p><p>T3 看了几眼，搜都不想搜。</p><p>考完了要我们待在另外一个机房等着，然后一堆队爷在讨论题目，我不会；zzy 切了 t2（Orz）</p><p>然后每五个人回到考场机房看自己的代码有没有收漏的，不一会儿就解放了。</p><p>下午 2:00 才吃到午饭，饿死了；然后睡大觉直到 17:00 才起来。</p><p>晚上随便打了点代码，就睡了。</p><p>奶明天字符串和网络流。</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>去学校还是很早，然后在自己的机房里水了水洛谷之类的，玩了下 QQ，然后就去抽签了。</p><p>一遍过压缩包密码，非常舒服。</p><p>开了题后的我：？为啥不考字符串啊？（考了我也不会）</p><p>T1 是个状压，T2 是个数据结构，T3 是个计数。</p><p>T1 写了暴力 30pts。</p><p>T2 只会 10pts 的暴力，发现问题可以用 dfs 序转化为区间加一，区间异或和，但我不会，爬了。</p><p>T3 只会 30pts 的暴力，不会图的生成树计数，爬了。</p><p>然后发现外高这次考得不好。</p><p>晚上补周五到周日的文化课了，完全没有状态。</p><p>周四的时候能随便切的物理实验题完全不会了，找不着感觉，枯了。</p><h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h3><p>出成绩了吧。</p><p>滚粗。</p>]]></content>
      
      
      <categories>
          
          <category> 杂笔 </category>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBOI2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】类欧几里得算法学习笔记</title>
      <link href="/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>「类欧几里得算法」与「欧几里得算法」的共同之处—— 仅是均使用了「辗转相除」来证明复杂度。</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>已知 $a, b, c, n$，求</p><p>$$<br>\begin{aligned}<br> f(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left\lfloor\dfrac{ai + b}{c}\right\rfloor \\<br> g(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right) \\<br> h(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right)^2<br>\end{aligned}<br>$$</p><p>共 $t (1 \le t \le 10^5)$ 组数据，$0 \le a, b, c, n \le 10^9$，$c \neq 0$。</p><h3 id="理论推导"><a href="#理论推导" class="headerlink" title="理论推导"></a><strong>理论推导</strong></h3><h4 id="推导之前"><a href="#推导之前" class="headerlink" title="推导之前"></a>推导之前</h4><p>记 $m = \left\lfloor\dfrac{an + b}{c}\right\rfloor, t = \left\lfloor\dfrac{cj + c - b - 1}{a}\right\rfloor$，下文的方括号均为 <a href="https://baike.baidu.com/item/%E8%89%BE%E4%BD%9B%E6%A3%AE%E6%8B%AC%E5%8F%B7/22361197?fr=aladdin" target="_blank" rel="noopener">艾佛森括号</a>。</p><p>在推式子之前，我们先要证明一个常用的结论。</p><div class="note success">            <p>$$<br>\begin{aligned}<br> \sum_{j = 0}^{m - 1}\sum_{i = 0}^{n}\left[j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right] = \sum_{j = 0}^{m - 1}\sum_{i = 0}^{n}\left[i &gt; t\right]<br>\end{aligned}<br>$$</p>          </div><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>注意到</p><p>$$<br>\begin{aligned}<br> j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor &amp; \Leftrightarrow j + 1 \le \left\lfloor\dfrac{ai + b}{c}\right\rfloor \\<br> &amp; \Leftrightarrow j + 1 \le \dfrac{ai + b}{c} \\<br> &amp; \Leftrightarrow cj + c \le ai + b \\<br> &amp; \Leftrightarrow cj + c - 1 &lt; ai + b \\<br> &amp; \Leftrightarrow cj - b + c - 1 &lt; ai \\<br> &amp; \Leftrightarrow i &gt; \left\lfloor\dfrac{cj + c - b - 1}{a}\right\rfloor \\<br> &amp; \Leftrightarrow i &gt; t<br>\end{aligned}<br>$$</p><p>所以原命题得证。</p>              </div>            </details><h4 id="f"><a href="#f" class="headerlink" title="f"></a>f</h4><p>首先我们来求 $f(a, b, c, n)$ 的递推式。</p><p>我们 <strong>定义</strong> $f(a, b, c, n) = \sum_{i = 0}^{n}\left\lfloor\dfrac{ai + b}{c}\right\rfloor$。</p><ul><li><p>当 $a \ge c$ 或 $b \ge c$ 时：</p><p>$$<br>\begin{aligned}<br> f(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left\lfloor\dfrac{ai + b}{c}\right\rfloor \\<br> &amp; = \sum_{i = 0}^{n}\left\lfloor\dfrac{\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot c + a \bmod c\right) \cdot i + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\cdot c + b \bmod c\right)}{c}\right\rfloor \\<br> &amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i + \left\lfloor\dfrac{b}{c}\right\rfloor + \left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) \\<br> &amp; = \left(\sum_{i = 0}^{n}\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) + \left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot\sum_{i = 0}^{n}i\right) + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\cdot\sum_{i = 0}^{n}1\right)\\<br> &amp; = f(a \bmod c, b \bmod c, c, n) + \dfrac{n(n + 1)}{2}\cdot\left\lfloor\dfrac{a}{c}\right\rfloor + (n + 1)\cdot\left\lfloor\dfrac{b}{c}\right\rfloor<br>\end{aligned}<br>$$</p></li><li><p>当 $a &lt; c$ 且 $b &lt; c$ 时：</p><p>$$<br>\begin{aligned}<br> f(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left\lfloor\dfrac{ai + b}{c}\right\rfloor \\<br> &amp; = \sum_{i = 0}^{n}\sum_{j = 0}^{\left\lfloor\tfrac{ai + b}{c}\right\rfloor - 1}1 \\<br> &amp; = \sum_{i = 0}^{n}\sum_{j = 0}^{m - 1}\left[j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right] \\<br> &amp; = \sum_{j = 0}^{m - 1}\sum_{i = 0}^{n}\left[j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right] \\<br> &amp; = \sum_{j = 0}^{m - 1}\sum_{i = 0}^{n}\left[i &gt; t\right] \\<br> &amp; = \sum_{j = 0}^{m - 1}\left(n - t\right) \\<br> &amp; = \sum_{j = 0}^{m - 1}n + \sum\limits_{j = 0}^{m - 1}\left\lfloor\dfrac{cj + (c - b - 1)}{a}\right\rfloor \\<br> &amp; = nm - f(c, c - b - 1, a, m - 1)<br>\end{aligned}<br>$$</p></li></ul><p>综上所述，我们得到了 $f$ 的递推式：</p><p>$$<br>f(a, b, c, n) =<br>\begin{cases}<br>f(a \bmod c, b \bmod c, c, n) + \dfrac{n(n + 1)}{2}\cdot\left\lfloor\dfrac{a}{c}\right\rfloor + (n + 1)\cdot\left\lfloor\dfrac{b}{c}\right\rfloor &amp; (a \ge n \lor b \ge n)\\<br>nm - f(c, c - b - 1, a, m - 1) &amp; \text{otherwise}<br>\end{cases}<br>$$</p><h4 id="g"><a href="#g" class="headerlink" title="g"></a>g</h4><p><del>一切都变得套路了起来。</del></p><p>我们 <strong>定义</strong> $g(a, b, c, n) = \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right)$。</p><ul><li><p>当 $a \ge c$ 或 $b \ge c$ 时：</p><p>$$<br>\begin{aligned}<br> g(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right) \\<br> &amp; = \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot c + a \bmod c\right) \cdot i + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\cdot c + b \bmod c\right)}{c}\right\rfloor\right) \\<br> &amp; = \sum_{i = 0}^{n}\left(i\cdot \left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i + \left\lfloor\dfrac{b}{c}\right\rfloor\right) + i\cdot\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) \\<br> &amp; = \left\lfloor\dfrac{a}{c}\right\rfloor\cdot\sum_{i = 0}^{n}i^2 + \left\lfloor\dfrac{b}{c}\right\rfloor\cdot\sum_{i = 0}^{n}i + \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) \\<br> &amp; = \dfrac{n(n + 1)(2n + 1)}{6}\cdot\left\lfloor\dfrac{a}{c}\right\rfloor +<br> (n + 1)\cdot\left\lfloor\dfrac{b}{c}\right\rfloor + g(a \bmod c, b \bmod c, c, n)<br>\end{aligned}<br>$$</p></li><li><p>当 $a &lt; c$ 且 $b &lt; c$ 时：</p><p>$$<br>\begin{aligned}<br> g(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right) \\<br> &amp; = \sum_{i = 0}^{n}i\cdot\left(\sum_{j = 0}^{\left\lfloor\tfrac{ai + b}{c}\right\rfloor - 1}1\right) \\<br> &amp; = \sum_{i = 0}^{n}i\cdot\left(\sum_{j = 0}^{m}\left[j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right]\right) \\<br> &amp; = \sum_{j = 0}^{m - 1}i\cdot\sum_{i = 0}^{n}\left[i &gt; t\right] \\<br> &amp; = \sum_{j = 0}^{m - 1}\sum_{i = 0}^{n}\left[i &gt; t\right]\cdot i \\<br> &amp; = \sum_{j = 0}^{m - 1}\cdot\sum_{i = t + 1}^{n}1 \\<br> &amp; = \sum_{j = 0}^{m - 1}\dfrac{(t + n + 1)(n - t)}{2} \\<br> &amp; = \dfrac{1}{2}\sum_{j = 0}^{m - 1}\bigg(n(n + 1) - t^2 - t\bigg) \\<br> &amp; = \dfrac{1}{2}mn(n + 1) - \dfrac{1}{2}\sum_{j = 0}^{m - 1}t^2 - \dfrac{1}{2}\sum_{j = 0}^{m - 1}t \\<br> &amp; = \dfrac{1}{2}mn(n + 1) - \dfrac{1}{2}\sum_{j = 0}^{m - 1}\left(\left\lfloor\dfrac{cj + (c - b - 1)}{a}\right\rfloor\right)^2 - \dfrac{1}{2}\sum_{j = 0}^{m - 1}\left(\left\lfloor\dfrac{cj + (c - b - 1)}{a}\right\rfloor\right) \\<br> &amp; = \dfrac{1}{2}mn(n + 1) - \dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \dfrac{1}{2}g(c, c - b - 1, a, m - 1)<br>\end{aligned}<br>$$</p></li></ul><p>综上所述，我们得到了 $g$ 的递推式：</p><p>$$<br>g(a, b, c, n) =<br>\begin{cases}<br>\dfrac{n(n + 1)(2n + 1)}{6}\cdot\left\lfloor\dfrac{a}{c}\right\rfloor +<br>(n + 1)\cdot\left\lfloor\dfrac{b}{c}\right\rfloor + g(a \bmod c, b \bmod c, c, n) &amp; (a \ge c \lor b \ge c) \\<br>\dfrac{1}{2}mn(n + 1) - \dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \dfrac{1}{2}g(c, c - b - 1, a, m - 1) &amp; \text{otherwise}<br>\end{cases}<br>$$</p><h4 id="h"><a href="#h" class="headerlink" title="h"></a>h</h4><p>我们 <strong>定义</strong> $h(a, b, c, n) = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right)^2$。</p><ul><li><p>当 $a \ge c$ 或 $b \ge c$ 时：</p><p>$$<br>\begin{aligned}<br>h(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right)^2 \\<br>&amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot c + a \bmod c\right) \cdot i + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\cdot c + b \bmod c\right)}{c}\right\rfloor\right)^2 \\<br>&amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i + \left\lfloor\dfrac{b}{c}\right\rfloor + \left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right)^2 \\<br>&amp; = \sum_{i = 0}^{n}\Bigg(\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i\right)^2 + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\right)^2 + \left(\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right)^2 \\<br>&amp; + 2 \cdot \left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i\right)\cdot\left(\left\lfloor\dfrac{b}{c}\right\rfloor\right) + 2 \cdot \left(\left\lfloor\dfrac{b}{c}\right\rfloor\right)\cdot\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor \\<br>&amp; + 2\cdot\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\cdot\left(\left\lfloor\dfrac{a}{c}\right\rfloor\cdot i\right)\Bigg) \\<br>&amp; = \left(\left\lfloor\dfrac{a}{c}\right\rfloor\right)^2\sum_{i = 0}^{n}i^2 + 2\left\lfloor\dfrac{a}{c}\right\rfloor\cdot\left\lfloor\dfrac{b}{c}\right\rfloor\sum_{i = 0}^{n}i + \left(\left\lfloor\dfrac{b}{c}\right\rfloor\right)^2\sum_{i = 0}^{n}1 \\<br>&amp; + \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right)^2 + 2\cdot\left\lfloor\dfrac{b}{c}\right\rfloor\sum_{i = 0}^{n}\left(\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) \\<br>&amp; + 2\cdot\left\lfloor\dfrac{a}{c}\right\rfloor\sum_{i = 0}^{n}\left(i\cdot\left\lfloor\dfrac{\left(a \bmod c\right) \cdot i + \left(b \bmod c\right)}{c}\right\rfloor\right) \\<br>&amp; = \dfrac{n(n + 1)(2n + 1)}{6}\cdot\left(\left\lfloor\dfrac{a}{c}\right\rfloor\right)^2 + n(n + 1)\cdot\left\lfloor\dfrac{a}{c}\right\rfloor\cdot\left\lfloor\dfrac{b}{c}\right\rfloor + (n + 1)\cdot\left(\left\lfloor\dfrac{b}{c}\right\rfloor\right)^2 \\<br>&amp; + 2\cdot\left\lfloor\dfrac{b}{c}\right\rfloor f(a \bmod c, b \bmod c, c, n) + 2\cdot\left\lfloor\dfrac{a}{c}\right\rfloor g(a \bmod c, b \bmod c, c, n) + h(a \bmod c, b \bmod c, c, n)<br>\end{aligned}<br>$$</p></li><li><p>当 $a &lt; c$ 且 $b &lt; c$ 时：</p><p>$$<br>\begin{aligned}<br>h(a, b, c, n) &amp; = \sum_{i = 0}^{n}\left(\left\lfloor\dfrac{ai + b}{c}\right\rfloor\right)^2 \\<br>&amp; = \sum_{i = 0}^{n}\left(2\cdot\dfrac{\left\lfloor\dfrac{ai + b}{c}\right\rfloor\cdot\left(\left\lfloor\dfrac{ai + b}{c}\right\rfloor + 1\right)}{2} - \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right) \\<br>&amp; = -f(a, b, c, n) + 2\sum_{i = 0}^{n}\sum_{j = 0}^{\left\lfloor\tfrac{ai + b}{c}\right\rfloor}j \\<br>&amp; = -f(a, b, c, n) + 2\sum_{i = 0}^{n}\sum_{j = 1}^{\left\lfloor\tfrac{ai + b}{c}\right\rfloor}j \\<br>&amp; = -f(a, b, c, n) + 2\sum_{i = 0}^{n}\sum_{j = 0}^{\left\lfloor\tfrac{ai + b}{c}\right\rfloor - 1}(j + 1) \\<br>&amp; = -f(a, b, c, n) + 2\sum_{j = 0}^{m - 1}(j + 1)\sum_{i = 0}^{n}\left[j &lt; \left\lfloor\dfrac{ai + b}{c}\right\rfloor\right] \\<br>&amp; = -f(a, b, c, n) + 2\sum_{j = 0}^{m - 1}(j + 1)\sum_{i = 0}^{n}\left[i &gt; t\right] \\<br>&amp; = -f(a, b, c, n) + 2\sum_{j = 0}^{m - 1}(j + 1)(n - t) \\<br>&amp; = -f(a, b, c, n) + 2n\sum_{j = 0}^{m - 1}(j + 1) - 2\sum_{j = 0}^{m - 1}(j + 1)t \\<br>&amp; = -f(a, b, c, n) + nm(m + 1) - 2\sum_{j = 0}^{m - 1}jt - \sum_{j = 0}^{m - 1}t \\<br>&amp; = -f(a, b, c, n) + nm(m + 1) - 2\sum_{j = 0}^{m - 1}\left(j\cdot\left\lfloor\dfrac{cj + c - b - 1}{a}\right\rfloor\right) - \sum_{j = 0}^{m - 1}\left\lfloor\dfrac{cj + c - b - 1}{a}\right\rfloor \\<br>&amp; = -f(a, b, c, n) + nm(m + 1) - 2g(c, c - b - 1, a, m - 1) - 2f(c, c - b - 1, a, m - 1);<br>\end{aligned}<br>$$</p></li></ul><p>综上所述，我们得到了 $h$ 的递推式：</p><p>$$<br>h(a, b, c, n) =<br>\begin{cases}<br>\dfrac{n(n + 1)(2n + 1)}{6}\cdot\left(\left\lfloor\dfrac{a}{c}\right\rfloor\right)^2 &amp; + n(n + 1)\cdot\left\lfloor\dfrac{a}{c}\right\rfloor\cdot\left\lfloor\dfrac{b}{c}\right\rfloor + (n + 1)\cdot\left(\left\lfloor\dfrac{b}{c}\right\rfloor\right)^2 \\<br>&amp; + 2\cdot\left\lfloor\dfrac{b}{c}\right\rfloor f(a \bmod c, b \bmod c, c, n) \\<br>&amp; + 2\cdot\left\lfloor\dfrac{a}{c}\right\rfloor g(a \bmod c, b \bmod c, c, n) \\ &amp; + h(a \bmod c, b \bmod c, c, n) &amp; (a \ge c \lor b \ge c) \\<br>f(a, b, c, n) + nm(m + 1) &amp; - 2g(c, c - b - 1, a, m - 1) \\ &amp; - 2f(c, c - b - 1, a, m - 1) &amp; \text{otherwise}<br>\end{cases}<br>$$</p><h3 id="时间复杂度证明"><a href="#时间复杂度证明" class="headerlink" title="时间复杂度证明"></a><strong>时间复杂度证明</strong></h3><p>不会。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>这里给出 <a href="https://www.luogu.com.cn/problem/P5170" target="_blank" rel="noopener">【模板】类欧几里得算法</a> 的代码实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv6 = <span class="number">166374059</span>;</span><br><span class="line"></span><br><span class="line">LL t, A, B, C, N;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QUERY</span> &#123;</span></span><br><span class="line">    LL f, g, h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">QUERY <span class="title">solve</span><span class="params">(LL a, LL b, LL c, LL n)</span> </span>&#123;</span><br><span class="line">    QUERY res, tmp;</span><br><span class="line">    <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">        res.f = (b / c) * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        res.g = (b / c) * inv2 % mod * n % mod * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        res.h = (b / c) * (b / c) % mod * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a &gt;= c || b &gt;= c) &#123;</span><br><span class="line">        tmp = solve(a % c, b % c, c, n);</span><br><span class="line">        res.f = (tmp.f</span><br><span class="line">              + (a / c) * inv2 % mod * n % mod * (n + <span class="number">1</span>) % mod</span><br><span class="line">              + (b / c) * (n + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        res.g = (tmp.g</span><br><span class="line">              + (a / c) * inv6 % mod * n % mod * (n + <span class="number">1</span>) % mod * (<span class="number">2</span> * n + <span class="number">1</span>) % mod</span><br><span class="line">              + (b / c) * inv2 % mod * n % mod * (n + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        res.h = (tmp.h</span><br><span class="line">              + (b / c) * <span class="number">2</span> % mod * tmp.f % mod</span><br><span class="line">              + (a / c) * <span class="number">2</span> % mod * tmp.g % mod</span><br><span class="line">              + (a / c) * (a / c) % mod * inv6 % mod * n % mod * (n + <span class="number">1</span>) % mod * (<span class="number">2</span> * n + <span class="number">1</span>) % mod</span><br><span class="line">              + (b / c) * (b / c) % mod * (n + <span class="number">1</span>) % mod</span><br><span class="line">              + (a / c) * (b / c) % mod * n % mod * (n + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        LL m = (a * n + b) / c;</span><br><span class="line">        tmp = solve(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>);</span><br><span class="line">        res.f = ((m * n % mod - tmp.f) % mod + mod) % mod;</span><br><span class="line">        res.g = inv2 * (((m * n % mod * (n + <span class="number">1</span>) % mod</span><br><span class="line">                        - tmp.f</span><br><span class="line">                        - tmp.h) % mod + mod) % mod) % mod;</span><br><span class="line">        res.h = ((n * m % mod * (m + <span class="number">1</span>) % mod</span><br><span class="line">                - res.f</span><br><span class="line">                - <span class="number">2</span> * tmp.g % mod</span><br><span class="line">                - <span class="number">2</span> * tmp.f % mod) % mod + mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"sim.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sim.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        io::read(N, A, B, C);</span><br><span class="line">        QUERY cur = solve(A, B, C, N);</span><br><span class="line">        io::write(cur.f, <span class="string">' '</span>, cur.h, <span class="string">' '</span>, cur.g, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 类欧几里德算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】Karatsuba 乘法学习笔记</title>
      <link href="/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Karatsuba-%E4%B9%98%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Karatsuba-%E4%B9%98%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>上个学期在联赛前听 EternalAlexander 提到了一下这个玄学的算法，现在就学习一下吧。</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>「Karatsuba 乘法」是 1960 年由 Anatolii Alexeevitch Karatsuba 提出的可用于大整数乘法的算法。</p><h3 id="理论推导"><a href="#理论推导" class="headerlink" title="理论推导"></a><strong>理论推导</strong></h3><p>不妨设我们要相乘的两个数字分别为 $a$ 和 $b$，其乘积，也就是我们要求的数，为 $c$。</p><p>设 $a = x_1\cdot10^m + x_0, b = y_1\cdot10^m + y_0$，其中 $0 &lt; x_1, x_0, y_1, y_0 &lt; 10^m$，则</p><p>$\begin{aligned}c = ab &amp; = (x_1\cdot10^m + x_0) \cdot (y_1\cdot10^m + y_0) \\ &amp; = (x_1\cdot y_1)10^{2m} + (x_1\cdot y_0 + x_0\cdot y_1)10^m + x_0\cdot y_0\end{aligned}$</p><p>记 $z_2 = x_1\cdot y_1, z_1 = x_1\cdot y_0 + x_0\cdot y_1, z_0 = x_0\cdot y_0$。</p><p><strong>注意到</strong>，$z_1 = (x_1 + x_0)(y_1 + y_0) - z_2 - z_0$。</p><p>于是我们可以分步计算 $(x_1 + x_0)(y_1 + y_0), z_2, z_0$ 即可。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a><strong>时间复杂度</strong></h3><p>我们实质上是把一个 $n \times n$ 的乘法化简为了三个长度更小的乘法。</p><p>当 $m = \left\lfloor\dfrac{n}{2}\right\rfloor$ 时，有递推式 $T(n) = 3T(\left\lfloor\dfrac{n}{2}\right\rfloor) + O(n)$。</p><p>不难由主定理得知 $T(n) = \Theta(n^{\log_{2}3}) \approx \Theta(n^{1.585})$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><p>这个是 <a href="http://www.spoj.com/problems/MUL/en/" target="_blank" rel="noopener">MUL - Fast Multiplication</a> 的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">Kmul</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> ra[], <span class="keyword">int</span> rb[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= <span class="number">32</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> *r = <span class="keyword">new</span> <span class="keyword">int</span>[len * <span class="number">2</span> + <span class="number">1</span>]();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= len; ++j)</span><br><span class="line">                r[i + j] += ra[i] * rb[j];</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hf = len / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> *r = <span class="keyword">new</span> <span class="keyword">int</span>[hf * <span class="number">4</span> + <span class="number">1</span>]();</span><br><span class="line">    <span class="keyword">int</span> *z0, *z1, *z2;</span><br><span class="line"></span><br><span class="line">    z0 = Kmul(hf - <span class="number">1</span>, ra, rb);</span><br><span class="line">    z2 = Kmul(len - hf, ra + hf, rb + hf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + hf &lt;= len; ++i) ra[i] += ra[i + hf];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + hf &lt;= len; ++i) rb[i] += rb[i + hf];</span><br><span class="line">    z1 = Kmul(hf - <span class="number">1</span>, ra, rb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + hf &lt;= len; ++i) ra[i] -= ra[i + hf];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + hf &lt;= len; ++i) rb[i] -= rb[i + hf];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (hf - <span class="number">1</span>) * <span class="number">2</span>; ++i) z1[i] -= z0[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (len - hf) * <span class="number">2</span>; ++i) z1[i] -= z2[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (hf - <span class="number">1</span>) * <span class="number">2</span>; ++i) r[i] += z0[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (hf - <span class="number">1</span>) * <span class="number">2</span>; ++i) r[i + hf] += z1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= (len - hf) * <span class="number">2</span>; ++i) r[i + hf * <span class="number">2</span>] += z2[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] z0;</span><br><span class="line">    <span class="keyword">delete</span>[] z1;</span><br><span class="line">    <span class="keyword">delete</span>[] z2;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Karatsuba</span><span class="params">(<span class="keyword">int</span> ra[], <span class="keyword">int</span> rb[], <span class="keyword">int</span> rc[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *r = Kmul(n - <span class="number">1</span>, ra, rb);</span><br><span class="line">    <span class="built_in">memcpy</span>(rc, r, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(rc[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            rc[i + <span class="number">1</span>] += rc[i] / <span class="number">10</span>;</span><br><span class="line">            rc[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"mul.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"mul.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> len1, len2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, A + <span class="number">1</span>, B + <span class="number">1</span>);</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(A + <span class="number">1</span>), len2 = <span class="built_in">strlen</span>(B + <span class="number">1</span>);</span><br><span class="line">        n = <span class="built_in">std</span>::max(len1, len2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len1, j = len2, k = <span class="number">0</span>; k &lt; n; --i, --j, ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= <span class="number">1</span>) a[k] = A[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> a[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">1</span>) b[k] = B[j] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> b[k] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*for(int i = 1; i &lt;= n; ++i) printf("%d", a[i]);</span></span><br><span class="line"><span class="comment">        putchar('\n');</span></span><br><span class="line"><span class="comment">        for(int i = 1; i &lt;= n; ++i) printf("%d", b[i]);</span></span><br><span class="line"><span class="comment">        putchar('\n');*/</span></span><br><span class="line">        m = len1 + len2 - <span class="number">1</span>;</span><br><span class="line">        Karatsuba(a, b, c);</span><br><span class="line">        <span class="keyword">while</span>(!c[m - <span class="number">1</span>] &amp;&amp; m &gt; <span class="number">1</span>) --m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) io::write(c[i]);</span><br><span class="line">        io::write(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度 </tag>
            
            <tag> 分治 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】经典动态规划模型学习笔记</title>
      <link href="/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><del>「用集合的角度来理解dp。」</del> $\gets$ 这个东西好像不是很好用。</p><p>大概这篇博文就只能熟悉一下各大dp模型吧？</p><a id="more"></a><h2 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>区间dp是dp的一种，一般处理在一个序列上的关于区间的一些问题。</p><p>因为 $[l, r]$ 这个区间，可以用很多个 $[l, k] \bigcap (k, r]$ <strong>重复地</strong> 覆盖，</p><p>也就是通过枚举断点 $k$，来实现区间 $[l, r] \gets [l, k] + (k, r]$ 信息的转移。</p><p>即 $f(l, r) = \operatorname{op}\{f(l, k) + f(k + 1, r)\} \quad k \in [l, r)$。</p><p>需要注意的是 $k$ 的范围也不一定是 $[l, r)$，也有许多题是 $k \in (l, r)$ 的，</p><p>这个时候我们就需要处理出 $len = 2$ 的，然后 <code>for</code> 循环从 $len = 3$ 开始。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a><strong>例题</strong></h3><ol><li><p><a href="https://www.luogu.com.cn/problem/P1880" target="_blank" rel="noopener">「NOI1995」石子合并</a></p><blockquote><p><strong>拆环成链</strong>，令 $a[n + 1\ldots 2n] \gets a[1 \ldots n]$，这样就把一个环形的问题转化到了序列上。</p></blockquote><p>设 $f(l, r)$ 表示第 $l$ 堆石子一直合并到第 $r$ 堆石子，能获得的最大值；</p><p>设 $g(l, r)$ 表示第 $l$ 堆石子一直合并到第 $r$ 堆石子，能获得的最小值。</p><p>因为 $[l, r]$ 可以被分成 $[l, k]$ 和 $(k, r]$，所以我们可以这么转移：</p><p>$$<br>\begin{aligned}<br> f(l, r) &amp; = \max\{sum_r - sum_{l - 1} + f(l, k) + f(k + 1, r)\} \quad k \in [l, r) \\<br> g(l, r) &amp; = \max\{sum_r - sum_{l - 1} + g(l, k) + g(k + 1, r)\} \quad k \in [l, r)<br>\end{aligned}<br>$$</p></li><li><p><a href="https://loj.ac/problem/10149" target="_blank" rel="noopener">「一本通 5.1 例 3」凸多边形的划分</a></p><blockquote><p>我们将这个凸多边形的每个顶点顺时针排成一行，环上的顶点其实和序列没有区别。</p></blockquote><p>设 $f(l, r)$ 表示第 $l$ 个顶点到第 $r$ 个顶点所组成的凸多边形划分后，能得到的最小值。</p><p>因为 $S(l, r)$ 可以被分成 $(l, k)$ 和 $(k, r)$，再加上 $a_l, a_r, a_k$ 的贡献，所以我们可以这么转移：</p><p>$$<br>f(l, r) = \min\{f(l, k) + f(k, r) + a_l\cdot a_k\cdot a_r\} \quad k \in (l, r)<br>$$</p></li><li><p><a href="https://www.luogu.com.cn/problem/P1005" target="_blank" rel="noopener">「NOIP2007」矩阵取数游戏</a></p><blockquote><p>注意到每一行的贡献其实是互不干扰的，所以我们分别对每一行进行 dp。</p></blockquote><p>设 $f(l, r)$ 表示这一行取了 $m - (r - l + 1)$ 步后，还剩 $[l, r]$ 能得到的最大值。</p><p>因为 $S(l, r)$ 可以是 $S(l - 1, r) - a_{l - 1}$ 得来的，也可以是 $S(l, r + 1) - a_{r + 1}$ 得来的，所以我们可以这么转移：</p><p>$$<br>f(l, r) = \max<br> \begin{cases}<br>  f(l - 1, r) + a_{l - 1} \cdot 2^{m - (r - l + 1)} \\<br>  f(l, r + 1) + a_{r + 1} \cdot 2^{m - (r - l + 1)}<br> \end{cases}<br>$$</p></li><li><p><a href="https://codeforces.ml/contest/1312/problem/E" target="_blank" rel="noopener">「CF Edu #83」E. Array Shrinking</a></p><blockquote><p>这题比较综合，要先用区间dp预处理，然后再线性递推。</p></blockquote><p>设 $f(l, r)$ 表示 $[l, r]$ 能缩合得到的数字（如果无法缩合，则 $f(l, r) = 0$）</p><p>设 $g(i)$ 表示 $[1, i]$ 可以被分成的段数的最小值。</p><p>如果 $[l, r]$ 能从 $[l, k]$ 和 $(k, r]$ 组成，那么 $f(l, k)$ 是应该等于 $f(k + 1, r)$ 的，这样才能「缩合」。所以这么转移 $f$：</p><p>$$<br>f(l, r) = \max\{f(l, k) + 1\} \quad (k \in [l, r) \bigwedge f(l, k) = f(k + 1, r) &gt; 0)<br>$$</p><p>因为 $[1, i]$ 能被分成 $[1, j]$ 和 $(j, i]$ 两段，我们只用考虑 $(j, i]$ 能否缩合得到。所以我们可以这么转移：</p><p>$$<br>g(i) = \min\{g(j) + 1\} \quad (j \in [1, i) \bigwedge f(j + 1, i) \neq 0)<br>$$</p></li></ol><h2 id="树型dp"><a href="#树型dp" class="headerlink" title="树型dp"></a>树型dp</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>树型dp是dp的一种，一般处理子树中最优解的一些问题。当然，也有「换根dp」之类的处理 <strong>整棵树</strong> 上最优解的一些问题。</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a><strong>例题</strong></h3><ol><li><p><a href="https://loj.ac/problem/10156" target="_blank" rel="noopener">「一本通 5.2 例 4」战略游戏</a></p><blockquote><p>树型dp入门题。</p></blockquote><p>设 $f(u, 0)$ 表示 $u$ 上不放士兵，使得所有以 $u$ 为根的子树中的 <strong>边</strong> 被「瞭望」到，所需放置的士兵最少个数。</p><p>设 $f(u, 1)$ 表示 $u$ 上放士兵，使得所有以 $u$ 为根的子树中的 <strong>边</strong> 被「瞭望」到，所需放置的士兵最少个数。</p><p>若 $u$ 上不放置士兵，那么所有的 $v \in \text{son}(u)$ 上都得放士兵，才能使所有的边 $(u, v) \quad (v \in \text{son}(u))$ 被瞭望到；</p><p>若 $u$ 上放置了士兵，那么所有的 $v \in \text{son}(u)$ 上需不需要放置士兵是随意的。所以我们可以这么转移：</p><p>$$<br>\begin{aligned}<br> f(u, 0) &amp; = \sum_{v \in \text{son}(u)} f(v, 1) \\<br> f(u, 1) &amp; = \sum_{v \in \text{son}(u)} \min f(v, 0), f(v, 1)<br>\end{aligned}<br>$$</p></li><li><p><a href="https://loj.ac/problem/10159" target="_blank" rel="noopener">「一本通 5.2 练习 2」旅游规划</a></p><blockquote><p>一个比较基础的换根dp。</p></blockquote><p>首先我们钦定一个根，对这棵有根树进行dfs；再换根，算出换根后的贡献。</p><p>设 $f(u, 0)$ 表示以 $u$ 为根的子树中，最远的点的距离。</p><p>设 $f(u, 1)$ 表示以 $u$ 为根的子树中，次远的点的距离。</p><p>设 $g(u)$ 表示以 $u$ 为根的子树中，最远的点是在 <strong>哪一个孩子的子树中</strong>。</p><p>设 $h(u)$ 表示不经过 $u$ 的子树，最远的点的距离。</p><p>不难发现，原来的无根树的直径，为 $\max\{f(i, 0), \max\{f(i, 1), h(i)\}\}$，即</p><p>从自己的某个孩子的子树中有一条路径一直延伸到另一个孩子，或者是这棵树的「另一半部分」。</p><p>最后我们输出的，就是所有 $f(i, 0), \max\{f(i, 1), h(i)\}$ 等于直径长度的 $i$。</p><p>在第一次dfs中，我们是 <strong>从孩子往双亲</strong> 转移的，方程是显然的：</p><p>$$<br>\begin{aligned}<br> f(u, 0) &amp; = \max_{v \in \text{son}(u)}\{f(v, 0) + 1\} \\<br> f(u, 1) &amp; = \text{second}\max_{v \in \text{son}(u)}\{f(v, 0) + 1\}<br>\end{aligned}<br>$$</p><p>转移时顺便更新 $g$ 即可。接下来我们要重点考虑的是 <strong>第二次dfs</strong> 会带来什么样的影响，也就是应该如何计算 $h$ 值。</p><p>第二次dfs是自顶向下的，也就是 <strong>从双亲往孩子</strong> 转移的。</p><p>从 $u$ 不经过子树的最长距离，肯定是 $u$ 的父亲 $x$ 能走一条特别远的路径出来。</p><p>那么这条路径有两种可能：要么是 $x$ 往 $x$ 的孩子（但不是 $u$）的方向走，要么是 $x$ 往 $x$ 的父亲 $y$ 的方向走。</p><p>如果 $u$ 是 $g$ 中记录的最大孩子，那么第一种可能，就只能走次大孩子，即 $f(x, 1)$；第二种可能就是 $h(x)$；</p><p>如果 $u$ 不是 $g$ 中记录的最大孩子，那么第一种可能，就能走最大孩子，即 $f(x, 0)$；第二种可能还是 $h(x)$；</p><p>那么我们可以推导出转移方程：</p><p>$$<br>h(v) = \begin{cases}\max\{h(u), f(u, 1)\} &amp; v = g(u), u = \text{father}(v) \\ \max\{h(u), f(u, 0)\} &amp; v \neq g(u), u = \text{father}(v)\end{cases}<br>$$</p></li></ol><h2 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>假设有一行格子，要你黑白染色，你会怎么考虑表示这一行的状态呢？</p><p>假设 $1$ 表示黑色，$0$ 表示白色，那这一行是不是就等价于一个二进制数呢？</p><p>状压dp 就是通过用二进制数来表示状态的一种dp类型。</p><p>通常除了二进制，还有三进制（不能使用位运算，但是能暴力拆位）。</p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a><strong>例题</strong></h3><ol><li><p><a href="https://www.luogu.com.cn/problem/P1896" target="_blank" rel="noopener">「SCOI2005」互不侵犯</a></p><blockquote><p>状压dp 入门题。</p></blockquote><p>我们可以用一个 $n$ 位二进制数 $st$ 来表示这一行的状态，第 $i$ 位为 $1$ 表示这个格子上有王，为 $0$ 则表示这个格子是空的。</p><p>显然如果一个状态 $st$ 是合法的，当且仅当 $st \&amp; (st / 2) = 0 \bigwedge st \&amp; (st \cdot 2) = 0$。</p><p>然后还要枚举上一行的状态，判断上一行的状态会不会和这一行的状态冲突。</p><p>状态转移方程便是：</p><p>$$<br> f(i, st, cnt) = \sum_{pr}f(i - 1, pr, cnt - \operatorname{popcount}(st))<br>$$</p><p>其中 $st, pr$ 均为合法状态，且 $st$ 与 $pr$ 不冲突，后文同。</p><p>$\operatorname{popcount}(x)$ 表示 $x$ 的二进制表示中 $1$ 的个数。</p><p>答案即为 $\sum_{st}f(n, st, k)$。</p></li><li><p><a href="https://loj.ac/problem/10172" target="_blank" rel="noopener">「一本通 5.4 练习 1」涂抹果酱</a></p><blockquote><p>稍微有点复杂的三进制状态压缩。</p></blockquote><p>首先，一个状态是否是合法的，我们可以暴力求出这个状态的三进制表示。</p><p>然后逐个判断相邻的两个位是否不同即可。</p><p>其次，相邻两行的状态是否不会冲突，我们可以暴力同时取出这两个状态在三进制表示下的每一位，逐个比较是否相同即可。</p><p>然后是转移，因为已经固定了第 $k$ 行，我们可以看做是把这个棋盘分割成了 <strong>互不干扰</strong> 的 $[1, k)$ 和 $(k, n]$ 两部分。</p><p>分别求出来方案数然后 <strong>相乘</strong> 即可得到最终答案。</p><p>剩下的部分与 <a href="https://www.luogu.com.cn/problem/P1896" target="_blank" rel="noopener">「SCOI2005」互不侵犯</a> 类似，就不再赘述。</p><p>状态转移方程如下：</p><p>$$<br> f(i, st) = \sum_{pr}f(i - 1, pr)<br>$$</p><p>答案即为</p><p>$$<br> ans_{k}\cdot ans_{n - k + 1} = \left(\sum_{st}f(k, st)\right)\cdot\left(\sum_{st}f(n - k + 1, st)\right)<br>$$</p></li><li><p><a href="https://www.luogu.com.cn/problem/P3622" target="_blank" rel="noopener">「APIO2007」动物园</a></p><blockquote><p>比较有技巧性的一道状压dp题。</p></blockquote><p>我们可以发现，一个人只能看见长度为 $5$ 的「窗口」，所以我们可以利用这一点来进行状态压缩。我们把一个人能看到的动物压缩成一个二进制数，第 $i$ 位为 $1$ 表示能看见 $i$ 这个动物，否则就看不见这个动物。</p><p>首先我们预处理出 $g(i, st)$，表示从第 $i$ 个动物开始，往后的 $5$ 个动物被移走，即移走状态为 $st$ 时的满意人数。</p><p>其次我们设 $f(i, st)$ 表示 $[1, i]$，往后的 $5$ 个动物被移走，即移走状态为 $st$ 时的最大满意人数。</p><p>可以推出状态转移方程：</p><p>$$<br> f(i, st) = \max\{f(i - 1, st \cdot 2), f(i - 1, st \cdot 2 +  1) + g(i, st)\}<br>$$</p><p>我们从第 $1$ 个开始枚举，然后要满足第 $n + 1$ 个的状态和第 $1$ 个状态相同即可。</p></li></ol><h2 id="数位dp"><a href="#数位dp" class="headerlink" title="数位dp"></a>数位dp</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P3356 火星探险问题</title>
      <link href="/2020/04/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3356-%E7%81%AB%E6%98%9F%E6%8E%A2%E9%99%A9%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3356-%E7%81%AB%E6%98%9F%E6%8E%A2%E9%99%A9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个 $p \times q$ 的矩阵和 $n$ 个位于 $(1, 1)$ 的机器人，每个格子里为下列三种状态之一：</p><ol><li>「无障碍」，机器人可以通过；</li><li>「有障碍」，机器人不能通过；</li><li>「有矿物」，机器人通过后会得到 $1$ 个单位的石头，只能被获得一次。</li></ol><p>每个机器人只能 $(x, y) \to (x + 1, 1)$ 或 $(x, y) \to (x, y + 1)$。</p><p>求使得所有机器人到达 $(p, q)$ 时，石头总量最多的一种方案。</p><p>$1 \le p, q, n \le 35$。</p><p><a href="https://www.luogu.com.cn/problem/P3356" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这类有限制通过的问题，我们考虑拆点来转化。</p><p>将每个点分为 $(x, y, 1)$ 和 $(x, y, 2)$。</p><p>若 $(x, y)$ 为「无障碍」，则在 $(x, y, 1)$ 与 $(x, y, 2)$ 间连一条流量为 $\inf$，费用为 $0$ 的边。</p><p>若 $(x, y)$ 为「有障碍」，则不连边。</p><p>若 $(x, y)$ 为「有矿物」，则在 $(x, y, 1)$ 与 $(x, y, 2)$ 间连一条流量为 $\inf$，费用为 $0$ 的边，表示不取这块石头；再连一条流量为 $1$，费用为 $-1$ 的边，表示取走这块石头。</p><p>最后求最小费用最大流即可，石头总量即为费用的相反数。</p><p><del>读入和 zkw 我就不贴了。</del></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p, q, idx, a[S][S], id[S][S];</span><br><span class="line"><span class="keyword">int</span> cnt, first[N], s, t, min_cost, max_flow;</span><br><span class="line"><span class="keyword">int</span> len, ans[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id[x][y] + idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; q || y &lt; <span class="number">1</span> || y &gt; p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> a[x][y] != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = id2(x, y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = first[u]; ~i; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i] &gt;= e[i ^ <span class="number">1</span>].wt) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(v == id1(x + <span class="number">1</span>, y)) &#123;</span><br><span class="line">            ++tmp[i], ans[++len] = <span class="number">0</span>;</span><br><span class="line">            dfs(x + <span class="number">1</span>, y);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v == id1(x, y + <span class="number">1</span>)) &#123;</span><br><span class="line">            ++tmp[i], ans[++len] = <span class="number">1</span>;</span><br><span class="line">            dfs(x, y + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"mars.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"mars.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(n, p, q);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; ++j)</span><br><span class="line">            io::read(a[i][j]), id[i][j] = ++idx;</span><br><span class="line">    s = <span class="number">0</span>, t = idx * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)</span><br><span class="line">                Connect(id1(i, j), id2(i, j), inf, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                Connect(id1(i, j), id2(i, j), inf, <span class="number">0</span>);</span><br><span class="line">                Connect(id1(i, j), id2(i, j), <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Connect(s, id1(<span class="number">1</span>, <span class="number">1</span>), n, <span class="number">0</span>);</span><br><span class="line">    Connect(id2(q, p), t, inf, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(valid(i, j) &amp;&amp; valid(i + <span class="number">1</span>, j))</span><br><span class="line">                Connect(id2(i, j), id1(i + <span class="number">1</span>, j), inf, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(valid(i, j) &amp;&amp; valid(i, j + <span class="number">1</span>))</span><br><span class="line">                Connect(id2(i, j), id1(i, j + <span class="number">1</span>), inf, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    zkw.solve(s, t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max_flow; ++i) &#123;</span><br><span class="line">        len = <span class="number">0</span>, dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len; ++j) io::write(i, <span class="string">' '</span>, ans[j], <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4009 汽车加油行驶问题</title>
      <link href="/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4009-%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4009-%E6%B1%BD%E8%BD%A6%E5%8A%A0%E6%B2%B9%E8%A1%8C%E9%A9%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>题意比较复杂，建议到 OJ 上查看。</p><p><a href="https://www.luogu.com.cn/problem/P4009" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>考虑分层图建最短路。</p><p>每一个点，都可以免费到达下一层的自己，或者是</p><ol><li>若有加油站，可以加满油，即到达第 $1$ 层的自己，边权为 $A$；</li><li>坐标（$x$ 或 $y$）减小，则边权为 $B$；</li><li>坐标（$x$ 或 $y$）增大，免费；</li><li>若无加油站，可以增设加油站，直接到达第 $1$ 层的自己，边权为 $A + C$。</li></ol><p>最后跑一边最短路即可，记得空间要开够，不然会 RE，答案即为每一层终点的 dis 的最小值。</p><p><del>Dijkstra 我就不贴了。</del></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, A, B, C, cnt, s, t, ans = inf;</span><br><span class="line"><span class="keyword">int</span> first[N], vis[N], dis[N], pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">G</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> lvl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S * S * (x - <span class="number">1</span>) + S *(y - <span class="number">1</span>) + lvl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"car.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"car.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(n, k, A, B, C);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> opt;</span><br><span class="line">            io::read(opt);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> lv = <span class="number">1</span>; lv &lt;= k; ++lv)</span><br><span class="line">                Add_Edge(G(i, j, lv), G(i, j, lv + <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> lv = <span class="number">1</span>; lv &lt;= k; ++lv) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; n) Add_Edge(G(i, j, lv), G(i + <span class="number">1</span>, j, lv + <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; n) Add_Edge(G(i, j, lv), G(i, j + <span class="number">1</span>, lv + <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(i &gt; <span class="number">1</span>) Add_Edge(G(i, j, lv), G(i - <span class="number">1</span>, j, lv + <span class="number">1</span>), B);</span><br><span class="line">                    <span class="keyword">if</span>(j &gt; <span class="number">1</span>) Add_Edge(G(i, j, lv), G(i, j - <span class="number">1</span>, lv + <span class="number">1</span>), B);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> lv = <span class="number">2</span>; lv &lt;= k + <span class="number">1</span>; ++lv)</span><br><span class="line">                    Add_Edge(G(i, j, lv), G(i, j, <span class="number">1</span>), A + C);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> lv = <span class="number">2</span>; lv &lt;= k + <span class="number">1</span>; ++lv)</span><br><span class="line">                        Add_Edge(G(i, j, lv), G(i, j, <span class="number">1</span>), A);</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; n) Add_Edge(G(i, j, <span class="number">1</span>), G(i + <span class="number">1</span>, j, <span class="number">2</span>), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; n) Add_Edge(G(i, j, <span class="number">1</span>), G(i, j + <span class="number">1</span>, <span class="number">2</span>), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(i &gt; <span class="number">1</span>) Add_Edge(G(i, j, <span class="number">1</span>), G(i - <span class="number">1</span>, j, <span class="number">2</span>), B);</span><br><span class="line">                    <span class="keyword">if</span>(j &gt; <span class="number">1</span>) Add_Edge(G(i, j, <span class="number">1</span>), G(i, j - <span class="number">1</span>, <span class="number">2</span>), B);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra(G(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> lv = <span class="number">1</span>; lv &lt;= k + <span class="number">1</span>; ++lv) ans = <span class="built_in">std</span>::min(ans, dis[G(n, n, lv)]);</span><br><span class="line">    io::write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4013 数字梯形问题</title>
      <link href="/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4013-%E6%95%B0%E5%AD%97%E6%A2%AF%E5%BD%A2%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4013-%E6%95%B0%E5%AD%97%E6%A2%AF%E5%BD%A2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个如图所示的梯形，梯形的第一行有 $m$ 个数字，共有 $n$ 行。</p><p>从梯形的顶部的 $m$ 个数字开始，在每个数字处可以沿左下或右下方向移动，形成一条从梯形的顶至底的路径。</p><ol><li>从梯形的顶至底的 $m$ 条路径互不相交；</li><li>从梯形的顶至底的 $m$ 条路径仅在数字结点处相交；</li><li>从梯形的顶至底的 $m$ 条路径允许在数字结点相交或边相交。</li></ol><p>分别求在这三种约束下，能得到的数字和的最大值。</p><p>$1 \le m, n \le 20$。</p><p><a href="https://www.luogu.com.cn/problem/P4013" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="task-1"><a href="#task-1" class="headerlink" title="task 1"></a>task 1</h4><p>考虑拆点，每个具有 $w_{i, j}$ 的价值的点 $(i, j)$ 拆成 $u(i, j) \overset{w_{i, j}\quad}\Longrightarrow u’(i, j)$。</p><p>这样就能保证每个点都只被经过一次。</p><h4 id="task-2"><a href="#task-2" class="headerlink" title="task 2"></a>task 2</h4><p>既然每个点可以被重复经过，而每条边都不行，那么就设置每条转移的边的流量为 $1$ 即可。</p><h4 id="task-3"><a href="#task-3" class="headerlink" title="task 3"></a>task 3</h4><p>直接自底向顶 dp 就好了，状态转移方程是 $f(i, j) = \max\{f(i + 1, j), f(i + 1, j + 1)\} + w_{i, j}$；</p><p>答案为 $\sum_{i = 1}^{m}f(1, i)$。</p><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p>这类求 <strong>最大值</strong> 的题目，通常采用把价值 <strong>取相反数</strong> 后跑最小费用最大流的方式，来解决问题。</p><p><del>zkw 和快读我就不贴了。</del></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[S][S];</span><br><span class="line"><span class="keyword">int</span> s, t, min_cost, max_flow;</span><br><span class="line"><span class="keyword">int</span> cnt, first[N], idx, id[S][S];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt, ct;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Connect</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    Add_Edge(u, v, w, c), Add_Edge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> task1 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id[x][y] + idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first)), cnt = min_cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                Connect(id2(i, j), id1(i + <span class="number">1</span>, j), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                Connect(id2(i, j), id1(i + <span class="number">1</span>, j + <span class="number">1</span>), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + i - <span class="number">1</span>; ++j)</span><br><span class="line">                Connect(id1(i, j), id2(i, j), <span class="number">1</span>, -a[i][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            Connect(s, id1(<span class="number">1</span>, i), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + n - <span class="number">1</span>; ++i)</span><br><span class="line">            Connect(id2(n, i), t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        zkw.solve(s, t);</span><br><span class="line">        io::write(-min_cost, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> task2 &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first)), cnt = min_cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                Connect(Id(i, j), Id(i + <span class="number">1</span>, j), <span class="number">1</span>, -a[i][j]);</span><br><span class="line">                Connect(Id(i, j), Id(i + <span class="number">1</span>, j + <span class="number">1</span>), <span class="number">1</span>, -a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            Connect(s, Id(<span class="number">1</span>, i), <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + n - <span class="number">1</span>; ++i)</span><br><span class="line">            Connect(Id(n, i), t, inf, -a[n][i]);</span><br><span class="line">        zkw.solve(s, t);</span><br><span class="line">        io::write(-min_cost, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> task3 &#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, f[S][S] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + n - <span class="number">1</span>; ++i) f[n][i] = a[n][i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + i - <span class="number">1</span>; ++j)</span><br><span class="line">                f[i][j] = a[i][j] + <span class="built_in">std</span>::max(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) ans += f[<span class="number">1</span>][i];</span><br><span class="line">        io::write(ans, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"number.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"number.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(m, n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + i - <span class="number">1</span>; ++j)</span><br><span class="line">            io::read(a[i][j]), id[i][j] = ++idx;</span><br><span class="line">    s = ++idx, t = ++idx;</span><br><span class="line">    task1::solve();</span><br><span class="line">    task2::solve();</span><br><span class="line">    task3::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4012 深海机器人问题</title>
      <link href="/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4012-%E6%B7%B1%E6%B5%B7%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/18/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4012-%E6%B7%B1%E6%B5%B7%E6%9C%BA%E5%99%A8%E4%BA%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个 $P \cdot Q$ 的 <strong>网格图</strong>，点 $(x, y)$ 到 右方或上方的格子的 <strong>有向边</strong> 上有一定的价值，每个价值只会被计算一遍。</p><p>其中有 $a$ 个点 $(x_{1, i}, y_{1, i}) \quad (i \in [1, a])$ 会放出机器人，并且有 $b$ 个点 $(x_{2, i}, y_{2, i}) \quad(i \in [1, b])$ 可以回收机器人。</p><p>机器人必须被回收，求最大总价值。</p><p>$1 \le P, Q \le 15$，$1 \le a \le 4$，$1 \le b \le 6$。</p><p><a href="https://www.luogu.com.cn/problem/P4012" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>考虑费用流模型。</p><p>把超级汇点连向所有能 <strong>放出</strong> 机器人的点，流量为 $a$，费用为 $0$；</p><p>把所有能 <strong>回收</strong> 机器人的点连向超级汇点，流量为 $b$，费用为 $0$。</p><p>然后是格点与格点之间的边，流量为 $\inf$，费用为 $-c$。</p><p>这样，就能转化为最小费用最大流（其实最小费用的相反数就是最大价值）的模型了。</p><p><del>zkw 费用流的模板我就不贴了。</del></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, P, Q, s, t, min_cost, max_flow;</span><br><span class="line"><span class="keyword">int</span> cnt, first[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt, ct;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Connect</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    Add_Edge(u, v, w, c);</span><br><span class="line">    Add_Edge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (Q + <span class="number">1</span>) + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"robot.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"robot.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(a, b, P, Q), s = (P + <span class="number">1</span>) * (Q + <span class="number">1</span>) + <span class="number">1</span>, t = (P + <span class="number">1</span>) * (Q + <span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= P; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Q; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> cost;</span><br><span class="line">            io::read(cost);</span><br><span class="line">            Connect(Id(i, j), Id(i, j + <span class="number">1</span>), <span class="number">1</span>, -cost);</span><br><span class="line">            Connect(Id(i, j), Id(i, j + <span class="number">1</span>), inf, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; P; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> cost;</span><br><span class="line">            io::read(cost);</span><br><span class="line">            Connect(Id(j, i), Id(j + <span class="number">1</span>, i), <span class="number">1</span>, -cost);</span><br><span class="line">            Connect(Id(j, i), Id(j + <span class="number">1</span>, i), inf, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, x, y;</span><br><span class="line">        io::read(k, x, y);</span><br><span class="line">        Connect(s, Id(x, y), k, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> r, x, y;</span><br><span class="line">        io::read(r, x, y);</span><br><span class="line">        Connect(Id(x, y), t, r, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    zkw.solve(s, t);</span><br><span class="line">    io::write(-min_cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4014 分配问题</title>
      <link href="/2020/04/17/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4014-%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/17/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4014-%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>有 $n$ 件事情要分给 $n$ 个人做，第 $i$ 个人做第 $j$ 件事情会得到 $a_{i, j}$ 的利润，求总利润的最大及最小值。</p><p>$1 \le n \le 100，-100 \le a_{i, j} \le 100$</p><p><a href="https://www.luogu.com.cn/problem/P4014" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>二分图的最大带权匹配模板题。</p><p>考虑使用费用流的方法（而不是二分图的相关算法）来解决这个问题。</p><p>建立超级源点，向每个人连一条流量为 $1$，费用为 $0$ 的边；</p><p>建立超级汇点，从每个事情连一条流量为 $1$，费用为 $0$ 的边。</p><p>第 $i$ 个人和第 $j$ 个事情间连一条 流量为 $1$，费用为 $a_{i, j}$ 的边。</p><p>这样可以保证每个人 <strong>仅会被使用一次</strong>。</p><p>至于最小带权匹配，边权取相反数即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="comment">// #define LOCAL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, t, min_cost, ans1, ans2, a[N][N];</span><br><span class="line"><span class="keyword">int</span> cnt, first[N * N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt, ct;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Connect</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    Add_Edge(u, v, w, c);</span><br><span class="line">    Add_Edge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ZKW</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N;</span><br><span class="line">    <span class="keyword">int</span> dis[MS], vis[MS];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.push(ed), vis[ed] = <span class="number">1</span>, dis[ed] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q.front(); q.pop(), vis[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">                <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">                <span class="keyword">if</span>(e[i ^ <span class="number">1</span>].wt &amp;&amp; dis[y] &gt; dis[x] - e[i].ct) &#123;</span><br><span class="line">                    dis[y] = dis[x] - e[i].ct;</span><br><span class="line">                    <span class="keyword">if</span>(!vis[y]) &#123;</span><br><span class="line">                        vis[y] = <span class="number">1</span>;</span><br><span class="line">                        q.push(y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[st] ^ inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">        vis[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">        <span class="keyword">int</span> used = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!vis[y] &amp;&amp; e[i].wt &amp;&amp; dis[y] == dis[x] - e[i].ct) &#123;</span><br><span class="line">                <span class="keyword">int</span> cur_flow = aug(y, <span class="built_in">std</span>::min(in - used, e[i].wt));</span><br><span class="line">                <span class="keyword">if</span>(cur_flow) &#123;</span><br><span class="line">                    min_cost += cur_flow * e[i].ct;</span><br><span class="line">                    e[i].wt -= cur_flow;</span><br><span class="line">                    e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">                    used += cur_flow;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(used == in) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> used;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">        min_cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(spfa(st, ed)) &#123;</span><br><span class="line">            vis[ed] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(vis[ed]) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">                aug(st, inf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; zkw;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build_Graph</span><span class="params">(<span class="keyword">int</span> mul)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first)), cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        Connect(s, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>; i &lt;= n + n; ++i)</span><br><span class="line">        Connect(i, t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            Connect(i, j + n, <span class="number">1</span>, a[i][j] * mul);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">    freopen(<span class="string">"arrange.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"arrange.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    io::read(n);</span><br><span class="line">    s = <span class="number">2</span> * n + <span class="number">1</span>, t = <span class="number">2</span> * n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            io::read(a[i][j]);</span><br><span class="line">    Build_Graph(<span class="number">1</span>), zkw.solve(s, t);</span><br><span class="line">    ans1 = min_cost;</span><br><span class="line">    Build_Graph(<span class="number">-1</span>), zkw.solve(s, t);</span><br><span class="line">    ans2 = -min_cost;</span><br><span class="line">    io::write(ans1, <span class="string">'\n'</span>, ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P6396 要有光</title>
      <link href="/2020/04/13/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6396-%E8%A6%81%E6%9C%89%E5%85%89/"/>
      <url>/2020/04/13/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6396-%E8%A6%81%E6%9C%89%E5%85%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个字符串 $S_0$，有 $q$ 组询问，每次问由 $S_0$ 变为 $S_0[l \ldots r]$ 所需要经过的最小花费。</p><p>操作 1：$S \gets T$，其中 $T$ 为 $S$ 的最长回文后缀，此操作花费为 $A$；</p><p>操作 2：$S \gets T$，其中 $S$ 为 $T$ 的最长回文后缀，且 $T$ 为 $S_0$ 的子串，此操作花费为 $B$；</p><p>操作 3：对于非空的 $S \gets T$，其中 $T$ 为 $S$ 删除长度 <strong>不大于</strong> $k$ 的前缀与后缀得到的，此操作花费为 $C$；</p><p>操作 4：对于非空的 $S \gets T$，其中 $T$ 为 $S_1+S+\overleftarrow{S_1}$，且 $T$ 为 $S_0$ 的子串，此操作花费为 $D$；</p><p>操作 5：对于非空的 $S \gets T$，其中 $T$ 为 $c + S$，$c$ 为任意字符，且 <strong>使用此操作后，在以后的操作中，不允许再使用其他操作</strong>，此操作花费为 $E$；</p><p>$1 \le \left|S_0\right|, q \le 10^5$，$1 \le \left|\Sigma\right| \le 52$。</p><p><a href="https://www.luogu.com.cn/problem/P6396" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="操作-1"><a href="#操作-1" class="headerlink" title="操作 1"></a>操作 1</h4><p>直接连 $(i, fail_i)$，边权为 $A$ 的边即可。</p><h4 id="操作-2"><a href="#操作-2" class="headerlink" title="操作 2"></a>操作 2</h4><p>直接连 $(fail_i, i)$，边权为 $B$ 的边即可。</p><h4 id="操作-3"><a href="#操作-3" class="headerlink" title="操作 3"></a>操作 3</h4><p>预处理出 $i$ 的父亲 $fa_i$，然后连 $k$ 条 $(i, fa_i)$，边权为 $C$ 的边。</p><h4 id="操作-4"><a href="#操作-4" class="headerlink" title="操作 4"></a>操作 4</h4><p>这个操作，本质上是从 $i$ 以 $D$ 的代价转移到 $i$ 子树中的任意一个结点。</p><p>但是，考虑到 $i$ 的子树可能会非常大，依次连接于边数或是时间复杂度上均不合理。</p><p>考虑虚树的思想，对每个点建立一个对应的虚点，而虚点 <strong>只能往儿子的方向</strong> 转移（花费为 $0$）。</p><p>那么，连一条 $(i, i’)$，边权为 $D$ 的边，以及 $(i’, i)$，边权为 $0$ 的边即可。</p><h4 id="操作-5"><a href="#操作-5" class="headerlink" title="操作 5"></a>操作 5</h4><p>操作 5 是独立于上述四个操作的，因为进行完一次操作 5 后 <strong>不能再使用</strong> 上述四个操作了。</p><p>这个倍增一下 level ancestor，结合 dp 转移即可。</p><p>设 $dis_i$ 表示 Dijkstra 求出来的最短路的距离，</p><p>设 $f(i)$ 表示使用五种操作到达 $i$ 的最少花费，则 $f(i) = \min\{dis_i, f(fail_i) + E\cdot(len_i - len_{fail_i})\}$</p><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>记 $\left|S\right| = n$。</p><p>显然边的数量是线性的，不难得出最后的时间复杂度为 $O((n + q)\log(n))$。</p><p><del>可以使用配对堆优化 Dijkstra。</del></p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><p>Dijkstra 我就不贴了。</p><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, ta, tb, tc, td, te, q, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt, first[N], pos[N];</span><br><span class="line">LL dis[N], f[N];</span><br><span class="line"><span class="keyword">int</span> lg2, anc[N][<span class="number">40</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EERTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, cntNode, last, s[MS], len[MS], fail[MS], par[MS], ch[MS][C], lst[MS];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) ch[cntNode][i] = <span class="number">0</span>;</span><br><span class="line">        len[cntNode] = l;</span><br><span class="line">        <span class="keyword">return</span> cntNode++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetFail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s[n] != s[n - len[x] - <span class="number">1</span>]) x = fail[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s[++n] = x;</span><br><span class="line">        <span class="keyword">int</span> fa = GetFail(last);</span><br><span class="line">        <span class="keyword">if</span>(!ch[fa][x]) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = make(len[fa] + <span class="number">2</span>);</span><br><span class="line">            fail[now] = ch[ GetFail(fail[fa]) ][x];</span><br><span class="line">            ch[fa][x] = now;</span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[fa][x];</span><br><span class="line">        par[last] = fa, lst[n] = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = cntNode = last = <span class="number">0</span>;</span><br><span class="line">        make(<span class="number">0</span>), make(<span class="number">-1</span>);</span><br><span class="line">        fail[<span class="number">0</span>] = <span class="number">1</span>, fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EERTREE() &#123; init(); &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">I</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'a'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'z'</span>)</span><br><span class="line">        <span class="keyword">return</span> ch - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">26</span> + ch - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">G</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + t.cntNode - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build_Graph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t.cntNode - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(t.fail[i] &gt; <span class="number">1</span>) Add_Edge(i, t.fail[i], ta), Add_Edge(t.fail[i], i, tb);</span><br><span class="line">        <span class="keyword">else</span> Add_Edge(i, <span class="number">1</span>, ta), Add_Edge(<span class="number">1</span>, i, tb);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, fa = t.par[i]; j &lt;= k &amp;&amp; fa &gt; <span class="number">1</span>; ++j, fa = t.par[fa])</span><br><span class="line">            Add_Edge(i, fa, tc);</span><br><span class="line">        Add_Edge(i, G(i), td);</span><br><span class="line">        Add_Edge(G(i), i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.C; ++j)</span><br><span class="line">            <span class="keyword">if</span>(t.ch[i][j])</span><br><span class="line">                Add_Edge( G(i), G(t.ch[i][j]), <span class="number">0</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( ; <span class="number">1L</span>L &lt;&lt; lg2 &lt; m; ++lg2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t.cntNode - <span class="number">1</span>; ++i) anc[i][<span class="number">0</span>] = <span class="built_in">std</span>::max(t.fail[i], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lg2; ++j)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t.cntNode - <span class="number">1</span>; ++i)</span><br><span class="line">            anc[i][j] = anc[anc[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t.len[x] &lt;= len) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = lg2; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">        <span class="keyword">if</span>(anc[x][j] &gt; <span class="number">1</span> &amp;&amp; t.len[anc[x][j]] &gt; len)</span><br><span class="line">            x = anc[x][j];</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="number">1</span> &amp;&amp; r == m) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = Find(t.lst[r], r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[p] + <span class="number">1L</span>L * (r - l + <span class="number">1</span> - t.len[p]) * te + (!flag) * ta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>), m = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d %d %d"</span>, &amp;k, &amp;ta, &amp;tb, &amp;tc, &amp;td, &amp;te, &amp;q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) t.extend( I(str[i]) );</span><br><span class="line">    Build_Graph();</span><br><span class="line">    Dijkstra(t.last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) flag &amp;= (str[i] == str[m - i + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = inf, f[<span class="number">1</span>] = dis[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t.cntNode - <span class="number">1</span>; ++i)</span><br><span class="line">        f[i] = <span class="built_in">std</span>::min(dis[i], f[t.fail[i]] + <span class="number">1L</span>L * te * (t.len[i] - t.len[t.fail[i]]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;r);</span><br><span class="line">        solve(l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 回文树 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P1251 餐巾计划问题</title>
      <link href="/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P1251-%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P1251-%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>有一家餐厅，在接下来的 $N$ 天中，每天需要 $a_i$ 条餐巾。</p><p>每天你可以进行下列四种操作之一：</p><ol><li>以 $p$ 元/条的单价购买新的毛巾（数量自选）；</li><li>延一天洗手上已有的毛巾（数量自选）；</li><li>将脏毛巾（数量自选）以 $f$ 元/条的单价送到慢洗店，$n$ 天后送回来；</li><li>将脏毛巾（数量自选）以 $s$ 元/条的单价送到快洗店，$m$ 天后送回来。</li></ol><p>在第 $i$ 天买的餐巾可以供第 $j\quad(j \in [i + 1, N])$ 天使用，但 <strong>曾被用过的餐巾</strong> 在第二次用之前必须要洗一下。</p><p>餐厅需要保证每天 <strong>不能供不应需</strong>，求最小花费。</p><p>$1 \le N \le 10^3$，$1 \le a_i \le 10^9$。</p><p><a href="https://www.luogu.com.cn/problem/P1251" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p><del>这题的建模好有意思。</del></p><p>考虑拆点建模，每个点被分为了“起始点”（即 $S(i)$）和“结束点”（即 $E(i)$）两个点。</p><p>我们将在“起始点”考虑毛巾的输出，在“结束点”考虑毛巾的收集。</p><p>操作 1 即为从超级源点连向 $S(i)$，流量为 $\inf$，费用为 $p$。因为我们能无限供应新的毛巾，而新的毛巾是 $p$ 元/条的。</p><p>操作 2 即为从某个点 $S(i)$ 直接连到 $S(i + 1)$。注意，这里我们是从起始点连向起始点，因为我们将在 $S(i + 1)$ 的时候考虑 $S(i)$ 延一天没洗的毛巾。</p><p>操作 3 即为从某个点 $S(i)$ 直接送到 $E(i + n)$，流量为 $\inf$，费用为 $f$。因为我们将在第 $i + n$ 的末尾收到一些毛巾，而这些毛巾是 $f$ 元/条的。</p><p>操作 4 即为从某个点 $S(i)$ 直接送到 $E(i + m)$，流量为 $\inf$，费用为 $s$。因为我们将在第 $i + m$ 的末尾收到一些毛巾，而这些毛巾是 $s$ 元/条的。</p><p>最后跑费用流即可，记得开 <code>long long</code>。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, c, a, p, b, q, S, T, cnt;</span><br><span class="line"><span class="keyword">int</span> first[N], dis[N], inq[N], pre[N], arc[N], need[N];</span><br><span class="line">LL min_cost, flow[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, ct;</span><br><span class="line">    LL wt;</span><br><span class="line">&#125; e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> _c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = _c, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">    e[cnt].to = u, e[cnt].wt = <span class="number">0</span>, e[cnt].ct = -_c, e[cnt]._next = first[v];</span><br><span class="line">    first[v] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(flow, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(flow));</span><br><span class="line">    q.push(st), inq[st] = <span class="number">1</span>, dis[st] = <span class="number">0</span>, pre[ed] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop(), inq[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(e[i].wt &gt; <span class="number">0</span> &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123;</span><br><span class="line">                dis[y] = dis[x] + e[i].ct;</span><br><span class="line">                pre[y] = x, arc[y] = i;</span><br><span class="line">                flow[y] = <span class="built_in">std</span>::min(flow[x], e[i].wt);</span><br><span class="line">                <span class="keyword">if</span>(!inq[y]) &#123;</span><br><span class="line">                    q.push(y), inq[y] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ~pre[ed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mcmf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa(S, T)) &#123;</span><br><span class="line">        min_cost += <span class="number">1L</span>L * flow[T] * dis[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = T; i != S; i = pre[i]) &#123;</span><br><span class="line">            e[ arc[i] ].wt -= flow[T];</span><br><span class="line">            e[ arc[i] ^ <span class="number">1</span> ].wt += flow[T];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    io::read(n), S = <span class="number">0</span>, T = n &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) io::read(need[i]);</span><br><span class="line">    io::read(c, a, p, b, q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        Add_Edge(S, i, need[i], <span class="number">0</span>);                     <span class="comment">// 起始点</span></span><br><span class="line">        Add_Edge(i + n, T, need[i], <span class="number">0</span>);                 <span class="comment">// 结束点</span></span><br><span class="line">        Add_Edge(S, i + n, oo, c);                      <span class="comment">// 买新的餐巾</span></span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">1</span> &lt;= n) Add_Edge(i, i + <span class="number">1</span>, oo, <span class="number">0</span>);       <span class="comment">// 拖到明天</span></span><br><span class="line">        <span class="keyword">if</span>(i + a &lt;= n) Add_Edge(i, i + a + n, oo, p);   <span class="comment">// 快洗店</span></span><br><span class="line">        <span class="keyword">if</span>(i + b &lt;= n) Add_Edge(i, i + b + n, oo, q);   <span class="comment">// 慢洗店</span></span><br><span class="line">    &#125;</span><br><span class="line">    mcmf();</span><br><span class="line">    io::write(min_cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2761 软件补丁问题</title>
      <link href="/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2761-%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/11/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2761-%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>题意比较复杂，建议到 OJ 上查看。</p><p><a href="https://www.luogu.com.cn/problem/P2761" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>由于 $1 \le n \le 20$，因此考虑状压。</p><p>于是有 $2^n - 1$ 个点，每个点分别表示着所有漏洞被打补丁的所有情况（被打补丁或没被打补丁）。</p><p>点与点之间的转移即为每个补丁，边权就是打这个补丁所花费的时间。</p><p>转移条件需要额外判断：</p><ol><li>包含 $B_{1, i}$ 中的所有元素，即 <code>b1[i] &amp; x == b1[i]</code>；</li><li>不包含 $B_{2, i}$ 中的任意一个元素，即 <code>b2[i] &amp; x == 0</code>；</li></ol><p>由于点、边的数量较多，我们考虑枚举每个补丁来转移：</p><ol><li>修复了 $F_{1, i}$ 中的错误，即 <code>&amp; (~f1[i])</code>；</li><li>带进来了新的 $F_{2, i}$ 中的错误，即 <code>| f2[i]</code>；</li></ol><p>所以 spfa 松弛的点应为 <code>y = (x &amp; (~f1[i])) | f2[i];</code>。</p><p>最后，求最短路即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">1</span> &lt;&lt; <span class="number">22</span> | <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> tim[M], b1[N], b2[N], f1[N], f2[N], inq[V], dis[V];</span><br><span class="line"><span class="keyword">char</span> str1[N], str2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line"></span><br><span class="line">    inq[s] = <span class="number">1</span>, q.push(s), dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop(), inq[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>((b1[i] &amp; x) == b1[i] &amp;&amp; (b2[i] &amp; x) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//                int y = ((x | f1[i]) | f2[i]) ^ f1[i];</span></span><br><span class="line">                <span class="keyword">int</span> y = (x &amp; (~f1[i])) | f2[i];</span><br><span class="line">                <span class="keyword">if</span>(dis[x] + tim[i] &lt; dis[y]) &#123;</span><br><span class="line">                    dis[y] = dis[x] + tim[i];</span><br><span class="line">                    <span class="keyword">if</span>(!inq[y]) &#123;</span><br><span class="line">                        inq[y] = <span class="number">1</span>;</span><br><span class="line">                        q.push(y);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    io::read(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        io::read(tim[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, str1 + <span class="number">1</span>, str2 + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            b1[i] |= ((str1[j] == <span class="string">'+'</span>) &lt;&lt; j - <span class="number">1</span>);</span><br><span class="line">            b2[i] |= ((str1[j] == <span class="string">'-'</span>) &lt;&lt; j - <span class="number">1</span>);</span><br><span class="line">            f1[i] |= ((str2[j] == <span class="string">'-'</span>) &lt;&lt; j - <span class="number">1</span>);</span><br><span class="line">            f2[i] |= ((str2[j] == <span class="string">'+'</span>) &lt;&lt; j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    spfa((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, dis[<span class="number">0</span>] == oo ? <span class="number">0</span> : dis[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 状压 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2762 太空飞行计划问题</title>
      <link href="/2020/04/10/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2762-%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/10/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2762-%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个二分图 $G = (V_1, V_2, E)$，其中 $V_{1, i}$ 有 <strong>正</strong> 权值 $a_i$，$V_{2, i}$ 有 <strong>负</strong> 权值 $b_i$。</p><p>若选择了 $V_{1, i}$ 则必须选择与 $V_{1, i}$ 相连的所有 $V_{2, j}$，问能达到的权值和最大为多少。</p><p>$1 \le \left|V_1\right|, \left|V_2\right| \le 50$。</p><p><a href="https://www.luogu.com.cn/problem/P2762" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>考虑最小割模型。</p><p>建立超级源点和超级汇点，</p><p>超级源点向每个 $V_{1, i}$ 连一条流量为 $a_i$ 的边，</p><p>每个 $V_{2, i}$ 向超级汇点连一条流量为 $b_i$ 的边。</p><p>然后对于每个 $e = (u, v)$，在 $u, v$ 之间连一条流量为 $\inf$ 的边。</p><p>那么这个最小割，显然不会割断 $e = (u, v)$，而是只会割断两侧的边，即放弃费用或者赞助。</p><p>总和减去最小割的大小即为答案。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'\r'</span> || ch == <span class="string">'\n'</span>) flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, t, sum, cnt, max_flow;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N], first[N], cur[N], dep[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(S), dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[y] &amp;&amp; e[i].wt) &#123;</span><br><span class="line">                dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(y);</span><br><span class="line">                <span class="keyword">if</span>(y == T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">    <span class="keyword">int</span> out = in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(e[i].wt &amp;&amp; dep[y] == dep[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_flow = dinic(y, <span class="built_in">std</span>::min(e[i].wt, out));</span><br><span class="line">            <span class="keyword">if</span>(!cur_flow) dep[y] = <span class="number">0</span>;</span><br><span class="line">            e[i].wt -= cur_flow;</span><br><span class="line">            e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">            out -= cur_flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in - out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    io::read(m, n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    s = <span class="number">0</span>, t = m + n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        io::read(a[i]), sum += a[i];</span><br><span class="line">        Add_Edge(s, i, a[i]);</span><br><span class="line">        Add_Edge(i, s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!flag) &#123;</span><br><span class="line">            io::read(c[i]);</span><br><span class="line">            Add_Edge(i, c[i] + m, oo);</span><br><span class="line">            Add_Edge(c[i] + m, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        io::read(b[i]);</span><br><span class="line">        Add_Edge(i + m, t, b[i]);</span><br><span class="line">        Add_Edge(t, i + m, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, first, <span class="keyword">sizeof</span>(first));</span><br><span class="line">        max_flow += dinic(s, oo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span>(dep[i] &gt; <span class="number">0</span>) io::write(i, <span class="string">' '</span>);</span><br><span class="line">    io::write(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(dep[i + m] &gt; <span class="number">0</span>) io::write(i, <span class="string">' '</span>);</span><br><span class="line">    io::write(<span class="string">'\n'</span>);</span><br><span class="line">    io::write(sum - max_flow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文化课】数列不动点浅探</title>
      <link href="/2020/04/08/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E6%95%B0%E5%88%97%E4%B8%8D%E5%8A%A8%E7%82%B9%E6%B5%85%E6%8E%A2/"/>
      <url>/2020/04/08/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E6%95%B0%E5%88%97%E4%B8%8D%E5%8A%A8%E7%82%B9%E6%B5%85%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>数列不动点可以辅助我们快速解题。</p><a id="more"></a><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol><li><p>已知函数 $f(x)$，若存在 $x_0$ 使得 $f(x_0) = x_0$，则称 $x_0$ 为 $f(x)$ 的一个不动点。</p></li><li><p>若数列 $\{a_n\}$ 满足 $a_{n + 1} = g(a_n) \quad(n \in \mathbb{N}^{*})$，则称 $g(x)$ 为数列 $\{a_n\}$ 的递推函数。</p></li></ol><h4 id="定理一"><a href="#定理一" class="headerlink" title="定理一"></a>定理一</h4><p>若 $f(x) = ax + b\quad(a \notin \{0, 1\})$ 为数列 $\{a_n\}$ 的递推函数，且 $p$ 为 $f(x)$ 的不动点，则数列 $\{a_n - p\}$ 为公比为 $a$ 的等比数列。</p><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>$\because$ $p$ 为 $f(x)$ 的不动点</p><p>$\therefore p = f(p) = ap + b$，即 $b - p = -ap$</p><p>又 $a_{n + 1} = f(a_n) = a\cdot a_n + b$</p><p>$\begin{aligned}\therefore a_{n + 1} - p &amp; = a\cdot a_n + b - p \\ &amp; = a\cdot a_n - ap \\ &amp; = a(a_n - p)\end{aligned}$</p><p>$\therefore$ $\{a_n - p\}$ 为公比为 $a$ 的等比数列</p>              </div>            </details><h4 id="定理二"><a href="#定理二" class="headerlink" title="定理二"></a>定理二</h4><ol><li><p>若 $f(x) = \dfrac{ax + b}{cx + d}\quad(c \neq 0, ad - bc \neq 0)$ 为数列 $\{a_n\}$ 的递推函数，且 $p, q$ 为 $f(x)$ 的两 <strong>相异</strong> 不动点，则数列 $\{\dfrac{a_n - p}{a_n - q}\}$ 为公比为 $\dfrac{a - pc}{a - qc}$ 的等比数列。</p><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>由 $x = f(x) = \dfrac{ax + b}{cx + d}$ 知 $cx^2 + (d - a)x - b = 0$</p><p>将 $x_1 = p, x_2 = q$ 代入得 $\begin{cases}cp^2 + (d - a)p - b = 0 \\ cq^2 + (d - a)q - b = 0\end{cases}$</p><p>整理得 $\begin{cases}p = \dfrac{pd - b}{a - pc} \\ q = \dfrac{qd - b}{a - qc}\end{cases}$</p><p>$\begin{aligned}\therefore \dfrac{a_{n + 1} - p}{a_{n + 1} - q} &amp; = \dfrac{\dfrac{a\cdot a_n + b}{c\cdot a_n + d} - p}{\dfrac{a\cdot a_n + b}{c\cdot a_n + d} - q} \\ &amp; = \dfrac{(a - pc)a_n + b - pd}{(a - qc)a_n + b - qd} \\ &amp; = \dfrac{a - pc}{a - qc} \cdot \dfrac{a_n - \dfrac{pd - b}{a - pc}}{a_n - \dfrac{qd - b}{a - qc}} \\ &amp; = \dfrac{a_n - p}{a_n - q}\cdot\dfrac{a - pc}{a - qc}\end{aligned}$</p><p>$\therefore$ $\{\dfrac{a_n - p}{a_n - q}\}$ 为公比为 $\dfrac{a - pc}{a - qc}$ 的等比数列</p>              </div>            </details></li><li><p>若 $f(x) = \dfrac{ax + b}{cx + d}\quad(c \neq 0, ad - bc \neq 0)$ 为数列 $\{a_n\}$ 的递推函数，且 $p$ 为 $f(x)$ 的 <strong>唯一</strong> 不动点，则数列 $\{\dfrac{1}{a_n - p}\}$ 为公差为 $\dfrac{2c}{a + d}$ 的等差数列。</p><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>由 $x = f(x) = \dfrac{ax + b}{cx + d}$ 知 $cx^2 + (d - a)x - b = 0$</p><p>$\therefore cp^2 + (d - a)p - b = 0$，即 $b - pd = cp^2 - ap$</p><p>$\begin{aligned}\therefore \dfrac{1}{a_{n + 1} - p} &amp; = \dfrac{1}{\dfrac{a\cdot a_n + b}{c\cdot a_n + d} - p} \\ &amp; = \dfrac{c\cdot a_n + d}{(a - cp)\cdot a_n + b - pd} \\ &amp; = \dfrac{c\cdot a_n + d}{(a - cp)\cdot a_n + cp^2 - ap} \\ &amp; = \dfrac{c\cdot a_n + d}{(a - cp)(a_n - p)} \\ &amp; = \dfrac{1}{a - cp}\cdot\dfrac{c(a_n - p) + cp + d}{a_n - p} \\ &amp; = \dfrac{c}{a - cp} + \dfrac{cp + d}{a - cp}\cdot\dfrac{1}{a_n - p} \\ &amp; = \dfrac{1}{a_n - p} + \dfrac{2c}{a + d}\end{aligned}$</p><p>$\therefore$ $\{\dfrac{1}{a_n - p}\}$ 为公差为 $\dfrac{2c}{a + d}$ 的等差数列</p>              </div>            </details></li></ol><h4 id="定理三"><a href="#定理三" class="headerlink" title="定理三"></a>定理三</h4><p>若 $f(x) = \dfrac{ax^2 + bx + c}{ex + f}$ 为数列 $\{a_n\}$ 的递推函数，且 $p, q$ 为 $f(x)$ 的两 <strong>相异</strong> 不动点，则 <strong>当且仅当</strong> $b = 0, e = 2a$ 时有 $\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\dfrac{a_n - p}{a_n - q})^2$。</p><details ><summary> <p>证明</p> </summary>              <div class='content'>              <p>$\because$ $p, q$ 为 $f(x)$ 的两相异不动点</p><p>$\therefore \begin{cases}c - pf = (e - a)p^2 - bp \\ c - qf = (e - a)q^2 - bq\end{cases}$</p><p>$\begin{aligned}\therefore \dfrac{a_{n + 1} - p}{a_{n + 1} - q} &amp; = \dfrac{a\cdot a_n^2 + b\cdot a_n + c - p(e\cdot a_n + f)}{a\cdot a_n^2 + b\cdot a_n + c - q(e\cdot a_n + f)} \\ &amp; = \dfrac{a\cdot a_n^2 + (b - ep)\cdot a_n + c - pf}{a\cdot a_n^2 + (b - eq)\cdot a_n + c - qf} \\ &amp; = \dfrac{a\cdot a_n^2 + (b - ep)\cdot a_n + (e - a)\cdot p^2 - bp}{a\cdot a_n^2 - (b - eq)\cdot a_n + (e - a)\cdot q^2 - bq}\end{aligned}$</p><p>$\begin{aligned}\therefore \dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\dfrac{a_n - p}{a_n - q})^2 &amp; \iff \dfrac{a\cdot a_n^2 + (b - ep)\cdot a_n + (e - a)\cdot p^2 - bp}{a\cdot a_n^2 - (b - eq)\cdot a_n + (e - a)\cdot q^2 - bq} = \dfrac{a_n^2 - 2p\cdot a_n + p^2}{a_n^2 - 2q\cdot a_n + q^2} \\ &amp; \iff \begin{cases}b - ep = -2ap \\ b - eq = -2aq\end{cases} \\ &amp; \iff \begin{cases}(2a - e)p + b = 0 \\ (2a - e)q + b = 0\end{cases} \\ &amp; \iff \begin{cases}b = 0 \\ e = 2a\end{cases} \quad(p \neq q)\end{aligned}$</p>              </div>            </details><h3 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h3><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p>设数列 $\{a_n\}$ 满足 $a_1 = 1, a_{n + 1} = \dfrac{a_n + 2}{a_n}$，求数列 $\{a_n\}$ 的通项公式。</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>特征方程为 $x = \dfrac{x + 2}{x}$，解得 $x_1 = -1, x_2 = 2$</p><p>$\therefore$ $\{\dfrac{a_n + 1}{a_n - 2}\}$ 为首项为 $-2$，公比为 $-2$ 的等比数列</p><p>$\therefore \dfrac{a_n +1}{a_n - 2} = (-2)^n$</p><p>$\therefore a_n = \dfrac{2\cdot (-2)^n +1}{(-2)^n - 1}$</p>              </div>            </details><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>数列 $\{a_n\}$ 满足下列关系：$a_1 = 2a, a_{n + 1} = 2a - \dfrac{a^2}{a_n}\quad(a \neq 0)$，求数列 $\{a_n\}$ 的通项公式。</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>特征方程为 $x = \dfrac{2ax - a^2}{x}$，解得 $x_1 = x_2 = a$</p><p>$\therefore$ $\{\dfrac{1}{a_n - a}\}$ 为首项为 $\dfrac{1}{a}$，公比为 $\dfrac{1}{a}$ 的等比数列</p><p>$\therefore \dfrac{1}{a_n - a} = \dfrac{n}{a}$</p><p>$\therefore a_n = \dfrac{a + na}{n}$</p>              </div>            </details><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p>已知数列 $\{a_n\}$ 满足 $a_1 = 2, a_{n + 1} = \dfrac{a_n^2 + 2}{2a_n}$，求数列 $\{a_n\}$ 的通项公式。</p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>特征方程为 $x = \dfrac{x^2 + 2}{2x}$，解得 $x_1 = \sqrt{2}, x_2 = -\sqrt{2}$</p><p>$\therefore \dfrac{a_{n + 1} - \sqrt{2}}{a_{n + 1} + \sqrt{2}} = (\dfrac{a_n - \sqrt{2}}{a_n + \sqrt{2}})^2$</p><p>$\therefore \dfrac{a_n - \sqrt{2}}{a_n + \sqrt{2}} = (3 - 2\sqrt{2})^{2^{n - 1}} = (\sqrt{2} - 1)^{2^n}$</p><p>$\therefore a_n = \sqrt{2}\cdot\dfrac{1 + (\sqrt{2} - 1)^{2^n}}{1 - (\sqrt{2} - 1)^{2^n}}$</p>              </div>            </details><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>就是套公式。</p>]]></content>
      
      
      <categories>
          
          <category> 文化课 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4015 运输问题</title>
      <link href="/2020/04/07/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4015-%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/07/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4015-%E8%BF%90%E8%BE%93%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定两个长度分别为 $m$ 和 $n$ 的序列 $A$ 和 $B$，</p><p>每次操作，使 $A_i \gets A_i - 1$，且 $B_j \gets B_j + 1$ 有代价 $C_{i, j}$，</p><p>求使得 $\sum_{j = 1}^{m}A_j = \sum_{j = 1}^{n}B_j$ 的最小费用。</p><p>$1 \le m, n \le 100$。</p><p><a href="https://www.luogu.com.cn/problem/P4015" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>建立超级源点，连向序列 $A_i$，流量为 $A_i$，费用为 $0$，表示有这么多的储存量；</p><p>再建立超级汇点，连向序列 $B_i$，流量为 $B_i$，费用为 $0$，表示需要这么多的货物。</p><p>第一问，$A_i$ 到 $B_j$ 连一条容量为 $B_j$，费用为 $C_{i, j}$ 的边，然后跑费用流求最小费用即可；</p><p>第二问，$A_i$ 到 $B_j$ 连一条容量为 $B_j$，费用为 $-C_{i, j}$ 的边，然后跑费用流求最小费用即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, S, T, cnt, min_cost;</span><br><span class="line"><span class="keyword">int</span> first[N], inq[N], a[N], b[N], dis[N], flow[N], pre[N], arc[N], d[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt, ct;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(flow, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(flow));</span><br><span class="line">    q.push(st), dis[st] = <span class="number">0</span>, inq[st] = <span class="number">1</span>, pre[ed] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop(), inq[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (e[i].wt &gt; <span class="number">0</span> &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123;</span><br><span class="line">                dis[y] = dis[x] + e[i].ct;</span><br><span class="line">                pre[y] = x, arc[y] = i;</span><br><span class="line">                flow[y] = <span class="built_in">std</span>::min(flow[x], e[i].wt);</span><br><span class="line">                <span class="keyword">if</span> (!inq[y])</span><br><span class="line">                    q.push(y), inq[y] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ~pre[ed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa(S, T)) &#123;</span><br><span class="line">        min_cost += flow[T] * dis[T];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = T; i != S; i = pre[i]) &#123;</span><br><span class="line">            e[ arc[i] ].wt -= flow[T];</span><br><span class="line">            e[ arc[i] ^ <span class="number">1</span> ].wt += flow[T];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> mul)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    cnt = min_cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        Add_Edge(S, i, a[i], <span class="number">0</span>);</span><br><span class="line">        Add_Edge(i, S, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        Add_Edge(i + m, T, b[i], <span class="number">0</span>);</span><br><span class="line">        Add_Edge(T, i + m, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            Add_Edge(i, j + m, b[j], d[i][j] * mul);</span><br><span class="line">            Add_Edge(j + m, i, <span class="number">0</span>, -d[i][j] * mul);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    io::read(m, n);</span><br><span class="line">    S = <span class="number">0</span>, T = <span class="number">2001</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) io::read(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) io::read(b[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            io::read(d[i][j]);</span><br><span class="line">    Build(<span class="number">1</span>);</span><br><span class="line">    MCMF();</span><br><span class="line">    io::write(min_cost, <span class="string">'\n'</span>);</span><br><span class="line">    Build(<span class="number">-1</span>);</span><br><span class="line">    MCMF();</span><br><span class="line">    io::write(-min_cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">220 280</span></span><br><span class="line"><span class="comment">170 120 210</span></span><br><span class="line"><span class="comment">77 39 105</span></span><br><span class="line"><span class="comment">150 186 122</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P6216 回文匹配</title>
      <link href="/2020/04/06/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6216-%E5%9B%9E%E6%96%87%E5%8C%B9%E9%85%8D/"/>
      <url>/2020/04/06/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P6216-%E5%9B%9E%E6%96%87%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定 $S, T$，求 $T$ 在 $S$ 的所有奇数长度的回文子串中出现的次数之和。</p><p>$1\le\left|S\right|, \left|T\right| \le 3\cdot10^6$。</p><p><a href="https://www.luogu.com.cn/problem/P6216" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>记 $n = \left|S\right|, m = \left|T\right|$。</p><p>在回文树上，从长度为 $-1$ 的虚拟节点 $1$ 开始 dfs，即可遍历所有奇数长度的回文子串。</p><p>注意到，即使回文树上的某个点对应的回文串在 $S$ 中多次出现，其本质上是相同的。</p><p>我们考虑记录一下每个回文串在 $S$ 中对应的右界，并用 KMP 处理出 $T$ 在 $S$ 的每一个前缀中出现的次数。</p><p>利用差分的思想，$T$ 在 $S[l..r]$ 中出现的次数就是 $sum_r - sum_{l + m - 2}$</p><p>答案即为</p><p>$$<br>  \sum_{u \in \text{subtree of node }1}(sum_r - sum_{l + m - 2})\cdot cnt_u<br>$$</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uint64 unsigned int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, sum[N], _next[N];</span><br><span class="line"><span class="keyword">char</span> str1[N], str2[N];</span><br><span class="line"></span><br><span class="line">uint64 ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EERTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> last;</span><br><span class="line">    <span class="keyword">int</span> cntNode;</span><br><span class="line">    <span class="keyword">int</span> len[MS];</span><br><span class="line">    <span class="keyword">int</span> R[MS];</span><br><span class="line">    <span class="keyword">int</span> cnt[MS];</span><br><span class="line">    <span class="keyword">int</span> link[MS];</span><br><span class="line">    <span class="keyword">int</span> ch[MS][C];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">        len[cntNode] = l;</span><br><span class="line">        <span class="keyword">return</span> cntNode++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetFail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(str1[n] != str1[n - len[x] - <span class="number">1</span>]) x = link[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">int</span> fa = GetFail(last);</span><br><span class="line">        <span class="keyword">if</span>(!ch[fa][x]) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = make(len[fa] + <span class="number">2</span>);</span><br><span class="line">            link[now] = ch[ GetFail(link[fa]) ][x];</span><br><span class="line">            ch[fa][x] = now;</span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[fa][x];</span><br><span class="line">        R[last] = n;</span><br><span class="line">        ++cnt[last];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = cntNode = last = <span class="number">0</span>;</span><br><span class="line">        make(<span class="number">0</span>), make(<span class="number">-1</span>);</span><br><span class="line">        link[<span class="number">0</span>] = <span class="number">1</span>, link[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        str1[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cntNode - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) cnt[ link[i] ] += cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len[x] &gt;= m)</span><br><span class="line">           ans += (sum[ R[x] ] - sum[ R[x] - len[x] + m - <span class="number">1</span>]) * cnt[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= C; ++i) <span class="keyword">if</span> (ch[x][i])</span><br><span class="line">            dfs(ch[x][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    EERTREE() &#123; init(); &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_Next</span><span class="params">(<span class="keyword">char</span> *S, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; len; ++i, j = _next[i]) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; S[i + <span class="number">1</span>] != S[j + <span class="number">1</span>])</span><br><span class="line">            j = _next[j];</span><br><span class="line">        <span class="keyword">if</span>(S[i + <span class="number">1</span>] == S[j + <span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        _next[i + <span class="number">1</span>] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> *S, <span class="keyword">int</span> len1, <span class="keyword">char</span> *T, <span class="keyword">int</span> len2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= len1; ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == len2)</span><br><span class="line">            sum[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(S[i + <span class="number">1</span>] == T[j + <span class="number">1</span>])</span><br><span class="line">            ++i, ++j;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) ++i;</span><br><span class="line">            <span class="keyword">else</span> j = _next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, str1 + <span class="number">1</span>, str2 + <span class="number">1</span>);</span><br><span class="line">    Get_Next(str2, m);</span><br><span class="line">    KMP(str1, n, str2, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) t.extend(str1[i] - <span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    t.refresh();</span><br><span class="line">    t.dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%u"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10 2</span></span><br><span class="line"><span class="comment">ccbccbbcbb bc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">20 2</span></span><br><span class="line"><span class="comment">cbcaacabcbacbbabacca ba</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文树 </tag>
            
            <tag> KMP </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】近期的小计划</title>
      <link href="/2020/03/30/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E8%BF%91%E6%9C%9F%E7%9A%84%E5%B0%8F%E8%AE%A1%E5%88%92/"/>
      <url>/2020/03/30/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E8%BF%91%E6%9C%9F%E7%9A%84%E5%B0%8F%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>众所周知，$\text{Clever_Jimmy}$ 是只鸽子。</p><a id="more"></a><h3 id="OI-相关"><a href="#OI-相关" class="headerlink" title="OI 相关"></a>OI 相关</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/06/29/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91KMP-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">KMP</a> 2020.07.04 完成</li><li><input disabled="" type="checkbox"> AC 自动机</li><li><input disabled="" type="checkbox"> 后缀树</li><li><input disabled="" type="checkbox"> 后缀数组</li><li><input disabled="" type="checkbox"> 最小表示法</li><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/06/22/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91EERTREE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">回文树</a> 2020.06.26 完成</li></ul><hr><h4 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h4><ul><li><input disabled="" type="checkbox"> 矩阵树定理</li><li><input disabled="" type="checkbox"> 最小树形图</li><li><input disabled="" type="checkbox"> 点双/边双</li><li><input disabled="" type="checkbox"> 2-SAT</li><li><input disabled="" type="checkbox"> 欧拉路径</li><li><input disabled="" type="checkbox"> 三元环</li><li><input disabled="" type="checkbox"> Prufer 序列</li><li><input disabled="" type="checkbox"> 强连通分量</li></ul><hr><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><input disabled="" type="checkbox"> K-D Tree</li><li><input disabled="" type="checkbox"> 笛卡尔树</li><li><input disabled="" type="checkbox"> 动态树</li></ul><hr><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">类欧几里得算法</a> 2020.05.05 完成</li><li><input disabled="" type="checkbox"> 中国剩余定理</li><li><input disabled="" type="checkbox"> BSGS</li><li><input disabled="" type="checkbox"> 卢卡斯定理</li><li><input disabled="" type="checkbox"> 莫比乌斯反演</li><li><input disabled="" type="checkbox"> 杜教筛</li><li><input disabled="" type="checkbox"> Min_25 筛</li><li><input disabled="" type="checkbox"> FFT</li><li><input disabled="" type="checkbox"> NTT</li><li><input disabled="" type="checkbox"> 拉格朗日插值</li><li><input disabled="" type="checkbox"> FWT</li><li><input disabled="" type="checkbox"> 线性基</li><li><input disabled="" type="checkbox"> 高斯消元</li><li><input disabled="" type="checkbox"> 二项式反演</li></ul><hr><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E5%8C%BA%E9%97%B4dp">区间dp</a> 2020.05.01 完成</li><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E6%A0%91%E5%9E%8Bdp">树型dp</a> 2020.05.02 完成</li><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/04/27/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E7%8A%B6%E5%8E%8Bdp">状压dp</a> 2020.05.03 完成</li><li><input disabled="" type="checkbox"> 数位dp</li><li><input disabled="" type="checkbox"> 单调队列优化dp</li><li><input disabled="" type="checkbox"> 斜率优化dp</li><li><input disabled="" type="checkbox"> 四边形不等式优化dp</li><li><input disabled="" type="checkbox"> 插头dp</li><li><input disabled="" type="checkbox"> 动态dp</li></ul><hr><h4 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h4><ul><li><input disabled="" type="checkbox"> 叉乘</li><li><input disabled="" type="checkbox"> 凸包</li><li><input disabled="" type="checkbox"> 扫描线</li><li><input disabled="" type="checkbox"> 旋转卡壳</li><li><input disabled="" type="checkbox"> 半平面交</li></ul><hr><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><ul><li><input disabled="" type="checkbox"> 01 分数规划</li><li><input disabled="" type="checkbox"> 悬线法</li><li><input disabled="" type="checkbox"> CDQ 分治</li><li><input disabled="" type="checkbox"> 整体二分</li><li><input checked="" disabled="" type="checkbox"> <a href="https://leverimmy.top/2020/05/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Karatsuba-%E4%B9%98%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Karatsuba 乘法</a> 2020.05.04 完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂笔 </category>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P3649 [APIO2014]回文串</title>
      <link href="/2020/03/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3649-APIO2014-%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>/2020/03/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3649-APIO2014-%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个字符串 $S$，求其所有回文子串的出现次数与其长度的乘积之和。</p><p>$1 \le \left|S\right| \le 3\cdot10^5$。</p><p><a href="https://www.luogu.com.cn/problem/P3649" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>直接对 $S$ 建造回文树，最终 $\max_{i \in T}\{len_i\cdot occ_i\}$ 即为所求。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">26</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EERTREE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;        <span class="comment">// 已处理的字符串长度</span></span><br><span class="line">    <span class="keyword">int</span> cntNode;  <span class="comment">// 结点个数</span></span><br><span class="line">    <span class="keyword">int</span> last;     <span class="comment">// 指向字符串中，上一个字符为结尾的最长回文串</span></span><br><span class="line">    <span class="keyword">int</span> s[N];     <span class="comment">// 已处理的字符串</span></span><br><span class="line">    <span class="keyword">int</span> len[N];   <span class="comment">// 点 i 表示的回文串的长度</span></span><br><span class="line">    <span class="keyword">int</span> ch[N][C]; <span class="comment">// 边集</span></span><br><span class="line">    <span class="keyword">int</span> link[N];  <span class="comment">// 回文后缀链接</span></span><br><span class="line">    <span class="keyword">int</span> occ[N];   <span class="comment">// 点 i 表示的回文串出现的次数</span></span><br><span class="line"><span class="comment">//  int num[N];   // link[i] 最多能迭代的次数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123; <span class="comment">// 生成一个长度为 l 的新点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C; ++i) ch[cntNode][i] = <span class="number">0</span>;</span><br><span class="line">        occ[cntNode] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//      num[cntNode] = 0;</span></span><br><span class="line">        len[cntNode] = l;</span><br><span class="line">        <span class="keyword">return</span> cntNode++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 暴力回溯指针</span></span><br><span class="line">        <span class="keyword">while</span>(s[n - len[x] - <span class="number">1</span>] != s[n]) x = link[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        s[++n] = c;</span><br><span class="line">        <span class="keyword">int</span> fa = getfail(last); <span class="comment">// last 的在树中的父结点</span></span><br><span class="line">        <span class="keyword">if</span>(!ch[fa][c]) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = make(len[fa] + <span class="number">2</span>);</span><br><span class="line">            link[now] = ch[ getfail(link[fa]) ][c];</span><br><span class="line">            ch[fa][c] = now;</span><br><span class="line"><span class="comment">//          num[now] = num[ link[now] ] + 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        last = ch[fa][c];</span><br><span class="line">        ++occ[last];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = cntNode - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) occ[ link[i] ] += occ[i];</span><br><span class="line">    &#125;</span><br><span class="line">    EERTREE() &#123;</span><br><span class="line">        cntNode = n = last = <span class="number">0</span>;</span><br><span class="line">        make(<span class="number">0</span>), make(<span class="number">-1</span>); <span class="comment">// 长度分别为偶数、奇数的两个根</span></span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">-1</span>, link[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        t.add(str[i] - <span class="string">'a'</span> + <span class="number">1</span>);</span><br><span class="line">    t.refresh();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.cntNode; ++i) ans = <span class="built_in">std</span>::max(ans, <span class="number">1L</span>L * t.len[i] * t.occ[i]);</span><br><span class="line">    io::write(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">abacaba</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 回文树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P3355 骑士共存问题</title>
      <link href="/2020/03/26/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3355-%E9%AA%91%E5%A3%AB%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/26/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P3355-%E9%AA%91%E5%A3%AB%E5%85%B1%E5%AD%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个大小为 $n \times n$ 的棋盘，其中 $m$ 个格子上有障碍，问最多能放多少个骑士（即「马」）。</p><p>$1 \le n \le 200$，$0 \le m \le n^2$。</p><p><a href="https://www.luogu.com.cn/problem/P3355" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>还是考虑奇偶建图。</p><p>所有棋盘上的白点是不会互相攻击到的，所有黑点也是。</p><p>于是超级源点与所有白点连一条流量为 $1$ 的边，所有黑点与超级汇点连一条流量为 $1$ 的边。</p><p>两个 <strong>会互相攻击到的</strong> 点之间连一条流量为 $\inf$ 的边。</p><p>特殊地，有障碍的格子不连任何边。</p><p>题目要求 <strong>最多</strong> 能放多少个马，就用 $n^2 - m$ 减去最大流即可。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> io &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp; _x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>, ch; _x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch = getchar())) f |= ch == <span class="string">'-'</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) _x = _x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">        <span class="keyword">if</span>(f) _x = -_x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;_f, Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">        read(_f), read(args ...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _deal(<span class="keyword">char</span> ch) &#123; <span class="built_in">putchar</span>(ch); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _deal(T _x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">        <span class="keyword">if</span> (_x &gt; <span class="number">9</span>) _deal(_x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T _f, Args ... args)</span> </span>&#123;</span><br><span class="line">        _deal(_f), write(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = <span class="number">2e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">8</span>]=&#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">8</span>]=&#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, t, cnt, max_flow, first[N], cur[N], dep[N], E[C][C];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(S), dep[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x]; ~i; i = e[i]._next) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!dep[y] &amp;&amp; e[i].wt) &#123;</span><br><span class="line">                dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(y);</span><br><span class="line">                <span class="keyword">if</span>(y == T) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">    <span class="keyword">int</span> out = in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(e[i].wt &amp;&amp; dep[y] == dep[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_flow = dinic(y, <span class="built_in">std</span>::min(e[i].wt, out));</span><br><span class="line">            <span class="keyword">if</span>(!cur_flow) dep[y] = <span class="number">0</span>;</span><br><span class="line">            e[i].wt -= cur_flow;</span><br><span class="line">            e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">            out -= cur_flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in - out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x - <span class="number">1</span>) * n + y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> !E[x][y] &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    io::read(n, m);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    s = <span class="number">0</span>, t = n * n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        io::read(x, y);</span><br><span class="line">        E[x][y] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!E[i][j]) &#123;</span><br><span class="line">                <span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    Add_Edge(s, id(i, j), <span class="number">1</span>);</span><br><span class="line">                    Add_Edge(id(i, j), s, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Add_Edge(id(i, j), t, <span class="number">1</span>);</span><br><span class="line">                    Add_Edge(t, id(i, j), <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = i + dx[k], ny = j + dy[k];</span><br><span class="line">                    <span class="keyword">if</span>(valid(nx, ny)) &#123;</span><br><span class="line">                        Add_Edge(id(i, j), id(nx, ny), oo);</span><br><span class="line">                        Add_Edge(id(nx, ny), id(i, j), <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, first, <span class="keyword">sizeof</span>(first));</span><br><span class="line">        max_flow += dinic(s, oo);</span><br><span class="line">    &#125;</span><br><span class="line">    io::write(n * n - m - max_flow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4430 小猴打架</title>
      <link href="/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4430-%E5%B0%8F%E7%8C%B4%E6%89%93%E6%9E%B6/"/>
      <url>/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4430-%E5%B0%8F%E7%8C%B4%E6%89%93%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>求点数为 $n$ 的完全图中，构成生成树的不同连接方式的方案数。</p><p>$1 \le n \le 10^6$。</p><p><a href="https://www.luogu.com.cn/problem/P4430" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>一共有 $n$ 个点，你只能选 $n - 1$ 个点，每个点向外连一条边。</p><p>每个点向外有 $n - 1$ 条边，那么构成一个有 $n$ 个点的树的方案数为 $n^{n - 2}$。</p><p>生成这个有 $n - 1$ 条边的树的方案数为 $(n - 1)!$。</p><p>所以答案为 $(n - 1)!\cdot n^{n - 2}$。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">9999991</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">LL n, fac[N] = &#123; <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL base, LL power)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(power) &#123;</span><br><span class="line">        <span class="keyword">if</span>(power &amp; <span class="number">1</span>) res = res * base % mod;</span><br><span class="line">        base = base * base % mod;</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, qpow(n, n - <span class="number">2</span>) * fac[n - <span class="number">1</span>] % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
            <tag> 计数 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P4016 负载平衡问题</title>
      <link href="/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4016-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/19/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P4016-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个长度为 $n$ 的序列 $a$，</p><p>每次你可以以 $1$ 的代价使得 $a_i - k$，$a_{i + 1} + k$，其中 $k \le \min\{a_i, a_{i + 1}\}, i \in [1, n)$。</p><p>问使得 $\forall i \in [1, n), a_i = \dfrac{\sum_{j = 1}^na_j}{n}$ 的所需代价最小为多少。</p><p>$1 \le n \le 100$，保证 $n | \sum_{j = 1}^na_j$。</p><p><a href="https://www.luogu.com.cn/problem/P4016" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>先建立超级源点 $S$ 和超级汇点 $T$。</p><p>不妨令 $v = \dfrac{\sum_{j = 1}^na_j}{n}$。</p><ol><li><p>对于所有的满足 $a_i &lt; v$ 的 $i$，构造边 $(S, i)$，流量为 $v - a[i]$，费用为 $0$；</p><p>这条边的意义是，将 <strong>超级源点</strong> 作为老大，免费给这个点提供自己应有的 $v - a[i]$ 的流量。</p></li><li><p>对于所有的满足 $a_i &gt; v$ 的 $i$，构造边 $(i, T)$，流量为 $a[i] - v$，费用为 $0$。</p><p>这条边的意义是，将 <strong>超级汇点</strong> 作为儿子，自己一定要得到 $a[i] - v$ 的流量。</p></li><li><p>对于所有的 $i \in [1, n)$，构造边 $(i, i + 1)$，流量为 $\inf$，费用为 $1$。</p><p>这条边的意义是，$i$ 向 $i + 1$ <strong>尽可能地</strong> 提供自己的流量，费用为 $1$ 表示一次操作的代价为 $1$。</p></li><li><p>对于所有的 $i \in (1, n]$，构造边 $(i, i - 1)$，流量为 $\inf$，费用为 $1$。</p><p>这条边的意义是，$i$ 向 $i - 1$ <strong>尽可能地</strong> 提供自己的流量，费用为 $1$ 表示一次操作的代价为 $1$。</p></li></ol><p>最后在这张图上跑最小费用最大流就好了。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s, t, cnt, sum, min_cost, max_flow;</span><br><span class="line"><span class="keyword">int</span> first[N], a[N], inq[N], dis[N], flow[N], pre[N], arc[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt, ct;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w, e[cnt].ct = c;</span><br><span class="line">    e[cnt]._next = first[u], first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(flow, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(flow));</span><br><span class="line">    q.push(st), dis[st] = <span class="number">0</span>, inq[st] = <span class="number">1</span>, pre[ed] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop(), inq[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to)</span><br><span class="line">            <span class="keyword">if</span> (e[i].wt &gt; <span class="number">0</span> &amp;&amp; dis[y] &gt; dis[x] + e[i].ct) &#123;</span><br><span class="line">                dis[y] = dis[x] + e[i].ct;</span><br><span class="line">                pre[y] = x, arc[y] = i;</span><br><span class="line">                flow[y] = <span class="built_in">std</span>::min(flow[x], e[i].wt);</span><br><span class="line">                <span class="keyword">if</span> (!inq[y])</span><br><span class="line">                    q.push(y), inq[y] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ~pre[ed];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mcmf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(spfa(s, t)) &#123;</span><br><span class="line">        max_flow += flow[t];</span><br><span class="line">        min_cost += flow[t] * dis[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t; i != s; i = pre[i]) &#123;</span><br><span class="line">            e[ arc[i] ].wt -= flow[t];</span><br><span class="line">            e[ arc[i] ^ <span class="number">1</span> ].wt += flow[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    s = n + <span class="number">1</span>, t = n + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), sum += a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> delta = a[i] - sum / n;</span><br><span class="line">        <span class="keyword">if</span>(delta &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Add_Edge(s, i, delta, <span class="number">0</span>);</span><br><span class="line">            Add_Edge(i, s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Add_Edge(i, t, -delta, <span class="number">0</span>);</span><br><span class="line">            Add_Edge(t, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != n) &#123;</span><br><span class="line">            Add_Edge(i, i + <span class="number">1</span>, oo, <span class="number">1</span>);</span><br><span class="line">            Add_Edge(i + <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">1</span>) &#123;</span><br><span class="line">            Add_Edge(i, i - <span class="number">1</span>, oo, <span class="number">1</span>);</span><br><span class="line">            Add_Edge(i - <span class="number">1</span>, i, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Add_Edge(<span class="number">1</span>, n, oo, <span class="number">1</span>);</span><br><span class="line">    Add_Edge(n, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    Add_Edge(n, <span class="number">1</span>, oo, <span class="number">1</span>);</span><br><span class="line">    Add_Edge(<span class="number">1</span>, n, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    mcmf();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, min_cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
            <tag> 网络流 24 题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【文化课】巧记等比数列求和公式</title>
      <link href="/2020/03/18/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E5%B7%A7%E8%AE%B0%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C%E5%85%AC%E5%BC%8F/"/>
      <url>/2020/03/18/%E3%80%90%E6%96%87%E5%8C%96%E8%AF%BE%E3%80%91%E5%B7%A7%E8%AE%B0%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>感觉 $S_n = \dfrac{a_1 - q\cdot a_n}{1 - q}(q\neq 1)$ 这个公式实在是太愚蠢了，</p><p>于是自己整理了两个更漂亮的，也更容易记住的公式。</p><a id="more"></a><p>$$\boxed{S_n = a_n + \dfrac{a_n - a_1}{q - 1}(q \neq 1)}$$</p><p>用斜率的概念来理解比较方便。</p><p>$$\boxed{S_n = a_1\cdot\dfrac{q^n - 1}{q - 1}(q \neq 1)}$$</p>]]></content>
      
      
      <categories>
          
          <category> 文化课 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 等比数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【游记】CSP-S2019 游记</title>
      <link href="/2020/03/17/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91CSP-S2019-%E6%B8%B8%E8%AE%B0/"/>
      <url>/2020/03/17/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91CSP-S2019-%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>CSP 已经过去四个月了，让我凭着仅存的记忆，书写下这段记忆吧。</p><a id="more"></a><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day ?~-1"></a>Day ?~-1</h3><p>终于停课了，在机房有一天没一天地打模拟赛，订正，打模拟赛……</p><p>不过停课的这段时间倒是挺愉快的，每天早上吃完早饭可以直接去机房打代码，中午能有 early lunch。</p><p>更重要的是，下午能摆脱 17:30 的束缚，舒舒服服地洗一个澡。</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>最后一天当然是颓了。</p><p>尝试着把所有会的在洛谷上有“模板”标签的题都打了一遍，LCA 差点写挂，逆元忘记怎么推？这要退役啊。</p><p>然后就开始 CS1.6 了。</p><p>中途 mj 还来慰问了一下全机房，<del>（你们要去全部一等奖啊）</del>吓得大家都一惊。</p><p>中午睡了一觉，下午继续打板子，晚上就到叔叔家去了。</p><p>退 役 预 定。</p><h3 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>早上吃了一碗面，没喝牛奶，肚子有点疼<del>（这是要退役的节奏吧）</del></p><p>起得比较早，于是 07:05 就到了华科，没有什么人；不过一会儿同学们都陆陆续续地来了，抽签进了考场。</p><p>T1 <del>（格雷码是啥？不会怎么办）</del></p><p>乱搞了一下，发现答案树和 01Trie 有些关系，开始猛地找规律。</p><p>最后发现逆推出答案的每一位就好了，此时大概 09:12，测了极限情况，没有问题。</p><p>T2感觉还可以做，推了一下树是一条链（也就是一个序列）上的情况</p><p><del>（飞速过大样例）</del></p><p>然后感觉可以把一棵树拆成很多条链，分别用序列搞，但是不同链上的贡献不会统计啊（（（（。</p><p>第二个样例 WA 了，调试的时候 RE 了（并不知道为什么</p><p><del>（第三个样例也太水了吧）</del></p><p>早知道就打 $O(n^3)$ 的暴力了。</p><p>T3感觉不可做，打了 10pts 的暴力就滚了，然而最后还是没拿分。</p><p>然后继续看 T2，越看越觉得自己的链写挂了，然后调了半天，最后就交卷了。</p><p>出考场，全世界都100 + 100 + 10 = 210。</p><p>似乎全世界 T2 都过了，T3 也都拿了10pts。</p><p><del>自己真的省一无缘了吧</del></p><p>晚上测了下洛谷和牛客的数据，感觉自己 Day 1 也就 100 多分吧。</p><p>退 役 预 定。</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>本来还想上 350 的，但现在看来没啥希望了。</p><p>昨天的心情不好一直持续到了今天。</p><p>T1, T2 都是 dp，T3 是一个树上问题。</p><p>然后完全没有掌握 dp 的我只会搜索，然后写了 T1, T2 的暴力。</p><p>然后发现 T3 的 $n^2$ 很好写，写了 40pts 的部分分；再加上链的部分分。</p><p>然后就不知道怎么办了。</p><p>最后 45min 发现 T2 可以剪枝，然后剪挂了；</p><p>最后 15min 发现 T3 的链写挂了，然后没改。</p><p>就这么结束了。</p><h3 id="Day-inf"><a href="#Day-inf" class="headerlink" title="Day inf"></a>Day inf</h3><p>哦出成绩了。</p><p>本来水平就不咋地，然后成为了 HB 提高 1= 倒数第二名。</p>]]></content>
      
      
      <categories>
          
          <category> 杂笔 </category>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP2019S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX 索引</title>
      <link href="/2020/03/16/%E3%80%90%E5%A4%87%E5%BF%98%E5%BD%95%E3%80%91LaTeX-%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/03/16/%E3%80%90%E5%A4%87%E5%BF%98%E5%BD%95%E3%80%91LaTeX-%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>这个是 $\LaTeX$ 的索引，可使用 <code>Ctrl + F</code> 进行查询中文关键词。</p><a id="more"></a><p>逻辑非，非，not</p><p>$\neg$</p><p><code>\neg</code></p><p>数码，digit，上划线，overline</p><p>$\overline{abc}$</p><p><code>\overline{}</code></p><p>逻辑或，或，or</p><p>$\vee$，$\bigvee$</p><p><code>\vee, \bigvee</code></p><p>逻辑与，与，and</p><p>$\wedge$，$\bigwedge$</p><p><code>\wedge, \bigwedge</code></p><p>不存在，not exist</p><p>$\nexists$</p><p><code>\nexists</code></p><p>圆，circle</p><p>$\odot$，$\bigodot$</p><p><code>\odot, \bigodot</code></p><p>不同余</p><p>$ax\not\equiv1\pmod{p}$</p><p><code>\not\equiv</code></p><p>全等，congruent</p><p>$\cong$</p><p><code>\cong</code></p><p>赋值，def</p><p>$:=$</p><p><code>:=</code></p><p>真子集</p><p>$\subsetneqq$，$\supsetneqq$</p><p><code>\subsetneqq, \supsetneqq</code></p><p>非子集</p><p>$\nsubseteq$，$\nsupseteq$</p><p><code>\nsubseteq, \nsupseteq</code></p><p>子集，subset</p><p>$\subseteq$，$\supseteq$</p><p><code>\subseteq, \supseteq</code></p><p>自交</p><p>$\otimes$，$\bigotimes$</p><p><code>\otimes, \bigotimes</code></p><p>异或，xor</p><p>$\oplus$，$\bigoplus$</p><p><code>\oplus, \bigoplus</code></p><p>除号，除，除以</p><p>$\div$</p><p><code>\div</code></p><p>乘除号，乘除</p><p>$\divideontimes$</p><p><code>\divideontimes</code></p><p>负正号，减加，负正</p><p>$\mp$</p><p><code>\mp</code></p><p>正负号，加减，正负</p><p>$\pm$</p><p><code>\pm</code></p><p>整除，约数</p><p>$a|b$</p><p><code>|</code></p><p>不整除</p><p>$a \nmid b$</p><p><code>\nmid</code></p><p>取模，模运算，模</p><p>$a % b$，$a \mod b$，$a \equiv1\pmod{b}$</p><p><code>\%, \mod, \pmod{}</code></p><p>最大公约数，gcd</p><p>$\gcd(a, b)$</p><p><code>\gcd</code></p><p>最小公倍数，lcm</p><p>$\operatorname{lcm}(a, b)$</p><p><code>\operatorname{lcm}</code></p><p>补集，C</p><p>$\complement_{U}A$，$\bar{A}$，$\overline{A}$</p><p><code>\complement_{}, \bar{}, \overline{}</code></p><p>无穷，正无穷，负无穷，无限大</p><p>$\infty$</p><p><code>\infty</code></p><p>最小值，min，minimum，较小的</p><p>$\min(a, b)$</p><p><code>\min</code></p><p>最大值，max，maximum，较大的</p><p>$\max(a, b)$</p><p><code>\max</code></p><p>余切，cotangent，cot</p><p>$\cot\theta$</p><p><code>\cot</code></p><p>指数函数，指数，exponent</p><p>$\exp_a b = a^b$</p><p><code>\exp_{}</code></p><p>正割，secant，sec</p><p>$\sec\alpha$</p><p><code>\sec</code></p><p>余割，cosecant，csc</p><p>$\csc\beta$</p><p><code>\csc</code></p><p>相似，similar，sim</p><p>$\sim$</p><p><code>\sim</code></p><p>勾，对，是的，正确，完成，tick，correct</p><p>$\checkmark$</p><p><code>\checkmark</code></p><p>同余</p><p>$\equiv$</p><p><code>\equiv</code></p><p>LaTeX，拉泰赫</p><p>$\LaTeX$</p><p><code>\latex</code></p><p>斜着的点，斜点</p><p>$\ddots$</p><p><code>\ddots</code></p><p>竖着的点，竖点</p><p>$\vdots$</p><p><code>\vdots</code></p><p>组合</p><p>$\dbinom{n}{m}$，$\binom{n}{m}$，$\tbinom{n}{m}$</p><p><code>\dbinom{}{}, \binom{}{}, \tbinom{}{}</code></p><p>求和，连加，西格玛，sum</p><p>$\sum_{j = 1}^{10}a_j$</p><p><code>\sum_{}^{}</code></p><p>求积，连乘，product，派</p><p>$\prod_{j = 1}^{10}a_j$</p><p><code>\prod_{}^{}</code></p><p>分数，fraction</p><p>$\dfrac{1}{2}$，$\frac{1}{2}$，$\tfrac{1}{2}$</p><p><code>\dfrac{}{}, \frac{}{}, \tfrac{}{}</code></p><p>alpha，阿尔法</p><p>$\alpha$</p><p><code>\alpha</code></p><p>beta，贝塔</p><p>$\beta$</p><p><code>\beta</code></p><p>Delta，德尔塔，变化量</p><p>$\Delta$</p><p><code>\Delta</code></p><p>三角形，triangle</p><p>$\triangle$</p><p><code>\triangle</code></p><p>向量</p><p>$\vec{AB}$，$\overrightarrow{AB}$，$\mathbf{e}$</p><p><code>\vec{}, \overrightarrow{} \mathbf{}</code></p><p>数集，实数集，整数集，自然数集，有理数集，复数集，R，Z，N，Q，C</p><p>$\mathbb{R}$，$\mathbb{Z}$，$\mathbb{N}$，$\mathbb{Q}$，$\mathbb{C}$</p><p><code>\mathbb{R}, \mathbb{Z}, \mathbb{N}, \mathbb{Q}, \mathbb{C}</code></p><p>根号，sqrt，root</p><p>$\sqrt[3]{2}$</p><p><code>\sqrt[]{}</code></p><p>次幂，次方，方，power，上标</p><p>$a^{2}$</p><p><code>^</code></p><p>下标，序号，index</p><p>$a_i$</p><p><code>_</code></p><p>theta，西塔</p><p>$\theta$</p><p><code>\theta</code></p><p>角，角度，triangle</p><p>$\angle AOB$</p><p><code>\angle</code></p><p>正弦，sin，sine</p><p>$\sin\theta$</p><p><code>\sin</code></p><p>余弦，cos，cosine</p><p>$\cos\varphi$</p><p><code>\cos</code></p><p>绝对值，absolute value</p><p>$\left|-1\right|$</p><p><code>\left| \right|</code></p><p>tangent，正切，tan</p><p>$\tan\alpha$</p><p><code>\tan\alpha</code></p><p>夹角，向量的夹角</p><p>$&lt;\mathbf{a}, \mathbf{b}&gt;$，$\left&lt;\mathbf{a}, \mathbf{b}\right&gt;$</p><p><code>&lt; &gt; \left&lt; \right&gt;</code></p><p>下取整，floor</p><p>$\lfloor \dfrac{1}{2} \rfloor$，$\left\lfloor \dfrac{1}{2} \right\rfloor$</p><p><code>\lfloor \rfloor \left\lfloor \right\rfloor</code></p><p>上取整，ceil，ceiling</p><p>$\lceil \dfrac{1}{2}\rceil$，$\left\lceil \dfrac{1}{2}\right\rceil$</p><p><code>\lceil \rceil \left\lceil \right\rceil</code></p><p>派，pi，圆周率</p><p>$\pi$</p><p><code>\pi</code></p><p>fai，phi</p><p>$\phi$，$\varphi$</p><p><code>\phi, \varphi</code></p><p>空集，empty</p><p>$\emptyset$，$\varnothing$</p><p><code>\emptyset \varnothing</code></p><p>左右，放大，left，right</p><p>$\left|-\dfrac{1}{2}\right|$</p><p><code>\left \right</code></p><p>mu，miu，莫比乌斯</p><p>$\mu$</p><p><code>\mu</code></p><p>大于等于，不小于</p><p>$\ge$，$\geqslant$</p><p><code>\ge, \geqslant</code></p><p>小于等于，不大于</p><p>$\le$，$\leqslant$</p><p><code>\le, \leqslant</code></p><p>不等于</p><p>$\neq$</p><p><code>\neq</code></p><p>约等于，约，近似</p><p>$\approx$</p><p><code>\approx</code></p><p>远大于</p><p>$\gg$</p><p><code>\gg</code></p><p>远小于</p><p>$\ll$</p><p><code>\ll</code></p><p>平行, parallel</p><p>$\parallel$</p><p><code>\parallel</code></p><p>垂直，互质</p><p>$\perp$</p><p><code>\perp</code></p><p>点乘，times，multiply，数量积，内积</p><p>$\cdot$</p><p><code>\cdot</code></p><p>叉乘，times，multiply，向量积，外积</p><p>$\times$</p><p><code>\times</code></p><p>省略号，横着的点，横点</p><p>$\cdots$，$\ldots$</p><p><code>\cdots, \ldots</code></p><p>上箭头，向上，up arrow</p><p>$\uparrow$，$\Uparrow$，$\upharpoonleft$，$\upharpoonright$，$\upuparrows$</p><p><code>\uparrow, \Uparrow, \upharpoonleft, \upharpoonright, \upuparrows</code></p><p>下箭头，向下，down arrow</p><p>$\downarrow$，$\Downarrow$，$\downharpoonleft$，$\downharpoonright$，$\downdownarrows$</p><p><code>\downarrow, \Downarrow, \downharpoonleft, \downharpoonright, \downdownarrows</code></p><p>度，分类讨论</p><p>$1^{\circ}$</p><p><code>\circ</code></p><p>因为，because</p><p>$\because$</p><p><code>\because</code></p><p>所以，therefore</p><p>$\therefore$</p><p><code>\therefore</code></p><p>对于所有，全称量词，forall</p><p>$\forall$</p><p><code>\forall</code></p><p>存在量词，存在，exist</p><p>$\exists$</p><p><code>\exists</code></p><p>否，否定，不，neg</p><p>$\neg$</p><p><code>\neg</code></p><p>弧，arc</p><p>$\overset{\frown}{AB}$</p><p><code>\overset{\frown}</code></p><p>交集，交</p><p>$\cap$，$\bigcap$</p><p><code>\cap, \bigcap</code></p><p>并集，并</p><p>$\cup$，$\bigcup$</p><p><code>\cup, \bigcup</code></p><p>矩阵，matrix</p><p>$\begin{bmatrix}1 &amp; 1 \\ 1 &amp; 0\end{bmatrix}$</p><p><code>\begin{bmatrix} \end{bmatrix}</code></p><p>条件，cases，分段函数，方程组，不等式组</p><p>$f(x) = \begin{cases}1 &amp; x \in \mathbb{Q} \\ 0 &amp; x \notin \mathbb{Q}\end{cases}$</p><p><code>\begin{cases} \end{cases}</code></p><p>属于</p><p>$\in, \ni$</p><p><code>\in, \ni</code></p><p>不属于</p><p>$\notin, \not\ni$</p><p><code>\notin, \not\ni</code></p><p>文本，正体</p><p>$\text{otherwise}$</p><p><code>\text{}</code></p><p>欧米伽，omega</p><p>$\omega$</p><p><code>\omega</code></p><p>下划线</p><p>$\underline{ABC}$</p><p><code>\underline{}</code></p><p>加热，heat</p><p>$\triangleq$</p><p><code>\triangleq</code></p><p>上括号</p><p>$\overbrace{1+2+\cdots+100}$</p><p><code>\overbrace{}</code></p><p>积分</p><p>$\int_{0}^{1}e^x\text{d}x$</p><p><code>\int_{}^{}</code></p><p>对齐</p><p>$\begin{aligned}f(x) &amp; = (x + 1)^2 \\ &amp; = x^2 + 2x + 1\end{aligned}$</p><p><code>\begin{aligned}\end{aligned}</code></p><p>双重积分</p><p>$\iint_{S}^{T}\text{d}x\text{d}y$</p><p><code>\iint_{}^{}</code></p><p>三重积分</p><p>$\iiint_{S}^{T}\text{d}x\text{d}y\text{d}z$</p><p><code>\iiint_{}^{}</code></p><p>曲面积分</p><p>$\oint_{C}x^3\text{d}x$</p><p><code>\oint_{}</code></p><p>极限，limit</p><p>$\lim_{n\to\infty}x_n$，$\lim\limits_{n\to\infty}x_n$</p><p><code>\lim_{}, \lim\limits_{}</code></p><p>下括号</p><p>$\underbrace{1+2+\cdots+100}$</p><p><code>\underbrace{}</code></p>]]></content>
      
      
      <categories>
          
          <category> 杂笔 </category>
          
          <category> 备忘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】DLX 学习笔记</title>
      <link href="/2020/03/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91DLX-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/16/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91DLX-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>DLX 指使用 Dancing Links 优化后的 X 算法，在随机情况下能极快速地解决精确覆盖问题。</p> <a id="more"></a><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><ol><li><p>就在刚才，你的同学终于写完了 <a href="https://www.luogu.com.cn/problem/P4205" target="_blank" rel="noopener">P4205 『NOI2005』智慧珠游戏</a>，并向你展示了他的 500+ 行的代码。</p><p><img src="/gallery/lectures/dlx/1-1.png" alt="1-1.png"></p><p><strong>小时候，你玩智慧珠；长大后，智慧珠玩你</strong>，你准备怎么办？</p></li><li><p>就在刚才，你的同学码力全开写完了 <a href="https://www.luogu.com.cn/problem/P1784" target="_blank" rel="noopener">P1784 数独</a>，感觉有了暴力搜索，他就能 AK 学生会组织的所有数独比赛。</p><p><img src="/gallery/lectures/dlx/1-2.png" alt="1-2.png"></p><p>面对数独，你不愿去打那恼人的暴力，你又准备怎么办？</p></li></ol><h3 id="精确覆盖问题"><a href="#精确覆盖问题" class="headerlink" title="精确覆盖问题"></a>精确覆盖问题</h3><ol><li><p>定义：</p><p>精确覆盖问题 (Exact Cover Problem) 是指给定许多集合 $S_i (1 \le i \le n)$ 以及一个集合 $X$，求满足以下条件的无序多元组 $(T_1, T_2, \cdots , T_m)$：</p><p>(1) $\forall i, j \in [1, m],T_i\bigcap T_j = \varnothing (i \neq j)$</p><p>(2) $X = \bigcup\limits_{i = 1}^{m}T_i$</p><p>(3) $\forall i \in[1, m], T_i \in {S_1, S_2, \cdots, S_n}$</p><p>例如，若给出</p><p>$$<br>\begin{aligned}<br>  &amp; S_1 = {5, 9, 17} \\<br>  &amp; S_2 = {1, 8, 119} \\<br>  &amp; S_3 = {3, 5, 17} \\<br>  &amp; S_4 = {1, 8} \\<br>  &amp; S_5 = {3, 119} \\<br>  &amp; S_6 = {8, 9, 119} \\<br>  &amp; X = {1, 3, 5, 8, 9, 17, 119}<br>\end{aligned}<br>$$</p><p>则 $(S_1, S_4, S_5)$ 为一组合法解。</p></li><li><p>问题转化</p><p>我们将 $\bigcup\limits_{i = 1}^{n}S_i$ 中的所有数离散化，那么可以得到这么一个模型：</p><blockquote><p>给定一个 01 矩阵，你可以选择一些行，使得最终每列都恰好有一个 1。</p></blockquote><p>举个例子，我们对 (2.1) 中的例子进行建模，可以得到这么一个矩阵：</p><p>$$<br>\begin{pmatrix}<br>  0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\<br>  1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\<br>  0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\<br>  1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\<br>  0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\<br>  0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1<br>\end{pmatrix}<br>$$</p><p>其中第 $i$ 行表示着 $S_i$，而这一行的每个数依次表示 $[1 \in S_i],[3 \in S_i],[5 \in S_i],\cdots,[119 \in S_i]$。</p></li><li><p>第一个不优秀的做法：</p><p>我们可以枚举选择哪些行，最后检查这个方案是否合法。</p><p> 因为每一行都有选或者不选两种状态，所以枚举行的时间复杂度是 $O(2^n)$ 的；</p><p> 而每次检查都需要 $O(nm)$ 的时间复杂度。所以总的复杂度是 $O(nm\cdot2^n)$。</p> <details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> state = <span class="number">0</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123; <span class="comment">// 枚举每行是否被选</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            a[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, bo = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i][j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bo) flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> bo = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"No solution."</span>);</span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>第二个不那么优秀的做法：</p><p>考虑到 01 矩阵的特殊性质，我们可以把每一行都看做成一个 $m$ 位二进制数。</p><p>因此被转化为了</p><blockquote><p>给你 $n$ 个 $m$ 位二进制数，要求选择一些数，使得任意两个数的与都为0，且所有数的或为 $2^m - 1$。</p></blockquote><p> <code>tmp</code> 表示的是截至目前的所有被选择了的 $m$ 位二进制数的或。</p><p> 因为每一行都有选或者不选两种状态，所以枚举行的时间复杂度是 $O(2^n)$ 的；</p><p> 而每次计算 <code>tmp</code> 都需要 $O(n)$ 的时间复杂度。所以总的复杂度是 $O(n\cdot2^n)$。</p> <details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; --j)</span><br><span class="line">        num[i] = num[i] &lt;&lt; <span class="number">1</span> | a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> state = <span class="number">0</span>; state &lt; <span class="number">1</span> &lt;&lt; n; ++state) &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)  <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp &amp; num[i]) <span class="keyword">break</span>;</span><br><span class="line">        tmp |= num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp == (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>) &amp; state)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok) <span class="built_in">puts</span>(<span class="string">"No solution."</span>);</span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><h3 id="X-算法"><a href="#X-算法" class="headerlink" title="X 算法"></a>X 算法</h3><p>刚才的暴力实在是太菜了！连 $1 \le n,m \le 200$ 都跑不过……</p><p>Donald E. Knuth 提出了一个叫做 X 算法 (Algorithm X) 的东西，其思想与刚才的暴力差不多，但是方便优化。</p><p>继续以 (2.1) 中提到的例子为载体，我们得到的是一个这样的 01 矩阵：</p><p>$$<br>\begin{pmatrix}<br>  0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\<br>  1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\<br>  0 &amp; 1 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\<br>  1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\<br>  0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\<br>  0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1<br>\end{pmatrix}<br>$$</p><ol><li><p>此时第一行有 $3$ 个 $1$，第二行有 $3$ 个 $1$，第三行有 $3$ 个 $1$，第四行有 $2$ 个 $1$，第五行有 $2$ 个 $1$，第六行有 $3$ 个 $1$。选择第一行，将它删除，并将所有 $1$ 所在的列打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   1 &amp; 0 &amp; \color{Red}0 &amp; 1 &amp; \color{Red}0 &amp; \color{Red}0 &amp; 1 \\<br>   0 &amp; 1 &amp; \color{Red}1 &amp; 0 &amp; \color{Red}0 &amp; \color{Red}1 &amp; 0 \\<br>   1 &amp; 0 &amp; \color{Red}0 &amp; 1 &amp; \color{Red}0 &amp; \color{Red}0 &amp; 0 \\<br>   0 &amp; 1 &amp; \color{Red}0 &amp; 0 &amp; \color{Red}0 &amp; \color{Red}0 &amp; 1 \\<br>   0 &amp; 0 &amp; \color{Red}0 &amp; 1 &amp; \color{Red}1 &amp; \color{Red}0 &amp; 1<br>   \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   1 &amp; 0 &amp; \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 1 \\<br>   \color{Red}0 &amp; \color{Red}1 &amp; \color{Blue}1 &amp; \color{Red}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Red}0 \\<br>   1 &amp; 0 &amp; \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 0 \\<br>   0 &amp; 1 &amp; \color{Blue}0 &amp; 0 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 1 \\<br>   \color{Red}0 &amp; \color{Red}0 &amp; \color{Blue}0 &amp; \color{Red}1 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Red}1<br> \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的行，将它们删除；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   1 &amp; 0 &amp; \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 1 \\<br>   \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   1 &amp; 0 &amp; \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 0 \\<br>   0 &amp; 1 &amp; \color{Blue}0 &amp; 0 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; 1 \\<br>   \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1<br> \end{pmatrix}<br> $$</p><p><strong>这表示表示我们选择了一行，且这一行的所有 $1$ 所在的列不能有其他 $1$ 了</strong>。</p><p>于是我们得到了这样的一个新的小 01 矩阵：<br>$$<br>\begin{pmatrix}<br>  1 &amp; 0 &amp; 1 &amp; 1 \\<br>  1 &amp; 0 &amp; 1 &amp; 0 \\<br>  0 &amp; 1 &amp; 0 &amp; 1<br>\end{pmatrix}<br>$$</p></li><li><p>此时第一行（原来的第二行）有 $3$ 个 $1$，第二行（原来的第四行）有 $2$ 个 $1$，第三行（原来的第五行）有 $2$ 个 $1$。选择第一行（原来的第二行），将它删除，并将所有 $1$ 所在的列打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 \\<br>   \color{Red}1 &amp; 0 &amp; \color{Red}1 &amp; \color{Red}0 \\<br>   \color{Red}0 &amp; 1 &amp; \color{Red}0 &amp; \color{Red}1<br> \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 \\<br>   \color{Blue}1 &amp; \color{Red}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   \color{Blue}0 &amp; \color{Red}1 &amp; \color{Blue}0 &amp; \color{Blue}1<br> \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的行，将它们删除；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 \\<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1<br> \end{pmatrix}<br> $$</p><p>于是我们得到了一个空矩阵。但是上次删除的行 “1 0 1 1” 不是全 $1$ 的，说明选择有误；</p><p>$$<br>\begin{pmatrix}<br>\end{pmatrix}<br>$$</p></li><li><p>回溯到步骤 $4$，我们考虑选择第二行（原来的第四行），将它删除，并将所有 $1$ 所在的列打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Red}1 &amp; 0 &amp; \color{Red}1 &amp; 1 \\<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   \color{Red}0 &amp; 1 &amp; \color{Red}0 &amp; 1<br> \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的列，将它们删除，并将这些列中含 $1$ 的行打上标记；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}1 &amp; \color{Red}0 &amp; \color{Blue}1 &amp; \color{Red}1 \\<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; 1<br> \end{pmatrix}<br> $$</p></li><li><p>选择所有被标记的行，将它们删除；</p><p> $$<br> \begin{pmatrix}<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}1 \\<br>   \color{Blue}1 &amp; \color{Blue}0 &amp; \color{Blue}1 &amp; \color{Blue}0 \\<br>   \color{Blue}0 &amp; 1 &amp; \color{Blue}0 &amp; 1<br>   \end{pmatrix}<br> $$</p><p>于是我们得到了这样的一个矩阵：<br>$$<br>\begin{pmatrix}<br>  1 &amp; 1<br>\end{pmatrix}<br>$$</p></li><li><p>此时第一行（原来的第五行）有 $2$ 个 $1$，将它们全部删除，我们得到了一个空矩阵：<br>$$<br>\begin{pmatrix}<br>\end{pmatrix}<br>$$</p></li><li><p>上一次删除的时候，删除的是全 $1$ 的行，因此成功，算法结束。</p><p>答案即为我们删除的三行：$1, 4, 5$。</p></li></ol><ul><li><strong>强烈建议自己模拟一遍矩阵删除、还原与回溯的过程后再接着阅读下文。</strong></li></ul><p>我们可以概括出 X 算法的过程：</p><ol><li><p>对于现在的矩阵 $M$，选择并标记一列 $r$，将 $r$ 添加至 $S$ 中；</p></li><li><p>如果尝试了所有的 $r$ 却无解，则算法结束，输出无解。</p></li><li><p>标记与 $r$ 相关的行 $r_i$ 和 $c_i$；</p></li><li><p>删除所有标记的行和列，得到新矩阵 $M’$；</p></li><li><p>如果 $M’$ 为空，且 $r$ 为全 $1$ 的，则算法结束，输出被删除的行组成的集合 $S$；</p><p>如果 $M’$ 为空，且 $r$ 不为全 $1$ 的，则恢复与 $r$ 相关的行 $r_i$ 以及列 $c_i$，跳转至步骤 $1$；</p><p>如果 $M’$ 不为空，则跳转至步骤 $1$；</p></li></ol><p>不难看出，X 算法需要大量的 “删除行”、“删除列” 和 “恢复行”、“恢复列” 的操作。</p><p>Donald E. Knuth 想到了用双向十字链表来维护这些操作。</p><p>而在双向十字链表上不断跳跃的过程被形象地比喻成“跳跃”，因此被用来优化 X 算法的双向十字链表也被称为 “Dancing Links”。</p><h3 id="Dancing-Links-优化的-X-算法"><a href="#Dancing-Links-优化的-X-算法" class="headerlink" title="Dancing Links 优化的 X 算法"></a>Dancing Links 优化的 X 算法</h3><ol start="0"><li><p>预编译命令</p><p>  <del>这句话太好用了</del></p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IT(i, A, x) for(i = A[x]; i != x; i = A[i])</span></span><br></pre></td></tr></table></figure></li><li><p>定义</p><p>既然是双向十字链表，那么一定是有四个指针域的：一个指上方的元素，一个指下方的元素，一个指左边的元素，一个指右边的元素。而每个元素 $i$ 在整个双向十字链表系中都对应着一个格子，因此还要表示 $i$ 所在的列和所在的行。像这样：</p><p><img src="/gallery/lectures/dlx/4-1-1.png" alt="4-1-1.png"></p><p>是不是非常简单？</p><p>而其实大型双向链表其实是长这样的：</p><p><img src="/gallery/lectures/dlx/4-1-2.png" alt="4-1-2.png"></p><p>每一行都有一个行首指示，每一列都有一个列指示。</p><p>行首指示为 <code>first[]</code>，列指示是我们虚拟出的 $c + 1$ 个结点。</p><p>同时，每一列都有一个 <code>siz[]</code> 表示这一列的元素个数。</p><p>特殊地，$0$ 号结点无右结点等价于这个 Dancing Links 为空。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MS = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, idx, first[MS + <span class="number">10</span>], siz[MS + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> L[MS + <span class="number">10</span>], R[MS + <span class="number">10</span>], U[MS + <span class="number">10</span>], D[MS + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> col[MS + <span class="number">10</span>], row[MS + <span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>$\text{remove(c)}$ 操作</p><p>$\text{remove(c)}$ 表示在 Dancing Links 中删除第 $c$ 列以及与其相关的行和列。</p><p>我们先将 $c$ 删除，此时：</p><p>(1) $c$ 左侧的结点的右结点应为 $c$ 的右结点；</p><p>(2) $c$ 右侧的结点的左结点应为 $c$ 的左结点。</p><p>即 <code>L[R[c]] = L[c], R[L[c]] = R[c];</code>。</p><p><img src="/gallery/lectures/dlx/4-2-1.png" alt="4-2-1.png"></p><p>然后我们要顺着这一列往下走，把走过的每一行都删掉。</p><p>如何删掉每一行呢？枚举当前行的指针 $j$，此时：</p><p>(1) $j$ 上方的结点的下结点应为 $j$ 的下结点；</p><p>(2) $j$ 下方的结点的上结点应为 $j$ 的上结点。</p><p>注意要修改每一列的元素个数。</p><p>即 <code>U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]];</code>。</p><p><img src="/gallery/lectures/dlx/4-2-2.png" alt="4-2-2.png"></p><p>因此 $\text{remove(c)}$ 的代码实现就非常简单了：</p><p>其中第一个 <code>IT(i, D, c)</code> 等价于 <code>for(i = D[c]; i != c; i = D[i])</code>，即在顺着这一列从上往下遍历；</p><p>第二个 <code>IT(j, R, i)</code> 等价于 <code>for(j = R[i]; j != i; j = R[j])</code>，即在顺着这一行从左往右遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    L[R[c]] = L[c], R[L[c]] = R[c];</span><br><span class="line">    IT(i, D, c) IT(j, R, i)</span><br><span class="line">    U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>$\text{recover(c)}$ 操作</p><p>$\text{recover(c)}$ 表示在 Dancing Links 中还原第 $c$ 列以及与其相关的行和列。</p><p>$\text{recover(c)}$ 即 $\text{remove(c)}$ 的逆操作，在这里就不多赘述了。</p><p><strong>值得注意的是，</strong> $\text{recover(c)}$ <strong>的所有操作的顺序与</strong> $\text{remove(c)}$ <strong>的操作恰好相反。</strong></p><p>在这里给出 $\text{recover(c)}$ 的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    IT(i, U, c) IT(j, L, i)</span><br><span class="line">    U[D[j]] = D[U[j]] = j, ++siz[col[j]];</span><br><span class="line">    L[R[c]] = R[L[c]] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>$\text{build(r, c)}$ 操作</p><p>$\text{build(r, c)}$ 表示新建一个大小为 $r \times c$，即有 $r$ 行，$c$ 列的 Dancing Links。</p><p>我们新建 $c + 1$ 个结点，为列指示。</p><p>第 $i$ 个点的左结点为 $i - 1$，右结点为 $i + 1$，上结点为 $i$，下结点为 $i$。</p><p>特殊地，  $0$ 结点的左结点为 $c$，$c$ 结点的右结点为 $0$。</p><p>于是我们得到了一条链：</p><p><img src="/gallery/lectures/dlx/4-4.png" alt="4-4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;r, <span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    n = r, m = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= c; ++i) &#123;</span><br><span class="line">        L[i] = i - <span class="number">1</span>, R[i] = i + <span class="number">1</span>;</span><br><span class="line">        U[i] = D[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    L[<span class="number">0</span>] = c, R[c] = <span class="number">0</span>, idx = c;</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">0</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就初始化了一个 Dancing Links。</p></li><li><p>$\text{insert(r, c)}$ 操作</p><p>$\text{insert(r, c)}$ 表示在第 $r$ 行，第 $c$ 列插入一个结点。</p><p>我们分两种情况来操作：</p><p>(1) 如果第 $r$ 行没有元素，那么直接插入一个元素，并使 $first(r)$ 指向这个元素；</p><p>(2) 如果第 $r$ 行有元素，那么将这个新元素 <strong>用一种奇异的方式</strong> 与 $c$ 和 $first(r)$ 连接起来。</p><p>对于 (1)，我们可以通过 <code>first[r] = L[idx] = R[idx] = idx;</code> 来实现；</p><p>对于 (2)，（我们称这个新元素为 $idx$）：</p><ul><li><p>我们把 $idx$ 插入到 $c$ 的正下方，此时：</p><p>(1) $idx$ 下方的结点为原来 $c$ 的下结点；</p><p>(2) $idx$ 下方的结点（即原来 $c$ 的下结点）的上结点为 $idx$;</p><p>(3) $idx$ 的上结点为 $c$；</p><p>(4) $c$ 的下结点为 $idx$。</p><p>注意记录 $idx$ 的所在列和所在行，以及更新这一列的元素个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col[++idx] = c, row[idx] = r, ++siz[c];</span><br><span class="line">U[idx] = c, D[idx] = D[c], U[D[c]] = idx, D[c] = idx;</span><br></pre></td></tr></table></figure><p><strong>强烈建议读者完全掌握这几步的顺序后再继续阅读本文。</strong></p></li><li><p>我们把 $idx$ 插入到 $first(r)$ 的正右方，此时：</p><p>(1) $idx$ 右侧的结点为原来 $first(r)$ 的右结点；</p><p>(2) 原来 $first(r)$ 右侧的结点的左结点为 $idx$；</p><p>(3) $idx$ 的左结点为 $first(r)$；</p><p>(4) $first(r)$ 的右结点为 $idx$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[idx] = first[r], R[idx] = R[first[r]];</span><br><span class="line">R[first[r]] = idx, L[R[first[r]]] = idx;</span><br></pre></td></tr></table></figure><p><strong>强烈建议读者完全掌握这几步的顺序后再继续阅读本文。</strong></p></li></ul><p>对于 $\text{insert(r, c)}$ 这个操作，我们可以画图来辅助理解：</p><p><img src="/gallery/lectures/dlx/4-5.png" alt="4-5.png"></p><p>留心曲线箭头的方向。</p><p>在这里给出 $\text{insert(r, c)}$ 的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;r, <span class="keyword">const</span> <span class="keyword">int</span> &amp;c)</span> </span>&#123;</span><br><span class="line">    row[++idx] = r, col[idx] = c, ++siz[c];</span><br><span class="line">    U[idx] = D[idx] = c, U[D[c]] = idx, D[c] = idx;</span><br><span class="line">    <span class="keyword">if</span>(!first[r]) first[r] = L[idx] = R[idx] = idx;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        L[idx] = first[r], R[idx] = R[first[r]];</span><br><span class="line">        L[R[first[r]]] = idx, R[first[r]] = idx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>$\text{dance()}$ 操作</p><p>$\text{dance()}$ 即为递归地删除以及还原各个行列的过程。</p><p>(1) 如果 $0$ 号结点没有右结点，那么矩阵为空，记录答案并返回；</p><p>(2) 选择列元素个数最少的一列，并删掉这一列；</p><p>(3) 遍历这一列所有有 $1$ 的行，枚举它是否被选择；</p><p>(4) 递归调用 $\text{dance()}$，如果可行，则返回；如果不可行，则恢复被选择的行；</p><p>(5) 如果无解，则返回；</p><p>在这里给出 $\text{dance()}$ 的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dance</span><span class="params">(<span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, c = R[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!R[<span class="number">0</span>]) &#123; ans = dep; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    IT(i, R, <span class="number">0</span>) <span class="keyword">if</span>(siz[i] &lt; siz[c]) c = i;</span><br><span class="line"></span><br><span class="line">    remove(c);</span><br><span class="line">    IT(i, D, c) &#123;</span><br><span class="line">        stk[dep] = row[i];</span><br><span class="line">        IT(j, R, i) remove(col[j]);</span><br><span class="line">        <span class="keyword">if</span>(dance(dep + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        IT(j, L, i) recover(col[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    recover(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>stk[]</code> 用来记录答案。</p><p>注意我们每次优先选择列元素个数最少的一列进行删除，这样能保证程序具有一定的启发性（乱扯的），是搜索树分支最少（不会证）。</p></li></ol><h3 id="时间复杂度分-luan-析-che"><a href="#时间复杂度分-luan-析-che" class="headerlink" title="时间复杂度分 (luàn) 析 (chě)"></a>时间复杂度分 (luàn) 析 (chě)</h3><p>DLX 的时间复杂度是 <strong>指数级</strong> 的，它递归及回溯的次数与矩阵中 $1$ 的个数有关，与矩阵的 $r, c$ 等参数无关。</p><p>因此理论复杂度大概在 $O(c^n)$ 左右，其中 $c$ 为某个非常接近于 $1$ 的常数，$n$ 为矩阵中 $1$ 的个数。</p><p>但实际情况下 DLX 表现良好，一般能解决大部分的问题。</p><h3 id="如何建模"><a href="#如何建模" class="headerlink" title="如何建模"></a>如何建模</h3><p>DLX 的难点，<del>除了垃圾链表连这连那</del>就是建模。</p><p><strong>请确保已经完全掌握 DLX 模板后再继续阅读本文。</strong></p><p>我们每拿到一个题，应该考虑行和列所表示的意义：</p><ul><li><p>行表示 <em>决策</em>，因为每行对应着一个集合，也就对应着选 / 不选；</p></li><li><p>列表示 <em>状态</em>，因为第 $i$ 列对应着某个条件 $P_i$。</p></li></ul><p>对于某一行而言，由于不同的列的值不尽相同，我们 <strong>由不同的状态，定义了一个决策</strong>。</p><ol><li><p>【洛谷】 P1784 数独 <a href="https://www.luogu.com.cn/problem/P1784" target="_blank" rel="noopener">题目链接</a></p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>先考虑决策是什么。</p><p>在这一题中，每一个决策可以用形如 $(r, c, w)$ 的有序三元组表示。</p><p>注意到 “宫” 并不是决策的参数，因为它 <strong>可以被每个确定的 $(r, c)$ 表示</strong>。</p><p>因此有 $9 \times 9 \times 9 = 729$ 行。</p><p>再考虑状态是什么。</p><p>我们思考一下 $(r, c, w)$ 这个决将会造成什么影响。记 $(r, c)$ 所在的宫为 $b$。</p><p>(1) 第 $r$ 行用了一个 $w$（用 $9 \times 9 = 81$ 列表示）；</p><p>(2) 第 $c$ 列用了一个 $w$（用 $9 \times 9 = 81$ 列表示）；</p><p>(3) 第 $b$ 宫用了一个 $w$（用 $9 \times 9 = 81$ 列表示）；</p><p>(4) $(r, c)$ 中填入了一个数（用 $9 \times 9 = 81$ 列表示）。</p><p>因此有 $81 \times 4 = 324$ 列，共 $729 \times 4 = 2916$ 个 $1$。</p><p>至此，我们成功地将 $9 \times 9$ 的数独问题转化成了一个<strong>有 $729$ 行，$324$ 列，共 $2916$ 个 $1$</strong> 的精确覆盖问题。</p>              </div>            </details></li><li><p>【洛谷】 P1074 靶形数独 <a href="https://www.luogu.com.cn/problem/P1074" target="_blank" rel="noopener">题目链接</a></p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p>这一题与 (5.1) 的模型构建 <strong>一模一样</strong>，主要区别在于答案的更新。</p><p>这一题可以开一个权值数组，每次找到一组数独的解时，</p><p>每个位置上的数乘上对应的权值计入答案即可。</p>              </div>            </details></li><li><p>【洛谷】 P4205 『NOI2005』智慧珠游戏 <a href="https://www.luogu.com.cn/problem/P4205" target="_blank" rel="noopener">题目链接</a></p><details ><summary> <p>解析</p> </summary>              <div class='content'>              <p><del>终于，我们打到了大 boss。</del></p><blockquote><p>定义：题中给我们的智慧珠的形态，称为这个智慧珠的 <em>标准形态</em>。</p></blockquote><p>显然，我们可以通过改变两个参数 $d$（表示顺时针旋转 $90^{\circ}$ 的次数）和 $f$（是否水平翻转）来改变这个智慧珠的形态。</p><p>仍然，我们先考虑决策是什么。</p><p>在这一题中，每一个决策可以用形如 $(v, d, f, i)$ 的有序五元组表示。</p><p>表示第 $i$ 个智慧珠的 <em>标准形态</em> 的左上角的位置，序号为 $v$，经过了 $d$ 次顺时针转 $90^{\circ}$。</p><p>巧合的是，我们可以令 $f = 1$ 时不水平翻转，$f = -1$ 时水平翻转，从而达到简化代码的目的。</p><p>因此有 $55 \times 4 \times 2 \times 12 = 5280$ 行。</p><p>需要注意的是，因为一些不合法的填充，如 $(1, 0, 1, 4)$，</p><p>所以<strong>在实际操作中，空的智慧珠棋盘也只需要建出 $2730$ 行。</strong></p><p>再考虑状态是什么。</p><p>这一题的状态比较简单。</p><p>我们思考一下，$(v, d, f, i)$ 这个决策会造成什么影响。</p><p>(1) 某些格子被占了（用 $55$ 列表示）；</p><p>(2) 第 $i$ 个智慧珠被用了（用 $12$ 列表示）。</p><p>因此有 $55 + 12 = 67$ 列，共 $5280 \times (5 + 1) = 31680$ 个 $1$。</p><p>至此，我们成功地将智慧珠游戏转化成了一个<strong>有 $5280$ 行，$67$ 列，共 $31680$ 个 $1$</strong> 的精确覆盖问题。</p>              </div>            </details></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li><p>SP1110 SUDOKU - Sudoku <a href="https://www.luogu.com.cn/problem/SP1110" target="_blank" rel="noopener">题目链接</a></p></li><li><p>『kuangbin带你飞』专题三 Dancing Links <a href="https://vjudge.net/contest/65998#overview" target="_blank" rel="noopener">题表链接</a></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DLX 能用来解决精确覆盖问题，而适当地建立起模型后能解决一些毒瘤的大模拟。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>[1]英雄哪里出来 的 <a href="https://blog.csdn.net/whereisherofrom/article/details/79220897" target="_blank" rel="noopener">《夜深人静写算法（九）- Dancing Links X（跳舞链）》</a></li><li>[2]万仓一黍 的 <a href="https://www.cnblogs.com/grenet/p/3145800.html" target="_blank" rel="noopener">《跳跃的舞者，舞蹈链（Dancing Links）算法——求解精确覆盖问题》</a></li><li>[3]zhangjianjunab 的 <a href="https://blog.csdn.net/zhangjianjunab/article/details/83688681" target="_blank" rel="noopener">《DLX 算法一览》</a></li><li>[4]静听风吟。的 <a href="https://www.cnblogs.com/aininot260/p/9629926.html" target="_blank" rel="noopener">《搜索：DLX 算法》</a></li><li>[5]刘汝佳，陈锋 的 <a href="https://item.jd.com/11111050.html" target="_blank" rel="noopener">《算法竞赛入门经典：训练指南》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLX </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2774 方格取数问题</title>
      <link href="/2020/02/28/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2774-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/28/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2774-%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个 $m$ 行 $n$ 列的矩阵 $M$，在这个矩阵中取出一些数，每取出一个数后，在之后的操作中禁止取与它 <strong>相邻</strong> 的方格中的数。求取出的数的和的最大值。</p><p>$1 \le m, n \le 100$，$1 \le M_{i, j} \le 10^5$。</p><p><a href="https://www.luogu.com.cn/problem/P2774" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>我们将整个棋盘进行黑板染色，就像国际象棋一样。</p><p>对于每个点 $(i, j)$，如果 $i + j$ 为奇数，那么就染成白的；否则，染成黑的。</p><p>这样我们就可以以颜色来建二分图。</p><p>如果是个白点，我们就连超级源点，容量为点权；</p><p>如果是个黑点，我们就连超级汇点，容量为点权。</p><p>两个互斥的点之间我们连 $\inf$。</p><p>这样，总点权和 - 最小割即为答案。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n, s, t, cnt, sum, max_flow;</span><br><span class="line"><span class="keyword">int</span> first[M], cur[M], dep[M], a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v, e[cnt].wt = w;</span><br><span class="line">    e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(st), dep[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to)</span><br><span class="line">            <span class="keyword">if</span>(e[i].wt &amp;&amp; !dep[y]) &#123;</span><br><span class="line">                dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(y);</span><br><span class="line">                <span class="keyword">if</span>(y == ed) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">    <span class="keyword">int</span> out = in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(e[i].wt &amp;&amp; dep[y] == dep[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_flow = dinic(y, <span class="built_in">std</span>::min(e[i].wt, out));</span><br><span class="line">            <span class="keyword">if</span>(!cur_flow) dep[y] = <span class="number">0</span>;</span><br><span class="line">            e[i].wt -= cur_flow;</span><br><span class="line">            e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">            out -= cur_flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in - out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) * n + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= m &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("test.in", "r", stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    s = <span class="number">0</span>, t = m * n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = Get(i, j);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">            <span class="keyword">if</span>((i + j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                Add_Edge(s, num, a[i][j]);</span><br><span class="line">                Add_Edge(num, s, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(valid(i - <span class="number">1</span>, j)) Add_Edge(num, Get(i - <span class="number">1</span>, j), oo), Add_Edge(Get(i - <span class="number">1</span>, j), num, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(valid(i, j - <span class="number">1</span>)) Add_Edge(num, Get(i, j - <span class="number">1</span>), oo), Add_Edge(Get(i, j - <span class="number">1</span>), num, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(valid(i + <span class="number">1</span>, j)) Add_Edge(num, Get(i + <span class="number">1</span>, j), oo), Add_Edge(Get(i + <span class="number">1</span>, j), num, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(valid(i, j + <span class="number">1</span>)) Add_Edge(num, Get(i, j + <span class="number">1</span>), oo), Add_Edge(Get(i, j + <span class="number">1</span>), num, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Add_Edge(num, t, a[i][j]);</span><br><span class="line">                Add_Edge(t, num, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sum += a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, first, <span class="keyword">sizeof</span>(first));</span><br><span class="line">        max_flow += dinic(s, oo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum - max_flow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2764 最小路径覆盖问题</title>
      <link href="/2020/02/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2764-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/27/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2764-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个有向无环图 $G = (V, E)$，求其最小路径覆盖。</p><p>$1 \le \left|V\right| \le 150$，$1 \le \left|E\right| \le 6\cdot10^3$。</p><p><a href="https://www.luogu.com.cn/problem/P2764" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>对于每个有向边 $e = (i, j)$，构造边 $e’ = (x_i, y_j)$</p><p>然后建立一个超级源点和超级汇点，分别连向 $x_i$ 和 $y_i$，然后跑最大流即可。</p><p>似乎可以找到所有 <strong>方案输出题</strong> 的技巧：</p><p>对于每条边，我们看它是否流量为 $0$，如果为 $0$，则这个 ”搭配“ 是被选择了的。</p><p>记录下这条边的来源以及去处，最后顺着一条链暴力跳即可。</p><p>如果有流量且这条边不是辅助边，那么就输出。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">6e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, t, cnt, max_flow;</span><br><span class="line"><span class="keyword">int</span> first[N &lt;&lt; <span class="number">1</span>], cur[N &lt;&lt; <span class="number">1</span>], dep[N &lt;&lt; <span class="number">1</span>], nxt[N &lt;&lt; <span class="number">1</span>], vis[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, _next, wt;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[cnt].from = u;</span><br><span class="line">    e[cnt].to = v;</span><br><span class="line">    e[cnt].wt = w;</span><br><span class="line">    e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    q.push(st), dep[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to)</span><br><span class="line">            <span class="keyword">if</span> (e[i].wt &amp;&amp; !dep[y]) &#123;</span><br><span class="line">                dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(y);</span><br><span class="line">                <span class="keyword">if</span> (y == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">    <span class="keyword">int</span> out = in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(e[i].wt &amp;&amp; dep[y] == dep[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_flow = dinic(y, <span class="built_in">std</span>::min(e[i].wt, out));</span><br><span class="line">            <span class="keyword">if</span>(!cur_flow) dep[y] = <span class="number">0</span>;</span><br><span class="line">            e[i].wt -= cur_flow;</span><br><span class="line">            e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">            out -= cur_flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in - out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) Add_Edge(<span class="number">0</span>, i, <span class="number">1</span>), Add_Edge(i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        Add_Edge(u, v + n, <span class="number">1</span>);</span><br><span class="line">        Add_Edge(v + n, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        Add_Edge(i + n, n * <span class="number">2</span> + <span class="number">1</span>, <span class="number">1</span>), Add_Edge(n * <span class="number">2</span> + <span class="number">1</span>, i + n, <span class="number">0</span>);</span><br><span class="line">    s = <span class="number">0</span>, t = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, first, <span class="keyword">sizeof</span>(first));</span><br><span class="line">        max_flow += dinic(s, oo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n &lt;&lt; <span class="number">1</span>; i &lt;= (n * <span class="number">2</span> + m) &lt;&lt; <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e[i].wt) &#123;</span><br><span class="line">            nxt[ e[i].from ] = e[i].to - n;</span><br><span class="line">            vis[ e[i].to - n ] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; ; j = nxt[j]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, j);</span><br><span class="line">                <span class="keyword">if</span>(!nxt[j]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - max_flow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【洛谷】P2756 飞行员配对方案问题</title>
      <link href="/2020/02/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2756-%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/09/%E3%80%90%E6%B4%9B%E8%B0%B7%E3%80%91P2756-%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题意简述："><a href="#题意简述：" class="headerlink" title="题意简述："></a>题意简述：</h3><p>给定一个二分图 $(V_1, V_2, E)$，求其最大匹配。</p><p>$1\le \left|V_1\right|, \left|V_2\right| \le 100$，$1 \le \left|E\right| \le \left|V_1\right|\cdot\left|V_2\right|$。</p><p><a href="https://www.luogu.com.cn/problem/P2756" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>建立超级源点 $S$ 以及 超级汇点 $T$，</p><p>$S$ 到 $[1, n]$ 的点，$T$ 到 $[m + 1, n]$ 的点都分别连一条容量为 $1$ 的辅助边，</p><p>然后如果有 $(u, v)$ 这个配对，那么 $u$ 到 $v$ 再连一条容量为 $1$ 的实际边，</p><p>跑最大流就好了。</p><p>注意匹配方案的输出方法，检查每条 <strong>正向边</strong> 的反向边是否有流量，</p><p>如果有流量且这条边不是辅助边，那么就输出。</p><h3 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h3><details ><summary> <p>Code</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s (n + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> t (n + 2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> oo = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tmpu, tmpv, max_flow;</span><br><span class="line"><span class="keyword">int</span> cnt, first[N], dep[N], cur[N], to[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, _next, wt;</span><br><span class="line">&#125; e[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[cnt].to = v;</span><br><span class="line">    e[cnt].wt = w;</span><br><span class="line">    e[cnt]._next = first[u];</span><br><span class="line">    first[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u), dep[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = first[x], y = e[i].to; ~i; i = e[i]._next, y = e[i].to)</span><br><span class="line">            <span class="keyword">if</span>(e[i].wt &amp;&amp; !dep[y]) &#123;</span><br><span class="line">                dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(y);</span><br><span class="line">                <span class="keyword">if</span>(y == v) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == t) <span class="keyword">return</span> in;</span><br><span class="line">    <span class="keyword">int</span> out = in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[x]; ~i &amp;&amp; out; i = e[i]._next) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(e[i].wt &amp;&amp; dep[y] == dep[x] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur_flow = dinic(y, <span class="built_in">std</span>::min(e[i].wt, out));</span><br><span class="line">            <span class="keyword">if</span>(!cur_flow) dep[y] = <span class="number">0</span>;</span><br><span class="line">            e[i].wt -= cur_flow;</span><br><span class="line">            e[i ^ <span class="number">1</span>].wt += cur_flow;</span><br><span class="line">            out -= cur_flow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in - out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(first, <span class="number">-1</span>, <span class="keyword">sizeof</span>(first));</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span>(!~u || !~v) <span class="keyword">break</span>;</span><br><span class="line">        Add_Edge(u, v, <span class="number">1</span>);</span><br><span class="line">        Add_Edge(v, u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        Add_Edge(s, i, <span class="number">1</span>);</span><br><span class="line">        Add_Edge(i, s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        Add_Edge(i, t, <span class="number">1</span>);</span><br><span class="line">        Add_Edge(t, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, first, <span class="keyword">sizeof</span>(first));</span><br><span class="line">        max_flow += dinic(s, oo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max_flow) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e[i].to != s &amp;&amp; e[i].to != t)</span><br><span class="line">            <span class="keyword">if</span>(e[i ^ <span class="number">1</span>].to != s &amp;&amp; e[i ^ <span class="number">1</span>].to != t)</span><br><span class="line">            <span class="keyword">if</span>(e[i ^ <span class="number">1</span>].wt != <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, e[i].to, e[i ^ <span class="number">1</span>].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 24 题 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【游记】记游 8102 PION</title>
      <link href="/2018/11/25/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91%E8%AE%B0%E6%B8%B8-8102-PION/"/>
      <url>/2018/11/25/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91%E8%AE%B0%E6%B8%B8-8102-PION/</url>
      
        <content type="html"><![CDATA[<p>就在两周之前，差不多这个时间段，人生中的第一次$NOIP$结束了。</p><p>这一次纵然有许多遗憾，也让我获取到了许多经验。</p><a id="more"></a><h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day -3"></a><strong>Day -3</strong></h3><p>屋漏偏逢连夜雨，学校的期中考试竟然在$11.8-11.9$号举行，而$10$号就要$NOIP$了啊！</p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a><strong>Day 0</strong></h3><p>在叔叔家复习了模拟、搜索等基本内容。刷了$3$道水题。</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a><strong>Day 1</strong></h3><h4 id="T1-铺设道路"><a href="#T1-铺设道路" class="headerlink" title="T1 铺设道路"></a>T1 铺设道路</h4><p>我并不知道这是一道原题，因此我打了一个暴力搜索，小样例过了，大样例T了，慌得一批的我出了几组小的数据，过了，然后就没管这一题了。</p><p>我发现搜索的基本功很有用，毕竟它能使你暴力弄点分回来。</p><p>知道它是原题的我被震惊到了，立志下次NOIP之前要把以前的题都做一遍</p><p>我做题的思路大概是这样的：先遍历一遍，如果有地方是零，就左右分别递归</p><p>并不知道记录是否为0的book数组的优化是否有用……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt,minn=<span class="number">99999</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100010</span>],book[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt+=d[l];</span><br><span class="line">        d[l]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">        <span class="keyword">if</span>(d[i]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            book[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left=i<span class="number">-1</span>,right=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=l;j--)</span><br><span class="line">                <span class="keyword">if</span>(book[j]==<span class="number">1</span>)</span><br><span class="line">                    left=j;</span><br><span class="line">            search(l,left);<span class="comment">//左右分别递归</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r;j++)</span><br><span class="line">                <span class="keyword">if</span>(book[j]==<span class="number">1</span>)</span><br><span class="line">                    right=j;</span><br><span class="line">            search(right,r);<span class="comment">//左右分别递归</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">            d[i]--;</span><br><span class="line">        search(l,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("road.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("road.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i]);</span><br><span class="line">        minn=minn&gt;d[i]?d[i]:minn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        d[i]-=minn;<span class="comment">//先处理一遍</span></span><br><span class="line">    cnt+=minn;</span><br><span class="line">    search(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2-货币系统"><a href="#T2-货币系统" class="headerlink" title="T2 货币系统"></a>T2 货币系统</h4><p>并不会做这道题，所以就只准备拿前6个测试点的分（可是只得了15分？？？）（肯定有个地方出锅了）</p><p>话说</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> point_x&#123; &#125;</span><br></pre></td></tr></table></figure><p>很好用，这让我的代码可读性很高，很容易调试</p><h4 id="T3-赛道修建"><a href="#T3-赛道修建" class="headerlink" title="T3 赛道修建"></a>T3 赛道修建</h4><p>然而还是不会做</p><p>分了namespace的我还是只得了5分</p><p>（肯定又有哪里出锅了）</p><p>原因暂未查明</p><h3 id="普及组"><a href="#普及组" class="headerlink" title="普及组"></a><strong>普及组</strong></h3><h4 id="T1-标题统计"><a href="#T1-标题统计" class="headerlink" title="T1 标题统计"></a>T1 标题统计</h4><p>这题甚是奇怪，在我的记忆中……NOIP普及组可是不曾考过字符串的啊</p><p>想都没想，5分钟就肝了这道题</p><p>考试源代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("title.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("title.out","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">        len+=s.length();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;len;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T2-龙虎斗"><a href="#T2-龙虎斗" class="headerlink" title="T2 龙虎斗"></a>T2 龙虎斗</h4><p>好复杂的模拟，为介绍清楚背景，CCF花了好多心思啊</p><p>不开$long$ $long$会后悔一生的！</p><p>考场上其实我是A了这道题的，但是莫名其妙洛谷只给了我80</p><p>考试源代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m,p1,p2,s1,s2,sum,minn=<span class="number">2000000000</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tiger,dragon;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">abs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="keyword">return</span> -a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("fight.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("fight.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;m,&amp;p1,&amp;s1,&amp;s2);</span><br><span class="line">    c[p1]+=s1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m<span class="number">-1</span>;i++)</span><br><span class="line">        dragon+=(m-i)*c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=m+<span class="number">1</span>;i--)</span><br><span class="line">        tiger+=(i-m)*c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=m)</span><br><span class="line">            sum=<span class="built_in">abs</span>(dragon+s2*(m-i)-tiger);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;m)</span><br><span class="line">            sum=<span class="built_in">abs</span>(tiger+s2*(i-m)-dragon);</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;minn)</span><br><span class="line">        &#123;</span><br><span class="line">            minn=sum;</span><br><span class="line">            p2=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum==minn &amp;&amp; i&lt;=p2)</span><br><span class="line">        &#123;</span><br><span class="line">            p2=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="T3-摆渡车"><a href="#T3-摆渡车" class="headerlink" title="T3 摆渡车"></a>T3 摆渡车</h4><p>这是道dp题，刚出考场的我就意识到了这一点</p><p>可是考场上我却打的是个模拟</p><p>在$1$~$m$之间枚举车子出发的时间</p><p>于是我们得到了一个$O(m\times max\sum\limits_{i=1}^{n}t_i+n)$的算法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,maxn=<span class="number">-99999</span>;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">4000010</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">999999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("bus.in","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("bus.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tim;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tim);</span><br><span class="line">        t[tim]++;</span><br><span class="line">        <span class="keyword">if</span>(tim&gt;maxn)</span><br><span class="line">            maxn=tim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=maxn;j++)</span><br><span class="line">            <span class="keyword">if</span>(t[j]&gt;<span class="number">0</span>)</span><br><span class="line">                tot+=(m+i-j%m)%m;</span><br><span class="line">        <span class="keyword">if</span>(tot&lt;ans)</span><br><span class="line">            ans=tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而只得了10分。希望有$dalao$能指出错误</p><h4 id="T4-对称二叉树"><a href="#T4-对称二叉树" class="headerlink" title="T4 对称二叉树"></a>T4 对称二叉树</h4><p>当时时间不多了，再加上本来就没想着要得多少分，果断地放弃了正解，而是准备拿前三个测试点</p><p>然而事与愿违，我只拿到了前两个测试点得分</p><p>普及总分218，（在我们省）还算可以吧</p><p>这是我第一次也是最后一次参加普及组，以后要在提高组里被人虐啦！</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a><strong>Day 2</strong></h3><h4 id="T1-旅行"><a href="#T1-旅行" class="headerlink" title="T1 旅行"></a>T1 旅行</h4><p>dfs裸搜 感觉可以得 50，因为我自己造了几组m=n-1的数据，然而只得了20 感觉还是特判没有判干净吧。</p><h4 id="T2-填数游戏"><a href="#T2-填数游戏" class="headerlink" title="T2 填数游戏"></a>T2 填数游戏</h4><p>考场上手算了几组数据，然而却CE了</p><p>原因竟是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand() 在<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; 里</span></span></span><br></pre></td></tr></table></figure><p>这导致我偷鸡不成蚀把米，要记住，下次可不能犯这样的错误啊！本可以在拿15分的。</p><h4 id="T3-保卫王国"><a href="#T3-保卫王国" class="headerlink" title="T3 保卫王国"></a>T3 保卫王国</h4><p>  这道题完全没思路，不说了。</p><p>人生中的第一次NOIP就这么过去了，我懂得了许多：</p><ol><li>练好基本功，搜索、模拟不能落下</li><li>要多熟悉各种基本算法</li><li>要多做历年的NOIP真题</li></ol><p>NOIP，我们明年再见！</p>]]></content>
      
      
      <categories>
          
          <category> 杂笔 </category>
          
          <category> 游记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOIP2018 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
