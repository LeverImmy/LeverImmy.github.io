{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 Clever_Jimmy \u7684\u65b0\u535a\u5ba2\uff01\u5de6\u4fa7\u662f\u6700\u8fd1\u6211\u53d1\u8868\u7684\u4e00\u4e9b\u535a\u5ba2\uff0c\u6b22\u8fce\u5404\u4f4d\u770b\u5b98\u6b23\u8d4f\u3002qwq \u5199\u535a\u5ba2\u6ce8\u610f\u4e8b\u9879 \u00b6 note \u7528\u4e8e\u300c\u4ee3\u7801\u5b9e\u73b0\u300d\u300c\u89e3\u9898\u601d\u8def\u300d \u300c\u4ee3\u7801\u5b9e\u73b0\u300d\u300c\u89e3\u9898\u601d\u8def\u300d\u7528 ??? note \"xxx\" example \u7528\u4e8e\u300c\u4f8b\u5b50\u300d \u300c\u4f8b\u5b50\u300d\u7528 !!! example \"xxx\" quote \u7528\u4e8e\u300c\u540d\u4eba\u540d\u8a00\u300d\u300c\u5f15\u7528\u300d \u300c\u540d\u4eba\u540d\u8a00\u300d\u300c\u5f15\u7528\u300d\u7528 !!! quote \"xxx\" warning \u7528\u4e8e\u300c\u8b66\u544a\u300d\u300c\u6ce8\u610f\u4e8b\u9879\u300d \u300c\u8b66\u544a\u300d\u300c\u6ce8\u610f\u4e8b\u9879\u300d\u7528 !!! warning \"xxx\" success \u7528\u4e8e\u300c\u8bc1\u660e\u300d \u663e\u7136\u7684\u8bc1\u660e\u7528 !!! success \"xxx\" \u4e0d\u663e\u7136\u7684\u8bc1\u660e\u7528 ??? success \"xxx\" tip \u7528\u4e8e\u300c\u6027\u8d28\u300d\u300c\u5f15\u7406\u300d\u300c\u5b9a\u7406\u300d\u300c\u7ed3\u8bba\u300d\u300cBonus\u300d \u300c\u6027\u8d28\u300d\u300c\u5f15\u7406\u300d\u300c\u5b9a\u7406\u300d\u300c\u7ed3\u8bba\u300d\u7528 !!! tip \"xxx\" \u300cBonus\u300d\u7528 ??? tip \"xxx\" abstract \u7528\u4e8e\u300c\u77e5\u8bc6\u70b9\u300d \u300c\u77e5\u8bc6\u70b9\u300d\u7528 !!! abstract \"xxx\" \u6807\u9898\u4e00\u5b9a\u8981 \u5f3a\u8c03 \u9898\u89e3\u4e00\u5b9a\u8981\u6309\u7167\u6a21\u677f posts\\editorials\\editorial-template.md \u6765\u5199 \u8fd8\u5495\u7740\u7684 \u00b6 AC \u81ea\u52a8\u673a\u7684\u4f8b\u9898\u6ca1\u5199 \u540e\u7f00\u6811\u7684\u5b66\u4e60\u7b14\u8bb0\u6ca1\u5199 Lyndon \u5206\u89e3\u7684\u4f8b\u9898\u6ca1\u5199 \u6570\u4f4d dp \u8fd8\u6ca1\u5199 PAM \u6709 typo EDU \u8fd8\u6ca1\u642c\u8fd0\u5b8c","title":""},{"location":"#_1","text":"note \u7528\u4e8e\u300c\u4ee3\u7801\u5b9e\u73b0\u300d\u300c\u89e3\u9898\u601d\u8def\u300d \u300c\u4ee3\u7801\u5b9e\u73b0\u300d\u300c\u89e3\u9898\u601d\u8def\u300d\u7528 ??? note \"xxx\" example \u7528\u4e8e\u300c\u4f8b\u5b50\u300d \u300c\u4f8b\u5b50\u300d\u7528 !!! example \"xxx\" quote \u7528\u4e8e\u300c\u540d\u4eba\u540d\u8a00\u300d\u300c\u5f15\u7528\u300d \u300c\u540d\u4eba\u540d\u8a00\u300d\u300c\u5f15\u7528\u300d\u7528 !!! quote \"xxx\" warning \u7528\u4e8e\u300c\u8b66\u544a\u300d\u300c\u6ce8\u610f\u4e8b\u9879\u300d \u300c\u8b66\u544a\u300d\u300c\u6ce8\u610f\u4e8b\u9879\u300d\u7528 !!! warning \"xxx\" success \u7528\u4e8e\u300c\u8bc1\u660e\u300d \u663e\u7136\u7684\u8bc1\u660e\u7528 !!! success \"xxx\" \u4e0d\u663e\u7136\u7684\u8bc1\u660e\u7528 ??? success \"xxx\" tip \u7528\u4e8e\u300c\u6027\u8d28\u300d\u300c\u5f15\u7406\u300d\u300c\u5b9a\u7406\u300d\u300c\u7ed3\u8bba\u300d\u300cBonus\u300d \u300c\u6027\u8d28\u300d\u300c\u5f15\u7406\u300d\u300c\u5b9a\u7406\u300d\u300c\u7ed3\u8bba\u300d\u7528 !!! tip \"xxx\" \u300cBonus\u300d\u7528 ??? tip \"xxx\" abstract \u7528\u4e8e\u300c\u77e5\u8bc6\u70b9\u300d \u300c\u77e5\u8bc6\u70b9\u300d\u7528 !!! abstract \"xxx\" \u6807\u9898\u4e00\u5b9a\u8981 \u5f3a\u8c03 \u9898\u89e3\u4e00\u5b9a\u8981\u6309\u7167\u6a21\u677f posts\\editorials\\editorial-template.md \u6765\u5199","title":"\u5199\u535a\u5ba2\u6ce8\u610f\u4e8b\u9879"},{"location":"#_2","text":"AC \u81ea\u52a8\u673a\u7684\u4f8b\u9898\u6ca1\u5199 \u540e\u7f00\u6811\u7684\u5b66\u4e60\u7b14\u8bb0\u6ca1\u5199 Lyndon \u5206\u89e3\u7684\u4f8b\u9898\u6ca1\u5199 \u6570\u4f4d dp \u8fd8\u6ca1\u5199 PAM \u6709 typo EDU \u8fd8\u6ca1\u642c\u8fd0\u5b8c","title":"\u8fd8\u5495\u7740\u7684"},{"location":"posts/about/friends/","text":"\u6821\u5185\u597d\u53cb \u00b6 id \u535a\u5ba2\u5730\u5740 CJ_Tracer link imzzy link EternalAlexander link Polaris_Dane link Polyethylene link \u5357\u6c99\u5ba2\u8fd0\u6e2f link \u6821\u5916\u597d\u53cb \u00b6 id \u535a\u5ba2\u5730\u5740 DestinHistoire link","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"posts/about/friends/#_1","text":"id \u535a\u5ba2\u5730\u5740 CJ_Tracer link imzzy link EternalAlexander link Polaris_Dane link Polyethylene link \u5357\u6c99\u5ba2\u8fd0\u6e2f link","title":"\u6821\u5185\u597d\u53cb"},{"location":"posts/about/friends/#_2","text":"id \u535a\u5ba2\u5730\u5740 DestinHistoire link","title":"\u6821\u5916\u597d\u53cb"},{"location":"posts/about/intro/","text":"\u4e2a\u4eba\u4ecb\u7ecd \u00b6 \u6211\u662f Clever_Jimmy\uff0c\u4e00\u540d\u6765\u81ea HB \u7684\u5df2\u7ecf\u9000\u5f79\u7684 OIer\u3002 \u5907\u5fd8\u5f55 \u00b6 \u591a\u5199\u6ce8\u91ca\uff1b LaTeX \u6307\u5357 link \u300c\u4e5f\u8bb8\uff0c\u540c\u5b66\u95f4\u6700\u597d\u7684\u7ed3\u5c40\u5c31\u662f\u670b\u53cb\u5427\u3002\u300d \u540e\u7f00\u6811\u5efa\u9020\u8fc7\u7a0b link \u300c\u4f60\u81ea\u5df1\u624d\u662f\u81ea\u5df1\u7684\u539f\u52a8\u529b\u3002\u4f60\u628a\u539f\u52a8\u529b\u90fd\u6390\u7184\u706b\u4e86\uff0c\u8fd8\u80fd\u5e72\u561b\u5462\uff1f\u300d \u5934\u50cf\u7f51\u5740 link \u7b97\u6cd5\u53ca\u6570\u636e\u7ed3\u6784\u53ef\u89c6\u5316 link \u5404\u5927 OJ \u901a\u8fc7\u6570\u7edf\u8ba1 link QQ \u8868\u60c5\u56fe\u5e8a\u5730\u5740 link SVG \u56fe\u50cf\u7ed8\u5236 link \u53d6\u6a21\u4e58\u6cd5\uff1a 1 2 3 4 5 int mul ( int ta , int tb , int mod ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; } \u5927\u4e8b\u796d \u00b6 \u65e5\u671f \u4e8b\u60c5 2018.07.01 \u6210\u529f \u796d 2018.11.11 \u5b8c\u6210\u7b2c\u4e00\u6b21 NOIP \u796d 2019.11.17 \u5b8c\u6210\u7b2c\u4e00\u6b21 CSP \u796d 2020.01.01 \u5931\u8d25 \u796d 2020.01.23 \u6b66\u6c49\u5c01\u57ce\u796d 2020.03.10 CF \u4e0a 1800 \u796d 2020.03.22 \u7b2c\u4e00\u6b21 AK ABC \u796d 2020.03.30 \u7b2c\u4e00\u6b21\u4e0a \u6d1b\u8c37\u65e5\u62a5 \u796d 2020.06.08 CF Candidate Master \u796d 2020.06.12 \u7b2c\u4e00\u6b21 CF Successful Hack \u796d \uff08 hack \u7684\u8fd8\u662f\u81ea\u5df1\uff09 2020.06.12 CF \u4e0a 2000 \u796d 2020.06.14 \u7b2c\u4e00\u6b21 \u4e3e\u529e\u6d1b\u8c37\u516c\u5f00\u8d5b EasY Round \u796d 2020.08.01 AFO","title":"\u5173\u4e8e\u6211"},{"location":"posts/about/intro/#_1","text":"\u6211\u662f Clever_Jimmy\uff0c\u4e00\u540d\u6765\u81ea HB \u7684\u5df2\u7ecf\u9000\u5f79\u7684 OIer\u3002","title":"\u4e2a\u4eba\u4ecb\u7ecd"},{"location":"posts/about/intro/#_2","text":"\u591a\u5199\u6ce8\u91ca\uff1b LaTeX \u6307\u5357 link \u300c\u4e5f\u8bb8\uff0c\u540c\u5b66\u95f4\u6700\u597d\u7684\u7ed3\u5c40\u5c31\u662f\u670b\u53cb\u5427\u3002\u300d \u540e\u7f00\u6811\u5efa\u9020\u8fc7\u7a0b link \u300c\u4f60\u81ea\u5df1\u624d\u662f\u81ea\u5df1\u7684\u539f\u52a8\u529b\u3002\u4f60\u628a\u539f\u52a8\u529b\u90fd\u6390\u7184\u706b\u4e86\uff0c\u8fd8\u80fd\u5e72\u561b\u5462\uff1f\u300d \u5934\u50cf\u7f51\u5740 link \u7b97\u6cd5\u53ca\u6570\u636e\u7ed3\u6784\u53ef\u89c6\u5316 link \u5404\u5927 OJ \u901a\u8fc7\u6570\u7edf\u8ba1 link QQ \u8868\u60c5\u56fe\u5e8a\u5730\u5740 link SVG \u56fe\u50cf\u7ed8\u5236 link \u53d6\u6a21\u4e58\u6cd5\uff1a 1 2 3 4 5 int mul ( int ta , int tb , int mod ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; }","title":"\u5907\u5fd8\u5f55"},{"location":"posts/about/intro/#_3","text":"\u65e5\u671f \u4e8b\u60c5 2018.07.01 \u6210\u529f \u796d 2018.11.11 \u5b8c\u6210\u7b2c\u4e00\u6b21 NOIP \u796d 2019.11.17 \u5b8c\u6210\u7b2c\u4e00\u6b21 CSP \u796d 2020.01.01 \u5931\u8d25 \u796d 2020.01.23 \u6b66\u6c49\u5c01\u57ce\u796d 2020.03.10 CF \u4e0a 1800 \u796d 2020.03.22 \u7b2c\u4e00\u6b21 AK ABC \u796d 2020.03.30 \u7b2c\u4e00\u6b21\u4e0a \u6d1b\u8c37\u65e5\u62a5 \u796d 2020.06.08 CF Candidate Master \u796d 2020.06.12 \u7b2c\u4e00\u6b21 CF Successful Hack \u796d \uff08 hack \u7684\u8fd8\u662f\u81ea\u5df1\uff09 2020.06.12 CF \u4e0a 2000 \u796d 2020.06.14 \u7b2c\u4e00\u6b21 \u4e3e\u529e\u6d1b\u8c37\u516c\u5f00\u8d5b EasY Round \u796d 2020.08.01 AFO","title":"\u5927\u4e8b\u796d"},{"location":"posts/articles/","text":"\u8fd9\u91cc\u653e\u7f6e\u7684\u662f\u4e00\u4e9b\u6211\u7684\u6742\u7b14\u3002","title":"\u6982\u89c8"},{"location":"posts/articles/apio-2020/","text":"","title":"APIO2020 \u6e38\u8bb0"},{"location":"posts/articles/cf-edu-all/","text":"\u5237\u4e0d\u52a8 AGC\uff0c\u5c31\u6765\u5237 EDU \u5427\u3002 ID \u4f55\u65f6\u5b8c\u6210 \u9898\u89e3\u94fe\u63a5 \u5907\u6ce8 Educational Codeforces Round 1 2020.07.08 C E \u4ee3\u7801\uff1a A B D \uff1bF \u662f\u4e2a\u61a8\u6279\u8ba1\u7b97\u51e0\u4f55\uff0c\u4e0d\u5199\u3002 Educational Codeforces Round 2 2020.07.09 A D E F \u4ee3\u7801\uff1a B \uff1bC \u662f\u4e2a\u61a8\u6279\u6a21\u62df\uff0c\u4e0d\u5199\u3002 Educational Codeforces Round 3 2020.08.22 D E \u4ee3\u7801\uff1a A B C \uff1bF \u8fd8\u6ca1\u8ba2\u6b63\u3002 Educational Codeforces Round 4 Educational Codeforces Round 5 Educational Codeforces Round 6 Educational Codeforces Round 7 Educational Codeforces Round 8 Educational Codeforces Round 9 Educational Codeforces Round 10 Educational Codeforces Round 11 Educational Codeforces Round 12 Educational Codeforces Round 13 Educational Codeforces Round 14 Educational Codeforces Round 15 Educational Codeforces Round 16 Educational Codeforces Round 17 Educational Codeforces Round 18 Educational Codeforces Round 19 Educational Codeforces Round 20 Educational Codeforces Round 21 Educational Codeforces Round 22","title":"Educational Codeforces Round \u6c47\u603b"},{"location":"posts/articles/csp-s-2019/","text":"CSP-S 2019 \u5df2\u7ecf\u8fc7\u53bb\u4e86\uff0c\u8ba9\u6211\u51ed\u7740\u4ec5\u5b58\u7684\u8bb0\u5fc6\uff0c\u4e66\u5199\u4e0b\u8fd9\u6bb5\u8bb0\u5fc6\u5427\u3002 Day ?~-1 \u00b6 \u7ec8\u4e8e\u505c\u8bfe\u4e86\uff0c\u5728\u673a\u623f\u6709\u4e00\u5929\u6ca1\u4e00\u5929\u5730\u6253\u6a21\u62df\u8d5b\uff0c\u8ba2\u6b63\uff0c\u6253\u6a21\u62df\u8d5b\u2026\u2026 \u4e0d\u8fc7\u505c\u8bfe\u7684\u8fd9\u6bb5\u65f6\u95f4\u5012\u662f\u633a\u6109\u5feb\u7684\uff0c\u6bcf\u5929\u65e9\u4e0a\u5403\u5b8c\u65e9\u996d\u53ef\u4ee5\u76f4\u63a5\u53bb\u673a\u623f\u6253\u4ee3\u7801\uff0c\u4e2d\u5348\u80fd\u6709 early lunch\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e0b\u5348\u80fd\u6446\u8131 17:30 \u7684\u675f\u7f1a\uff0c\u8212\u8212\u670d\u670d\u5730\u6d17\u4e00\u4e2a\u6fa1\u3002 Day 0 \u00b6 \u6700\u540e\u4e00\u5929\u5f53\u7136\u662f\u9893\u4e86\u3002 \u5c1d\u8bd5\u7740\u628a\u6240\u6709\u4f1a\u7684\u5728\u6d1b\u8c37\u4e0a\u6709\u201c\u6a21\u677f\u201d\u6807\u7b7e\u7684\u9898\u90fd\u6253\u4e86\u4e00\u904d\uff0cLCA \u5dee\u70b9\u5199\u6302\uff0c\u9006\u5143\u5fd8\u8bb0\u600e\u4e48\u63a8\uff1f\u8fd9\u8981\u9000\u5f79\u554a\u3002 \u7136\u540e\u5c31\u5f00\u59cb CS1.6 \u4e86\u3002 \u4e2d\u9014 mj \u8fd8\u6765\u6170\u95ee\u4e86\u4e00\u4e0b\u5168\u673a\u623f\uff0c ~\uff08\u4f60\u4eec\u8981\u53bb\u5168\u90e8\u4e00\u7b49\u5956\u554a\uff09 ~\u5413\u5f97\u5927\u5bb6\u90fd\u4e00\u60ca\u3002 \u4e2d\u5348\u7761\u4e86\u4e00\u89c9\uff0c\u4e0b\u5348\u7ee7\u7eed\u6253\u677f\u5b50\uff0c\u665a\u4e0a\u5c31\u5230\u53d4\u53d4\u5bb6\u53bb\u4e86\u3002 \u9000 \u5f79 \u9884 \u5b9a\u3002 Day 1 \u00b6 \u65e9\u4e0a\u5403\u4e86\u4e00\u7897\u9762\uff0c\u6ca1\u559d\u725b\u5976\uff0c\u809a\u5b50\u6709\u70b9\u75bc ~\uff08\u8fd9\u662f\u8981\u9000\u5f79\u7684\u8282\u594f\u5427\uff09 ~ \u8d77\u5f97\u6bd4\u8f83\u65e9\uff0c\u4e8e\u662f 07:05 \u5c31\u5230\u4e86\u534e\u79d1\uff0c\u6ca1\u6709\u4ec0\u4e48\u4eba\uff1b\u4e0d\u8fc7\u4e00\u4f1a\u513f\u540c\u5b66\u4eec\u90fd\u9646\u9646\u7eed\u7eed\u5730\u6765\u4e86\uff0c\u62bd\u7b7e\u8fdb\u4e86\u8003\u573a\u3002 T1 \uff08\u683c\u96f7\u7801\u662f\u5565\uff1f\u4e0d\u4f1a\u600e\u4e48\u529e\uff09 \u4e71\u641e\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7b54\u6848\u6811\u548c 01Trie \u6709\u4e9b\u5173\u7cfb\uff0c\u5f00\u59cb\u731b\u5730\u627e\u89c4\u5f8b\u3002 \u6700\u540e\u53d1\u73b0\u9006\u63a8\u51fa\u7b54\u6848\u7684\u6bcf\u4e00\u4f4d\u5c31\u597d\u4e86\uff0c\u6b64\u65f6\u5927\u6982 09:12\uff0c\u6d4b\u4e86\u6781\u9650\u60c5\u51b5\uff0c\u6ca1\u6709\u95ee\u9898\u3002 T2\u611f\u89c9\u8fd8\u53ef\u4ee5\u505a\uff0c\u63a8\u4e86\u4e00\u4e0b\u6811\u662f\u4e00\u6761\u94fe\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u5e8f\u5217\uff09\u4e0a\u7684\u60c5\u51b5 \uff08\u98de\u901f\u8fc7\u5927\u6837\u4f8b\uff09 \u7136\u540e\u611f\u89c9\u53ef\u4ee5\u628a\u4e00\u68f5\u6811\u62c6\u6210\u5f88\u591a\u6761\u94fe\uff0c\u5206\u522b\u7528\u5e8f\u5217\u641e\uff0c\u4f46\u662f\u4e0d\u540c\u94fe\u4e0a\u7684\u8d21\u732e\u4e0d\u4f1a\u7edf\u8ba1\u554a\uff08\uff08\uff08\uff08\u3002 \u7b2c\u4e8c\u4e2a\u6837\u4f8b WA \u4e86\uff0c\u8c03\u8bd5\u7684\u65f6\u5019 RE \u4e86\uff08\u5e76\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 \uff08\u7b2c\u4e09\u4e2a\u6837\u4f8b\u4e5f\u592a\u6c34\u4e86\u5427\uff09 \u65e9\u77e5\u9053\u5c31\u6253 \\(O(n^3)\\) \u7684\u66b4\u529b\u4e86\u3002 T3\u611f\u89c9\u4e0d\u53ef\u505a\uff0c\u6253\u4e86 10pts \u7684\u66b4\u529b\u5c31\u6eda\u4e86\uff0c\u7136\u800c\u6700\u540e\u8fd8\u662f\u6ca1\u62ff\u5206\u3002 \u7136\u540e\u7ee7\u7eed\u770b T2\uff0c\u8d8a\u770b\u8d8a\u89c9\u5f97\u81ea\u5df1\u7684\u94fe\u5199\u6302\u4e86\uff0c\u7136\u540e\u8c03\u4e86\u534a\u5929\uff0c\u6700\u540e\u5c31\u4ea4\u5377\u4e86\u3002 \u51fa\u8003\u573a\uff0c\u5168\u4e16\u754c\u90fd100 + 100 + 10 = 210\u3002 \u4f3c\u4e4e\u5168\u4e16\u754c T2 \u90fd\u8fc7\u4e86\uff0cT3 \u4e5f\u90fd\u62ff\u4e8610pts\u3002 \u81ea\u5df1\u771f\u7684\u7701\u4e00\u65e0\u7f18\u4e86\u5427 \u665a\u4e0a\u6d4b\u4e86\u4e0b\u6d1b\u8c37\u548c\u725b\u5ba2\u7684\u6570\u636e\uff0c\u611f\u89c9\u81ea\u5df1 Day 1 \u4e5f\u5c31 100 \u591a\u5206\u5427\u3002 \u9000 \u5f79 \u9884 \u5b9a\u3002 Day 2 \u00b6 \u672c\u6765\u8fd8\u60f3\u4e0a 350 \u7684\uff0c\u4f46\u73b0\u5728\u770b\u6765\u6ca1\u5565\u5e0c\u671b\u4e86\u3002 \u6628\u5929\u7684\u5fc3\u60c5\u4e0d\u597d\u4e00\u76f4\u6301\u7eed\u5230\u4e86\u4eca\u5929\u3002 T1, T2 \u90fd\u662f dp\uff0cT3 \u662f\u4e00\u4e2a\u6811\u4e0a\u95ee\u9898\u3002 \u7136\u540e\u5b8c\u5168\u6ca1\u6709\u638c\u63e1 dp \u7684\u6211\u53ea\u4f1a\u641c\u7d22\uff0c\u7136\u540e\u5199\u4e86 T1, T2 \u7684\u66b4\u529b\u3002 \u7136\u540e\u53d1\u73b0 T3 \u7684 \\(n^2\\) \u5f88\u597d\u5199\uff0c\u5199\u4e86 40pts \u7684\u90e8\u5206\u5206\uff1b\u518d\u52a0\u4e0a\u94fe\u7684\u90e8\u5206\u5206\u3002 \u7136\u540e\u5c31\u4e0d\u77e5\u9053\u600e\u4e48\u529e\u4e86\u3002 \u6700\u540e 45min \u53d1\u73b0 T2 \u53ef\u4ee5\u526a\u679d\uff0c\u7136\u540e\u526a\u6302\u4e86\uff1b \u6700\u540e 15min \u53d1\u73b0 T3 \u7684\u94fe\u5199\u6302\u4e86\uff0c\u7136\u540e\u6ca1\u6539\u3002 \u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\u3002 Day inf \u00b6 \u54e6\u51fa\u6210\u7ee9\u4e86\u3002 \u672c\u6765\u6c34\u5e73\u5c31\u4e0d\u548b\u5730\uff0c\u7136\u540e\u6210\u4e3a\u4e86 HB \u63d0\u9ad8 1= \u5012\u6570\u7b2c\u4e8c\u540d\u3002","title":"CSP-S2019 \u6e38\u8bb0"},{"location":"posts/articles/csp-s-2019/#day-1","text":"\u7ec8\u4e8e\u505c\u8bfe\u4e86\uff0c\u5728\u673a\u623f\u6709\u4e00\u5929\u6ca1\u4e00\u5929\u5730\u6253\u6a21\u62df\u8d5b\uff0c\u8ba2\u6b63\uff0c\u6253\u6a21\u62df\u8d5b\u2026\u2026 \u4e0d\u8fc7\u505c\u8bfe\u7684\u8fd9\u6bb5\u65f6\u95f4\u5012\u662f\u633a\u6109\u5feb\u7684\uff0c\u6bcf\u5929\u65e9\u4e0a\u5403\u5b8c\u65e9\u996d\u53ef\u4ee5\u76f4\u63a5\u53bb\u673a\u623f\u6253\u4ee3\u7801\uff0c\u4e2d\u5348\u80fd\u6709 early lunch\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u4e0b\u5348\u80fd\u6446\u8131 17:30 \u7684\u675f\u7f1a\uff0c\u8212\u8212\u670d\u670d\u5730\u6d17\u4e00\u4e2a\u6fa1\u3002","title":"Day ?~-1"},{"location":"posts/articles/csp-s-2019/#day-0","text":"\u6700\u540e\u4e00\u5929\u5f53\u7136\u662f\u9893\u4e86\u3002 \u5c1d\u8bd5\u7740\u628a\u6240\u6709\u4f1a\u7684\u5728\u6d1b\u8c37\u4e0a\u6709\u201c\u6a21\u677f\u201d\u6807\u7b7e\u7684\u9898\u90fd\u6253\u4e86\u4e00\u904d\uff0cLCA \u5dee\u70b9\u5199\u6302\uff0c\u9006\u5143\u5fd8\u8bb0\u600e\u4e48\u63a8\uff1f\u8fd9\u8981\u9000\u5f79\u554a\u3002 \u7136\u540e\u5c31\u5f00\u59cb CS1.6 \u4e86\u3002 \u4e2d\u9014 mj \u8fd8\u6765\u6170\u95ee\u4e86\u4e00\u4e0b\u5168\u673a\u623f\uff0c ~\uff08\u4f60\u4eec\u8981\u53bb\u5168\u90e8\u4e00\u7b49\u5956\u554a\uff09 ~\u5413\u5f97\u5927\u5bb6\u90fd\u4e00\u60ca\u3002 \u4e2d\u5348\u7761\u4e86\u4e00\u89c9\uff0c\u4e0b\u5348\u7ee7\u7eed\u6253\u677f\u5b50\uff0c\u665a\u4e0a\u5c31\u5230\u53d4\u53d4\u5bb6\u53bb\u4e86\u3002 \u9000 \u5f79 \u9884 \u5b9a\u3002","title":"Day 0"},{"location":"posts/articles/csp-s-2019/#day-1_1","text":"\u65e9\u4e0a\u5403\u4e86\u4e00\u7897\u9762\uff0c\u6ca1\u559d\u725b\u5976\uff0c\u809a\u5b50\u6709\u70b9\u75bc ~\uff08\u8fd9\u662f\u8981\u9000\u5f79\u7684\u8282\u594f\u5427\uff09 ~ \u8d77\u5f97\u6bd4\u8f83\u65e9\uff0c\u4e8e\u662f 07:05 \u5c31\u5230\u4e86\u534e\u79d1\uff0c\u6ca1\u6709\u4ec0\u4e48\u4eba\uff1b\u4e0d\u8fc7\u4e00\u4f1a\u513f\u540c\u5b66\u4eec\u90fd\u9646\u9646\u7eed\u7eed\u5730\u6765\u4e86\uff0c\u62bd\u7b7e\u8fdb\u4e86\u8003\u573a\u3002 T1 \uff08\u683c\u96f7\u7801\u662f\u5565\uff1f\u4e0d\u4f1a\u600e\u4e48\u529e\uff09 \u4e71\u641e\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7b54\u6848\u6811\u548c 01Trie \u6709\u4e9b\u5173\u7cfb\uff0c\u5f00\u59cb\u731b\u5730\u627e\u89c4\u5f8b\u3002 \u6700\u540e\u53d1\u73b0\u9006\u63a8\u51fa\u7b54\u6848\u7684\u6bcf\u4e00\u4f4d\u5c31\u597d\u4e86\uff0c\u6b64\u65f6\u5927\u6982 09:12\uff0c\u6d4b\u4e86\u6781\u9650\u60c5\u51b5\uff0c\u6ca1\u6709\u95ee\u9898\u3002 T2\u611f\u89c9\u8fd8\u53ef\u4ee5\u505a\uff0c\u63a8\u4e86\u4e00\u4e0b\u6811\u662f\u4e00\u6761\u94fe\uff08\u4e5f\u5c31\u662f\u4e00\u4e2a\u5e8f\u5217\uff09\u4e0a\u7684\u60c5\u51b5 \uff08\u98de\u901f\u8fc7\u5927\u6837\u4f8b\uff09 \u7136\u540e\u611f\u89c9\u53ef\u4ee5\u628a\u4e00\u68f5\u6811\u62c6\u6210\u5f88\u591a\u6761\u94fe\uff0c\u5206\u522b\u7528\u5e8f\u5217\u641e\uff0c\u4f46\u662f\u4e0d\u540c\u94fe\u4e0a\u7684\u8d21\u732e\u4e0d\u4f1a\u7edf\u8ba1\u554a\uff08\uff08\uff08\uff08\u3002 \u7b2c\u4e8c\u4e2a\u6837\u4f8b WA \u4e86\uff0c\u8c03\u8bd5\u7684\u65f6\u5019 RE \u4e86\uff08\u5e76\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 \uff08\u7b2c\u4e09\u4e2a\u6837\u4f8b\u4e5f\u592a\u6c34\u4e86\u5427\uff09 \u65e9\u77e5\u9053\u5c31\u6253 \\(O(n^3)\\) \u7684\u66b4\u529b\u4e86\u3002 T3\u611f\u89c9\u4e0d\u53ef\u505a\uff0c\u6253\u4e86 10pts \u7684\u66b4\u529b\u5c31\u6eda\u4e86\uff0c\u7136\u800c\u6700\u540e\u8fd8\u662f\u6ca1\u62ff\u5206\u3002 \u7136\u540e\u7ee7\u7eed\u770b T2\uff0c\u8d8a\u770b\u8d8a\u89c9\u5f97\u81ea\u5df1\u7684\u94fe\u5199\u6302\u4e86\uff0c\u7136\u540e\u8c03\u4e86\u534a\u5929\uff0c\u6700\u540e\u5c31\u4ea4\u5377\u4e86\u3002 \u51fa\u8003\u573a\uff0c\u5168\u4e16\u754c\u90fd100 + 100 + 10 = 210\u3002 \u4f3c\u4e4e\u5168\u4e16\u754c T2 \u90fd\u8fc7\u4e86\uff0cT3 \u4e5f\u90fd\u62ff\u4e8610pts\u3002 \u81ea\u5df1\u771f\u7684\u7701\u4e00\u65e0\u7f18\u4e86\u5427 \u665a\u4e0a\u6d4b\u4e86\u4e0b\u6d1b\u8c37\u548c\u725b\u5ba2\u7684\u6570\u636e\uff0c\u611f\u89c9\u81ea\u5df1 Day 1 \u4e5f\u5c31 100 \u591a\u5206\u5427\u3002 \u9000 \u5f79 \u9884 \u5b9a\u3002","title":"Day 1"},{"location":"posts/articles/csp-s-2019/#day-2","text":"\u672c\u6765\u8fd8\u60f3\u4e0a 350 \u7684\uff0c\u4f46\u73b0\u5728\u770b\u6765\u6ca1\u5565\u5e0c\u671b\u4e86\u3002 \u6628\u5929\u7684\u5fc3\u60c5\u4e0d\u597d\u4e00\u76f4\u6301\u7eed\u5230\u4e86\u4eca\u5929\u3002 T1, T2 \u90fd\u662f dp\uff0cT3 \u662f\u4e00\u4e2a\u6811\u4e0a\u95ee\u9898\u3002 \u7136\u540e\u5b8c\u5168\u6ca1\u6709\u638c\u63e1 dp \u7684\u6211\u53ea\u4f1a\u641c\u7d22\uff0c\u7136\u540e\u5199\u4e86 T1, T2 \u7684\u66b4\u529b\u3002 \u7136\u540e\u53d1\u73b0 T3 \u7684 \\(n^2\\) \u5f88\u597d\u5199\uff0c\u5199\u4e86 40pts \u7684\u90e8\u5206\u5206\uff1b\u518d\u52a0\u4e0a\u94fe\u7684\u90e8\u5206\u5206\u3002 \u7136\u540e\u5c31\u4e0d\u77e5\u9053\u600e\u4e48\u529e\u4e86\u3002 \u6700\u540e 45min \u53d1\u73b0 T2 \u53ef\u4ee5\u526a\u679d\uff0c\u7136\u540e\u526a\u6302\u4e86\uff1b \u6700\u540e 15min \u53d1\u73b0 T3 \u7684\u94fe\u5199\u6302\u4e86\uff0c\u7136\u540e\u6ca1\u6539\u3002 \u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86\u3002","title":"Day 2"},{"location":"posts/articles/csp-s-2019/#day-inf","text":"\u54e6\u51fa\u6210\u7ee9\u4e86\u3002 \u672c\u6765\u6c34\u5e73\u5c31\u4e0d\u548b\u5730\uff0c\u7136\u540e\u6210\u4e3a\u4e86 HB \u63d0\u9ad8 1= \u5012\u6570\u7b2c\u4e8c\u540d\u3002","title":"Day inf"},{"location":"posts/articles/hboi-2020/","text":"\u5450\uff0c\u53c8\u5230\u4e86\u7701\u9009\u5b63\u4e86\u5462\u3002 Day 0 \u00b6 \u4e0a\u5348\u8fd8\u662f\u4f9d\u7136\u5728\u5bb6\u91cc\u4e0a\u5b66\u6821\u7684\u7f51\u8bfe\uff0c\u300a\u5ec9\u9887\u853a\u76f8\u5982\u5217\u4f20\u300b\u4e2d\u7684\u4fa7\u9762\u70d8\u6258\u597d\u5999\u554a\u2026\u2026 \u4e0b\u5348\u53bb\u5b66\u6821\u8bd5\u673a\uff0c\u6253\u4e86\u4e2a PAM\uff0c\u663e\u7136\u4e0d\u4f1a\u8003\uff08\u4f46\u6211\u4e5f\u4e0d\u4f1a\u5176\u4ed6\u7684\u4e86\uff09 \u771f\u7684\u4e00\u4e2a\u6708\u57cb\u5728\u6587\u5316\u8bfe\u7684\u82e6\u6d77\u91cc\u554a\u2026\u2026\u8fd9\u4e2a\u6708\u597d\u50cf\u53ea\u6253\u4e86\u51e0\u573a cf\uff0c\u5565\u4e1c\u897f\u4e5f\u6ca1\u5b66\u3002 \u6210\u529f\u5728\u5b66\u6821\u9762\u57fa\u5230\u4e86\u81ea\u5df1\u7684\u540c\u5b66\uff08\u5927\u96fe \u5df2\u7ecf\u534a\u5e74\u6ca1\u6709\u89c1\u9762\u4e86\u2026\u2026\u5bd2\u5047\u4e0a\u4e00\u6b21\u89c1\u9762\u662f\u4e00\u6708\u4e0b\u65ec\u5427\u3002 \u665a\u4e0a\u5728\u5bb6\u91cc\u6253\u4e86\u4e00\u4e0b splay \u677f\u5b50\uff0c\u590d\u4e60\u4e86\u4e00\u4e0b dinic\uff0c\u53d1\u73b0\u6d1b\u8c37\u4e0a\u7684\u300c\u666e\u901a\u5e73\u8861\u6811\uff08\u52a0\u5f3a\u7248\uff09\u300d\u597d\u6bd2\u7624\u554a\u2026\u2026\u8fc7\u4e0d\u53bb\u3002 \u7136\u540e\u5c31\u6d17\u6d17\u7761\u4e86\u3002 \u660e\u5929\u4e5f\u8bb8\u62ff\u4e09\u4e2a\u9898\u7684\u7b2c\u4e00\u6863\u66b4\u529b\u5206\u5427\uff08\u8fd0\u6c14\u597d\u80fd\u62ff\u7b2c\u4e8c\u6863\u5427\uff1f\uff09\u3002 Day 1 \u00b6 \u65e9\u4e0a\u5dee\u70b9\u7761\u8fc7\u5934\u4e86\uff0c\u516d\u70b9\u4e8c\u5341\u624d\u8d77\u6765\u3002\u4e8e\u662f\u5728\u8f66\u4e0a\u772f\u4e86\u4e00\u4f1a\u513f\uff0c\u6ca1\u7761\u591a\u4e45\u5c31\u5230\u5b66\u6821\u4e86\u3002 \u5728\u5927\u95e8\uff0c\u4fdd\u5b89\u628a\u6211\u62e6\u4f4f\u4e86\uff0c\u95ee\u6211\u662f\u5e72\u561b\u7684\uff0c\u53d1\u73b0\u624d 7:20\u3002 \u628a\u51c6\u8003\u8bc1\u7ed9\u4ed6\u770b\u4e86\u4ed6\u5c31\u653e\u6211\u8fdb\u53bb\u4e86\u3002\u6211\u5f88\u4e0d\u76f8\u4fe1\u90a3\u4e2a\u6d4b\u4f53\u6e29\u7684\u4e1c\u897f\u662f\u5426\u51c6\u786e\uff0c\u6211\u603b\u89c9\u5f97\u7ea2\u5916\u6d4b\u6e29\u4f1a\u6709\u5f88\u5927\u8bef\u5dee\u5427\u3002 \u5230\u7684\u592a\u65e9\u4e86\uff0c\u5148\u53bb\u81ea\u5df1\u7684\u673a\u623f\u91cc\u5750\u4e86\u4e00\u4f1a\u513f\uff0c\u4e0d\u8ba9\u8fdb\u8003\u573a\u673a\u623f\u3002 \u5230\u65f6\u95f4\u4e86\u624d\u8fdb\u8003\u573a\uff0c\u62bd\u5230\u4e86\u5e8f\u53f7\u6700\u5927\u7684\u673a\u5b50\uff08\u6697\u793a\u57ab\u5e95\uff09\uff0c8:25 \u51c6\u65f6\u5f00\u9898\u3002 T1 \u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0cT2 \u662f\u4e2a\u6570\u8bba\uff0cT3 \u662f\u4e0d\u77e5\u9053\u5565\u73a9\u610f\u3002 T1 \u5148\u5199\u4e86\u7b2c\u4e00\u6863\u7684\u66b4\u529b 10pts\uff0c\u7136\u540e\u53d1\u73b0\u7b2c\u4e8c\u6863\u7b54\u6848\u5355\u8c03\u4e0d\u51cf\uff0c\u968f\u4fbf\u5199\u4e86\u5199\u5c31\u8ddf\u66b4\u529b\u62cd\u8fc7\u4e86\u3002 \u540e\u9762\u7684 2e5 \u611f\u89c9\u53ef\u4ee5\u7ef4\u62a4\u524d\u540e\u7f00\u548c\u6765\u89e3\u51b3\uff0c\u5148\u653e\u7740\u3002 T2 \u524d\u4e24\u4e2a\u6863\u90fd\u80fd\u62ff\u5230\uff0c\u7b2c\u4e00\u6863 p \u4e0d\u662f\u8d28\u6570\uff0c\u5c31\u9884\u5904\u7406\u7ec4\u5408\u6570\u6765\u89e3\u51b3\uff1b\u7b2c\u4e8c\u6863\u76f4\u63a5\u8d39\u9a6c\u5c0f\u5b9a\u7406\u63a8\u9006\u5143\u3002 \u540e\u9762\u7684\u6863\u611f\u89c9\u4e0d\u4f1a\u505a\u3002 T3 \u770b\u4e86\u51e0\u773c\uff0c\u641c\u90fd\u4e0d\u60f3\u641c\u3002 \u8003\u5b8c\u4e86\u8981\u6211\u4eec\u5f85\u5728\u53e6\u5916\u4e00\u4e2a\u673a\u623f\u7b49\u7740\uff0c\u7136\u540e\u4e00\u5806\u961f\u7237\u5728\u8ba8\u8bba\u9898\u76ee\uff0c\u6211\u4e0d\u4f1a\uff1bzzy \u5207\u4e86 t2\uff08Orz\uff09 \u7136\u540e\u6bcf\u4e94\u4e2a\u4eba\u56de\u5230\u8003\u573a\u673a\u623f\u770b\u81ea\u5df1\u7684\u4ee3\u7801\u6709\u6ca1\u6709\u6536\u6f0f\u7684\uff0c\u4e0d\u4e00\u4f1a\u513f\u5c31\u89e3\u653e\u4e86\u3002 \u4e0b\u5348 2:00 \u624d\u5403\u5230\u5348\u996d\uff0c\u997f\u6b7b\u4e86\uff1b\u7136\u540e\u7761\u5927\u89c9\u76f4\u5230 17:00 \u624d\u8d77\u6765\u3002 \u665a\u4e0a\u968f\u4fbf\u6253\u4e86\u70b9\u4ee3\u7801\uff0c\u5c31\u7761\u4e86\u3002 \u5976\u660e\u5929\u5b57\u7b26\u4e32\u548c\u7f51\u7edc\u6d41\u3002 Day 2 \u00b6 \u53bb\u5b66\u6821\u8fd8\u662f\u5f88\u65e9\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u673a\u623f\u91cc\u6c34\u4e86\u6c34\u6d1b\u8c37\u4e4b\u7c7b\u7684\uff0c\u73a9\u4e86\u4e0b QQ\uff0c\u7136\u540e\u5c31\u53bb\u62bd\u7b7e\u4e86\u3002 \u4e00\u904d\u8fc7\u538b\u7f29\u5305\u5bc6\u7801\uff0c\u975e\u5e38\u8212\u670d\u3002 \u5f00\u4e86\u9898\u540e\u7684\u6211\uff1a\uff1f\u4e3a\u5565\u4e0d\u8003\u5b57\u7b26\u4e32\u554a\uff1f\uff08\u8003\u4e86\u6211\u4e5f\u4e0d\u4f1a\uff09 T1 \u662f\u4e2a\u72b6\u538b\uff0cT2 \u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0cT3 \u662f\u4e2a\u8ba1\u6570\u3002 T1 \u5199\u4e86\u66b4\u529b 30pts\u3002 T2 \u53ea\u4f1a 10pts \u7684\u66b4\u529b\uff0c\u53d1\u73b0\u95ee\u9898\u53ef\u4ee5\u7528 dfs \u5e8f\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0\u4e00\uff0c\u533a\u95f4\u5f02\u6216\u548c\uff0c\u4f46\u6211\u4e0d\u4f1a\uff0c\u722c\u4e86\u3002 T3 \u53ea\u4f1a 30pts \u7684\u66b4\u529b\uff0c\u4e0d\u4f1a\u56fe\u7684\u751f\u6210\u6811\u8ba1\u6570\uff0c\u722c\u4e86\u3002 \u7136\u540e\u53d1\u73b0\u5916\u9ad8\u8fd9\u6b21\u8003\u5f97\u4e0d\u597d\u3002 \u665a\u4e0a\u8865\u5468\u4e94\u5230\u5468\u65e5\u7684\u6587\u5316\u8bfe\u4e86\uff0c\u5b8c\u5168\u6ca1\u6709\u72b6\u6001\u3002 \u5468\u56db\u7684\u65f6\u5019\u80fd\u968f\u4fbf\u5207\u7684\u7269\u7406\u5b9e\u9a8c\u9898\u5b8c\u5168\u4e0d\u4f1a\u4e86\uff0c\u627e\u4e0d\u7740\u611f\u89c9\uff0c\u67af\u4e86\u3002 Day 4 \u00b6 \u51fa\u6210\u7ee9\u4e86\u5427\u3002 \u6eda\u7c97\u3002","title":"HBOI2020\uff082020 \u7edf\u4e00\u7701\u9009\uff09\u6e38\u8bb0"},{"location":"posts/articles/hboi-2020/#day-0","text":"\u4e0a\u5348\u8fd8\u662f\u4f9d\u7136\u5728\u5bb6\u91cc\u4e0a\u5b66\u6821\u7684\u7f51\u8bfe\uff0c\u300a\u5ec9\u9887\u853a\u76f8\u5982\u5217\u4f20\u300b\u4e2d\u7684\u4fa7\u9762\u70d8\u6258\u597d\u5999\u554a\u2026\u2026 \u4e0b\u5348\u53bb\u5b66\u6821\u8bd5\u673a\uff0c\u6253\u4e86\u4e2a PAM\uff0c\u663e\u7136\u4e0d\u4f1a\u8003\uff08\u4f46\u6211\u4e5f\u4e0d\u4f1a\u5176\u4ed6\u7684\u4e86\uff09 \u771f\u7684\u4e00\u4e2a\u6708\u57cb\u5728\u6587\u5316\u8bfe\u7684\u82e6\u6d77\u91cc\u554a\u2026\u2026\u8fd9\u4e2a\u6708\u597d\u50cf\u53ea\u6253\u4e86\u51e0\u573a cf\uff0c\u5565\u4e1c\u897f\u4e5f\u6ca1\u5b66\u3002 \u6210\u529f\u5728\u5b66\u6821\u9762\u57fa\u5230\u4e86\u81ea\u5df1\u7684\u540c\u5b66\uff08\u5927\u96fe \u5df2\u7ecf\u534a\u5e74\u6ca1\u6709\u89c1\u9762\u4e86\u2026\u2026\u5bd2\u5047\u4e0a\u4e00\u6b21\u89c1\u9762\u662f\u4e00\u6708\u4e0b\u65ec\u5427\u3002 \u665a\u4e0a\u5728\u5bb6\u91cc\u6253\u4e86\u4e00\u4e0b splay \u677f\u5b50\uff0c\u590d\u4e60\u4e86\u4e00\u4e0b dinic\uff0c\u53d1\u73b0\u6d1b\u8c37\u4e0a\u7684\u300c\u666e\u901a\u5e73\u8861\u6811\uff08\u52a0\u5f3a\u7248\uff09\u300d\u597d\u6bd2\u7624\u554a\u2026\u2026\u8fc7\u4e0d\u53bb\u3002 \u7136\u540e\u5c31\u6d17\u6d17\u7761\u4e86\u3002 \u660e\u5929\u4e5f\u8bb8\u62ff\u4e09\u4e2a\u9898\u7684\u7b2c\u4e00\u6863\u66b4\u529b\u5206\u5427\uff08\u8fd0\u6c14\u597d\u80fd\u62ff\u7b2c\u4e8c\u6863\u5427\uff1f\uff09\u3002","title":"Day 0"},{"location":"posts/articles/hboi-2020/#day-1","text":"\u65e9\u4e0a\u5dee\u70b9\u7761\u8fc7\u5934\u4e86\uff0c\u516d\u70b9\u4e8c\u5341\u624d\u8d77\u6765\u3002\u4e8e\u662f\u5728\u8f66\u4e0a\u772f\u4e86\u4e00\u4f1a\u513f\uff0c\u6ca1\u7761\u591a\u4e45\u5c31\u5230\u5b66\u6821\u4e86\u3002 \u5728\u5927\u95e8\uff0c\u4fdd\u5b89\u628a\u6211\u62e6\u4f4f\u4e86\uff0c\u95ee\u6211\u662f\u5e72\u561b\u7684\uff0c\u53d1\u73b0\u624d 7:20\u3002 \u628a\u51c6\u8003\u8bc1\u7ed9\u4ed6\u770b\u4e86\u4ed6\u5c31\u653e\u6211\u8fdb\u53bb\u4e86\u3002\u6211\u5f88\u4e0d\u76f8\u4fe1\u90a3\u4e2a\u6d4b\u4f53\u6e29\u7684\u4e1c\u897f\u662f\u5426\u51c6\u786e\uff0c\u6211\u603b\u89c9\u5f97\u7ea2\u5916\u6d4b\u6e29\u4f1a\u6709\u5f88\u5927\u8bef\u5dee\u5427\u3002 \u5230\u7684\u592a\u65e9\u4e86\uff0c\u5148\u53bb\u81ea\u5df1\u7684\u673a\u623f\u91cc\u5750\u4e86\u4e00\u4f1a\u513f\uff0c\u4e0d\u8ba9\u8fdb\u8003\u573a\u673a\u623f\u3002 \u5230\u65f6\u95f4\u4e86\u624d\u8fdb\u8003\u573a\uff0c\u62bd\u5230\u4e86\u5e8f\u53f7\u6700\u5927\u7684\u673a\u5b50\uff08\u6697\u793a\u57ab\u5e95\uff09\uff0c8:25 \u51c6\u65f6\u5f00\u9898\u3002 T1 \u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0cT2 \u662f\u4e2a\u6570\u8bba\uff0cT3 \u662f\u4e0d\u77e5\u9053\u5565\u73a9\u610f\u3002 T1 \u5148\u5199\u4e86\u7b2c\u4e00\u6863\u7684\u66b4\u529b 10pts\uff0c\u7136\u540e\u53d1\u73b0\u7b2c\u4e8c\u6863\u7b54\u6848\u5355\u8c03\u4e0d\u51cf\uff0c\u968f\u4fbf\u5199\u4e86\u5199\u5c31\u8ddf\u66b4\u529b\u62cd\u8fc7\u4e86\u3002 \u540e\u9762\u7684 2e5 \u611f\u89c9\u53ef\u4ee5\u7ef4\u62a4\u524d\u540e\u7f00\u548c\u6765\u89e3\u51b3\uff0c\u5148\u653e\u7740\u3002 T2 \u524d\u4e24\u4e2a\u6863\u90fd\u80fd\u62ff\u5230\uff0c\u7b2c\u4e00\u6863 p \u4e0d\u662f\u8d28\u6570\uff0c\u5c31\u9884\u5904\u7406\u7ec4\u5408\u6570\u6765\u89e3\u51b3\uff1b\u7b2c\u4e8c\u6863\u76f4\u63a5\u8d39\u9a6c\u5c0f\u5b9a\u7406\u63a8\u9006\u5143\u3002 \u540e\u9762\u7684\u6863\u611f\u89c9\u4e0d\u4f1a\u505a\u3002 T3 \u770b\u4e86\u51e0\u773c\uff0c\u641c\u90fd\u4e0d\u60f3\u641c\u3002 \u8003\u5b8c\u4e86\u8981\u6211\u4eec\u5f85\u5728\u53e6\u5916\u4e00\u4e2a\u673a\u623f\u7b49\u7740\uff0c\u7136\u540e\u4e00\u5806\u961f\u7237\u5728\u8ba8\u8bba\u9898\u76ee\uff0c\u6211\u4e0d\u4f1a\uff1bzzy \u5207\u4e86 t2\uff08Orz\uff09 \u7136\u540e\u6bcf\u4e94\u4e2a\u4eba\u56de\u5230\u8003\u573a\u673a\u623f\u770b\u81ea\u5df1\u7684\u4ee3\u7801\u6709\u6ca1\u6709\u6536\u6f0f\u7684\uff0c\u4e0d\u4e00\u4f1a\u513f\u5c31\u89e3\u653e\u4e86\u3002 \u4e0b\u5348 2:00 \u624d\u5403\u5230\u5348\u996d\uff0c\u997f\u6b7b\u4e86\uff1b\u7136\u540e\u7761\u5927\u89c9\u76f4\u5230 17:00 \u624d\u8d77\u6765\u3002 \u665a\u4e0a\u968f\u4fbf\u6253\u4e86\u70b9\u4ee3\u7801\uff0c\u5c31\u7761\u4e86\u3002 \u5976\u660e\u5929\u5b57\u7b26\u4e32\u548c\u7f51\u7edc\u6d41\u3002","title":"Day 1"},{"location":"posts/articles/hboi-2020/#day-2","text":"\u53bb\u5b66\u6821\u8fd8\u662f\u5f88\u65e9\uff0c\u7136\u540e\u5728\u81ea\u5df1\u7684\u673a\u623f\u91cc\u6c34\u4e86\u6c34\u6d1b\u8c37\u4e4b\u7c7b\u7684\uff0c\u73a9\u4e86\u4e0b QQ\uff0c\u7136\u540e\u5c31\u53bb\u62bd\u7b7e\u4e86\u3002 \u4e00\u904d\u8fc7\u538b\u7f29\u5305\u5bc6\u7801\uff0c\u975e\u5e38\u8212\u670d\u3002 \u5f00\u4e86\u9898\u540e\u7684\u6211\uff1a\uff1f\u4e3a\u5565\u4e0d\u8003\u5b57\u7b26\u4e32\u554a\uff1f\uff08\u8003\u4e86\u6211\u4e5f\u4e0d\u4f1a\uff09 T1 \u662f\u4e2a\u72b6\u538b\uff0cT2 \u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0cT3 \u662f\u4e2a\u8ba1\u6570\u3002 T1 \u5199\u4e86\u66b4\u529b 30pts\u3002 T2 \u53ea\u4f1a 10pts \u7684\u66b4\u529b\uff0c\u53d1\u73b0\u95ee\u9898\u53ef\u4ee5\u7528 dfs \u5e8f\u8f6c\u5316\u4e3a\u533a\u95f4\u52a0\u4e00\uff0c\u533a\u95f4\u5f02\u6216\u548c\uff0c\u4f46\u6211\u4e0d\u4f1a\uff0c\u722c\u4e86\u3002 T3 \u53ea\u4f1a 30pts \u7684\u66b4\u529b\uff0c\u4e0d\u4f1a\u56fe\u7684\u751f\u6210\u6811\u8ba1\u6570\uff0c\u722c\u4e86\u3002 \u7136\u540e\u53d1\u73b0\u5916\u9ad8\u8fd9\u6b21\u8003\u5f97\u4e0d\u597d\u3002 \u665a\u4e0a\u8865\u5468\u4e94\u5230\u5468\u65e5\u7684\u6587\u5316\u8bfe\u4e86\uff0c\u5b8c\u5168\u6ca1\u6709\u72b6\u6001\u3002 \u5468\u56db\u7684\u65f6\u5019\u80fd\u968f\u4fbf\u5207\u7684\u7269\u7406\u5b9e\u9a8c\u9898\u5b8c\u5168\u4e0d\u4f1a\u4e86\uff0c\u627e\u4e0d\u7740\u611f\u89c9\uff0c\u67af\u4e86\u3002","title":"Day 2"},{"location":"posts/articles/hboi-2020/#day-4","text":"\u51fa\u6210\u7ee9\u4e86\u5427\u3002 \u6eda\u7c97\u3002","title":"Day 4"},{"location":"posts/articles/how-to-build-this-fucking-blog/","text":"\u4e0b\u8f7d\u5fc5\u8981\u7ec4\u4ef6 \u00b6 \u5728 Python \u5b98\u7f51 \u4e0b\u8f7d python3.8.5 \u00b6 \u4e0b\u8f7d\u94fe\u63a5\uff1a link \u5b89\u88c5\u5b8c\u6210\u540e\u56de\u5230\u684c\u9762\uff0c\u6309\u4e0b Win + R \uff0c\u4f1a\u51fa\u6765\u4e00\u4e2a\u300c\u8fd0\u884c\u300d\uff1b\u5728\u6846\u5185\u8f93\u5165 1 cmd \u6309\u4e0b\u56de\u8f66\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u300c\u547d\u4ee4\u884c\u7a97\u53e3\u300d\u3002 \u8f93\u5165 1 python --version \u6765\u67e5\u770b python \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f Python 3.8.5 \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 Python \u4e86\u3002 \u5b89\u88c5 pip \u00b6 \u7ee7\u7eed\u5728\u547d\u4ee4\u884c\u91cc\u8f93\u5165 1 python get-pip.py && pip install --upgrade pip \u5f85\u5b83\u7ed3\u675f\u540e\uff0c\u8f93\u5165 1 pip --version \u6765\u67e5\u770b pip \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 pip \u4e86\u3002 \u5b89\u88c5 MkDocs \u00b6 \u7ee7\u7eed\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 1 pip install mkdocs \u5f85\u5b83\u7ed3\u675f\u540e\uff0c\u8f93\u5165 1 mkdocs --version \u6765\u67e5\u770b Mkdocs \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f mkdocs, version 0.15.3 \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 MkDocs \u4e86\u3002 \u5728 Git \u5b98\u7f51 \u5b89\u88c5 git \u00b6 \u4e0b\u8f7d\u94fe\u63a5\uff1a link \u521b\u5efa GitHub repo \u00b6 \u8bbf\u95ee GitHub \uff0c\u6ce8\u518c\u4e00\u4e2a\u8d26\u53f7\u3002 \u8d26\u53f7\u540d\u4ee5\u540e \u4e0d\u80fd\u4fee\u6539 \uff0c\u800c\u4e14\u5047\u8bbe\u4f60\u7684\u8d26\u53f7\u540d\u4e3a username \uff0c\u5219\u4f60\u4ee5\u540e\u7684\u535a\u5ba2\u5730\u5740\u5c06\u4f1a\u4e3a https://username.github.io/ \u3002 \u5efa\u7acb\u672c\u5730\u670d\u52a1\u5668 \u00b6 \u627e\u5230\u4e00\u4e2a\u5fc3\u7231\u7684\u6587\u4ef6\u5939 \u00b6 \u4e3e\u4f8b\uff1a\u6211\u4eec\u7528 E:\\blog\\ \u4e3a\u535a\u5ba2\u76ee\u5f55\u3002 \u6253\u5f00\u547d\u4ee4\u884c\uff0c\u8f93\u5165 1 2 3 4 E : mkdir blog cd blog mkdocs new my-blog && cd my-blog \u4f60\u4f1a\u53d1\u73b0\u4f60\u7684 E \u76d8\u91cc\u591a\u4e86\u4e2a blog \u6587\u4ef6\u5939\uff0c\u800c\u4e14\u91cc\u9762\u6709\u4e2a my-blog \u6587\u4ef6\u5939\u3002 \u642d\u5efa\u7ad9\u70b9 \u00b6 \u5728 E:\\blog\\my-blog\\ \u4e0b\uff0c\u8f93\u5165 1 mkdocs serve \u7136\u540e\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\uff0c\u8f93\u5165 http://127.0.0.1:8000/ \u5373\u53ef\u770b\u5230\u81ea\u5df1\u7684\u535a\u5ba2\u5566\uff01 \u94fe\u63a5\u5230 GitHub Pages \u00b6 \u81ea\u5b9a\u4e49\u914d\u7f6e \u00b6 \u4e3b\u9898\u8bbe\u7f6e \u00b6 \u6253\u5f00 E:\\blog\\my-blog\\mkdocs.yml \uff0c\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u66ff\u6362\u4e3a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 site_name: Your Blog nav: - \u9996\u9875: README.md - \u9898\u89e3: - \u6982\u89c8: posts\\editorials\\index.md - AtCoder: posts\\editorials\\atcoder.md - BZOJ: posts\\editorials\\bzoj.md - CodeForces: - CF1393D: posts\\editorials\\codeforces\\CF1393D.md - \u6d1b\u8c37: posts\\editorials\\luogu.md - POJ: posts\\editorials\\poj.md - \u5b66\u4e60\u7b14\u8bb0: - \u6982\u89c8: posts\\lectures\\index.md - Dancing Links: posts\\lectures\\dlx.md - \u56de\u6587\u6811: posts\\lectures\\eertree.md - AC \u81ea\u52a8\u673a: posts\\lectures\\ac-automaton.md - \u524d\u7f00\u51fd\u6570\u4e0e KMP \u7b97\u6cd5: posts\\lectures\\kmp.md - \u914d\u5bf9\u5806: posts\\lectures\\pairing-heap.md - \u6742\u7b14: - \u6982\u89c8: posts\\articles\\index.md - '\u5982\u4f55\u4f7f\u7528 MkDocs \u5efa\u7acb\u5c5e\u4e8e\u81ea\u5df1\u7684\u535a\u5ba2': posts\\articles\\build-this-site.md - \u8bf4\u8bf4: - \u6982\u89c8: posts\\mood\\index.md - '2020.08': posts\\mood\\2020-08.md - '2020.09': posts\\mood\\2020-09.md - \u6587\u5316\u8bfe: - \u6982\u89c8: posts\\whk\\index.md - \u6570\u5b66: posts\\whk\\maths.md - \u5173\u4e8e: - \u5173\u4e8e\u6211: posts\\about\\intro.md - \u53cb\u60c5\u94fe\u63a5: posts\\about\\friends.md theme: name: 'material' language: 'zh' favicon: 'assets/img/favicon.ico' features: - tabs markdown_extensions: - admonition # \u6ce8\u89e3\u5757\u652f\u6301 - footnotes - meta # \u5143\u6570\u636e\u652f\u6301 - pymdownx.arithmatex: # \u6570\u5b66\u516c\u5f0f\u7684TeX\u8bed\u6cd5\u652f\u6301 generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji: # \u8868\u60c5\u652f\u6301 emoji_generator: !!python/name:pymdownx.emoji.to_svg - pymdownx.highlight: linenums_style: pymdownx.inline linenums: true use_pygments: true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist: # \u4efb\u52a1\u6e05\u5355\u652f\u6301 custom_checkbox: true - pymdownx.tilde - toc: permalink: true extra_javascript: - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/highlight.min.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - javascripts/config.js extra_css: - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/default.min.css copyright: 'Copyright &#169 2018 - 2020 Yourname'","title":"\u5982\u4f55\u4f7f\u7528 MkDocs \u5efa\u7acb\u4e00\u4e2a\u535a\u5ba2"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_1","text":"","title":"\u4e0b\u8f7d\u5fc5\u8981\u7ec4\u4ef6"},{"location":"posts/articles/how-to-build-this-fucking-blog/#python-python385","text":"\u4e0b\u8f7d\u94fe\u63a5\uff1a link \u5b89\u88c5\u5b8c\u6210\u540e\u56de\u5230\u684c\u9762\uff0c\u6309\u4e0b Win + R \uff0c\u4f1a\u51fa\u6765\u4e00\u4e2a\u300c\u8fd0\u884c\u300d\uff1b\u5728\u6846\u5185\u8f93\u5165 1 cmd \u6309\u4e0b\u56de\u8f66\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u300c\u547d\u4ee4\u884c\u7a97\u53e3\u300d\u3002 \u8f93\u5165 1 python --version \u6765\u67e5\u770b python \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f Python 3.8.5 \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 Python \u4e86\u3002","title":"\u5728 Python \u5b98\u7f51 \u4e0b\u8f7d python3.8.5"},{"location":"posts/articles/how-to-build-this-fucking-blog/#pip","text":"\u7ee7\u7eed\u5728\u547d\u4ee4\u884c\u91cc\u8f93\u5165 1 python get-pip.py && pip install --upgrade pip \u5f85\u5b83\u7ed3\u675f\u540e\uff0c\u8f93\u5165 1 pip --version \u6765\u67e5\u770b pip \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f pip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8) \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 pip \u4e86\u3002","title":"\u5b89\u88c5 pip"},{"location":"posts/articles/how-to-build-this-fucking-blog/#mkdocs","text":"\u7ee7\u7eed\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 1 pip install mkdocs \u5f85\u5b83\u7ed3\u675f\u540e\uff0c\u8f93\u5165 1 mkdocs --version \u6765\u67e5\u770b Mkdocs \u7248\u672c\u3002\u5982\u679c\u8f93\u51fa\u662f mkdocs, version 0.15.3 \u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8bf4\u660e\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210 MkDocs \u4e86\u3002","title":"\u5b89\u88c5 MkDocs"},{"location":"posts/articles/how-to-build-this-fucking-blog/#git-git","text":"\u4e0b\u8f7d\u94fe\u63a5\uff1a link","title":"\u5728 Git \u5b98\u7f51 \u5b89\u88c5 git"},{"location":"posts/articles/how-to-build-this-fucking-blog/#github-repo","text":"\u8bbf\u95ee GitHub \uff0c\u6ce8\u518c\u4e00\u4e2a\u8d26\u53f7\u3002 \u8d26\u53f7\u540d\u4ee5\u540e \u4e0d\u80fd\u4fee\u6539 \uff0c\u800c\u4e14\u5047\u8bbe\u4f60\u7684\u8d26\u53f7\u540d\u4e3a username \uff0c\u5219\u4f60\u4ee5\u540e\u7684\u535a\u5ba2\u5730\u5740\u5c06\u4f1a\u4e3a https://username.github.io/ \u3002","title":"\u521b\u5efa GitHub repo"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_2","text":"","title":"\u5efa\u7acb\u672c\u5730\u670d\u52a1\u5668"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_3","text":"\u4e3e\u4f8b\uff1a\u6211\u4eec\u7528 E:\\blog\\ \u4e3a\u535a\u5ba2\u76ee\u5f55\u3002 \u6253\u5f00\u547d\u4ee4\u884c\uff0c\u8f93\u5165 1 2 3 4 E : mkdir blog cd blog mkdocs new my-blog && cd my-blog \u4f60\u4f1a\u53d1\u73b0\u4f60\u7684 E \u76d8\u91cc\u591a\u4e86\u4e2a blog \u6587\u4ef6\u5939\uff0c\u800c\u4e14\u91cc\u9762\u6709\u4e2a my-blog \u6587\u4ef6\u5939\u3002","title":"\u627e\u5230\u4e00\u4e2a\u5fc3\u7231\u7684\u6587\u4ef6\u5939"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_4","text":"\u5728 E:\\blog\\my-blog\\ \u4e0b\uff0c\u8f93\u5165 1 mkdocs serve \u7136\u540e\u6253\u5f00\u4f60\u7684\u6d4f\u89c8\u5668\uff0c\u8f93\u5165 http://127.0.0.1:8000/ \u5373\u53ef\u770b\u5230\u81ea\u5df1\u7684\u535a\u5ba2\u5566\uff01","title":"\u642d\u5efa\u7ad9\u70b9"},{"location":"posts/articles/how-to-build-this-fucking-blog/#github-pages","text":"","title":"\u94fe\u63a5\u5230 GitHub Pages"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_5","text":"","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e"},{"location":"posts/articles/how-to-build-this-fucking-blog/#_6","text":"\u6253\u5f00 E:\\blog\\my-blog\\mkdocs.yml \uff0c\u5c06\u91cc\u9762\u7684\u5185\u5bb9\u66ff\u6362\u4e3a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 site_name: Your Blog nav: - \u9996\u9875: README.md - \u9898\u89e3: - \u6982\u89c8: posts\\editorials\\index.md - AtCoder: posts\\editorials\\atcoder.md - BZOJ: posts\\editorials\\bzoj.md - CodeForces: - CF1393D: posts\\editorials\\codeforces\\CF1393D.md - \u6d1b\u8c37: posts\\editorials\\luogu.md - POJ: posts\\editorials\\poj.md - \u5b66\u4e60\u7b14\u8bb0: - \u6982\u89c8: posts\\lectures\\index.md - Dancing Links: posts\\lectures\\dlx.md - \u56de\u6587\u6811: posts\\lectures\\eertree.md - AC \u81ea\u52a8\u673a: posts\\lectures\\ac-automaton.md - \u524d\u7f00\u51fd\u6570\u4e0e KMP \u7b97\u6cd5: posts\\lectures\\kmp.md - \u914d\u5bf9\u5806: posts\\lectures\\pairing-heap.md - \u6742\u7b14: - \u6982\u89c8: posts\\articles\\index.md - '\u5982\u4f55\u4f7f\u7528 MkDocs \u5efa\u7acb\u5c5e\u4e8e\u81ea\u5df1\u7684\u535a\u5ba2': posts\\articles\\build-this-site.md - \u8bf4\u8bf4: - \u6982\u89c8: posts\\mood\\index.md - '2020.08': posts\\mood\\2020-08.md - '2020.09': posts\\mood\\2020-09.md - \u6587\u5316\u8bfe: - \u6982\u89c8: posts\\whk\\index.md - \u6570\u5b66: posts\\whk\\maths.md - \u5173\u4e8e: - \u5173\u4e8e\u6211: posts\\about\\intro.md - \u53cb\u60c5\u94fe\u63a5: posts\\about\\friends.md theme: name: 'material' language: 'zh' favicon: 'assets/img/favicon.ico' features: - tabs markdown_extensions: - admonition # \u6ce8\u89e3\u5757\u652f\u6301 - footnotes - meta # \u5143\u6570\u636e\u652f\u6301 - pymdownx.arithmatex: # \u6570\u5b66\u516c\u5f0f\u7684TeX\u8bed\u6cd5\u652f\u6301 generic: true - pymdownx.betterem: smart_enable: all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji: # \u8868\u60c5\u652f\u6301 emoji_generator: !!python/name:pymdownx.emoji.to_svg - pymdownx.highlight: linenums_style: pymdownx.inline linenums: true use_pygments: true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist: # \u4efb\u52a1\u6e05\u5355\u652f\u6301 custom_checkbox: true - pymdownx.tilde - toc: permalink: true extra_javascript: - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/highlight.min.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - javascripts/config.js extra_css: - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/default.min.css copyright: 'Copyright &#169 2018 - 2020 Yourname'","title":"\u4e3b\u9898\u8bbe\u7f6e"},{"location":"posts/articles/latex-search/","text":"\u8fd9\u4e2a\u662f\u4e00\u4e9b \\(\\LaTeX\\) \u7528\u6cd5\u7684\u7d22\u5f15\uff0c\u5efa\u8bae\u4f7f\u7528 Ctrl + F \u8fdb\u884c\u67e5\u8be2\u4e2d\u6587\u5173\u952e\u8bcd\u3002 \u903b\u8f91\u975e\uff0c\u975e\uff0cnot\uff0c\u5426\uff0c\u5426\u5b9a\uff0c\u4e0d\uff0cneg \\(\\neg\\) \\neg, \\lnot \u6570\u7801\uff0cdigit\uff0c\u4e0a\u5212\u7ebf\uff0coverline \\(\\overline{abc}\\) \\overline{} \u903b\u8f91\u6216\uff0c\u6216\uff0cor \\(\\vee\\) \uff0c \\(\\bigvee\\) \\vee, \\bigvee \u903b\u8f91\u4e0e\uff0c\u4e0e\uff0cand \\(\\wedge\\) \uff0c \\(\\bigwedge\\) \\wedge, \\bigwedge \u4e0d\u5b58\u5728\uff0cnot exist \\(\\nexists\\) \\nexists \u5706\uff0ccircle \\(\\odot\\) \uff0c \\(\\bigodot\\) \\odot, \\bigodot \u4e0d\u540c\u4f59 \\(ax\\not\\equiv1\\pmod{p}\\) \\not\\equiv \u5168\u7b49\uff0ccongruent \\(\\cong\\) \\cong \u8d4b\u503c\uff0cdef \\(:=\\) := \u771f\u5b50\u96c6 \\(\\subsetneqq\\) \uff0c \\(\\supsetneqq\\) \\subsetneqq, \\supsetneqq \u975e\u5b50\u96c6 \\(\\nsubseteq\\) \uff0c \\(\\nsupseteq\\) \\nsubseteq, \\nsupseteq \u5b50\u96c6\uff0csubset \\(\\subseteq\\) \uff0c \\(\\supseteq\\) \\subseteq, \\supseteq \u81ea\u4ea4 \\(\\otimes\\) \uff0c \\(\\bigotimes\\) \\otimes, \\bigotimes \u5f02\u6216\uff0cxor \\(\\oplus\\) \uff0c \\(\\bigoplus\\) \\oplus, \\bigoplus \u9664\u53f7\uff0c\u9664\uff0c\u9664\u4ee5 \\(\\div\\) \\div \u4e58\u9664\u53f7\uff0c\u4e58\u9664 \\(\\divideontimes\\) \\divideontimes \u8d1f\u6b63\u53f7\uff0c\u51cf\u52a0\uff0c\u8d1f\u6b63 \\(\\mp\\) \\mp \u6b63\u8d1f\u53f7\uff0c\u52a0\u51cf\uff0c\u6b63\u8d1f \\(\\pm\\) \\pm \u6574\u9664\uff0c\u7ea6\u6570 \\(a|b\\) | \u4e0d\u6574\u9664 \\(a \\nmid b\\) \\nmid \u53d6\u6a21\uff0c\u6a21\u8fd0\u7b97\uff0c\u6a21 \\(a \\% b\\) \uff0c \\(a \\mod b\\) \uff0c \\(a \\equiv1\\pmod{b}\\) \\%, \\mod, \\pmod{} \u6700\u5927\u516c\u7ea6\u6570\uff0cgcd \\(\\gcd(a, b)\\) \\gcd \u6700\u5c0f\u516c\u500d\u6570\uff0clcm \\(\\operatorname{lcm}(a, b)\\) \\operatorname{lcm} \u8865\u96c6\uff0cC \\(\\complement_{U}A\\) \uff0c \\(\\bar{A}\\) \uff0c \\(\\overline{A}\\) \\complement_{}, \\bar{}, \\overline{} \u65e0\u7a77\uff0c\u6b63\u65e0\u7a77\uff0c\u8d1f\u65e0\u7a77\uff0c\u65e0\u9650\u5927 \\(\\infty\\) \\infty \u6700\u5c0f\u503c\uff0cmin\uff0cminimum\uff0c\u8f83\u5c0f\u7684 \\(\\min(a, b)\\) \\min \u6700\u5927\u503c\uff0cmax\uff0cmaximum\uff0c\u8f83\u5927\u7684 \\(\\max(a, b)\\) \\max \u4f59\u5207\uff0ccotangent\uff0ccot \\(\\cot\\theta\\) \\cot \u6307\u6570\u51fd\u6570\uff0c\u6307\u6570\uff0cexponent \\(\\exp_a b = a^b\\) \\exp_{} \u6b63\u5272\uff0csecant\uff0csec \\(\\sec\\alpha\\) \\sec \u4f59\u5272\uff0ccosecant\uff0ccsc \\(\\csc\\beta\\) \\csc \u76f8\u4f3c\uff0csimilar\uff0csim \\(\\sim\\) \\sim \u52fe\uff0c\u5bf9\uff0c\u662f\u7684\uff0c\u6b63\u786e\uff0c\u5b8c\u6210\uff0ctick\uff0ccorrect \\(\\checkmark\\) \\checkmark \u540c\u4f59 \\(\\equiv\\) \\equiv LaTeX\uff0c\u62c9\u6cf0\u8d6b \\(\\LaTeX\\) \\latex \u659c\u7740\u7684\u70b9\uff0c\u659c\u70b9 \\(\\ddots\\) \\ddots \u7ad6\u7740\u7684\u70b9\uff0c\u7ad6\u70b9 \\(\\vdots\\) \\vdots \u7ec4\u5408 \\(\\dbinom{n}{m}\\) \uff0c \\(\\binom{n}{m}\\) \uff0c \\(\\tbinom{n}{m}\\) \\dbinom{}{}, \\binom{}{}, \\tbinom{}{} \u6c42\u548c\uff0c\u8fde\u52a0\uff0c\u897f\u683c\u739b\uff0csum \\(\\sum_{j = 1}^{10}a_j\\) \\sum_{}^{} \u6c42\u79ef\uff0c\u8fde\u4e58\uff0cproduct\uff0c\u6d3e \\(\\prod_{j = 1}^{10}a_j\\) \\prod_{}^{} \u5206\u6570\uff0cfraction \\(\\dfrac{1}{2}\\) \uff0c \\(\\frac{1}{2}\\) \uff0c \\(\\tfrac{1}{2}\\) \\dfrac{}{}, \\frac{}{}, \\tfrac{}{} alpha\uff0c\u963f\u5c14\u6cd5 \\(\\alpha\\) \\alpha beta\uff0c\u8d1d\u5854 \\(\\beta\\) \\beta Delta\uff0c\u5fb7\u5c14\u5854\uff0c\u53d8\u5316\u91cf \\(\\Delta\\) \\Delta \u4e09\u89d2\u5f62\uff0ctriangle \\(\\triangle\\) \\triangle \u5411\u91cf \\(\\vec{AB}\\) \uff0c \\(\\overrightarrow{AB}\\) \uff0c \\(\\mathbf{e}\\) \\vec{}, \\overrightarrow{} \\mathbf{} \u6570\u96c6\uff0c\u5b9e\u6570\u96c6\uff0c\u6574\u6570\u96c6\uff0c\u81ea\u7136\u6570\u96c6\uff0c\u6709\u7406\u6570\u96c6\uff0c\u590d\u6570\u96c6\uff0cR\uff0cZ\uff0cN\uff0cQ\uff0cC \\(\\mathbb{R}\\) \uff0c \\(\\mathbb{Z}\\) \uff0c \\(\\mathbb{N}\\) \uff0c \\(\\mathbb{Q}\\) \uff0c \\(\\mathbb{C}\\) \\mathbb{R}, \\mathbb{Z}, \\mathbb{N}, \\mathbb{Q}, \\mathbb{C} \u6839\u53f7\uff0csqrt\uff0croot \\(\\sqrt[3]{2}\\) \\sqrt[]{} \u6b21\u5e42\uff0c\u6b21\u65b9\uff0c\u65b9\uff0cpower\uff0c\u4e0a\u6807 \\(a^{2}\\) ^ \u4e0b\u6807\uff0c\u5e8f\u53f7\uff0cindex \\(a_i\\) _ theta\uff0c\u897f\u5854 \\(\\theta\\) \\theta \u89d2\uff0c\u89d2\u5ea6\uff0ctriangle \\(\\angle AOB\\) \\angle \u6b63\u5f26\uff0csin\uff0csine \\(\\sin\\theta\\) \\sin \u4f59\u5f26\uff0ccos\uff0ccosine \\(\\cos\\varphi\\) \\cos \u7edd\u5bf9\u503c\uff0cabsolute value \\(\\left|-1\\right|\\) \\left| \\right| tangent\uff0c\u6b63\u5207\uff0ctan \\(\\tan\\alpha\\) \\tan\\alpha \u5939\u89d2\uff0c\u5411\u91cf\u7684\u5939\u89d2 \\(<\\mathbf{a}, \\mathbf{b}>\\) \uff0c \\(\\left<\\mathbf{a}, \\mathbf{b}\\right>\\) < > \\left< \\right> \u4e0b\u53d6\u6574\uff0cfloor \\(\\lfloor \\dfrac{1}{2} \\rfloor\\) \uff0c \\(\\left\\lfloor \\dfrac{1}{2} \\right\\rfloor\\) \\lfloor \\rfloor \\left\\lfloor \\right\\rfloor \u4e0a\u53d6\u6574\uff0cceil\uff0cceiling \\(\\lceil \\dfrac{1}{2}\\rceil\\) \uff0c \\(\\left\\lceil \\dfrac{1}{2}\\right\\rceil\\) \\lceil \\rceil \\left\\lceil \\right\\rceil \u6d3e\uff0cpi\uff0c\u5706\u5468\u7387 \\(\\pi\\) \\pi fai\uff0cphi \\(\\phi\\) \uff0c \\(\\varphi\\) \\phi, \\varphi \u7a7a\u96c6\uff0cempty \\(\\emptyset\\) \uff0c \\(\\varnothing\\) \\emptyset \\varnothing \u5de6\u53f3\uff0c\u653e\u5927\uff0cleft\uff0cright \\(\\left|-\\dfrac{1}{2}\\right|\\) \\left \\right mu\uff0cmiu\uff0c\u83ab\u6bd4\u4e4c\u65af \\(\\mu\\) \\mu \u5927\u4e8e\u7b49\u4e8e\uff0c\u4e0d\u5c0f\u4e8e \\(\\ge\\) \uff0c \\(\\geqslant\\) \\ge, \\geqslant \u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e0d\u5927\u4e8e \\(\\le\\) \uff0c \\(\\leqslant\\) \\le, \\leqslant \u4e0d\u7b49\u4e8e \\(\\neq\\) \\neq \u7ea6\u7b49\u4e8e\uff0c\u7ea6\uff0c\u8fd1\u4f3c \\(\\approx\\) \\approx \u8fdc\u5927\u4e8e \\(\\gg\\) \\gg \u8fdc\u5c0f\u4e8e \\(\\ll\\) \\ll \u5e73\u884c, parallel \\(\\parallel\\) \\parallel \u5782\u76f4\uff0c\u4e92\u8d28 \\(\\perp\\) \\perp \u70b9\u4e58\uff0ctimes\uff0cmultiply\uff0c\u6570\u91cf\u79ef\uff0c\u5185\u79ef \\(\\cdot\\) \\cdot \u53c9\u4e58\uff0ctimes\uff0cmultiply\uff0c\u5411\u91cf\u79ef\uff0c\u5916\u79ef \\(\\times\\) \\times \u7701\u7565\u53f7\uff0c\u6a2a\u7740\u7684\u70b9\uff0c\u6a2a\u70b9 \\(\\cdots\\) \uff0c \\(\\ldots\\) \\cdots, \\ldots \u4e0a\u7bad\u5934\uff0c\u5411\u4e0a\uff0cup arrow \\(\\uparrow\\) \uff0c \\(\\Uparrow\\) \uff0c \\(\\upharpoonleft\\) \uff0c \\(\\upharpoonright\\) \uff0c \\(\\upuparrows\\) \\uparrow, \\Uparrow, \\upharpoonleft, \\upharpoonright, \\upuparrows \u4e0b\u7bad\u5934\uff0c\u5411\u4e0b\uff0cdown arrow \\(\\downarrow\\) \uff0c \\(\\Downarrow\\) \uff0c \\(\\downharpoonleft\\) \uff0c \\(\\downharpoonright\\) \uff0c \\(\\downdownarrows\\) \\downarrow, \\Downarrow, \\downharpoonleft, \\downharpoonright, \\downdownarrows \u5ea6\uff0c\u5206\u7c7b\u8ba8\u8bba \\(1^{\\circ}\\) \\circ \u56e0\u4e3a\uff0cbecause \\(\\because\\) \\because \u6240\u4ee5\uff0ctherefore \\(\\therefore\\) \\therefore \u5bf9\u4e8e\u6240\u6709\uff0c\u5168\u79f0\u91cf\u8bcd\uff0cforall \\(\\forall\\) \\forall \u5b58\u5728\u91cf\u8bcd\uff0c\u5b58\u5728\uff0cexist \\(\\exists\\) \\exists \u5f27\uff0carc \\(\\overset{\\frown}{AB}\\) \\overset{\\frown} \u4ea4\u96c6\uff0c\u4ea4 \\(\\cap\\) \uff0c \\(\\bigcap\\) \\cap, \\bigcap \u5e76\u96c6\uff0c\u5e76 \\(\\cup\\) \uff0c \\(\\bigcup\\) \\cup, \\bigcup \u77e9\u9635\uff0cmatrix \\(\\begin{bmatrix}1 & 1 \\\\ 1 & 0\\end{bmatrix}\\) \\begin{bmatrix} \\end{bmatrix} \u6761\u4ef6\uff0ccases\uff0c\u5206\u6bb5\u51fd\u6570\uff0c\u65b9\u7a0b\u7ec4\uff0c\u4e0d\u7b49\u5f0f\u7ec4 \\(f(x) = \\begin{cases}1 & x \\in \\mathbb{Q} \\\\ 0 & x \\notin \\mathbb{Q}\\end{cases}\\) \\begin{cases} \\end{cases} \u5c5e\u4e8e \\(\\in, \\ni\\) \\in, \\ni \u4e0d\u5c5e\u4e8e \\(\\notin, \\not\\ni\\) \\notin, \\not\\ni \u6587\u672c\uff0c\u6b63\u4f53 \\(\\textrm{otherwise}\\) \\textrm{} \u6b27\u7c73\u4f3d\uff0comega \\(\\omega\\) \\omega \u4e0b\u5212\u7ebf \\(\\underline{ABC}\\) \\underline{} \u52a0\u70ed\uff0cheat \\(\\triangleq\\) \\triangleq \u4e0a\u62ec\u53f7 \\(\\overbrace{1+2+\\cdots+100}\\) \\overbrace{} \u79ef\u5206 \\(\\int_{0}^{1}e^x\\text{d}x\\) \\int_{}^{} \u5bf9\u9f50 \\(\\begin{aligned}f(x) & = (x + 1)^2 \\\\ & = x^2 + 2x + 1\\end{aligned}\\) \\begin{aligned}\\end{aligned} \u53cc\u91cd\u79ef\u5206 \\(\\iint_{S}^{T}\\text{d}x\\text{d}y\\) \\iint_{}^{} \u4e09\u91cd\u79ef\u5206 \\(\\iiint_{S}^{T}\\text{d}x\\text{d}y\\text{d}z\\) \\iiint_{}^{} \u66f2\u9762\u79ef\u5206 \\(\\oint_{C}x^3\\text{d}x\\) \\oint_{} \u6781\u9650\uff0climit \\(\\lim_{n\\to\\infty}x_n\\) \uff0c \\(\\lim\\limits_{n\\to\\infty}x_n\\) \\lim_{}, \\lim\\limits_{} \u4e0b\u62ec\u53f7 \\(\\underbrace{1+2+\\cdots+100}\\) \\underbrace{}","title":"LaTeX \u8bed\u6cd5\u7d22\u5f15"},{"location":"posts/articles/noip-2018/","text":"\u5c31\u5728\u4e24\u5468\u4e4b\u524d\uff0c\u5dee\u4e0d\u591a\u8fd9\u4e2a\u65f6\u95f4\u6bb5\uff0c\u4eba\u751f\u4e2d\u7684\u7b2c\u4e00\u6b21 NOIP \u7ed3\u675f\u4e86\u3002 \u8fd9\u4e00\u6b21\u7eb5\u7136\u6709\u8bb8\u591a\u9057\u61be\uff0c\u4e5f\u8ba9\u6211\u83b7\u53d6\u5230\u4e86\u8bb8\u591a\u7ecf\u9a8c\u3002 Day -3 \u00b6 \u5c4b\u6f0f\u504f\u9022\u8fde\u591c\u96e8\uff0c\u5b66\u6821\u7684\u671f\u4e2d\u8003\u8bd5\u7adf\u7136\u5728 11.8-11.9 \u53f7\u4e3e\u884c\uff0c\u800c 10 \u53f7\u5c31\u8981 NOIP \u4e86\u554a\uff01 Day 0 \u00b6 \u5728\u53d4\u53d4\u5bb6\u590d\u4e60\u4e86\u6a21\u62df\u3001\u641c\u7d22\u7b49\u57fa\u672c\u5185\u5bb9\u3002\u5237\u4e86 \\(3\\) \u9053\u6c34\u9898\u3002 Day 1 \u00b6 T1 \u94fa\u8bbe\u9053\u8def \u00b6 \u6211\u5e76\u4e0d\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u539f\u9898\uff0c\u56e0\u6b64\u6211\u6253\u4e86\u4e00\u4e2a\u66b4\u529b\u641c\u7d22\uff0c\u5c0f\u6837\u4f8b\u8fc7\u4e86\uff0c\u5927\u6837\u4f8bT\u4e86\uff0c\u614c\u5f97\u4e00\u6279\u7684\u6211\u51fa\u4e86\u51e0\u7ec4\u5c0f\u7684\u6570\u636e\uff0c\u8fc7\u4e86\uff0c\u7136\u540e\u5c31\u6ca1\u7ba1\u8fd9\u4e00\u9898\u4e86\u3002 \u6211\u53d1\u73b0\u641c\u7d22\u7684\u57fa\u672c\u529f\u5f88\u6709\u7528\uff0c\u6bd5\u7adf\u5b83\u80fd\u4f7f\u4f60\u66b4\u529b\u5f04\u70b9\u5206\u56de\u6765\u3002 \u77e5\u9053\u5b83\u662f\u539f\u9898\u7684\u6211\u88ab\u9707\u60ca\u5230\u4e86\uff0c\u7acb\u5fd7\u4e0b\u6b21NOIP\u4e4b\u524d\u8981\u628a\u4ee5\u524d\u7684\u9898\u90fd\u505a\u4e00\u904d \u6211\u505a\u9898\u7684\u601d\u8def\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\u5148\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u6709\u5730\u65b9\u662f\u96f6\uff0c\u5c31\u5de6\u53f3\u5206\u522b\u9012\u5f52 \u5e76\u4e0d\u77e5\u9053\u8bb0\u5f55\u662f\u5426\u4e3a0\u7684book\u6570\u7ec4\u7684\u4f18\u5316\u662f\u5426\u6709\u7528\u2026\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <cstdio> using namespace std ; int n , cnt , minn = 99999 ; int d [ 100010 ], book [ 100010 ]; void search ( int l , int r ) { if ( l >= r ) { cnt += d [ l ]; d [ l ] = 0 ; return ; } int flag = 1 ; for ( int i = l ; i <= r ; i ++ ) if ( d [ i ] == 0 ) { flag = 0 ; book [ i ] = 1 ; int left = i - 1 , right = i + 1 ; for ( int j = i - 1 ; j >= l ; j -- ) if ( book [ j ] == 1 ) left = j ; search ( l , left ); //\u5de6\u53f3\u5206\u522b\u9012\u5f52 for ( int j = i + 1 ; j <= r ; j ++ ) if ( book [ j ] == 1 ) right = j ; search ( right , r ); //\u5de6\u53f3\u5206\u522b\u9012\u5f52 } if ( flag == 1 ) { cnt ++ ; for ( int i = l ; i <= r ; i ++ ) d [ i ] -- ; search ( l , r ); } } int main () { //freopen(\"road.in\",\"r\",stdin); //freopen(\"road.out\",\"w\",stdout); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & d [ i ]); minn = minn > d [ i ] ? d [ i ] : minn ; } for ( int i = 1 ; i <= n ; i ++ ) d [ i ] -= minn ; //\u5148\u5904\u7406\u4e00\u904d cnt += minn ; search ( 1 , n ); printf ( \"%d\" , cnt ); return 0 ; } T2 \u8d27\u5e01\u7cfb\u7edf \u00b6 \u5e76\u4e0d\u4f1a\u505a\u8fd9\u9053\u9898\uff0c\u6240\u4ee5\u5c31\u53ea\u51c6\u5907\u62ff\u524d6\u4e2a\u6d4b\u8bd5\u70b9\u7684\u5206\uff08\u53ef\u662f\u53ea\u5f97\u4e8615\u5206\uff1f\uff1f\uff1f\uff09\uff08\u80af\u5b9a\u6709\u4e2a\u5730\u65b9\u51fa\u9505\u4e86\uff09 \u8bdd\u8bf4 1 namespace point_x { } \u5f88\u597d\u7528\uff0c\u8fd9\u8ba9\u6211\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u5f88\u9ad8\uff0c\u5f88\u5bb9\u6613\u8c03\u8bd5 T3 \u8d5b\u9053\u4fee\u5efa \u00b6 \u7136\u800c\u8fd8\u662f\u4e0d\u4f1a\u505a \u5206\u4e86namespace\u7684\u6211\u8fd8\u662f\u53ea\u5f97\u4e865\u5206 \uff08\u80af\u5b9a\u53c8\u6709\u54ea\u91cc\u51fa\u9505\u4e86\uff09 \u539f\u56e0\u6682\u672a\u67e5\u660e \u666e\u53ca\u7ec4 \u00b6 T1 \u6807\u9898\u7edf\u8ba1 \u00b6 \u8fd9\u9898\u751a\u662f\u5947\u602a\uff0c\u5728\u6211\u7684\u8bb0\u5fc6\u4e2d\u2026\u2026NOIP\u666e\u53ca\u7ec4\u53ef\u662f\u4e0d\u66fe\u8003\u8fc7\u5b57\u7b26\u4e32\u7684\u554a \u60f3\u90fd\u6ca1\u60f3\uff0c5\u5206\u949f\u5c31\u809d\u4e86\u8fd9\u9053\u9898 \u8003\u8bd5\u6e90\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <cstdio> #include <string> #include <iostream> using namespace std ; string s ; int len ; int main () { //freopen(\"title.in\",\"r\",stdin); //freopen(\"title.out\",\"w\",stdout); while ( cin >> s ) len += s . length (); cout << len ; return 0 ; } T2 \u9f99\u864e\u6597 \u00b6 \u597d\u590d\u6742\u7684\u6a21\u62df\uff0c\u4e3a\u4ecb\u7ecd\u6e05\u695a\u80cc\u666f\uff0cCCF\u82b1\u4e86\u597d\u591a\u5fc3\u601d\u554a \u4e0d\u5f00 long$ $long \u4f1a\u540e\u6094\u4e00\u751f\u7684\uff01 \u8003\u573a\u4e0a\u5176\u5b9e\u6211\u662fA\u4e86\u8fd9\u9053\u9898\u7684\uff0c\u4f46\u662f\u83ab\u540d\u5176\u5999\u6d1b\u8c37\u53ea\u7ed9\u4e86\u621180 \u8003\u8bd5\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <cstdio> using namespace std ; long long n , m , p1 , p2 , s1 , s2 , sum , minn = 2000000000 ; long long c [ 100010 ]; long long tiger , dragon ; long long abs ( long long a ) { if ( a < 0 ) return - a ; else return a ; } int main () { //freopen(\"fight.in\",\"r\",stdin); //freopen(\"fight.out\",\"w\",stdout); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & c [ i ]); scanf ( \"%d %d %d %d\" , & m , & p1 , & s1 , & s2 ); c [ p1 ] += s1 ; for ( int i = 1 ; i <= m - 1 ; i ++ ) dragon += ( m - i ) * c [ i ]; for ( int i = n ; i >= m + 1 ; i -- ) tiger += ( i - m ) * c [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) sum = abs ( dragon + s2 * ( m - i ) - tiger ); else if ( i > m ) sum = abs ( tiger + s2 * ( i - m ) - dragon ); if ( sum < minn ) { minn = sum ; p2 = i ; } else if ( sum == minn && i <= p2 ) { p2 = i ; } } printf ( \"%d\" , p2 ); return 0 ; } T3 \u6446\u6e21\u8f66 \u00b6 \u8fd9\u662f\u9053dp\u9898\uff0c\u521a\u51fa\u8003\u573a\u7684\u6211\u5c31\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u70b9 \u53ef\u662f\u8003\u573a\u4e0a\u6211\u5374\u6253\u7684\u662f\u4e2a\u6a21\u62df \u5728 \\(1\\) \u4e0e \\(m\\) \u4e4b\u95f4\u679a\u4e3e\u8f66\u5b50\u51fa\u53d1\u7684\u65f6\u95f4 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a \\(O(m\\times max\\sum\\limits_{i=1}^{n}t_i+n)\\) \u7684\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <cstdio> #include <algorithm> using namespace std ; int n , m , maxn =- 99999 ; int t [ 4000010 ]; long long ans = 999999999 ; int main () { //freopen(\"bus.in\",\"r\",stdin); //freopen(\"bus.out\",\"w\",stdout); scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) { int tim ; scanf ( \"%d\" , & tim ); t [ tim ] ++ ; if ( tim > maxn ) maxn = tim ; } for ( int i = 0 ; i < m ; i ++ ) { long long tot = 0 ; for ( int j = 0 ; j <= maxn ; j ++ ) if ( t [ j ] > 0 ) tot += ( m + i - j % m ) % m ; if ( tot < ans ) ans = tot ; } printf ( \"%d\" , ans ); return 0 ; } \u7136\u800c\u53ea\u5f97\u4e8610\u5206\u3002\u5e0c\u671b\u6709 \\(dalao\\) \u80fd\u6307\u51fa\u9519\u8bef T4 \u5bf9\u79f0\u4e8c\u53c9\u6811 \u00b6 \u5f53\u65f6\u65f6\u95f4\u4e0d\u591a\u4e86\uff0c\u518d\u52a0\u4e0a\u672c\u6765\u5c31\u6ca1\u60f3\u7740\u8981\u5f97\u591a\u5c11\u5206\uff0c\u679c\u65ad\u5730\u653e\u5f03\u4e86\u6b63\u89e3\uff0c\u800c\u662f\u51c6\u5907\u62ff\u524d\u4e09\u4e2a\u6d4b\u8bd5\u70b9 \u7136\u800c\u4e8b\u4e0e\u613f\u8fdd\uff0c\u6211\u53ea\u62ff\u5230\u4e86\u524d\u4e24\u4e2a\u6d4b\u8bd5\u70b9\u5f97\u5206 \u666e\u53ca\u603b\u5206218\uff0c\uff08\u5728\u6211\u4eec\u7701\uff09\u8fd8\u7b97\u53ef\u4ee5\u5427 \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u53c2\u52a0\u666e\u53ca\u7ec4\uff0c\u4ee5\u540e\u8981\u5728\u63d0\u9ad8\u7ec4\u91cc\u88ab\u4eba\u8650\u5566\uff01 Day 2 \u00b6 T1 \u65c5\u884c \u00b6 dfs\u88f8\u641c \u611f\u89c9\u53ef\u4ee5\u5f97 50\uff0c\u56e0\u4e3a\u6211\u81ea\u5df1\u9020\u4e86\u51e0\u7ec4m=n-1\u7684\u6570\u636e\uff0c\u7136\u800c\u53ea\u5f97\u4e86 20\u3002\u611f\u89c9\u8fd8\u662f\u7279\u5224\u6ca1\u6709\u5224\u5e72\u51c0\u5427\u3002 T2 \u586b\u6570\u6e38\u620f \u00b6 \u8003\u573a\u4e0a\u624b\u7b97\u4e86\u51e0\u7ec4\u6570\u636e\uff0c\u7136\u800c\u5374CE\u4e86 \u539f\u56e0\u7adf\u662f 1 rand () \u5728 # include < cstdlib > \u91cc \u8fd9\u5bfc\u81f4\u6211\u5077\u9e21\u4e0d\u6210\u8680\u628a\u7c73\uff0c\u8981\u8bb0\u4f4f\uff0c\u4e0b\u6b21\u53ef\u4e0d\u80fd\u72af\u8fd9\u6837\u7684\u9519\u8bef\u554a\uff01\u672c\u53ef\u4ee5\u518d\u62ff15\u5206\u7684\u3002 T3 \u4fdd\u536b\u738b\u56fd \u00b6 \u8fd9\u9053\u9898\u5b8c\u5168\u6ca1\u601d\u8def\uff0c\u4e0d\u8bf4\u4e86\u3002 \u4eba\u751f\u4e2d\u7684\u7b2c\u4e00\u6b21NOIP\u5c31\u8fd9\u4e48\u8fc7\u53bb\u4e86\uff0c\u6211\u61c2\u5f97\u4e86\u8bb8\u591a\uff1a \u7ec3\u597d\u57fa\u672c\u529f\uff0c\u641c\u7d22\u3001\u6a21\u62df\u4e0d\u80fd\u843d\u4e0b \u8981\u591a\u719f\u6089\u5404\u79cd\u57fa\u672c\u7b97\u6cd5 \u8981\u591a\u505a\u5386\u5e74\u7684NOIP\u771f\u9898 NOIP\uff0c\u6211\u4eec\u660e\u5e74\u518d\u89c1\uff01","title":"NOIP2018 \u6e38\u8bb0"},{"location":"posts/articles/noip-2018/#day-3","text":"\u5c4b\u6f0f\u504f\u9022\u8fde\u591c\u96e8\uff0c\u5b66\u6821\u7684\u671f\u4e2d\u8003\u8bd5\u7adf\u7136\u5728 11.8-11.9 \u53f7\u4e3e\u884c\uff0c\u800c 10 \u53f7\u5c31\u8981 NOIP \u4e86\u554a\uff01","title":"Day -3"},{"location":"posts/articles/noip-2018/#day-0","text":"\u5728\u53d4\u53d4\u5bb6\u590d\u4e60\u4e86\u6a21\u62df\u3001\u641c\u7d22\u7b49\u57fa\u672c\u5185\u5bb9\u3002\u5237\u4e86 \\(3\\) \u9053\u6c34\u9898\u3002","title":"Day 0"},{"location":"posts/articles/noip-2018/#day-1","text":"","title":"Day 1"},{"location":"posts/articles/noip-2018/#t1","text":"\u6211\u5e76\u4e0d\u77e5\u9053\u8fd9\u662f\u4e00\u9053\u539f\u9898\uff0c\u56e0\u6b64\u6211\u6253\u4e86\u4e00\u4e2a\u66b4\u529b\u641c\u7d22\uff0c\u5c0f\u6837\u4f8b\u8fc7\u4e86\uff0c\u5927\u6837\u4f8bT\u4e86\uff0c\u614c\u5f97\u4e00\u6279\u7684\u6211\u51fa\u4e86\u51e0\u7ec4\u5c0f\u7684\u6570\u636e\uff0c\u8fc7\u4e86\uff0c\u7136\u540e\u5c31\u6ca1\u7ba1\u8fd9\u4e00\u9898\u4e86\u3002 \u6211\u53d1\u73b0\u641c\u7d22\u7684\u57fa\u672c\u529f\u5f88\u6709\u7528\uff0c\u6bd5\u7adf\u5b83\u80fd\u4f7f\u4f60\u66b4\u529b\u5f04\u70b9\u5206\u56de\u6765\u3002 \u77e5\u9053\u5b83\u662f\u539f\u9898\u7684\u6211\u88ab\u9707\u60ca\u5230\u4e86\uff0c\u7acb\u5fd7\u4e0b\u6b21NOIP\u4e4b\u524d\u8981\u628a\u4ee5\u524d\u7684\u9898\u90fd\u505a\u4e00\u904d \u6211\u505a\u9898\u7684\u601d\u8def\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a\u5148\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u6709\u5730\u65b9\u662f\u96f6\uff0c\u5c31\u5de6\u53f3\u5206\u522b\u9012\u5f52 \u5e76\u4e0d\u77e5\u9053\u8bb0\u5f55\u662f\u5426\u4e3a0\u7684book\u6570\u7ec4\u7684\u4f18\u5316\u662f\u5426\u6709\u7528\u2026\u2026 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <cstdio> using namespace std ; int n , cnt , minn = 99999 ; int d [ 100010 ], book [ 100010 ]; void search ( int l , int r ) { if ( l >= r ) { cnt += d [ l ]; d [ l ] = 0 ; return ; } int flag = 1 ; for ( int i = l ; i <= r ; i ++ ) if ( d [ i ] == 0 ) { flag = 0 ; book [ i ] = 1 ; int left = i - 1 , right = i + 1 ; for ( int j = i - 1 ; j >= l ; j -- ) if ( book [ j ] == 1 ) left = j ; search ( l , left ); //\u5de6\u53f3\u5206\u522b\u9012\u5f52 for ( int j = i + 1 ; j <= r ; j ++ ) if ( book [ j ] == 1 ) right = j ; search ( right , r ); //\u5de6\u53f3\u5206\u522b\u9012\u5f52 } if ( flag == 1 ) { cnt ++ ; for ( int i = l ; i <= r ; i ++ ) d [ i ] -- ; search ( l , r ); } } int main () { //freopen(\"road.in\",\"r\",stdin); //freopen(\"road.out\",\"w\",stdout); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) { scanf ( \"%d\" , & d [ i ]); minn = minn > d [ i ] ? d [ i ] : minn ; } for ( int i = 1 ; i <= n ; i ++ ) d [ i ] -= minn ; //\u5148\u5904\u7406\u4e00\u904d cnt += minn ; search ( 1 , n ); printf ( \"%d\" , cnt ); return 0 ; }","title":"T1 \u94fa\u8bbe\u9053\u8def"},{"location":"posts/articles/noip-2018/#t2","text":"\u5e76\u4e0d\u4f1a\u505a\u8fd9\u9053\u9898\uff0c\u6240\u4ee5\u5c31\u53ea\u51c6\u5907\u62ff\u524d6\u4e2a\u6d4b\u8bd5\u70b9\u7684\u5206\uff08\u53ef\u662f\u53ea\u5f97\u4e8615\u5206\uff1f\uff1f\uff1f\uff09\uff08\u80af\u5b9a\u6709\u4e2a\u5730\u65b9\u51fa\u9505\u4e86\uff09 \u8bdd\u8bf4 1 namespace point_x { } \u5f88\u597d\u7528\uff0c\u8fd9\u8ba9\u6211\u7684\u4ee3\u7801\u53ef\u8bfb\u6027\u5f88\u9ad8\uff0c\u5f88\u5bb9\u6613\u8c03\u8bd5","title":"T2 \u8d27\u5e01\u7cfb\u7edf"},{"location":"posts/articles/noip-2018/#t3","text":"\u7136\u800c\u8fd8\u662f\u4e0d\u4f1a\u505a \u5206\u4e86namespace\u7684\u6211\u8fd8\u662f\u53ea\u5f97\u4e865\u5206 \uff08\u80af\u5b9a\u53c8\u6709\u54ea\u91cc\u51fa\u9505\u4e86\uff09 \u539f\u56e0\u6682\u672a\u67e5\u660e","title":"T3 \u8d5b\u9053\u4fee\u5efa"},{"location":"posts/articles/noip-2018/#_1","text":"","title":"\u666e\u53ca\u7ec4"},{"location":"posts/articles/noip-2018/#t1_1","text":"\u8fd9\u9898\u751a\u662f\u5947\u602a\uff0c\u5728\u6211\u7684\u8bb0\u5fc6\u4e2d\u2026\u2026NOIP\u666e\u53ca\u7ec4\u53ef\u662f\u4e0d\u66fe\u8003\u8fc7\u5b57\u7b26\u4e32\u7684\u554a \u60f3\u90fd\u6ca1\u60f3\uff0c5\u5206\u949f\u5c31\u809d\u4e86\u8fd9\u9053\u9898 \u8003\u8bd5\u6e90\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <cstdio> #include <string> #include <iostream> using namespace std ; string s ; int len ; int main () { //freopen(\"title.in\",\"r\",stdin); //freopen(\"title.out\",\"w\",stdout); while ( cin >> s ) len += s . length (); cout << len ; return 0 ; }","title":"T1 \u6807\u9898\u7edf\u8ba1"},{"location":"posts/articles/noip-2018/#t2_1","text":"\u597d\u590d\u6742\u7684\u6a21\u62df\uff0c\u4e3a\u4ecb\u7ecd\u6e05\u695a\u80cc\u666f\uff0cCCF\u82b1\u4e86\u597d\u591a\u5fc3\u601d\u554a \u4e0d\u5f00 long$ $long \u4f1a\u540e\u6094\u4e00\u751f\u7684\uff01 \u8003\u573a\u4e0a\u5176\u5b9e\u6211\u662fA\u4e86\u8fd9\u9053\u9898\u7684\uff0c\u4f46\u662f\u83ab\u540d\u5176\u5999\u6d1b\u8c37\u53ea\u7ed9\u4e86\u621180 \u8003\u8bd5\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <cstdio> using namespace std ; long long n , m , p1 , p2 , s1 , s2 , sum , minn = 2000000000 ; long long c [ 100010 ]; long long tiger , dragon ; long long abs ( long long a ) { if ( a < 0 ) return - a ; else return a ; } int main () { //freopen(\"fight.in\",\"r\",stdin); //freopen(\"fight.out\",\"w\",stdout); scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & c [ i ]); scanf ( \"%d %d %d %d\" , & m , & p1 , & s1 , & s2 ); c [ p1 ] += s1 ; for ( int i = 1 ; i <= m - 1 ; i ++ ) dragon += ( m - i ) * c [ i ]; for ( int i = n ; i >= m + 1 ; i -- ) tiger += ( i - m ) * c [ i ]; for ( int i = 1 ; i <= n ; i ++ ) { if ( i <= m ) sum = abs ( dragon + s2 * ( m - i ) - tiger ); else if ( i > m ) sum = abs ( tiger + s2 * ( i - m ) - dragon ); if ( sum < minn ) { minn = sum ; p2 = i ; } else if ( sum == minn && i <= p2 ) { p2 = i ; } } printf ( \"%d\" , p2 ); return 0 ; }","title":"T2 \u9f99\u864e\u6597"},{"location":"posts/articles/noip-2018/#t3_1","text":"\u8fd9\u662f\u9053dp\u9898\uff0c\u521a\u51fa\u8003\u573a\u7684\u6211\u5c31\u610f\u8bc6\u5230\u4e86\u8fd9\u4e00\u70b9 \u53ef\u662f\u8003\u573a\u4e0a\u6211\u5374\u6253\u7684\u662f\u4e2a\u6a21\u62df \u5728 \\(1\\) \u4e0e \\(m\\) \u4e4b\u95f4\u679a\u4e3e\u8f66\u5b50\u51fa\u53d1\u7684\u65f6\u95f4 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a \\(O(m\\times max\\sum\\limits_{i=1}^{n}t_i+n)\\) \u7684\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <cstdio> #include <algorithm> using namespace std ; int n , m , maxn =- 99999 ; int t [ 4000010 ]; long long ans = 999999999 ; int main () { //freopen(\"bus.in\",\"r\",stdin); //freopen(\"bus.out\",\"w\",stdout); scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= n ; i ++ ) { int tim ; scanf ( \"%d\" , & tim ); t [ tim ] ++ ; if ( tim > maxn ) maxn = tim ; } for ( int i = 0 ; i < m ; i ++ ) { long long tot = 0 ; for ( int j = 0 ; j <= maxn ; j ++ ) if ( t [ j ] > 0 ) tot += ( m + i - j % m ) % m ; if ( tot < ans ) ans = tot ; } printf ( \"%d\" , ans ); return 0 ; } \u7136\u800c\u53ea\u5f97\u4e8610\u5206\u3002\u5e0c\u671b\u6709 \\(dalao\\) \u80fd\u6307\u51fa\u9519\u8bef","title":"T3 \u6446\u6e21\u8f66"},{"location":"posts/articles/noip-2018/#t4","text":"\u5f53\u65f6\u65f6\u95f4\u4e0d\u591a\u4e86\uff0c\u518d\u52a0\u4e0a\u672c\u6765\u5c31\u6ca1\u60f3\u7740\u8981\u5f97\u591a\u5c11\u5206\uff0c\u679c\u65ad\u5730\u653e\u5f03\u4e86\u6b63\u89e3\uff0c\u800c\u662f\u51c6\u5907\u62ff\u524d\u4e09\u4e2a\u6d4b\u8bd5\u70b9 \u7136\u800c\u4e8b\u4e0e\u613f\u8fdd\uff0c\u6211\u53ea\u62ff\u5230\u4e86\u524d\u4e24\u4e2a\u6d4b\u8bd5\u70b9\u5f97\u5206 \u666e\u53ca\u603b\u5206218\uff0c\uff08\u5728\u6211\u4eec\u7701\uff09\u8fd8\u7b97\u53ef\u4ee5\u5427 \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u53c2\u52a0\u666e\u53ca\u7ec4\uff0c\u4ee5\u540e\u8981\u5728\u63d0\u9ad8\u7ec4\u91cc\u88ab\u4eba\u8650\u5566\uff01","title":"T4 \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"posts/articles/noip-2018/#day-2","text":"","title":"Day 2"},{"location":"posts/articles/noip-2018/#t1_2","text":"dfs\u88f8\u641c \u611f\u89c9\u53ef\u4ee5\u5f97 50\uff0c\u56e0\u4e3a\u6211\u81ea\u5df1\u9020\u4e86\u51e0\u7ec4m=n-1\u7684\u6570\u636e\uff0c\u7136\u800c\u53ea\u5f97\u4e86 20\u3002\u611f\u89c9\u8fd8\u662f\u7279\u5224\u6ca1\u6709\u5224\u5e72\u51c0\u5427\u3002","title":"T1 \u65c5\u884c"},{"location":"posts/articles/noip-2018/#t2_2","text":"\u8003\u573a\u4e0a\u624b\u7b97\u4e86\u51e0\u7ec4\u6570\u636e\uff0c\u7136\u800c\u5374CE\u4e86 \u539f\u56e0\u7adf\u662f 1 rand () \u5728 # include < cstdlib > \u91cc \u8fd9\u5bfc\u81f4\u6211\u5077\u9e21\u4e0d\u6210\u8680\u628a\u7c73\uff0c\u8981\u8bb0\u4f4f\uff0c\u4e0b\u6b21\u53ef\u4e0d\u80fd\u72af\u8fd9\u6837\u7684\u9519\u8bef\u554a\uff01\u672c\u53ef\u4ee5\u518d\u62ff15\u5206\u7684\u3002","title":"T2 \u586b\u6570\u6e38\u620f"},{"location":"posts/articles/noip-2018/#t3_2","text":"\u8fd9\u9053\u9898\u5b8c\u5168\u6ca1\u601d\u8def\uff0c\u4e0d\u8bf4\u4e86\u3002 \u4eba\u751f\u4e2d\u7684\u7b2c\u4e00\u6b21NOIP\u5c31\u8fd9\u4e48\u8fc7\u53bb\u4e86\uff0c\u6211\u61c2\u5f97\u4e86\u8bb8\u591a\uff1a \u7ec3\u597d\u57fa\u672c\u529f\uff0c\u641c\u7d22\u3001\u6a21\u62df\u4e0d\u80fd\u843d\u4e0b \u8981\u591a\u719f\u6089\u5404\u79cd\u57fa\u672c\u7b97\u6cd5 \u8981\u591a\u505a\u5386\u5e74\u7684NOIP\u771f\u9898 NOIP\uff0c\u6211\u4eec\u660e\u5e74\u518d\u89c1\uff01","title":"T3 \u4fdd\u536b\u738b\u56fd"},{"location":"posts/editorials/","text":"\u8fd9\u91cc\u653e\u7f6e\u7684\u662f\u4e00\u4e9b\u6211\u7684\u9898\u89e3\u3002","title":"\u6982\u89c8"},{"location":"posts/editorials/bzoj/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\(f(x) = \\sum_{i = 1}^{j}\\)","title":"BZOJ"},{"location":"posts/editorials/bzoj/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"posts/editorials/bzoj/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"posts/editorials/bzoj/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\(f(x) = \\sum_{i = 1}^{j}\\)","title":"Project layout"},{"location":"posts/editorials/editorial-template/","text":"\u77e5\u8bc6\u70b9 - \u00b6 \u9898\u610f\u7b80\u8ff0 \u00b6 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a$$\u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 \u539f\u9898\u94fe\u63a5: D. Rarity and New Dress \u21a9","title":"Editorial template"},{"location":"posts/editorials/editorial-template/#-","text":"","title":"-"},{"location":"posts/editorials/editorial-template/#_1","text":"1 \u3002 \u6570\u636e\u8303\u56f4\uff1a$$\u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/editorial-template/#_2","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/editorial-template/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 \u539f\u9898\u94fe\u63a5: D. Rarity and New Dress \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/luogu/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\(f(x) = \\sum_{i = 1}^{j}\\)","title":"\u6d1b\u8c37"},{"location":"posts/editorials/luogu/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"posts/editorials/luogu/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"posts/editorials/luogu/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \\(f(x) = \\sum_{i = 1}^{j}\\)","title":"Project layout"},{"location":"posts/editorials/atcoder/ABC171F/","text":"\u77e5\u8bc6\u70b9 \u7ec4\u5408\u6570\u5b66 \u5feb\u901f\u5e42 \u5bb9\u65a5\u539f\u7406 \u9898\u610f\u7b80\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u548c\u6570\u5b57 \\(k\\) \uff0c\u6c42\u6240\u6709\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u7b26\u4e32 \\(T\\) \u7684\u4e2a\u6570\uff0c\u4f7f\u5f97 \\(\\left|T\\right| = \\left|S\\right| + k\\) \uff0c\u4e14 \\(S\\) \u4e3a \\(T\\) \u7684 \u5b50\u5e8f\u5217 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le \\left|S\\right|, k \\le 10^6\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4ee4 \\(n = \\left|S\\right|, m = \\left|S\\right| + k\\) \u3002 \u6b63\u7740\u8ba1\u7b97 \\(S\\) \u4e3a \\(T\\) \u7684\u5b50\u5e8f\u5217\u65f6 \\(T\\) \u7684\u4e2a\u6570\u4e0d\u65b9\u4fbf\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8ba1\u7b97 \\(S\\) \u4e0d\u4e3a \\(T'\\) \u7684 \u5b50\u5e8f\u5217 \u65f6 \\(T'\\) \u7684\u4e2a\u6570\u3002 \u518d\u7528 \\(26^m\\) \u51cf\u53bb \\(T'\\) \u7684\u4e2a\u6570\uff0c\u5373\u4e3a \\(T\\) \u7684\u4e2a\u6570\u3002 \\(T'\\) \u4e2d\u53ef\u80fd\u5305\u542b \\(S\\) \u7684\u524d\u7f00 \\(S[1], S[1..2], S[1..3], \\cdots, S[1.. n - 1]\\) \uff1b \u5f53\u7136\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5305\u542b \\(S\\) \u7684\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\uff0c\u53ef\u4ee5\u770b\u505a\u5305\u542b \\(S[1\\ldots0] = \\epsilon\\) \u3002 \u5f53 \\(T'\\) \u4e2d \u4ec5 \u5305\u542b \\(S[1.. i] \\quad i \\in [0, n)\\) \u65f6\uff0c\u4ece \\(m\\) \u4e2a\u4f4d\u7f6e\u91cc\u9009\u53d6 \\(i\\) \u4e2a\u4f4d\u7f6e\u6765\u586b\u8fd9\u4e9b\u5b57\u7b26\u6709 \\(\\dbinom{m}{i}\\) \u79cd\u65b9\u6cd5\uff0c \u800c\u8981\u6c42\u5269\u4e0b\u7684 \\(m - i\\) \u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u5305\u542b \\(S[i + 1]\\) \u8fd9\u4e2a\u5b57\u6bcd\uff08\u56e0\u4e3a\u5305\u542b\u4e86\u5c31\u4f1a\u7ec4\u6210 \\(S[1..i + 1]\\) \u8fd9\u4e2a\u5b50\u5e8f\u5217\u4e86\uff09\uff0c \u56e0\u6b64\u6709 \\(25^{m - i}\\) \u79cd\u65b9\u6cd5\u3002 \u7b54\u6848\u5373\u4e3a $$ 26^{m}-\\sum_{i = 0}^{n - 1}\\binom{m}{i}\\cdot25^{m - i} $$ \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6b64\u9898\u7684\u7b54\u6848\u4e0e \\(S\\) \u5177\u4f53\u662f\u4ec0\u4e48\u65e0\u5173\uff0c\u53ea\u4e0e \\(\\left|S\\right|\\) \u6709\u5173\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <bits/stdc++.h> #define LL long long const int mod = 1e9 + 7 ; const int N = 1e6 + 5 ; const int M = 2e6 + 5 ; int n , k ; int m , fac [ M ] = { 1 }, inv [ M ]; char str [ N ]; LL tot , mis ; int mul ( int ta , int tb ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; } int qpow ( int bas , int po ) { int res = 1 ; while ( po ) { if ( po & 1 ) res = mul ( res , bas ); bas = mul ( bas , bas ); po >>= 1 ; } return res ; } int C ( int tn , int tm ) { return mul ( fac [ tn ], mul ( inv [ tm ], inv [ tn - tm ])); } int32_t main () { scanf ( \"%d %s\" , & k , str + 1 ); n = strlen ( str + 1 ); m = n + k ; tot = qpow ( 26 , m ); for ( int i = 1 ; i <= m ; ++ i ) fac [ i ] = mul ( fac [ i - 1 ], i ); for ( int i = 0 ; i <= m ; ++ i ) inv [ i ] = qpow ( fac [ i ], mod - 2 ); for ( int i = 0 ; i <= n - 1 ; ++ i ) mis = ( mis + mul ( C ( m , i ), qpow ( 25 , m - i ))) % mod ; tot = (( tot - mis ) % mod + mod ) % mod ; printf ( \"%d\" , tot ); return 0 ; } \u539f\u9898\u94fe\u63a5: F - Strivore \u21a9","title":"ABC171F"},{"location":"posts/editorials/atcoder/ABC171F/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u548c\u6570\u5b57 \\(k\\) \uff0c\u6c42\u6240\u6709\u672c\u8d28\u4e0d\u540c\u7684\u5b57\u7b26\u4e32 \\(T\\) \u7684\u4e2a\u6570\uff0c\u4f7f\u5f97 \\(\\left|T\\right| = \\left|S\\right| + k\\) \uff0c\u4e14 \\(S\\) \u4e3a \\(T\\) \u7684 \u5b50\u5e8f\u5217 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le \\left|S\\right|, k \\le 10^6\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/atcoder/ABC171F/#_2","text":"\u4ee4 \\(n = \\left|S\\right|, m = \\left|S\\right| + k\\) \u3002 \u6b63\u7740\u8ba1\u7b97 \\(S\\) \u4e3a \\(T\\) \u7684\u5b50\u5e8f\u5217\u65f6 \\(T\\) \u7684\u4e2a\u6570\u4e0d\u65b9\u4fbf\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8ba1\u7b97 \\(S\\) \u4e0d\u4e3a \\(T'\\) \u7684 \u5b50\u5e8f\u5217 \u65f6 \\(T'\\) \u7684\u4e2a\u6570\u3002 \u518d\u7528 \\(26^m\\) \u51cf\u53bb \\(T'\\) \u7684\u4e2a\u6570\uff0c\u5373\u4e3a \\(T\\) \u7684\u4e2a\u6570\u3002 \\(T'\\) \u4e2d\u53ef\u80fd\u5305\u542b \\(S\\) \u7684\u524d\u7f00 \\(S[1], S[1..2], S[1..3], \\cdots, S[1.. n - 1]\\) \uff1b \u5f53\u7136\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5305\u542b \\(S\\) \u7684\u4efb\u610f\u4e00\u4e2a\u524d\u7f00\uff0c\u53ef\u4ee5\u770b\u505a\u5305\u542b \\(S[1\\ldots0] = \\epsilon\\) \u3002 \u5f53 \\(T'\\) \u4e2d \u4ec5 \u5305\u542b \\(S[1.. i] \\quad i \\in [0, n)\\) \u65f6\uff0c\u4ece \\(m\\) \u4e2a\u4f4d\u7f6e\u91cc\u9009\u53d6 \\(i\\) \u4e2a\u4f4d\u7f6e\u6765\u586b\u8fd9\u4e9b\u5b57\u7b26\u6709 \\(\\dbinom{m}{i}\\) \u79cd\u65b9\u6cd5\uff0c \u800c\u8981\u6c42\u5269\u4e0b\u7684 \\(m - i\\) \u4e2a\u4f4d\u7f6e\u4e0d\u80fd\u5305\u542b \\(S[i + 1]\\) \u8fd9\u4e2a\u5b57\u6bcd\uff08\u56e0\u4e3a\u5305\u542b\u4e86\u5c31\u4f1a\u7ec4\u6210 \\(S[1..i + 1]\\) \u8fd9\u4e2a\u5b50\u5e8f\u5217\u4e86\uff09\uff0c \u56e0\u6b64\u6709 \\(25^{m - i}\\) \u79cd\u65b9\u6cd5\u3002 \u7b54\u6848\u5373\u4e3a $$ 26^{m}-\\sum_{i = 0}^{n - 1}\\binom{m}{i}\\cdot25^{m - i} $$ \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u6b64\u9898\u7684\u7b54\u6848\u4e0e \\(S\\) \u5177\u4f53\u662f\u4ec0\u4e48\u65e0\u5173\uff0c\u53ea\u4e0e \\(\\left|S\\right|\\) \u6709\u5173\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/atcoder/ABC171F/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <bits/stdc++.h> #define LL long long const int mod = 1e9 + 7 ; const int N = 1e6 + 5 ; const int M = 2e6 + 5 ; int n , k ; int m , fac [ M ] = { 1 }, inv [ M ]; char str [ N ]; LL tot , mis ; int mul ( int ta , int tb ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; } int qpow ( int bas , int po ) { int res = 1 ; while ( po ) { if ( po & 1 ) res = mul ( res , bas ); bas = mul ( bas , bas ); po >>= 1 ; } return res ; } int C ( int tn , int tm ) { return mul ( fac [ tn ], mul ( inv [ tm ], inv [ tn - tm ])); } int32_t main () { scanf ( \"%d %s\" , & k , str + 1 ); n = strlen ( str + 1 ); m = n + k ; tot = qpow ( 26 , m ); for ( int i = 1 ; i <= m ; ++ i ) fac [ i ] = mul ( fac [ i - 1 ], i ); for ( int i = 0 ; i <= m ; ++ i ) inv [ i ] = qpow ( fac [ i ], mod - 2 ); for ( int i = 0 ; i <= n - 1 ; ++ i ) mis = ( mis + mul ( C ( m , i ), qpow ( 25 , m - i ))) % mod ; tot = (( tot - mis ) % mod + mod ) % mod ; printf ( \"%d\" , tot ); return 0 ; } \u539f\u9898\u94fe\u63a5: F - Strivore \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/atcoder/ABC172E/","text":"\u77e5\u8bc6\u70b9 \u5bb9\u65a5\u539f\u7406 \u7ec4\u5408\u6570\u5b66 \u9898\u610f\u7b80\u8ff0 \u00b6 \u6c42\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5e8f\u5217\u5bf9 \\((A, B)\\) \u7684\u4e2a\u6570\uff1a \\(\\forall i \\in [1, n], A_i \\in [1, m], B_i \\in [1, m]\\) \\(\\forall i \\in [1, n], A_i \\neq B_i\\) \\(\\forall 1 \\le i < j \\le n, A_i \\neq A_j, B_i \\neq B_j\\) \u7b54\u6848\u5bf9 \\(10^9 + 7\\) \u53d6\u6a21 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le m \\le 5\\cdot10^5\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6ee1\u8db3 \\(\\forall i \\in S, A_i = B_i\\) \u7684\u5e8f\u5217\u5bf9 \\((A, B)\\) \u6709 \\(A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2\\) \u4e2a\u3002 \u7136\u540e\u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u4e3a \\(\\sum_{S \\subseteq [1, n]}(-1)^{\\left|S\\right|}\\cdot A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2\\) \u3002 \uff08\u52a0\u4e0a \\(\\left|S\\right| = 0\\) \uff0c\u51cf\u53bb \\(\\left|S\\right| = 1\\) \uff0c\u52a0\u4e0a \\(\\left|S\\right| = 2\\) \u2026\u2026\uff09 \u679a\u4e3e\u5b50\u96c6\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7ec4\u5408\u610f\u4e49\u7684\u89d2\u5ea6\u6765\u5904\u7406\u4e0a\u5f0f\uff0c \u5c06\u6240\u6709 \\(\\left|S\\right| = k\\) \u7684\u6240\u6709\u5b50\u96c6 \\(S\\) \u5408\u5e76\u5904\u7406\uff0c\u8fd9\u6837\u7684 \\(S\\) \u6709 \\(\\dbinom{n}{k}\\) \u4e2a\u3002 \u7b54\u6848\u5373\u4e3a \\(\\sum_{k = 0}^{n}\\dbinom{n}{k}(-1)^k\\cdot A_{m}^{k}\\cdot\\left(A_{m - k}^{n - k}\\right)^2\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> #define LL long long const int mod = 1e9 + 7 ; const int N = 5e5 + 5 ; int n , m , fac [ N ] = { 1 }, inv [ N ] = { 1 }; LL ans ; int mul ( int ta , int tb ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; } int qpow ( int bas , int po ) { int res = 1 ; while ( po ) { if ( po & 1 ) res = mul ( res , bas ); bas = mul ( bas , bas ); po >>= 1 ; } return res ; } int C ( int tn , int tm ) { return mul ( fac [ tn ], mul ( inv [ tm ], inv [ tn - tm ])); } int A ( int tn , int tm ) { return mul ( fac [ tn ], inv [ tn - tm ]); } int32_t main () { scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= m ; ++ i ) fac [ i ] = mul ( fac [ i - 1 ], i ); inv [ m ] = qpow ( fac [ m ], mod - 2 ); for ( int i = m ; i >= 2 ; -- i ) inv [ i - 1 ] = mul ( inv [ i ], i ); for ( int i = 0 ; i <= n ; ++ i ) { int flg = ( i & 1 ) ? - 1 : 1 ; int tmp = mul ( C ( n , i ), mul ( A ( m , i ), qpow ( A ( m - i , n - i ), 2 ))); ans += flg * tmp ; ans %= mod , ( ans += mod ) %= mod ; } printf ( \"%lld\" , ans ); return 0 ; } \u539f\u9898\u94fe\u63a5: E - NEQ \u21a9","title":"ABC172E"},{"location":"posts/editorials/atcoder/ABC172E/#_1","text":"\u6c42\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5e8f\u5217\u5bf9 \\((A, B)\\) \u7684\u4e2a\u6570\uff1a \\(\\forall i \\in [1, n], A_i \\in [1, m], B_i \\in [1, m]\\) \\(\\forall i \\in [1, n], A_i \\neq B_i\\) \\(\\forall 1 \\le i < j \\le n, A_i \\neq A_j, B_i \\neq B_j\\) \u7b54\u6848\u5bf9 \\(10^9 + 7\\) \u53d6\u6a21 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le m \\le 5\\cdot10^5\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/atcoder/ABC172E/#_2","text":"\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6ee1\u8db3 \\(\\forall i \\in S, A_i = B_i\\) \u7684\u5e8f\u5217\u5bf9 \\((A, B)\\) \u6709 \\(A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2\\) \u4e2a\u3002 \u7136\u540e\u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u6211\u4eec\u53d1\u73b0\u7b54\u6848\u4e3a \\(\\sum_{S \\subseteq [1, n]}(-1)^{\\left|S\\right|}\\cdot A_{m}^{\\left|S\\right|}\\cdot\\left(A_{m - \\left|S\\right|}^{n - \\left|S\\right|}\\right)^2\\) \u3002 \uff08\u52a0\u4e0a \\(\\left|S\\right| = 0\\) \uff0c\u51cf\u53bb \\(\\left|S\\right| = 1\\) \uff0c\u52a0\u4e0a \\(\\left|S\\right| = 2\\) \u2026\u2026\uff09 \u679a\u4e3e\u5b50\u96c6\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u7ec4\u5408\u610f\u4e49\u7684\u89d2\u5ea6\u6765\u5904\u7406\u4e0a\u5f0f\uff0c \u5c06\u6240\u6709 \\(\\left|S\\right| = k\\) \u7684\u6240\u6709\u5b50\u96c6 \\(S\\) \u5408\u5e76\u5904\u7406\uff0c\u8fd9\u6837\u7684 \\(S\\) \u6709 \\(\\dbinom{n}{k}\\) \u4e2a\u3002 \u7b54\u6848\u5373\u4e3a \\(\\sum_{k = 0}^{n}\\dbinom{n}{k}(-1)^k\\cdot A_{m}^{k}\\cdot\\left(A_{m - k}^{n - k}\\right)^2\\) \u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/atcoder/ABC172E/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> #define LL long long const int mod = 1e9 + 7 ; const int N = 5e5 + 5 ; int n , m , fac [ N ] = { 1 }, inv [ N ] = { 1 }; LL ans ; int mul ( int ta , int tb ) { int ret ; __asm__ __volatile__ ( \" \\t mull %%ebx \\n\\t divl %%ecx \\n \" : \"=d\" ( ret ) : \"a\" ( ta ), \"b\" ( tb ), \"c\" ( mod )); return ret ; } int qpow ( int bas , int po ) { int res = 1 ; while ( po ) { if ( po & 1 ) res = mul ( res , bas ); bas = mul ( bas , bas ); po >>= 1 ; } return res ; } int C ( int tn , int tm ) { return mul ( fac [ tn ], mul ( inv [ tm ], inv [ tn - tm ])); } int A ( int tn , int tm ) { return mul ( fac [ tn ], inv [ tn - tm ]); } int32_t main () { scanf ( \"%d %d\" , & n , & m ); for ( int i = 1 ; i <= m ; ++ i ) fac [ i ] = mul ( fac [ i - 1 ], i ); inv [ m ] = qpow ( fac [ m ], mod - 2 ); for ( int i = m ; i >= 2 ; -- i ) inv [ i - 1 ] = mul ( inv [ i ], i ); for ( int i = 0 ; i <= n ; ++ i ) { int flg = ( i & 1 ) ? - 1 : 1 ; int tmp = mul ( C ( n , i ), mul ( A ( m , i ), qpow ( A ( m - i , n - i ), 2 ))); ans += flg * tmp ; ans %= mod , ( ans += mod ) %= mod ; } printf ( \"%lld\" , ans ); return 0 ; } \u539f\u9898\u94fe\u63a5: E - NEQ \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/codeforces/CF1392B/","text":"\u77e5\u8bc6\u70b9 \u6a21\u62df \u9898\u610f\u7b80\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6574\u6570\u6570\u5217 \\(\\{a_n\\}\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u6b21\u64cd\u4f5c\u4e3a\uff1a \\(d \\gets \\max\\{a_i\\}\\) \uff1b \\(\\forall i \\in [1, n], a_i \\gets d - a_i\\) \u3002 \u6c42 \\(k\\) \u6b21\u64cd\u4f5c\u540e\u7684\u5e8f\u5217 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le k \\le 10^{18}\\) \uff0c \\(-10^9 \\le a_i \\le 10^9\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4e00\u9053\u975e\u5e38\u6709\u610f\u601d\u7684\u6027\u8d28\u9898\u3002 \u6ce8\u610f\u5230\u7b2c \\(k_0\\) \u6b21\u64cd\u4f5c\u65f6\u9009\u51fa\u4e86\u6700\u5927\u503c \\(d\\) \uff0c\u5047\u8bbe\u6b64\u65f6\u6709\u6700\u5c0f\u503c \\(h\\) \uff0c\u90a3\u4e48\u4e0b\u4e00\u8f6e\u7684\u6700\u5927\u503c\uff0c\u4e00\u5b9a\u662f\u8fd9\u4e00\u8f6e\u7684\u6700\u5927\u503c\u51cf\u53bb\u8fd9\u4e00\u8f6e\u7684\u6700\u5c0f\u503c\u5f97\u5230\u7684\uff0c\u5373 \\(d - h\\) \u3002 \u56e0\u6b64\u7b2c \\(k_0\\) \u6b21\u64cd\u4f5c\u540e\u5e8f\u5217\u4f1a\u53d8\u6210 \\(\\{d - a_n\\}\\) \uff0c \u7b2c \\(k_0 + 1\\) \u6b21\u64cd\u4f5c\u540e\u5e8f\u5217\u4f1a\u53d8\u6210 \\(\\{(d - h) - (d - a_n)\\}\\) \uff0c\u5373 \\(\\{a_n - h\\}\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4ee4 \\(d\\) \u8868\u793a\u6570\u5217\u4e2d\u6700\u5927\u503c\uff0c \\(h\\) \u8868\u793a\u6570\u5217\u4e2d\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\uff1a \u82e5 \\(2 | k\\) \uff0c\u5219\u5e8f\u5217\u4e3a \\(\\{a_n - h\\}\\) \uff1b\u5426\u5219\u5e8f\u5217\u4e3a \\(\\{d - a_n\\}\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e5 + 5 ; int n ; LL k , a [ N ]; int32_t main () { int __tests ; scanf ( \"%d\" , & __tests ); while ( __tests -- ) { scanf ( \"%d %lld\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); int max1 = 1 , min1 = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] > a [ max1 ]) max1 = i ; if ( a [ i ] < a [ min1 ]) min1 = i ; } if ( k & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , a [ max1 ] - a [ i ]); } else { for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , a [ i ] - a [ min1 ]); } puts ( \"\" ); } return 0 ; } \u539f\u9898\u94fe\u63a5: B. Omkar and Infinity Clock \u21a9","title":"CF1392B"},{"location":"posts/editorials/codeforces/CF1392B/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6574\u6570\u6570\u5217 \\(\\{a_n\\}\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u6b21\u64cd\u4f5c\u4e3a\uff1a \\(d \\gets \\max\\{a_i\\}\\) \uff1b \\(\\forall i \\in [1, n], a_i \\gets d - a_i\\) \u3002 \u6c42 \\(k\\) \u6b21\u64cd\u4f5c\u540e\u7684\u5e8f\u5217 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le k \\le 10^{18}\\) \uff0c \\(-10^9 \\le a_i \\le 10^9\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/codeforces/CF1392B/#_2","text":"\u4e00\u9053\u975e\u5e38\u6709\u610f\u601d\u7684\u6027\u8d28\u9898\u3002 \u6ce8\u610f\u5230\u7b2c \\(k_0\\) \u6b21\u64cd\u4f5c\u65f6\u9009\u51fa\u4e86\u6700\u5927\u503c \\(d\\) \uff0c\u5047\u8bbe\u6b64\u65f6\u6709\u6700\u5c0f\u503c \\(h\\) \uff0c\u90a3\u4e48\u4e0b\u4e00\u8f6e\u7684\u6700\u5927\u503c\uff0c\u4e00\u5b9a\u662f\u8fd9\u4e00\u8f6e\u7684\u6700\u5927\u503c\u51cf\u53bb\u8fd9\u4e00\u8f6e\u7684\u6700\u5c0f\u503c\u5f97\u5230\u7684\uff0c\u5373 \\(d - h\\) \u3002 \u56e0\u6b64\u7b2c \\(k_0\\) \u6b21\u64cd\u4f5c\u540e\u5e8f\u5217\u4f1a\u53d8\u6210 \\(\\{d - a_n\\}\\) \uff0c \u7b2c \\(k_0 + 1\\) \u6b21\u64cd\u4f5c\u540e\u5e8f\u5217\u4f1a\u53d8\u6210 \\(\\{(d - h) - (d - a_n)\\}\\) \uff0c\u5373 \\(\\{a_n - h\\}\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4ee4 \\(d\\) \u8868\u793a\u6570\u5217\u4e2d\u6700\u5927\u503c\uff0c \\(h\\) \u8868\u793a\u6570\u5217\u4e2d\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\uff1a \u82e5 \\(2 | k\\) \uff0c\u5219\u5e8f\u5217\u4e3a \\(\\{a_n - h\\}\\) \uff1b\u5426\u5219\u5e8f\u5217\u4e3a \\(\\{d - a_n\\}\\) \u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/codeforces/CF1392B/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e5 + 5 ; int n ; LL k , a [ N ]; int32_t main () { int __tests ; scanf ( \"%d\" , & __tests ); while ( __tests -- ) { scanf ( \"%d %lld\" , & n , & k ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); int max1 = 1 , min1 = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] > a [ max1 ]) max1 = i ; if ( a [ i ] < a [ min1 ]) min1 = i ; } if ( k & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , a [ max1 ] - a [ i ]); } else { for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , a [ i ] - a [ min1 ]); } puts ( \"\" ); } return 0 ; } \u539f\u9898\u94fe\u63a5: B. Omkar and Infinity Clock \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/codeforces/CF1392E/","text":"\u77e5\u8bc6\u70b9 \u6784\u9020 \u9898\u610f\u7b80\u8ff0 \u00b6 \u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u4ee4\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e0d\u8d85\u8fc7 \\(10^{16}\\) \u7684\u4e00\u4e2a\u6570\u3002 \u4e00\u5171\u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4f1a\u544a\u8bc9\u4f60\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \uff0c\u53ea\u80fd\u5f80\u53f3\u6216\u5f80\u4e0b\u8d70\u7684\u67d0\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u6c42\u8fd9\u6761\u8def\u5f84 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 25\\) \uff0c \\(1 \\le q \\le 10^3\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4e00\u9053\u975e\u5e38\u6709\u610f\u601d\u7684\u6784\u9020\u9898\u3002 \u6ce8\u610f\u5230 \\(2^{2\\times 25} \\le 10^{16}\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u6761\u8def\u5f84\u7684\u548c\u90fd\u5bf9\u5e94\u7740 \\(2^2\\) \u5230 \\(2^{2n}\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a \\(2\\) \u7684\u5e42\u3002 \u56e0\u6b64\u6211\u4eec\u8fd9\u4e48\u6784\u9020\uff1a\u4ee4 $$ a_{i, j} = \\begin{cases} 2^{i + j} & 2 | i \\\\ 0 & \\textrm{otherwise} \\end{cases} $$ \u5f53 \\(n = 8\\) \u65f6\u7684\u60c5\u5f62 \u5982\u6b64\uff1a $$ \\begin{matrix} 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^3 & 2^4 & 2^5 & 2^6 & 2^7 & 2^8 & 2^9 & 2^{10} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^5 & 2^6 & 2^7 & 2^8 & 2^9 & 2^{10} & 2^{11} & 2^{12} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^7 & 2^8 & 2^9 & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^9 & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} & 2^{15} & 2^{16} \\\\ \\end{matrix} $$ \u6700\u540e\u300c\u5f97\u5230\u8def\u5f84\u548c\uff0c\u6c42\u8def\u5f84\u300d\u7684\u8fc7\u7a0b\u4e5f\u662f\u8f7b\u800c\u6613\u4e3e\u7684\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> #define LL long long const int N = 25 + 5 ; int n , q ; LL a [ N ][ N ]; void solve ( LL x ) { int curx = 1 , cury = 1 ; std :: cout << curx << ' ' << cury << '\\n' ; std :: cout . flush (); for ( int i = 3 ; i <= 2 * n ; ++ i ) { if (( curx & 1LL ) == ( x >> i & 1LL )) ++ curx ; else ++ cury ; std :: cout << curx << ' ' << cury << '\\n' ; std :: cout . flush (); } } int32_t main () { std :: cin >> n ; for ( int i = 2 ; i <= n ; i += 2 ) for ( int j = 1 ; j <= n ; ++ j ) a [ i ][ j ] = 1LL << i + j ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) std :: cout << a [ i ][ j ] << ' ' ; std :: cout << '\\n' ; std :: cout . flush (); } std :: cin >> q ; for ( int i = 1 ; i <= q ; ++ i ) { LL sum ; std :: cin >> sum ; solve ( sum ); } return 0 ; } \u539f\u9898\u94fe\u63a5: E. Omkar and Duck \u21a9","title":"CF1392E"},{"location":"posts/editorials/codeforces/CF1392E/#_1","text":"\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u4ee4\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\u4e0d\u8d85\u8fc7 \\(10^{16}\\) \u7684\u4e00\u4e2a\u6570\u3002 \u4e00\u5171\u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u4f1a\u544a\u8bc9\u4f60\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \uff0c\u53ea\u80fd\u5f80\u53f3\u6216\u5f80\u4e0b\u8d70\u7684\u67d0\u4e00\u6761\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5143\u7d20\u4e4b\u548c\uff0c\u6c42\u8fd9\u6761\u8def\u5f84 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 25\\) \uff0c \\(1 \\le q \\le 10^3\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/codeforces/CF1392E/#_2","text":"\u4e00\u9053\u975e\u5e38\u6709\u610f\u601d\u7684\u6784\u9020\u9898\u3002 \u6ce8\u610f\u5230 \\(2^{2\\times 25} \\le 10^{16}\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u6761\u8def\u5f84\u7684\u548c\u90fd\u5bf9\u5e94\u7740 \\(2^2\\) \u5230 \\(2^{2n}\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a \\(2\\) \u7684\u5e42\u3002 \u56e0\u6b64\u6211\u4eec\u8fd9\u4e48\u6784\u9020\uff1a\u4ee4 $$ a_{i, j} = \\begin{cases} 2^{i + j} & 2 | i \\\\ 0 & \\textrm{otherwise} \\end{cases} $$ \u5f53 \\(n = 8\\) \u65f6\u7684\u60c5\u5f62 \u5982\u6b64\uff1a $$ \\begin{matrix} 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^3 & 2^4 & 2^5 & 2^6 & 2^7 & 2^8 & 2^9 & 2^{10} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^5 & 2^6 & 2^7 & 2^8 & 2^9 & 2^{10} & 2^{11} & 2^{12} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^7 & 2^8 & 2^9 & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} \\\\ 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\ 2^9 & 2^{10} & 2^{11} & 2^{12} & 2^{13} & 2^{14} & 2^{15} & 2^{16} \\\\ \\end{matrix} $$ \u6700\u540e\u300c\u5f97\u5230\u8def\u5f84\u548c\uff0c\u6c42\u8def\u5f84\u300d\u7684\u8fc7\u7a0b\u4e5f\u662f\u8f7b\u800c\u6613\u4e3e\u7684\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/codeforces/CF1392E/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> #define LL long long const int N = 25 + 5 ; int n , q ; LL a [ N ][ N ]; void solve ( LL x ) { int curx = 1 , cury = 1 ; std :: cout << curx << ' ' << cury << '\\n' ; std :: cout . flush (); for ( int i = 3 ; i <= 2 * n ; ++ i ) { if (( curx & 1LL ) == ( x >> i & 1LL )) ++ curx ; else ++ cury ; std :: cout << curx << ' ' << cury << '\\n' ; std :: cout . flush (); } } int32_t main () { std :: cin >> n ; for ( int i = 2 ; i <= n ; i += 2 ) for ( int j = 1 ; j <= n ; ++ j ) a [ i ][ j ] = 1LL << i + j ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) std :: cout << a [ i ][ j ] << ' ' ; std :: cout << '\\n' ; std :: cout . flush (); } std :: cin >> q ; for ( int i = 1 ; i <= q ; ++ i ) { LL sum ; std :: cin >> sum ; solve ( sum ); } return 0 ; } \u539f\u9898\u94fe\u63a5: E. Omkar and Duck \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/codeforces/CF1393D/","text":"\u77e5\u8bc6\u70b9 \u52a8\u6001\u89c4\u5212 \u60ac\u7ebf\u6cd5 \u9898\u610f\u7b80\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u6c42\u77e9\u9635\u4e2d\u6240\u6709\u7684\uff08\u53ef\u91cd\u53e0\uff09\u6bcf\u4e2a\u5143\u7d20\u5747\u76f8\u7b49\u7684\u659c \\(45^{\\circ}\\) \u7684\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u7684\u603b\u4e2a\u6570 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n, m \\le 2\\cdot 10^3\\) \u3002 \u4e00\u4e9b\u300c\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\u300d\u548c\u300c\u4e0d\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\u300d\u7684\u4f8b\u5b50 \u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\uff1a \u4e0d\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\uff1a \u89e3\u9898\u601d\u8def \u00b6 \u8bbe \\(f(i, j)\\) \u8868\u793a\u4ee5 \\((i, j)\\) \u4e3a\u6700\u4e0b\u65b9\u7684\u8fb9\u754c\uff0c\u6700\u5927\u7684\u5408\u6cd5\u7684\u6b63\u65b9\u5f62\uff0c\u6b64\u8fb9\u754c\u5230\u6b63\u65b9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002 \u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u4e3a \\(\\textrm{ans} = \\sum_{i = 1}^{n}\\sum_{j = 1}^{m}f(i, j)\\) \u3002 \u5982\u679c \\((i, j)\\) \u80fd\u88ab\u5de6\u4e0a\u65b9\u533a\u57df\u62d3\u5c55\u51fa\u6765\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u6ee1\u8db3 \\(A_{i, j} = A_{i - 1, j - 1} = A_{i - 1, j} = A_{i - 1, j + 1} = A_{i - 2, j}\\) \u3002 \u9012\u63a8\u5f0f\u5373\u4e3a \\(f(i, j) = \\min\\{f(i - 1, j - 1), f(i - 1, j), f(i - 2, j)\\} + 1\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e3 + 5 ; const int M = 2e3 + 5 ; int n , m , f [ N ][ M ], ans ; char a [ N ][ M ]; int32_t main () { io :: read ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s\" , a [ i ] + 1 ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) { f [ i ][ j ] = 1 ; if ( 2 < i && 1 < j && j < m && a [ i ][ j ] == a [ i - 1 ][ j - 1 ] && a [ i ][ j ] == a [ i - 1 ][ j ] && a [ i ][ j ] == a [ i - 1 ][ j + 1 ] && a [ i ][ j ] == a [ i - 2 ][ j ]) f [ i ][ j ] = std :: min ( f [ i - 1 ][ j - 1 ], std :: min ( f [ i - 1 ][ j + 1 ], f [ i - 2 ][ j ])) + 1 ; ans += f [ i ][ j ]; } io :: write ( ans ); return 0 ; } \u539f\u9898\u94fe\u63a5: D. Rarity and New Dress \u21a9","title":"CF1393D"},{"location":"posts/editorials/codeforces/CF1393D/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u6c42\u77e9\u9635\u4e2d\u6240\u6709\u7684\uff08\u53ef\u91cd\u53e0\uff09\u6bcf\u4e2a\u5143\u7d20\u5747\u76f8\u7b49\u7684\u659c \\(45^{\\circ}\\) \u7684\u6b63\u65b9\u5f62\u7684\u8fb9\u957f\u7684\u603b\u4e2a\u6570 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n, m \\le 2\\cdot 10^3\\) \u3002 \u4e00\u4e9b\u300c\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\u300d\u548c\u300c\u4e0d\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\u300d\u7684\u4f8b\u5b50 \u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\uff1a \u4e0d\u5408\u6cd5\u7684\u659c\u6b63\u65b9\u5f62\uff1a","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/codeforces/CF1393D/#_2","text":"\u8bbe \\(f(i, j)\\) \u8868\u793a\u4ee5 \\((i, j)\\) \u4e3a\u6700\u4e0b\u65b9\u7684\u8fb9\u754c\uff0c\u6700\u5927\u7684\u5408\u6cd5\u7684\u6b63\u65b9\u5f62\uff0c\u6b64\u8fb9\u754c\u5230\u6b63\u65b9\u5f62\u4e2d\u5fc3\u7684\u8ddd\u79bb\u3002 \u4e0d\u96be\u53d1\u73b0\u7b54\u6848\u4e3a \\(\\textrm{ans} = \\sum_{i = 1}^{n}\\sum_{j = 1}^{m}f(i, j)\\) \u3002 \u5982\u679c \\((i, j)\\) \u80fd\u88ab\u5de6\u4e0a\u65b9\u533a\u57df\u62d3\u5c55\u51fa\u6765\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u6ee1\u8db3 \\(A_{i, j} = A_{i - 1, j - 1} = A_{i - 1, j} = A_{i - 1, j + 1} = A_{i - 2, j}\\) \u3002 \u9012\u63a8\u5f0f\u5373\u4e3a \\(f(i, j) = \\min\\{f(i - 1, j - 1), f(i - 1, j), f(i - 2, j)\\} + 1\\) \u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/codeforces/CF1393D/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e3 + 5 ; const int M = 2e3 + 5 ; int n , m , f [ N ][ M ], ans ; char a [ N ][ M ]; int32_t main () { io :: read ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s\" , a [ i ] + 1 ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) { f [ i ][ j ] = 1 ; if ( 2 < i && 1 < j && j < m && a [ i ][ j ] == a [ i - 1 ][ j - 1 ] && a [ i ][ j ] == a [ i - 1 ][ j ] && a [ i ][ j ] == a [ i - 1 ][ j + 1 ] && a [ i ][ j ] == a [ i - 2 ][ j ]) f [ i ][ j ] = std :: min ( f [ i - 1 ][ j - 1 ], std :: min ( f [ i - 1 ][ j + 1 ], f [ i - 2 ][ j ])) + 1 ; ans += f [ i ][ j ]; } io :: write ( ans ); return 0 ; } \u539f\u9898\u94fe\u63a5: D. Rarity and New Dress \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/codeforces/CF609D/","text":"\u77e5\u8bc6\u70b9 \u4e8c\u5206 two pointers \u524d\u7f00\u548c \u9898\u610f\u7b80\u8ff0 \u00b6 \u4f60\u5728 \\(n\\) \u5929\u7684\u65f6\u95f4\u5185\u6709 \\(m\\) \u4e2a\u7269\u54c1\u4f9b\u4f60\u8d2d\u4e70\u3002\u4f60\u6709 \\(s\\) \u5143\u4eba\u6c11\u5e01\uff0c\u4f46\u7269\u54c1\u8981\u4e48\u53ea\u80fd\u7528\u7f8e\u5143\u652f\u4ed8\uff08 \\(t_i = 1\\) \uff09\u3001\u8981\u4e48\u53ea\u80fd\u7528\u82f1\u9551\u652f\u4ed8\uff08 \\(t_i = 2\\) \uff09\u3002 \u7ed9\u5b9a\u8fd9 \\(n\\) \u5929\u5185\u6bcf\u5929\u4eba\u6c11\u5e01\u5bf9\u7f8e\u5143\u7684\u6c47\u7387 \\(a_i\\) \u3001\u5bf9\u82f1\u9551\u7684\u6c47\u7387 \\(b_i\\) \uff0c\u4ee5\u53ca\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u683c \\(c_i\\) \uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u5929\u4e70\u591a\u4e2a\u7269\u54c1\u3002\u6c42\u4e70\u5230 \\(k\\) \u4e2a\u7269\u54c1\u6240\u7528\u6700\u5c11\u5929\u6570\uff1b\u82e5\u4e70\u4e0d\u5230 \\(k\\) \u4e2a\u7269\u54c1\uff0c\u8f93\u51fa -1 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le k \\le m \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le s \\le 10^9\\) \uff0c \\(1 \\le a_i, b_i, c_i \\le 10^6\\) \uff0c \\(t_i \\in \\{1, 2\\}\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4e0d\u96be\u770b\u51fa\u4e8c\u5206\u6700\u5c11\u5929\u6570\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u5b9e\u73b0 check() \u51fd\u6570\u3002 \u663e\u7136\uff0c\u6211\u4eec\u662f\u5728\u67d0\u5929\u6700\u5212\u7b97\u7684\u65f6\u5019\u53bb\u6362\u7b97\u4e24\u79cd\u8d27\u5e01\uff0c\u7136\u540e\u5728\u5f53\u5929\u4e70\u5f88\u591a\u5f88\u591a\u4e1c\u897f\u3002 check() \u4f7f\u7528\u7684\u662f\u7c7b\u4f3c\u4e8e two pointers \u7684\u505a\u6cd5\uff0c\u5148\u5047\u8bbe\u5168\u90e8\u6362\u6210\u7f8e\u5143\uff0c \u6b64\u65f6 \\(i_1\\) \u6307\u5411\u6700\u591a\u80fd\u4e70\u5230\u7684\u7f8e\u5143\u5546\u54c1\u7684\u4f4d\u7f6e\uff0c \\(i_2\\) \u6307\u5411\u82f1\u9551\u5546\u54c1\u7684\u5934\u90e8\u3002 \u7136\u540e\u5728 \\(i_1\\) \u9012\u51cf\u7684\u540c\u65f6 \\(i_2\\) \u5c3d\u53ef\u80fd\u9012\u589e\uff0c\u6bcf\u6b21\u770b \\(i_1 + i_2\\) \u80fd\u5426\u4e0d\u5c0f\u4e8e \\(k\\) \u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int inf = 0x3f3f3f3f ; const int N = 2e5 + 5 ; const int M = 2e5 + 5 ; int n , m , k , s , a [ N ] = { inf }, b [ N ] = { inf }, c [ M ], mind [ N ], minp [ N ]; LL sd [ N ], sp [ N ]; int i1 , i2 , sizd , sizp , d [ M ], p [ M ]; bool check ( int x ) { i1 = i2 = 0 ; for ( i1 = 1 ; i1 <= sizd && sd [ i1 ] * a [ mind [ x ]] <= s ; ++ i1 ); -- i1 ; for ( ; i1 >= 0 ; -- i1 ) { for ( ; i2 <= sizp && sd [ i1 ] * a [ mind [ x ]] + sp [ i2 ] * b [ minp [ x ]] <= s ; ++ i2 ); -- i2 ; if ( i1 + i2 >= k ) return 1 ; } return 0 ; } bool cmp ( int xx , int yy ) { return c [ xx ] < c [ yy ]; } int32_t main () { io :: read ( n , m , k , s ); for ( int i = 1 ; i <= n ; ++ i ) { io :: read ( a [ i ]); if ( a [ i ] < a [ mind [ i - 1 ]]) mind [ i ] = i ; else mind [ i ] = mind [ i - 1 ]; } for ( int i = 1 ; i <= n ; ++ i ) { io :: read ( b [ i ]); if ( b [ i ] < b [ minp [ i - 1 ]]) minp [ i ] = i ; else minp [ i ] = minp [ i - 1 ]; } for ( int i = 1 ; i <= m ; ++ i ) { int t ; io :: read ( t , c [ i ]); if ( t == 1 ) d [ ++ sizd ] = i ; else p [ ++ sizp ] = i ; } std :: sort ( d + 1 , d + sizd + 1 , cmp ); std :: sort ( p + 1 , p + sizp + 1 , cmp ); for ( int i = 1 ; i <= sizd ; ++ i ) sd [ i ] = sd [ i - 1 ] + c [ d [ i ]]; for ( int i = 1 ; i <= sizp ; ++ i ) sp [ i ] = sp [ i - 1 ] + c [ p [ i ]]; int l = 1 , r = n , ans = - 1 ; while ( l <= r ) { int mid = l + r + 1 >> 1 ; if ( check ( mid )) { ans = mid ; r = mid - 1 ; } else l = mid + 1 ; } if ( ans == - 1 ) puts ( \"-1\" ); else { io :: write ( ans , '\\n' ); check ( ans ); for ( int i = 1 ; i <= i1 && i <= k ; ++ i ) io :: write ( d [ i ], ' ' , mind [ ans ], '\\n' ); for ( int i = 1 ; i1 + i <= k ; ++ i ) io :: write ( p [ i ], ' ' , minp [ ans ], '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: D. Gadgets for dollars and pounds \u21a9","title":"CF609D"},{"location":"posts/editorials/codeforces/CF609D/#_1","text":"\u4f60\u5728 \\(n\\) \u5929\u7684\u65f6\u95f4\u5185\u6709 \\(m\\) \u4e2a\u7269\u54c1\u4f9b\u4f60\u8d2d\u4e70\u3002\u4f60\u6709 \\(s\\) \u5143\u4eba\u6c11\u5e01\uff0c\u4f46\u7269\u54c1\u8981\u4e48\u53ea\u80fd\u7528\u7f8e\u5143\u652f\u4ed8\uff08 \\(t_i = 1\\) \uff09\u3001\u8981\u4e48\u53ea\u80fd\u7528\u82f1\u9551\u652f\u4ed8\uff08 \\(t_i = 2\\) \uff09\u3002 \u7ed9\u5b9a\u8fd9 \\(n\\) \u5929\u5185\u6bcf\u5929\u4eba\u6c11\u5e01\u5bf9\u7f8e\u5143\u7684\u6c47\u7387 \\(a_i\\) \u3001\u5bf9\u82f1\u9551\u7684\u6c47\u7387 \\(b_i\\) \uff0c\u4ee5\u53ca\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u683c \\(c_i\\) \uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u5929\u4e70\u591a\u4e2a\u7269\u54c1\u3002\u6c42\u4e70\u5230 \\(k\\) \u4e2a\u7269\u54c1\u6240\u7528\u6700\u5c11\u5929\u6570\uff1b\u82e5\u4e70\u4e0d\u5230 \\(k\\) \u4e2a\u7269\u54c1\uff0c\u8f93\u51fa -1 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le k \\le m \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le s \\le 10^9\\) \uff0c \\(1 \\le a_i, b_i, c_i \\le 10^6\\) \uff0c \\(t_i \\in \\{1, 2\\}\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/codeforces/CF609D/#_2","text":"\u4e0d\u96be\u770b\u51fa\u4e8c\u5206\u6700\u5c11\u5929\u6570\uff0c\u7136\u540e\u8003\u8651\u600e\u4e48\u5b9e\u73b0 check() \u51fd\u6570\u3002 \u663e\u7136\uff0c\u6211\u4eec\u662f\u5728\u67d0\u5929\u6700\u5212\u7b97\u7684\u65f6\u5019\u53bb\u6362\u7b97\u4e24\u79cd\u8d27\u5e01\uff0c\u7136\u540e\u5728\u5f53\u5929\u4e70\u5f88\u591a\u5f88\u591a\u4e1c\u897f\u3002 check() \u4f7f\u7528\u7684\u662f\u7c7b\u4f3c\u4e8e two pointers \u7684\u505a\u6cd5\uff0c\u5148\u5047\u8bbe\u5168\u90e8\u6362\u6210\u7f8e\u5143\uff0c \u6b64\u65f6 \\(i_1\\) \u6307\u5411\u6700\u591a\u80fd\u4e70\u5230\u7684\u7f8e\u5143\u5546\u54c1\u7684\u4f4d\u7f6e\uff0c \\(i_2\\) \u6307\u5411\u82f1\u9551\u5546\u54c1\u7684\u5934\u90e8\u3002 \u7136\u540e\u5728 \\(i_1\\) \u9012\u51cf\u7684\u540c\u65f6 \\(i_2\\) \u5c3d\u53ef\u80fd\u9012\u589e\uff0c\u6bcf\u6b21\u770b \\(i_1 + i_2\\) \u80fd\u5426\u4e0d\u5c0f\u4e8e \\(k\\) \u5373\u53ef\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/codeforces/CF609D/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int inf = 0x3f3f3f3f ; const int N = 2e5 + 5 ; const int M = 2e5 + 5 ; int n , m , k , s , a [ N ] = { inf }, b [ N ] = { inf }, c [ M ], mind [ N ], minp [ N ]; LL sd [ N ], sp [ N ]; int i1 , i2 , sizd , sizp , d [ M ], p [ M ]; bool check ( int x ) { i1 = i2 = 0 ; for ( i1 = 1 ; i1 <= sizd && sd [ i1 ] * a [ mind [ x ]] <= s ; ++ i1 ); -- i1 ; for ( ; i1 >= 0 ; -- i1 ) { for ( ; i2 <= sizp && sd [ i1 ] * a [ mind [ x ]] + sp [ i2 ] * b [ minp [ x ]] <= s ; ++ i2 ); -- i2 ; if ( i1 + i2 >= k ) return 1 ; } return 0 ; } bool cmp ( int xx , int yy ) { return c [ xx ] < c [ yy ]; } int32_t main () { io :: read ( n , m , k , s ); for ( int i = 1 ; i <= n ; ++ i ) { io :: read ( a [ i ]); if ( a [ i ] < a [ mind [ i - 1 ]]) mind [ i ] = i ; else mind [ i ] = mind [ i - 1 ]; } for ( int i = 1 ; i <= n ; ++ i ) { io :: read ( b [ i ]); if ( b [ i ] < b [ minp [ i - 1 ]]) minp [ i ] = i ; else minp [ i ] = minp [ i - 1 ]; } for ( int i = 1 ; i <= m ; ++ i ) { int t ; io :: read ( t , c [ i ]); if ( t == 1 ) d [ ++ sizd ] = i ; else p [ ++ sizp ] = i ; } std :: sort ( d + 1 , d + sizd + 1 , cmp ); std :: sort ( p + 1 , p + sizp + 1 , cmp ); for ( int i = 1 ; i <= sizd ; ++ i ) sd [ i ] = sd [ i - 1 ] + c [ d [ i ]]; for ( int i = 1 ; i <= sizp ; ++ i ) sp [ i ] = sp [ i - 1 ] + c [ p [ i ]]; int l = 1 , r = n , ans = - 1 ; while ( l <= r ) { int mid = l + r + 1 >> 1 ; if ( check ( mid )) { ans = mid ; r = mid - 1 ; } else l = mid + 1 ; } if ( ans == - 1 ) puts ( \"-1\" ); else { io :: write ( ans , '\\n' ); check ( ans ); for ( int i = 1 ; i <= i1 && i <= k ; ++ i ) io :: write ( d [ i ], ' ' , mind [ ans ], '\\n' ); for ( int i = 1 ; i1 + i <= k ; ++ i ) io :: write ( p [ i ], ' ' , minp [ ans ], '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: D. Gadgets for dollars and pounds \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/codeforces/CF609E/","text":"\u77e5\u8bc6\u70b9 \u6700\u5c0f\u751f\u6210\u6811 MST LCA Kruskal \u500d\u589e \u9898\u610f\u7b80\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\u7684\u56fe\uff0c\u5bf9\u5176\u4e2d\u6bcf\u6761\u8fb9\uff0c\u6c42\u5305\u542b\u8fd9\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\u4fdd\u8bc1\u56fe\u4e2d\u65e0\u81ea\u73af 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n, m \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le w_i \\le 10^9\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u4e4d\u4e00\u770b\u5f88\u4e0d\u53ef\u505a\uff0c\u4f46\u662f\u60f3\u901a\u4e86\uff0c\u5c31\u662f\u9053\u6a21\u677f\u9898\u4e86\u5427\u3002 \u9996\u5148\u5148\u6c42\u51fa\u539f\u56fe\u7684\u4efb\u610f\u4e00\u4e2a MST\uff0c\u628a MST \u4e0a\u7684\u6240\u6709\u8fb9\u90fd\u6807\u8bb0\u4e00\u4e0b\u3002 \u5bf9\u4e8e\u6bcf\u6761\u8fb9 \\((u, v)\\) \uff0c\u5982\u679c\u5728 MST \u4e0a\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa MST \u7684\u8fb9\u6743\u548c\u5373\u53ef\uff1b \u5426\u5219\u627e\u5230 \\(u\\) \u5230 \\(v\\) \u5728\u6811\u4e0a\u7684\u90a3\u6761\u94fe\u4e0a\u7684\u6700\u5927\u8fb9\u6743\uff0c\u51cf\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u52a0\u4e0a \\((u, v)\\) \u7684\u8fb9\u6743\u5373\u53ef\u3002 \uff08\u8fd9\u6837\u4e5f\u53ef\u4ee5 \\(O(m\\log n)\\) \u6c42\u6b21\u5c0f\u751f\u6210\u6811\uff1f\uff09 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e5 + 5 ; const int M = 2e5 + 5 ; int n , m , cnt , first [ N ]; int uu [ M ], vv [ M ], ww [ M ], rk [ N ], vis [ N ]; int lg2 [ N ] = { - 1 }, dep [ N ], f [ N ][ 20 ], w [ N ][ 20 ]; LL sum ; struct EDGE { int to , _next , wt ; } e [ M * 2 ]; struct DSU { static const int MS = N ; int fa [ MS ], siz [ MS ]; int find ( int x ) { return x == fa [ x ] ? x : fa [ x ] = find ( fa [ x ]); } void join ( int x , int y ) { int px = find ( x ), py = find ( y ); if ( px != py ) { if ( siz [ px ] < siz [ py ]) std :: swap ( px , py ); fa [ py ] = px ; siz [ px ] += siz [ py ]; } } bool check ( int x , int y ) { return find ( x ) == find ( y ); } void init ( int ss ) { for ( int i = 1 ; i <= ss ; ++ i ) fa [ i ] = i , siz [ i ] = 1 ; } } dsu ; void add ( int u , int v , int wei ) { e [ cnt ]. to = v , e [ cnt ]. _next = first [ u ], e [ cnt ]. wt = wei ; first [ u ] = cnt ++ ; } void connect ( int u , int v , int wei ) { add ( u , v , wei ), add ( v , u , wei ); } bool cmp ( int ii , int jj ) { return ww [ ii ] < ww [ jj ]; } void Kruskal () { int cntEdge = 0 ; for ( int i = 1 ; i <= m ; ++ i ) rk [ i ] = i ; dsu . init ( n ); std :: sort ( rk + 1 , rk + m + 1 , cmp ); for ( int i = 1 ; i <= m ; ++ i ) { if ( cntEdge == n - 1 ) break ; if ( dsu . check ( uu [ rk [ i ]], vv [ rk [ i ]])) continue ; sum += ww [ rk [ i ]], ++ cntEdge ; dsu . join ( uu [ rk [ i ]], vv [ rk [ i ]]); connect ( uu [ rk [ i ]], vv [ rk [ i ]], ww [ rk [ i ]]); vis [ rk [ i ]] = 1 ; } } void dfs ( int x , int p , int weight ) { dep [ x ] = dep [ p ] + 1 ; f [ x ][ 0 ] = p , w [ x ][ 0 ] = weight ; for ( int i = 1 ; i <= lg2 [ dep [ x ]]; ++ i ) { f [ x ][ i ] = f [ f [ x ][ i - 1 ]][ i - 1 ]; w [ x ][ i ] = std :: max ( w [ x ][ i - 1 ], w [ f [ x ][ i - 1 ]][ i - 1 ]); } for ( int i = first [ x ]; ~ i ; i = e [ i ]. _next ) { int y = e [ i ]. to ; if ( y == p ) continue ; dfs ( y , x , e [ i ]. wt ); } } int solve ( int u , int v ) { if ( dep [ u ] < dep [ v ]) std :: swap ( u , v ); int tmp = dep [ u ] - dep [ v ], ans = - 1 ; for ( int i = 0 ; i <= lg2 [ dep [ u ]]; ++ i ) if ( tmp >> i & 1 ) { ans = std :: max ( ans , w [ u ][ i ]); u = f [ u ][ i ]; } if ( u == v ) return ans ; for ( int i = lg2 [ dep [ u ]]; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) { ans = std :: max ( ans , w [ u ][ i ]); ans = std :: max ( ans , w [ v ][ i ]); u = f [ u ][ i ], v = f [ v ][ i ]; } return std :: max ( ans , std :: max ( w [ u ][ 0 ], w [ v ][ 0 ])); } int32_t main () { io :: read ( n , m ); memset ( first , - 1 , sizeof ( first )); for ( int i = 1 ; i <= n ; ++ i ) lg2 [ i ] = lg2 [ i >> 1 ] + 1 ; for ( int i = 1 ; i <= m ; ++ i ) io :: read ( uu [ i ], vv [ i ], ww [ i ]); Kruskal (); dfs ( 1 , 0 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { if ( vis [ i ]) io :: write ( sum , '\\n' ); else io :: write ( sum - solve ( uu [ i ], vv [ i ]) + ww [ i ], '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: E. Minimum spanning tree for each edge \u21a9","title":"CF609E"},{"location":"posts/editorials/codeforces/CF609E/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(m\\) \u6761\u8fb9\u7684\u56fe\uff0c\u5bf9\u5176\u4e2d\u6bcf\u6761\u8fb9\uff0c\u6c42\u5305\u542b\u8fd9\u6761\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u548c\u3002\u4fdd\u8bc1\u56fe\u4e2d\u65e0\u81ea\u73af 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le n, m \\le 2\\cdot 10^5\\) \uff0c \\(1 \\le w_i \\le 10^9\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/codeforces/CF609E/#_2","text":"\u4e4d\u4e00\u770b\u5f88\u4e0d\u53ef\u505a\uff0c\u4f46\u662f\u60f3\u901a\u4e86\uff0c\u5c31\u662f\u9053\u6a21\u677f\u9898\u4e86\u5427\u3002 \u9996\u5148\u5148\u6c42\u51fa\u539f\u56fe\u7684\u4efb\u610f\u4e00\u4e2a MST\uff0c\u628a MST \u4e0a\u7684\u6240\u6709\u8fb9\u90fd\u6807\u8bb0\u4e00\u4e0b\u3002 \u5bf9\u4e8e\u6bcf\u6761\u8fb9 \\((u, v)\\) \uff0c\u5982\u679c\u5728 MST \u4e0a\uff0c\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa MST \u7684\u8fb9\u6743\u548c\u5373\u53ef\uff1b \u5426\u5219\u627e\u5230 \\(u\\) \u5230 \\(v\\) \u5728\u6811\u4e0a\u7684\u90a3\u6761\u94fe\u4e0a\u7684\u6700\u5927\u8fb9\u6743\uff0c\u51cf\u53bb\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\uff0c\u52a0\u4e0a \\((u, v)\\) \u7684\u8fb9\u6743\u5373\u53ef\u3002 \uff08\u8fd9\u6837\u4e5f\u53ef\u4ee5 \\(O(m\\log n)\\) \u6c42\u6b21\u5c0f\u751f\u6210\u6811\uff1f\uff09","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/codeforces/CF609E/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 #include <bits/stdc++.h> #define LL long long namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 2e5 + 5 ; const int M = 2e5 + 5 ; int n , m , cnt , first [ N ]; int uu [ M ], vv [ M ], ww [ M ], rk [ N ], vis [ N ]; int lg2 [ N ] = { - 1 }, dep [ N ], f [ N ][ 20 ], w [ N ][ 20 ]; LL sum ; struct EDGE { int to , _next , wt ; } e [ M * 2 ]; struct DSU { static const int MS = N ; int fa [ MS ], siz [ MS ]; int find ( int x ) { return x == fa [ x ] ? x : fa [ x ] = find ( fa [ x ]); } void join ( int x , int y ) { int px = find ( x ), py = find ( y ); if ( px != py ) { if ( siz [ px ] < siz [ py ]) std :: swap ( px , py ); fa [ py ] = px ; siz [ px ] += siz [ py ]; } } bool check ( int x , int y ) { return find ( x ) == find ( y ); } void init ( int ss ) { for ( int i = 1 ; i <= ss ; ++ i ) fa [ i ] = i , siz [ i ] = 1 ; } } dsu ; void add ( int u , int v , int wei ) { e [ cnt ]. to = v , e [ cnt ]. _next = first [ u ], e [ cnt ]. wt = wei ; first [ u ] = cnt ++ ; } void connect ( int u , int v , int wei ) { add ( u , v , wei ), add ( v , u , wei ); } bool cmp ( int ii , int jj ) { return ww [ ii ] < ww [ jj ]; } void Kruskal () { int cntEdge = 0 ; for ( int i = 1 ; i <= m ; ++ i ) rk [ i ] = i ; dsu . init ( n ); std :: sort ( rk + 1 , rk + m + 1 , cmp ); for ( int i = 1 ; i <= m ; ++ i ) { if ( cntEdge == n - 1 ) break ; if ( dsu . check ( uu [ rk [ i ]], vv [ rk [ i ]])) continue ; sum += ww [ rk [ i ]], ++ cntEdge ; dsu . join ( uu [ rk [ i ]], vv [ rk [ i ]]); connect ( uu [ rk [ i ]], vv [ rk [ i ]], ww [ rk [ i ]]); vis [ rk [ i ]] = 1 ; } } void dfs ( int x , int p , int weight ) { dep [ x ] = dep [ p ] + 1 ; f [ x ][ 0 ] = p , w [ x ][ 0 ] = weight ; for ( int i = 1 ; i <= lg2 [ dep [ x ]]; ++ i ) { f [ x ][ i ] = f [ f [ x ][ i - 1 ]][ i - 1 ]; w [ x ][ i ] = std :: max ( w [ x ][ i - 1 ], w [ f [ x ][ i - 1 ]][ i - 1 ]); } for ( int i = first [ x ]; ~ i ; i = e [ i ]. _next ) { int y = e [ i ]. to ; if ( y == p ) continue ; dfs ( y , x , e [ i ]. wt ); } } int solve ( int u , int v ) { if ( dep [ u ] < dep [ v ]) std :: swap ( u , v ); int tmp = dep [ u ] - dep [ v ], ans = - 1 ; for ( int i = 0 ; i <= lg2 [ dep [ u ]]; ++ i ) if ( tmp >> i & 1 ) { ans = std :: max ( ans , w [ u ][ i ]); u = f [ u ][ i ]; } if ( u == v ) return ans ; for ( int i = lg2 [ dep [ u ]]; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) { ans = std :: max ( ans , w [ u ][ i ]); ans = std :: max ( ans , w [ v ][ i ]); u = f [ u ][ i ], v = f [ v ][ i ]; } return std :: max ( ans , std :: max ( w [ u ][ 0 ], w [ v ][ 0 ])); } int32_t main () { io :: read ( n , m ); memset ( first , - 1 , sizeof ( first )); for ( int i = 1 ; i <= n ; ++ i ) lg2 [ i ] = lg2 [ i >> 1 ] + 1 ; for ( int i = 1 ; i <= m ; ++ i ) io :: read ( uu [ i ], vv [ i ], ww [ i ]); Kruskal (); dfs ( 1 , 0 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { if ( vis [ i ]) io :: write ( sum , '\\n' ); else io :: write ( sum - solve ( uu [ i ], vv [ i ]) + ww [ i ], '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: E. Minimum spanning tree for each edge \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/editorials/poj/1961/","text":"\u77e5\u8bc6\u70b9 \u524d\u7f00\u51fd\u6570 \u9898\u610f\u7b80\u8ff0 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c \\(\\forall i \\in [1, n]\\) \uff0c\u6c42 $$ k \\in (1, n], \\text{s.t. } \\exists x \\in \\Sigma^{\\star}, S_i = x^k $$ \u591a\u7ec4\u6570\u636e 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(2 \\le n \\le 10^6\\) \u3002 \u89e3\u9898\u601d\u8def \u00b6 \u5f15\u7406 \u5bf9\u4efb\u610f\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6052\u6709 \\(x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u3002 \u8bc1\u660e \u5148\u8bc1\u660e \\(x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \uff1a \\(\\because k\\cdot\\left|x\\right| = n\\) \u4e14 \\(\\left|x\\right| \\ge 1\\) \\(\\therefore k | n\\) \u82e5 \\(x^k = S\\) \uff0c\u5219 \\(\\forall i \\in [1, \\dfrac{n}{k} - 1], S[(i - 1)\\cdot k + 1..i\\cdot k] = S[i\\cdot k + 1..(i + 1)\\cdot k]\\) \u3002 \u5219 \\(S[1..n - k] = S[1..k]^{\\dfrac{n}{k} - 1} = S[k + 1..n]\\) \u3002 \\(\\therefore x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u518d\u8bc1\u660e \\(x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \uff1a \\(\\because k | n\\) \\(\\therefore k | (n - k)\\) \\(\\therefore k \\le n - k\\) \\(\\because S[1..n - k] = S[k + 1..n]\\) \u4e14 \\(k \\le n - k\\) \\(\\therefore S[1..k] = S[k + 1..2k]\\) \u4ee5\u6b64\u7c7b\u63a8\u53ef\u5f97 \\(S[1..k] = S[k + 1..2k] = S[2k + 1..3k]\\cdots\\) \uff08\u4e25\u8c28\u8bc1\u660e\u53ef\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff09 \u6b64\u65f6\u6709 \\(x = S[1..k]\\) \u3002 \\(\\therefore x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u7efc\u4e0a\u6240\u8ff0\uff0c \\(x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u3002 \u5047\u8bbe\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u524d\u7f00 \\(S_i\\) \u6709 \\(S[1..i - k] = S[k + 1..i]\\) \uff0c\u7531\u5f15\u7406\u77e5 \\(k\\) \u5373\u4e3a\u5faa\u73af\u8282\u3002 \u6ce8\u610f\u5230\u6b64\u65f6 \\(i - k \\in \\pi^{\\star}[i]\\) \uff0c\u9898\u4e2d\u8981\u6c42\u6700\u77ed\u5468\u671f\uff0c\u5219\u6bcf\u5468\u671f\u5355\u4f4d\u957f\u5ea6\u8981\u6700\u957f\uff0c\u5373 \\(i - k\\) \u5e94\u53d6 \\(\\pi[i]\\) \u3002 \u8fd8\u8981\u6ee1\u8db3 \\(k | i\\) \uff0c\u5373 \\((i - \\pi[i]) | i\\) \uff1b\u6b64\u65f6 \\(\\dfrac{i - \\pi[i]}{i}\\) \u5373\u4e3a\u6700\u957f\u5468\u671f\u3002 \u5594\uff0c \\(\\pi[i] = 0\\) \u7684\u60c5\u51b5\u6211\u4eec\u5e94\u8be5\u8df3\u8fc7\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cstdio> #define LL long long const int N = 1e6 + 5 ; int n , kase , pi [ N ]; char S [ N ]; int main () { while ( scanf ( \"%d\" , & n ) && n ) { scanf ( \"%s\" , S + 1 ); for ( int i = 2 , k = 0 ; i <= n ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } printf ( \"Test case #%d \\n \" , ++ kase ); for ( int i = 2 ; i <= n ; ++ i ) { if ( i % ( i - pi [ i ]) == 0 && i != i - pi [ i ]) printf ( \"%d %d \\n \" , i , i / ( i - pi [ i ])); } putchar ( '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: Period \u21a9","title":"1961 - Period"},{"location":"posts/editorials/poj/1961/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c \\(\\forall i \\in [1, n]\\) \uff0c\u6c42 $$ k \\in (1, n], \\text{s.t. } \\exists x \\in \\Sigma^{\\star}, S_i = x^k $$ \u591a\u7ec4\u6570\u636e 1 \u3002 \u6570\u636e\u8303\u56f4\uff1a \\(2 \\le n \\le 10^6\\) \u3002","title":"\u9898\u610f\u7b80\u8ff0"},{"location":"posts/editorials/poj/1961/#_2","text":"\u5f15\u7406 \u5bf9\u4efb\u610f\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6052\u6709 \\(x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u3002 \u8bc1\u660e \u5148\u8bc1\u660e \\(x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \uff1a \\(\\because k\\cdot\\left|x\\right| = n\\) \u4e14 \\(\\left|x\\right| \\ge 1\\) \\(\\therefore k | n\\) \u82e5 \\(x^k = S\\) \uff0c\u5219 \\(\\forall i \\in [1, \\dfrac{n}{k} - 1], S[(i - 1)\\cdot k + 1..i\\cdot k] = S[i\\cdot k + 1..(i + 1)\\cdot k]\\) \u3002 \u5219 \\(S[1..n - k] = S[1..k]^{\\dfrac{n}{k} - 1} = S[k + 1..n]\\) \u3002 \\(\\therefore x^k = S \\Longrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u518d\u8bc1\u660e \\(x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \uff1a \\(\\because k | n\\) \\(\\therefore k | (n - k)\\) \\(\\therefore k \\le n - k\\) \\(\\because S[1..n - k] = S[k + 1..n]\\) \u4e14 \\(k \\le n - k\\) \\(\\therefore S[1..k] = S[k + 1..2k]\\) \u4ee5\u6b64\u7c7b\u63a8\u53ef\u5f97 \\(S[1..k] = S[k + 1..2k] = S[2k + 1..3k]\\cdots\\) \uff08\u4e25\u8c28\u8bc1\u660e\u53ef\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff09 \u6b64\u65f6\u6709 \\(x = S[1..k]\\) \u3002 \\(\\therefore x^k = S \\Longleftarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u7efc\u4e0a\u6240\u8ff0\uff0c \\(x^k = S \\Longleftrightarrow [k | n] \\land [S[1..n - k] = S[k + 1..n]]\\) \u3002 \u5047\u8bbe\u5bf9\u4e8e\u67d0\u4e00\u4e2a\u524d\u7f00 \\(S_i\\) \u6709 \\(S[1..i - k] = S[k + 1..i]\\) \uff0c\u7531\u5f15\u7406\u77e5 \\(k\\) \u5373\u4e3a\u5faa\u73af\u8282\u3002 \u6ce8\u610f\u5230\u6b64\u65f6 \\(i - k \\in \\pi^{\\star}[i]\\) \uff0c\u9898\u4e2d\u8981\u6c42\u6700\u77ed\u5468\u671f\uff0c\u5219\u6bcf\u5468\u671f\u5355\u4f4d\u957f\u5ea6\u8981\u6700\u957f\uff0c\u5373 \\(i - k\\) \u5e94\u53d6 \\(\\pi[i]\\) \u3002 \u8fd8\u8981\u6ee1\u8db3 \\(k | i\\) \uff0c\u5373 \\((i - \\pi[i]) | i\\) \uff1b\u6b64\u65f6 \\(\\dfrac{i - \\pi[i]}{i}\\) \u5373\u4e3a\u6700\u957f\u5468\u671f\u3002 \u5594\uff0c \\(\\pi[i] = 0\\) \u7684\u60c5\u51b5\u6211\u4eec\u5e94\u8be5\u8df3\u8fc7\u3002","title":"\u89e3\u9898\u601d\u8def"},{"location":"posts/editorials/poj/1961/#_3","text":"\u6838\u5fc3\u90e8\u5206\u5df2\u7528\u9ad8\u4eae\u6807\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <cstdio> #define LL long long const int N = 1e6 + 5 ; int n , kase , pi [ N ]; char S [ N ]; int main () { while ( scanf ( \"%d\" , & n ) && n ) { scanf ( \"%s\" , S + 1 ); for ( int i = 2 , k = 0 ; i <= n ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } printf ( \"Test case #%d \\n \" , ++ kase ); for ( int i = 2 ; i <= n ; ++ i ) { if ( i % ( i - pi [ i ]) == 0 && i != i - pi [ i ]) printf ( \"%d %d \\n \" , i , i / ( i - pi [ i ])); } putchar ( '\\n' ); } return 0 ; } \u539f\u9898\u94fe\u63a5: Period \u21a9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/","text":"\u8fd9\u91cc\u653e\u7f6e\u7684\u662f\u4e00\u4e9b\u6211\u7684\u5b66\u4e60\u7b14\u8bb0\u3002","title":"\u6982\u89c8"},{"location":"posts/lectures/ac-automaton/","text":"\u672c\u6587\u6bd4\u8f83\u968f\u610f\u5730\u8bb2\u89e3\u4e86\u4e00\u4e0b AC \u81ea\u52a8\u673a\u6781\u5176 fail \u6811\u7684\u6784\u5efa\u4ee5\u53ca\u5e94\u7528\uff1b\u53ef\u80fd\u4e0d\u592a\u4e25\u8c28\uff0c\u4f46\u8ffd\u6c42\u901a\u4fd7\u6613\u61c2\u3002 \u5efa\u8bae\u81ea\u5b66\u4e00\u4e0b trie \u6811\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u6211\u7684 KMP \u535a\u5ba2\uff0c\u4e5f\u8bb8\u5c31\u80fd\u6beb\u4e0d\u8d39\u529b\u5730\u770b\u61c2\u8fd9\u7bc7 AC \u81ea\u52a8\u673a\u7684\u5b66\u4e60\u7b14\u8bb0\u3002 \u5199\u5728\u524d\u9762 \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \u7531 \\(S_1, S_2, \\cdots, S_n\\) \u6784\u6210\u7684 trie \u6811\uff0c\u7528 \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u8868\u793a\uff1b \u5b57\u5178\u6811\u4e2d\u4ece\u6839\u6cbf\u7740\u8fb9\u8d70\u5230 \\(i\\) \u8282\u70b9\u6240\u5f62\u6210\u7684\u7684\u5b57\u7b26\u4e32\uff0c\u7528 \\(\\textrm{str}(i)\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807 \u4ece \\(1\\) \u5f00\u59cb \uff0ctrie \u6811\u7684 \u6839\u8282\u70b9\u7f16\u53f7\u4e3a \\(0\\) \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b \u5b9a\u4e49 \u00b6 \u7b3c\u7edf\u5730\u8bb2\uff0cAC \u81ea\u52a8\u673a\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a trie \u56fe \u52a0\u4e0a\u5f88\u591a\u7684 fail \u6307\u9488\u5f62\u6210\u7684\u7ed3\u6784\u3002 AC \u81ea\u52a8\u673a\u4e2d\u7684 fail \u6307\u9488\u5c31\u5982\u540c KMP \u7b97\u6cd5\u7684 \\(\\pi\\) \u6570\u7ec4\uff1b \u4f46\u4e0d\u540c\u7684\u662f fail \u6307\u9488\u80fd\u5728\u591a\u4e2a\u6a21\u5f0f\u4e32\u4e0a\u8fed\u4ee3\uff0c\u800c \\(\\pi\\) \u6570\u7ec4\u53ea\u80fd\u5728\u5355\u4e00\u7684\u6a21\u5f0f\u4e32\u4e0a\u8fed\u4ee3\u3002 \u6ce8\u610f\u5230\u6211\u7684\u63cf\u8ff0\u4e3a\u300c\u662f\u4e00\u4e2a trie \u56fe\u300d\uff0c\u56e0\u4e3a AC \u81ea\u52a8\u673a\u5b9e\u9645\u4e0a\u628a\u6240\u6709 \u975e\u6cd5\u72b6\u6001 \u90fd\u8fde\u5411\u4e86\u6cbf\u7740 fail \u6307\u9488\u8d70\u540e\u7684 \u5408\u6cd5\u72b6\u6001 \uff1b \u800c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u56fe\u800c\u4e0d\u662f\u5355\u7eaf\u7684\u4e00\u68f5\u6811\u3002 \u4e5f\u8bb8\u4f60\u5e76\u4e0d\u80fd\u7406\u89e3\u4e0a\u4e00\u53e5\u8bdd\uff0c\u4e0d\u8fc7\u4e0d\u8981\u7d27\uff0c\u6211\u4eec\u5148\u4ece\u300c\u57fa\u4e8e trie \u6811\u7ed3\u6784\u7684 AC \u81ea\u52a8\u673a\u300d\u7684\u7ed3\u6784\u5f00\u59cb\u8bf4\u8d77\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32\u4e3a \\(S_1, S_2, \\cdots, S_n\\) \u57fa\u4e8e trie \u6811\u7ed3\u6784\u7684 AC \u81ea\u52a8\u673a\u800c\u8a00\uff0c\u6709\uff1a \\(\\textrm{ch}[u, c]\\) \u6570\u7ec4\u3002 \u6307\u5411\u7684\u662f \\(u\\) \u8282\u70b9\uff0c\u5f80\u540e\u62d3\u5c55\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \u4e4b\u540e\u5230\u8fbe\u7684\u8282\u70b9\u3002 \\(\\text{fail}[u]\\) \u6570\u7ec4\u3002 \\(\\textrm{fail}[u]\\) \u81ea \\(u\\) \u5f00\u59cb\uff0c\u6307\u5411 \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u4e2d\u7684\u6700\u957f\u7684\uff0c\u524d\u7f00\u4e0e \\(\\textrm{str}(u)\\) \u7684\u771f\u540e\u7f00\u76f8\u7b49\u7684\u8282\u70b9\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(5\\) \u53f7\u8282\u70b9\u7684 fail \u6307\u9488\u6307\u5411\u7684\u662f \\(2\\) \u53f7\u8282\u70b9\uff0c\u56e0\u4e3a \\(\\textrm{str}(5) = \\mathtt{bab}, \\textrm{str}(2) = \\mathtt{ab}\\) \uff1b \\(\\mathtt{ab}\\) \u662f\u8fd9\u68f5 trie \u6811\u4e2d\u6700\u957f\u7684\u6ee1\u8db3\u524d\u7f00\uff08 \\(\\mathtt{ab}\\) \uff09\u4e0e \\(\\textrm{str}(5)\\) \u7684\u67d0\u4e00\u771f\u540e\u7f00\uff08 \\(\\textrm{str}(5)[2..3] = \\mathtt{ab}\\) \uff09\u76f8\u7b49\u7684\u8282\u70b9\u3002 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u4e00\u4e2a AC \u81ea\u52a8\u673a\u7684\u5efa\u7acb\u4ee5\u53ca\u4f7f\u7528\u5305\u62ec\u4e09\u4e2a\u6d41\u7a0b\uff1a\u300ctrie \u6811\u7684\u6784\u5efa\u300d\u3001\u300cfail \u6307\u9488\u7684\u8fde\u63a5\u300d\u548c\u300c\u5bf9\u4e00\u4e2a\u6587\u672c\u4e32\u8fdb\u884c\u5339\u914d\u300d\u3002 trie \u6811\u7684\u6784\u5efa \u00b6 \u521a\u624d\u6211\u4eec\u5728\u5b9a\u4e49\u4e2d\u63d0\u5230\u4e86\u300c\u57fa\u4e8e trie \u6811\u7684 AC \u81ea\u52a8\u673a\u300d\u7684\u7ed3\u6784\uff0c \u800c\u300ctrie \u6811\u8f6c\u5316\u4e3a trie \u56fe\u300d\u7684\u8fc7\u7a0b\u662f\u5728\u8fde\u63a5 fail \u6307\u9488\u7684\u65f6\u5019\u8fdb\u884c\u7684\u3002 \u7ed9\u5b9a\u4e00\u4e9b\u6a21\u5f0f\u4e32 \\(S_1, S_2, \\cdots, S_n\\) \uff0c\u8ba9\u4f60\u6784\u5efa\u51fa \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u3002 \u8b66\u544a \u82e5\u4e0d\u4f1a\u6784\u5efa trie \u6811\uff0c\u5efa\u8bae\u5148\u5b66\u4e60 trie \u6811\u4e4b\u540e\u518d\u6765\u770b\u8fd9\u7bc7\u6587\u7ae0\u3002 \u4e0b\u9762\u662f AC \u81ea\u52a8\u673a\u7684\u300c\u63d2\u5165\u300d\u90e8\u5206\u7684\u4ee3\u7801\u3002 Insert 1 2 3 4 5 6 7 8 9 void insert ( std :: string S , int id ) { int len = S . size (), u = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int & v = ch [ u ][ S [ i ] - 'a' + 1 ]; if ( ! v ) v = ++ cntNode ; u = v ; } } fail \u6307\u9488\u7684\u8fde\u63a5 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u628a \\(0\\) \u548c \\(0\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684 fail \u6307\u9488\u90fd\u8bbe\u4e3a \\(0\\) \uff08\u5373\u6839\u8282\u70b9\uff09\u3002 \u7136\u540e\u6211\u4eec\u901a\u8fc7 BFS \u6765\u5b9e\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684 fail \u6307\u9488\u7684\u8fde\u63a5\u4ee5\u53ca\u5c06 trie \u6811\u8f6c\u5316\u4e3a trie \u56fe\u7684\u8fc7\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u901a\u8fc7 BFS \u5462\uff1f \u6ce8\u610f\u5230\uff0c \\(\\textrm{fail}[u]\\) \u5728 trie \u6811\u4e0a\u7684\u6df1\u5ea6\u4e00\u5b9a\u662f\u5c0f\u4e8e\u7b49\u4e8e \\(u\\) \u5728 trie \u6811\u4e0a\u7684\u6df1\u5ea6\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BFS \u6765\u6784\u5efa\u3002 \u600e\u4e48\u6784\u5efa\u5462\uff1ftrie \u6811\u4e3a\u5565\u53d8\u6210 trie \u56fe\u4e86\u5462\uff1f \u8003\u8651 fail \u6307\u9488\u7684\u610f\u4e49\uff0c\u8868\u793a\u6700\u957f\u7684\u524d\u7f00\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u771f\u540e\u7f00\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5c1d\u8bd5\u7740\u5f80\u540e\u62d3\u5c55\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \uff1b \u5982\u679c\u5b58\u5728\u7740 \\(\\textrm{ch}[\\textrm{fail}[u], c]\\) \uff0c\u90a3\u4e48\u5f88\u663e\u7136 \\(\\textrm{fail}[\\textrm{ch}[u, c]] \\gets \\textrm{ch}[\\textrm{fail}[u], c]\\) \uff0c\u7136\u540e\u6211\u4eec\u5c06 \\(\\textrm{ch}[u, c]\\) \u653e\u8fdb\u961f\u5217\u91cc\u7b49\u5019\u7740 BFS\uff1b \u5982\u679c\u4e0d\u5b58\u5728\u5462\uff1f\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7740\u7684\u5176\u5b9e\u662f\u4e00\u4e2a \u975e\u6cd5\u72b6\u6001 \uff0c\u6211\u4eec\u5e94\u8be5\u6cbf\u7740 fail \u6307\u9488\u8df3\u81f3\u67d0\u4e00\u4e2a\u5408\u6cd5\u72b6\u6001\u3002 \u4e3a\u4e86\u7b80\u4fbf\uff0c\u6211\u4eec \u76f4\u63a5\u5c06\u8fd9\u4e9b\u975e\u6cd5\u72b6\u6001\u7b49\u4ef7\u5230 fail \u6307\u9488\u6307\u5411\u7684\u8282\u70b9 \uff01 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837 trie \u6811\u5c31\u53d8\u6210\u4e86\u4e00\u68f5 trie \u56fe\uff08\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u6307\u5411\u7236\u4eb2\uff0c\u8fd8\u6709\u6307\u5411\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u8eab\u7684\u8282\u70b9\u7684\u51fa\u8fb9\uff09\u3002 \u4e0b\u9762\u7ed9\u51fa\u7684\u662f AC \u81ea\u52a8\u673a\u7684\u6784\u5efa\u90e8\u5206\u7684\u4ee3\u7801\u3002 Build 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void build () { std :: queue < int > q ; for ( int i = 1 ; i <= C ; ++ i ) if ( ch [ 0 ][ i ]) q . push ( ch [ 0 ][ i ]); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 1 ; i <= C ; ++ i ) { int & v = ch [ u ][ i ]; if ( v ) fail [ v ] = ch [ fail [ u ]][ i ], q . push ( v ); else v = ch [ fail [ u ]][ i ]; // \u5c06\u975e\u6cd5\u72b6\u6001\u7b49\u4ef7\u5230 fail \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\uff01 } } } \u5bf9\u4e00\u4e2a\u6587\u672c\u4e32\u8fdb\u884c\u5339\u914d \u00b6 \u6c42\u6240\u6709\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u4e2d\u5206\u522b\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4ece\u5de6\u81f3\u53f3\u68c0\u67e5\u6587\u672c\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u7136\u540e\u76f4\u63a5\u66b4\u529b\u8df3 \\(\\textrm{ch}[u, c]\\) \u5373\u53ef\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5efa\u51fa\u4e86 trie \u56fe\uff01 \u4e0d\u7528\u518d\u8003\u8651 fail \u6307\u9488\u8981\u600e\u4e48\u8df3\u7684\u95ee\u9898\u4e86\u3002 \u5982\u540c ouuan \u5728 \u4ed6\u7684\u535a\u5ba2 \u91cc\u8bf4\u5230\u7684\uff0c\u666e\u901a\u7684\u300c\u66b4\u529b\u8df3 fail \u6307\u9488\u300d\u7684 AC \u81ea\u52a8\u673a\u6c42\u6a21\u5f0f\u4e32\u51fa\u73b0\u6b21\u6570\u5176\u5b9e\u662f \u9519\u8bef \u7684\uff1b \u6b63\u786e\u7684\u505a\u6cd5\u662f\u5efa\u51fa fail \u6811\u4e4b\u540e dfs \u6c42\u51fa\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u7684\u662f AC \u81ea\u52a8\u673a\u5efa\u7acb fail \u6811\u4ee5\u53ca\u67e5\u8be2\u64cd\u4f5c\u7684\u4ee3\u7801\u3002 Query 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void query ( std :: string S ) { int len = S . size (), u = 0 ; for ( int i = 0 ; i < len ; ++ i ) { u = ch [ u ][ S [ i ] - 'a' + 1 ]; ++ siz [ u ]; } } void dfs ( int x , int p ) { for ( int i = first [ x ]; ~ i ; i = e [ i ]. _next ) { int y = e [ i ]. to ; if ( y == p ) continue ; dfs ( y , x ); siz [ x ] += siz [ y ]; } } void refresh () { for ( int i = 1 ; i <= cntNode ; ++ i ) add ( i , fail [ i ]), add ( fail [ i ], i ); dfs ( 0 , 0 ); } \u4f8b\u9898 \u00b6 \u6682\u65f6\u8fd8\u5495\u7740\u5728\u3002 \u5199\u5728\u6700\u540e \u00b6 \u7b80\u5355\u7684\u4e00\u6279\uff0c\u6211\u4f1a\u4e86\u3002","title":"AC \u81ea\u52a8\u673a"},{"location":"posts/lectures/ac-automaton/#_1","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \u7531 \\(S_1, S_2, \\cdots, S_n\\) \u6784\u6210\u7684 trie \u6811\uff0c\u7528 \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u8868\u793a\uff1b \u5b57\u5178\u6811\u4e2d\u4ece\u6839\u6cbf\u7740\u8fb9\u8d70\u5230 \\(i\\) \u8282\u70b9\u6240\u5f62\u6210\u7684\u7684\u5b57\u7b26\u4e32\uff0c\u7528 \\(\\textrm{str}(i)\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807 \u4ece \\(1\\) \u5f00\u59cb \uff0ctrie \u6811\u7684 \u6839\u8282\u70b9\u7f16\u53f7\u4e3a \\(0\\) \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b","title":"\u5199\u5728\u524d\u9762"},{"location":"posts/lectures/ac-automaton/#_2","text":"\u7b3c\u7edf\u5730\u8bb2\uff0cAC \u81ea\u52a8\u673a\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a trie \u56fe \u52a0\u4e0a\u5f88\u591a\u7684 fail \u6307\u9488\u5f62\u6210\u7684\u7ed3\u6784\u3002 AC \u81ea\u52a8\u673a\u4e2d\u7684 fail \u6307\u9488\u5c31\u5982\u540c KMP \u7b97\u6cd5\u7684 \\(\\pi\\) \u6570\u7ec4\uff1b \u4f46\u4e0d\u540c\u7684\u662f fail \u6307\u9488\u80fd\u5728\u591a\u4e2a\u6a21\u5f0f\u4e32\u4e0a\u8fed\u4ee3\uff0c\u800c \\(\\pi\\) \u6570\u7ec4\u53ea\u80fd\u5728\u5355\u4e00\u7684\u6a21\u5f0f\u4e32\u4e0a\u8fed\u4ee3\u3002 \u6ce8\u610f\u5230\u6211\u7684\u63cf\u8ff0\u4e3a\u300c\u662f\u4e00\u4e2a trie \u56fe\u300d\uff0c\u56e0\u4e3a AC \u81ea\u52a8\u673a\u5b9e\u9645\u4e0a\u628a\u6240\u6709 \u975e\u6cd5\u72b6\u6001 \u90fd\u8fde\u5411\u4e86\u6cbf\u7740 fail \u6307\u9488\u8d70\u540e\u7684 \u5408\u6cd5\u72b6\u6001 \uff1b \u800c\u8fd9\u6837\u5c31\u5f62\u6210\u4e86\u4e00\u4e2a\u56fe\u800c\u4e0d\u662f\u5355\u7eaf\u7684\u4e00\u68f5\u6811\u3002 \u4e5f\u8bb8\u4f60\u5e76\u4e0d\u80fd\u7406\u89e3\u4e0a\u4e00\u53e5\u8bdd\uff0c\u4e0d\u8fc7\u4e0d\u8981\u7d27\uff0c\u6211\u4eec\u5148\u4ece\u300c\u57fa\u4e8e trie \u6811\u7ed3\u6784\u7684 AC \u81ea\u52a8\u673a\u300d\u7684\u7ed3\u6784\u5f00\u59cb\u8bf4\u8d77\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5f0f\u4e32\u4e3a \\(S_1, S_2, \\cdots, S_n\\) \u57fa\u4e8e trie \u6811\u7ed3\u6784\u7684 AC \u81ea\u52a8\u673a\u800c\u8a00\uff0c\u6709\uff1a \\(\\textrm{ch}[u, c]\\) \u6570\u7ec4\u3002 \u6307\u5411\u7684\u662f \\(u\\) \u8282\u70b9\uff0c\u5f80\u540e\u62d3\u5c55\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \u4e4b\u540e\u5230\u8fbe\u7684\u8282\u70b9\u3002 \\(\\text{fail}[u]\\) \u6570\u7ec4\u3002 \\(\\textrm{fail}[u]\\) \u81ea \\(u\\) \u5f00\u59cb\uff0c\u6307\u5411 \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u4e2d\u7684\u6700\u957f\u7684\uff0c\u524d\u7f00\u4e0e \\(\\textrm{str}(u)\\) \u7684\u771f\u540e\u7f00\u76f8\u7b49\u7684\u8282\u70b9\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(5\\) \u53f7\u8282\u70b9\u7684 fail \u6307\u9488\u6307\u5411\u7684\u662f \\(2\\) \u53f7\u8282\u70b9\uff0c\u56e0\u4e3a \\(\\textrm{str}(5) = \\mathtt{bab}, \\textrm{str}(2) = \\mathtt{ab}\\) \uff1b \\(\\mathtt{ab}\\) \u662f\u8fd9\u68f5 trie \u6811\u4e2d\u6700\u957f\u7684\u6ee1\u8db3\u524d\u7f00\uff08 \\(\\mathtt{ab}\\) \uff09\u4e0e \\(\\textrm{str}(5)\\) \u7684\u67d0\u4e00\u771f\u540e\u7f00\uff08 \\(\\textrm{str}(5)[2..3] = \\mathtt{ab}\\) \uff09\u76f8\u7b49\u7684\u8282\u70b9\u3002","title":"\u5b9a\u4e49"},{"location":"posts/lectures/ac-automaton/#_3","text":"\u4e00\u4e2a AC \u81ea\u52a8\u673a\u7684\u5efa\u7acb\u4ee5\u53ca\u4f7f\u7528\u5305\u62ec\u4e09\u4e2a\u6d41\u7a0b\uff1a\u300ctrie \u6811\u7684\u6784\u5efa\u300d\u3001\u300cfail \u6307\u9488\u7684\u8fde\u63a5\u300d\u548c\u300c\u5bf9\u4e00\u4e2a\u6587\u672c\u4e32\u8fdb\u884c\u5339\u914d\u300d\u3002","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"posts/lectures/ac-automaton/#trie","text":"\u521a\u624d\u6211\u4eec\u5728\u5b9a\u4e49\u4e2d\u63d0\u5230\u4e86\u300c\u57fa\u4e8e trie \u6811\u7684 AC \u81ea\u52a8\u673a\u300d\u7684\u7ed3\u6784\uff0c \u800c\u300ctrie \u6811\u8f6c\u5316\u4e3a trie \u56fe\u300d\u7684\u8fc7\u7a0b\u662f\u5728\u8fde\u63a5 fail \u6307\u9488\u7684\u65f6\u5019\u8fdb\u884c\u7684\u3002 \u7ed9\u5b9a\u4e00\u4e9b\u6a21\u5f0f\u4e32 \\(S_1, S_2, \\cdots, S_n\\) \uff0c\u8ba9\u4f60\u6784\u5efa\u51fa \\(\\textrm{trie}(S_1, S_2, \\cdots, S_n)\\) \u3002 \u8b66\u544a \u82e5\u4e0d\u4f1a\u6784\u5efa trie \u6811\uff0c\u5efa\u8bae\u5148\u5b66\u4e60 trie \u6811\u4e4b\u540e\u518d\u6765\u770b\u8fd9\u7bc7\u6587\u7ae0\u3002 \u4e0b\u9762\u662f AC \u81ea\u52a8\u673a\u7684\u300c\u63d2\u5165\u300d\u90e8\u5206\u7684\u4ee3\u7801\u3002 Insert 1 2 3 4 5 6 7 8 9 void insert ( std :: string S , int id ) { int len = S . size (), u = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int & v = ch [ u ][ S [ i ] - 'a' + 1 ]; if ( ! v ) v = ++ cntNode ; u = v ; } }","title":"trie \u6811\u7684\u6784\u5efa"},{"location":"posts/lectures/ac-automaton/#fail","text":"\u9996\u5148\uff0c\u6211\u4eec\u628a \\(0\\) \u548c \\(0\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684 fail \u6307\u9488\u90fd\u8bbe\u4e3a \\(0\\) \uff08\u5373\u6839\u8282\u70b9\uff09\u3002 \u7136\u540e\u6211\u4eec\u901a\u8fc7 BFS \u6765\u5b9e\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684 fail \u6307\u9488\u7684\u8fde\u63a5\u4ee5\u53ca\u5c06 trie \u6811\u8f6c\u5316\u4e3a trie \u56fe\u7684\u8fc7\u7a0b\u3002 \u4e3a\u4ec0\u4e48\u901a\u8fc7 BFS \u5462\uff1f \u6ce8\u610f\u5230\uff0c \\(\\textrm{fail}[u]\\) \u5728 trie \u6811\u4e0a\u7684\u6df1\u5ea6\u4e00\u5b9a\u662f\u5c0f\u4e8e\u7b49\u4e8e \\(u\\) \u5728 trie \u6811\u4e0a\u7684\u6df1\u5ea6\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BFS \u6765\u6784\u5efa\u3002 \u600e\u4e48\u6784\u5efa\u5462\uff1ftrie \u6811\u4e3a\u5565\u53d8\u6210 trie \u56fe\u4e86\u5462\uff1f \u8003\u8651 fail \u6307\u9488\u7684\u610f\u4e49\uff0c\u8868\u793a\u6700\u957f\u7684\u524d\u7f00\u7b49\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u771f\u540e\u7f00\u7684\u8282\u70b9\uff0c\u6211\u4eec\u5c1d\u8bd5\u7740\u5f80\u540e\u62d3\u5c55\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \uff1b \u5982\u679c\u5b58\u5728\u7740 \\(\\textrm{ch}[\\textrm{fail}[u], c]\\) \uff0c\u90a3\u4e48\u5f88\u663e\u7136 \\(\\textrm{fail}[\\textrm{ch}[u, c]] \\gets \\textrm{ch}[\\textrm{fail}[u], c]\\) \uff0c\u7136\u540e\u6211\u4eec\u5c06 \\(\\textrm{ch}[u, c]\\) \u653e\u8fdb\u961f\u5217\u91cc\u7b49\u5019\u7740 BFS\uff1b \u5982\u679c\u4e0d\u5b58\u5728\u5462\uff1f\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u7740\u7684\u5176\u5b9e\u662f\u4e00\u4e2a \u975e\u6cd5\u72b6\u6001 \uff0c\u6211\u4eec\u5e94\u8be5\u6cbf\u7740 fail \u6307\u9488\u8df3\u81f3\u67d0\u4e00\u4e2a\u5408\u6cd5\u72b6\u6001\u3002 \u4e3a\u4e86\u7b80\u4fbf\uff0c\u6211\u4eec \u76f4\u63a5\u5c06\u8fd9\u4e9b\u975e\u6cd5\u72b6\u6001\u7b49\u4ef7\u5230 fail \u6307\u9488\u6307\u5411\u7684\u8282\u70b9 \uff01 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837 trie \u6811\u5c31\u53d8\u6210\u4e86\u4e00\u68f5 trie \u56fe\uff08\u6bcf\u4e2a\u8282\u70b9\u9664\u4e86\u6307\u5411\u7236\u4eb2\uff0c\u8fd8\u6709\u6307\u5411\u6df1\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u81ea\u8eab\u7684\u8282\u70b9\u7684\u51fa\u8fb9\uff09\u3002 \u4e0b\u9762\u7ed9\u51fa\u7684\u662f AC \u81ea\u52a8\u673a\u7684\u6784\u5efa\u90e8\u5206\u7684\u4ee3\u7801\u3002 Build 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 void build () { std :: queue < int > q ; for ( int i = 1 ; i <= C ; ++ i ) if ( ch [ 0 ][ i ]) q . push ( ch [ 0 ][ i ]); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = 1 ; i <= C ; ++ i ) { int & v = ch [ u ][ i ]; if ( v ) fail [ v ] = ch [ fail [ u ]][ i ], q . push ( v ); else v = ch [ fail [ u ]][ i ]; // \u5c06\u975e\u6cd5\u72b6\u6001\u7b49\u4ef7\u5230 fail \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\uff01 } } }","title":"fail \u6307\u9488\u7684\u8fde\u63a5"},{"location":"posts/lectures/ac-automaton/#_4","text":"\u6c42\u6240\u6709\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u4e2d\u5206\u522b\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u4ece\u5de6\u81f3\u53f3\u68c0\u67e5\u6587\u672c\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u7136\u540e\u76f4\u63a5\u66b4\u529b\u8df3 \\(\\textrm{ch}[u, c]\\) \u5373\u53ef\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u5efa\u51fa\u4e86 trie \u56fe\uff01 \u4e0d\u7528\u518d\u8003\u8651 fail \u6307\u9488\u8981\u600e\u4e48\u8df3\u7684\u95ee\u9898\u4e86\u3002 \u5982\u540c ouuan \u5728 \u4ed6\u7684\u535a\u5ba2 \u91cc\u8bf4\u5230\u7684\uff0c\u666e\u901a\u7684\u300c\u66b4\u529b\u8df3 fail \u6307\u9488\u300d\u7684 AC \u81ea\u52a8\u673a\u6c42\u6a21\u5f0f\u4e32\u51fa\u73b0\u6b21\u6570\u5176\u5b9e\u662f \u9519\u8bef \u7684\uff1b \u6b63\u786e\u7684\u505a\u6cd5\u662f\u5efa\u51fa fail \u6811\u4e4b\u540e dfs \u6c42\u51fa\u6bcf\u68f5\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u7684\u662f AC \u81ea\u52a8\u673a\u5efa\u7acb fail \u6811\u4ee5\u53ca\u67e5\u8be2\u64cd\u4f5c\u7684\u4ee3\u7801\u3002 Query 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void query ( std :: string S ) { int len = S . size (), u = 0 ; for ( int i = 0 ; i < len ; ++ i ) { u = ch [ u ][ S [ i ] - 'a' + 1 ]; ++ siz [ u ]; } } void dfs ( int x , int p ) { for ( int i = first [ x ]; ~ i ; i = e [ i ]. _next ) { int y = e [ i ]. to ; if ( y == p ) continue ; dfs ( y , x ); siz [ x ] += siz [ y ]; } } void refresh () { for ( int i = 1 ; i <= cntNode ; ++ i ) add ( i , fail [ i ]), add ( fail [ i ], i ); dfs ( 0 , 0 ); }","title":"\u5bf9\u4e00\u4e2a\u6587\u672c\u4e32\u8fdb\u884c\u5339\u914d"},{"location":"posts/lectures/ac-automaton/#_5","text":"\u6682\u65f6\u8fd8\u5495\u7740\u5728\u3002","title":"\u4f8b\u9898"},{"location":"posts/lectures/ac-automaton/#_6","text":"\u7b80\u5355\u7684\u4e00\u6279\uff0c\u6211\u4f1a\u4e86\u3002","title":"\u5199\u5728\u6700\u540e"},{"location":"posts/lectures/dlx/","text":"\u61d2\u5f97\u7ef4\u62a4 OI-Wiki \u4e0a\u7684 DLX \u4e86\uff08\u5176\u5b9e\u662f\u4e0d\u4f1a git\uff09\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u7bc7\u535a\u6587\u3002 \u7cbe\u786e\u8986\u76d6\u95ee\u9898 \u00b6 \u5b9a\u4e49 \u00b6 \u7cbe\u786e\u8986\u76d6\u95ee\u9898 (Exact Cover Problem) \u662f\u6307\u7ed9\u5b9a\u8bb8\u591a\u96c6\u5408 \\(S_i (1 \\le i \\le n)\\) \u4ee5\u53ca\u4e00\u4e2a\u96c6\u5408 \\(X\\) \uff0c\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u65e0\u5e8f\u591a\u5143\u7ec4 \\((T_1, T_2, \\cdots , T_m)\\) \uff1a \\(\\forall i, j \\in [1, m],T_i\\bigcap T_j = \\varnothing (i \\neq j)\\) \\(X = \\bigcup\\limits_{i = 1}^{m}T_i\\) \\(\\forall i \\in[1, m], T_i \\in \\\\{S_1, S_2, \\cdots, S_n\\\\}\\) \u4e00\u4e2a\u300c\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u300d\u7684\u4f8b\u5b50 \u7ed9\u51fa $$ \\begin{aligned} & S_1 = \\{5, 9, 17\\} \\\\ & S_2 = \\{1, 8, 119\\} \\\\ & S_3 = \\{3, 5, 17\\} \\\\ & S_4 = \\{1, 8\\} \\\\ & S_5 = \\{3, 119\\} \\\\ & S_6 = \\{8, 9, 119\\} \\\\ & X = \\{1, 3, 5, 8, 9, 17, 119\\} \\end{aligned} $$ \u5219 \\((S_1, S_4, S_5)\\) \u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002 \u95ee\u9898\u8f6c\u5316 \u00b6 \u6211\u4eec\u5c06 \\(\\bigcup\\limits_{i = 1}^{n}S_i\\) \u4e2d\u7684\u6240\u6709\u6570\u79bb\u6563\u5316\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e48\u4e00\u4e2a\u6a21\u578b\uff1a \u7ed9\u5b9a\u4e00\u4e2a 01 \u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u884c\uff0c\u4f7f\u5f97\u6700\u7ec8\u6bcf\u5217\u90fd\u6070\u597d\u6709\u4e00\u4e2a 1\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5bf9\u4e0a\u6587\u4e2d\u7684\u4f8b\u5b50\u8fdb\u884c\u5efa\u6a21\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e48\u4e00\u4e2a\u77e9\u9635\uff1a $$ \\begin{pmatrix} 0 & 0 & 1 & 0 & 1 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 1 \\\\ 0 & 1 & 1 & 0 & 0 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 & 1 & 0 & 1 \\end{pmatrix} $$ \u5176\u4e2d\u7b2c \\(i\\) \u884c\u8868\u793a\u7740 \\(S_i\\) \uff0c\u800c\u8fd9\u884c\u7684\u6bcf\u4e2a\u6570\u4f9d\u6b21\u8868\u793a \\([1 \\in S_i],[3 \\in S_i],[5 \\in S_i],\\cdots,[119 \\in S_i]\\) \u3002 \u66b4\u529b 1 \u00b6 \u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u9009\u62e9\u54ea\u4e9b\u884c\uff0c\u6700\u540e\u68c0\u67e5\u8fd9\u4e2a\u65b9\u6848\u662f\u5426\u5408\u6cd5\u3002 \u56e0\u4e3a\u6bcf\u4e00\u884c\u90fd\u6709\u9009\u6216\u8005\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u6240\u4ee5\u679a\u4e3e\u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(2^n)\\) \u7684\uff1b \u800c\u6bcf\u6b21\u68c0\u67e5\u90fd\u9700\u8981 \\(O(nm)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u662f \\(O(nm\\cdot2^n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int ok = 0 ; for ( int state = 0 ; state < 1 << n ; ++ state ) { // \u679a\u4e3e\u6bcf\u884c\u662f\u5426\u88ab\u9009 for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) for ( int j = 1 ; j <= m ; ++ j ) a [ i ][ j ] = 1 ; int flag = 1 ; for ( int j = 1 ; j <= m ; ++ j ) for ( int i = 1 , bo = 0 ; i <= n ; ++ i ) if ( a [ i ][ j ]) { if ( bo ) flag = 0 ; else bo = 1 ; } if ( ! flag ) continue ; else { ok = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) printf ( \"%d \" , i ); puts ( \"\" ); } memset ( a , 0 , sizeof ( a )); } if ( ! ok ) puts ( \"No solution.\" ); \u66b4\u529b 2 \u00b6 \u8003\u8651\u5230 01 \u77e9\u9635\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u884c\u90fd\u770b\u505a\u6210\u4e00\u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\u3002 \u56e0\u6b64\u88ab\u8f6c\u5316\u4e3a\u4e86 \u7ed9\u4f60 \\(n\\) \u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u8981\u6c42\u9009\u62e9\u4e00\u4e9b\u6570\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e0e\u90fd\u4e3a 0\uff0c\u4e14\u6240\u6709\u6570\u7684\u6216\u4e3a \\(2^m - 1\\) \u3002 tmp \u8868\u793a\u7684\u662f\u622a\u81f3\u76ee\u524d\u7684\u6240\u6709\u88ab\u9009\u62e9\u4e86\u7684 \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u6216\u3002 \u56e0\u4e3a\u6bcf\u4e00\u884c\u90fd\u6709\u9009\u6216\u8005\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u6240\u4ee5\u679a\u4e3e\u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(2^n)\\) \uff1b \u800c\u6bcf\u6b21\u8ba1\u7b97 tmp \u90fd\u9700\u8981 \\(O(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u4e3a \\(O(n\\cdot2^n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int ok = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = m ; j >= 1 ; -- j ) num [ i ] = num [ i ] << 1 | a [ i ][ j ]; for ( int state = 0 ; state < 1 << n ; ++ state ) { int tmp = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) { if ( tmp & num [ i ]) break ; tmp |= num [ i ]; } if ( tmp == ( 1 << m ) - 1 ) { ok = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) printf ( \"%d \" , i ); puts ( \"\" ); } } if ( ! ok ) puts ( \"No solution.\" ); X \u7b97\u6cd5 \u00b6 Donald E. Knuth \u63d0\u51fa\u4e86 X \u7b97\u6cd5 (Algorithm X)\uff0c\u5176\u601d\u60f3\u4e0e\u521a\u624d\u7684\u66b4\u529b\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u65b9\u4fbf\u4f18\u5316\u3002 \u7ee7\u7eed\u4ee5\u4e0a\u6587\u4e2d\u4e2d\u63d0\u5230\u7684\u4f8b\u5b50\u4e3a\u8f7d\u4f53\uff0c\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u8fd9\u6837\u7684 01 \u77e9\u9635\uff1a $$ \\begin{pmatrix} 0 & 0 & 1 & 0 & 1 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 1 \\\\ 0 & 1 & 1 & 0 & 0 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 & 1 & 0 & 1 \\end{pmatrix} $$ 1. \u6b64\u65f6\u7b2c\u4e00\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e8c\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e09\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u56db\u884c\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e94\u884c\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u516d\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \u3002\u9009\u62e9\u7b2c\u4e00\u884c\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}0 & 1 \\\\ 0 & 1 & \\color{Red}1 & 0 & \\color{Red}0 & \\color{Red}1 & 0 \\\\ 1 & 0 & \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}0 & 0 \\\\ 0 & 1 & \\color{Red}0 & 0 & \\color{Red}0 & \\color{Red}0 & 1 \\\\ 0 & 0 & \\color{Red}0 & 1 & \\color{Red}1 & \\color{Red}0 & 1 \\end{pmatrix} $$ 2. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Red}0 & \\color{Red}1 & \\color{Blue}1 & \\color{Red}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Red}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 0 \\\\ 0 & 1 & \\color{Blue}0 & 0 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Red}0 & \\color{Red}0 & \\color{Blue}0 & \\color{Red}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Red}1 \\end{pmatrix} $$ 3. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 0 \\\\ 0 & 1 & \\color{Blue}0 & 0 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ \u8fd9\u8868\u793a\u8868\u793a\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u884c\uff0c\u4e14\u8fd9\u4e00\u884c\u7684\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u4e0d\u80fd\u6709\u5176\u4ed6 \\(1\\) \u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u65b0\u7684\u5c0f 01 \u77e9\u9635\uff1a $$ \\begin{pmatrix} 1 & 0 & 1 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\end{pmatrix} $$ 4. \u6b64\u65f6\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e8c\u884c\uff09\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e8c\u884c\uff08\u539f\u6765\u7684\u7b2c\u56db\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e09\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e94\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \u3002\u9009\u62e9\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e8c\u884c\uff09\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Red}1 & 0 & \\color{Red}1 & \\color{Red}0 \\\\ \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}1 \\end{pmatrix} $$ 5. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Red}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & \\color{Red}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ 6. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u77e9\u9635\u3002\u4f46\u662f\u4e0a\u6b21\u5220\u9664\u7684\u884c \"1 0 1 1\" \u4e0d\u662f\u5168 \\(1\\) \u7684\uff0c\u8bf4\u660e\u9009\u62e9\u6709\u8bef\uff1b $$ \\begin{pmatrix} \\end{pmatrix} $$ 7. \u56de\u6eaf\u5230\u6b65\u9aa4 \\(4\\) \uff0c\u6211\u4eec\u8003\u8651\u9009\u62e9\u7b2c\u4e8c\u884c\uff08\u539f\u6765\u7684\u7b2c\u56db\u884c\uff09\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Red}1 & 0 & \\color{Red}1 & 1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Red}0 & 1 & \\color{Red}0 & 1 \\end{pmatrix} $$ 8. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Red}0 & \\color{Blue}1 & \\color{Red}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & 1 & \\color{Blue}0 & 1 \\end{pmatrix} $$ 9. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & 1 & \\color{Blue}0 & 1 \\end{pmatrix} $$ \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u77e9\u9635\uff1a $$ \\begin{pmatrix} 1 & 1 \\end{pmatrix} $$ 10. \u6b64\u65f6\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e94\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5220\u9664\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u77e9\u9635\uff1a $$ \\begin{pmatrix} \\end{pmatrix} $$ 11. \u4e0a\u4e00\u6b21\u5220\u9664\u7684\u65f6\u5019\uff0c\u5220\u9664\u7684\u662f\u5168 \\(1\\) \u7684\u884c\uff0c\u56e0\u6b64\u6210\u529f\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\u7b54\u6848\u5373\u4e3a\u6211\u4eec\u5220\u9664\u7684\u4e09\u884c\uff1a \\(1, 4, 5\\) \u3002 \u5f3a\u70c8\u5efa\u8bae\u81ea\u5df1\u6a21\u62df\u4e00\u904d\u77e9\u9635\u5220\u9664\u3001\u8fd8\u539f\u4e0e\u56de\u6eaf\u7684\u8fc7\u7a0b\u540e\u518d\u63a5\u7740\u9605\u8bfb\u4e0b\u6587\u3002 \u6211\u4eec\u53ef\u4ee5\u6982\u62ec\u51fa X \u7b97\u6cd5\u7684\u8fc7\u7a0b\uff1a \u5bf9\u4e8e\u73b0\u5728\u7684\u77e9\u9635 \\(M\\) \uff0c\u9009\u62e9\u5e76\u6807\u8bb0\u4e00\u5217 \\(r\\) \uff0c\u5c06 \\(r\\) \u6dfb\u52a0\u81f3 \\(S\\) \u4e2d\uff1b \u5982\u679c\u5c1d\u8bd5\u4e86\u6240\u6709\u7684 \\(r\\) \u5374\u65e0\u89e3\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\uff0c\u8f93\u51fa\u65e0\u89e3\u3002 \u6807\u8bb0\u4e0e \\(r\\) \u76f8\u5173\u7684\u884c \\(r_i\\) \u548c \\(c_i\\) \uff1b \u5220\u9664\u6240\u6709\u6807\u8bb0\u7684\u884c\u548c\u5217\uff0c\u5f97\u5230\u65b0\u77e9\u9635 \\(M'\\) \uff1b \u5982\u679c \\(M'\\) \u4e3a\u7a7a\uff0c\u4e14 \\(r\\) \u4e3a\u5168 \\(1\\) \u7684\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\uff0c\u8f93\u51fa\u88ab\u5220\u9664\u7684\u884c\u7ec4\u6210\u7684\u96c6\u5408 \\(S\\) \uff1b \u5982\u679c \\(M'\\) \u4e3a\u7a7a\uff0c\u4e14 \\(r\\) \u4e0d\u4e3a\u5168 \\(1\\) \u7684\uff0c\u5219\u6062\u590d\u4e0e \\(r\\) \u76f8\u5173\u7684\u884c \\(r_i\\) \u4ee5\u53ca\u5217 \\(c_i\\) \uff0c\u8df3\u8f6c\u81f3\u6b65\u9aa4 \\(1\\) \uff1b \u5982\u679c \\(M'\\) \u4e0d\u4e3a\u7a7a\uff0c\u5219\u8df3\u8f6c\u81f3\u6b65\u9aa4 \\(1\\) \u3002 \u4e0d\u96be\u770b\u51fa\uff0cX \u7b97\u6cd5\u9700\u8981\u5927\u91cf\u7684\u201c\u5220\u9664\u884c\u201d\u3001\u201c\u5220\u9664\u5217\u201d\u548c\u201c\u6062\u590d\u884c\u201d\u3001\u201c\u6062\u590d\u5217\u201d\u7684\u64cd\u4f5c\u3002 Donald E. Knuth \u60f3\u5230\u4e86\u7528\u53cc\u5411\u5341\u5b57\u94fe\u8868\u6765\u7ef4\u62a4\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u800c\u5728\u53cc\u5411\u5341\u5b57\u94fe\u8868\u4e0a\u4e0d\u65ad\u8df3\u8dc3\u7684\u8fc7\u7a0b\u88ab\u5f62\u8c61\u5730\u6bd4\u55bb\u6210\u201c\u8df3\u8dc3\u201d\uff0c\u56e0\u6b64\u88ab\u7528\u6765\u4f18\u5316 X \u7b97\u6cd5\u7684\u53cc\u5411\u5341\u5b57\u94fe\u8868\u4e5f\u88ab\u79f0\u4e3a\u201cDancing Links\u201d\u3002 Dancing Links \u4f18\u5316\u7684 X \u7b97\u6cd5 \u00b6 \u9884\u7f16\u8bd1\u547d\u4ee4 \u00b6 1 #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) \u5b9a\u4e49 \u00b6 \u65e2\u7136\u662f\u53cc\u5411\u5341\u5b57\u94fe\u8868\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u6709\u56db\u4e2a\u6307\u9488\u57df\u7684\uff1a\u4e00\u4e2a\u6307\u4e0a\u65b9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u4e0b\u65b9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u5de6\u8fb9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u53f3\u8fb9\u7684\u5143\u7d20\u3002\u800c\u6bcf\u4e2a\u5143\u7d20 \\(i\\) \u5728\u6574\u4e2a\u53cc\u5411\u5341\u5b57\u94fe\u8868\u7cfb\u4e2d\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u683c\u5b50\uff0c\u56e0\u6b64\u8fd8\u8981\u8868\u793a \\(i\\) \u6240\u5728\u7684\u5217\u548c\u6240\u5728\u7684\u8fd9\u6837\uff1a \u662f\u4e0d\u662f\u975e\u5e38\u7b80\u5355\uff1f \u800c\u5176\u5b9e\u5927\u578b\u53cc\u5411\u94fe\u8868\u5176\u5b9e\u662f\u957f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a\u884c\u9996\u6307\u793a\uff0c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a\u5217\u6307\u793a\u3002 \u884c\u9996\u6307\u793a\u4e3a first[] \uff0c\u5217\u6307\u793a\u662f\u6211\u4eec\u865a\u62df\u51fa\u7684 \\(c + 1\\) \u4e2a\u7ed3\u70b9\u3002 \u540c\u65f6\uff0c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a siz[] \u8868\u793a\u8fd9\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u7279\u6b8a\u5730\uff0c \\(0\\) \u53f7\u7ed3\u70b9\u65e0\u53f3\u7ed3\u70b9\u7b49\u4ef7\u4e8e\u8fd9\u4e2a Dancing Links \u4e3a\u7a7a\u3002 1 2 3 4 static const int MS = 1e5 + 5 ; int n , m , idx , first [ MS ], siz [ MS ]; int L [ MS ], R [ MS ], U [ MS ], D [ MS ]; int col [ MS ], row [ MS ]; remove \u64cd\u4f5c \u00b6 \\(\\textrm{remove(c)}\\) \u8868\u793a\u5728 Dancing Links \u4e2d\u5220\u9664\u7b2c \\(c\\) \u5217\u4ee5\u53ca\u4e0e\u5176\u76f8\u5173\u7684\u884c\u548c\u5217\u3002 \u6211\u4eec\u5148\u5c06 \\(c\\) \u5220\u9664\uff0c\u6b64\u65f6\uff1a \\(c\\) \u5de6\u4fa7\u7684\u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u5e94\u4e3a \\(c\\) \u7684\u53f3\u7ed3\u70b9\uff1b \\(c\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u5e94\u4e3a \\(c\\) \u7684\u5de6\u7ed3\u70b9\u3002 \u5373 L[R[c]] = L[c], R[L[c]] = R[c]; \u3002 \u7136\u540e\u6211\u4eec\u8981\u987a\u7740\u8fd9\u4e00\u5217\u5f80\u4e0b\u8d70\uff0c\u628a\u8d70\u8fc7\u7684\u6bcf\u4e00\u884c\u90fd\u5220\u6389\u3002 \u5982\u4f55\u5220\u6389\u6bcf\u4e00\u884c\u5462\uff1f\u679a\u4e3e\u5f53\u524d\u884c\u7684\u6307\u9488 \\(j\\) \uff0c\u6b64\u65f6\uff1a \\(j\\) \u4e0a\u65b9\u7684\u7ed3\u70b9\u7684\u4e0b\u7ed3\u70b9\u5e94\u4e3a \\(j\\) \u7684\u4e0b\u7ed3\u70b9\uff1b \\(j\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\u7684\u4e0a\u7ed3\u70b9\u5e94\u4e3a \\(j\\) \u7684\u4e0a\u7ed3\u70b9\u3002 \u6ce8\u610f\u8981\u4fee\u6539\u6bcf\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5373 U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]]; \u3002 \u56e0\u6b64 \\(\\textrm{remove(c)}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a \u5176\u4e2d\u7b2c\u4e00\u4e2a IT(i, D, c) \u7b49\u4ef7\u4e8e for(i = D[c]; i != c; i = D[i]) \uff0c\u5373\u5728\u987a\u7740\u8fd9\u4e00\u5217\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\uff1b \u7b2c\u4e8c\u4e2a IT(j, R, i) \u7b49\u4ef7\u4e8e for(j = R[i]; j != i; j = R[j]) \uff0c\u5373\u5728\u987a\u7740\u8fd9\u4e00\u884c\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u3002 1 2 3 4 5 void remove ( const int & c ) { int i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } recover \u64cd\u4f5c \u00b6 \\(\\textrm{recover(c)}\\) \u8868\u793a\u5728 Dancing Links \u4e2d\u8fd8\u539f\u7b2c \\(c\\) \u5217\u4ee5\u53ca\u4e0e\u5176\u76f8\u5173\u7684\u884c\u548c\u5217\u3002 \\(\\textrm{recover(c)}\\) \u5373 \\(\\textrm{remove(c)}\\) \u7684\u9006\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c \\(\\textrm{recover(c)}\\) \u7684\u6240\u6709\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e \\(\\textrm{remove(c)}\\) \u7684\u64cd\u4f5c\u6070\u597d\u76f8\u53cd\u3002 \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{recover(c)}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 void recover ( const int & c ) { int i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } build \u64cd\u4f5c \u00b6 \\(\\textrm{build(r, c)}\\) \u8868\u793a\u65b0\u5efa\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(r \\times c\\) \uff0c\u5373\u6709 \\(r\\) \u884c\uff0c \\(c\\) \u5217\u7684 Dancing Links\u3002 \u6211\u4eec\u65b0\u5efa \\(c + 1\\) \u4e2a\u7ed3\u70b9\uff0c\u4e3a\u5217\u6307\u793a\u3002 \u7b2c \\(i\\) \u4e2a\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(i - 1\\) \uff0c\u53f3\u7ed3\u70b9\u4e3a \\(i + 1\\) \uff0c\u4e0a\u7ed3\u70b9\u4e3a \\(i\\) \uff0c\u4e0b\u7ed3\u70b9\u4e3a \\(i\\) \u3002 \u7279\u6b8a\u5730\uff0c \\(0\\) \u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(c\\) \uff0c \\(c\\) \u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u4e3a \\(0\\) \u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u6761\u94fe\uff1a 1 2 3 4 5 6 7 8 9 10 void build ( const int & r , const int & c ) { n = r , m = c ; for ( int i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , idx = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } \u8fd9\u6837\u5c31\u521d\u59cb\u5316\u4e86\u4e00\u4e2a Dancing Links\u3002 insert \u64cd\u4f5c \u00b6 \\(\\textrm{insert(r, c)}\\) \u8868\u793a\u5728\u7b2c \\(r\\) \u884c\uff0c\u7b2c \\(c\\) \u5217\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\u3002 \u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u6765\u64cd\u4f5c\uff1a \u5982\u679c\u7b2c \\(r\\) \u884c\u6ca1\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4f7f \\(first(r)\\) \u6307\u5411\u8fd9\u4e2a\u5143\u7d20\uff1b \u5982\u679c\u7b2c \\(r\\) \u884c\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u65b0\u5143\u7d20 \u7528\u4e00\u79cd\u5947\u5f02\u7684\u65b9\u5f0f \u4e0e \\(c\\) \u548c \\(first(r)\\) \u8fde\u63a5\u8d77\u6765\u3002 \u5bf9\u4e8e\u60c5\u51b5 1\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 first[r] = L[idx] = R[idx] = idx; \u6765\u5b9e\u73b0\uff1b \u5bf9\u4e8e\u60c5\u51b5 2\uff0c\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u65b0\u5143\u7d20\u4e3a \\(idx\\) \uff09\uff1a \u6211\u4eec\u628a \\(idx\\) \u63d2\u5165\u5230 \\(c\\) \u7684\u6b63\u4e0b\u65b9\uff0c\u6b64\u65f6\uff1a \\(idx\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\u4e3a\u539f\u6765 \\(c\\) \u7684\u4e0b\u7ed3\u70b9\uff1b \\(idx\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\uff08\u5373\u539f\u6765 \\(c\\) \u7684\u4e0b\u7ed3\u70b9\uff09\u7684\u4e0a\u7ed3\u70b9\u4e3a \\(idx\\) ; \\(idx\\) \u7684\u4e0a\u7ed3\u70b9\u4e3a \\(c\\) \uff1b \\(c\\) \u7684\u4e0b\u7ed3\u70b9\u4e3a \\(idx\\) \u3002 \u6ce8\u610f\u8bb0\u5f55 \\(idx\\) \u7684\u6240\u5728\u5217\u548c\u6240\u5728\u884c\uff0c\u4ee5\u53ca\u66f4\u65b0\u8fd9\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 1 2 col [ ++ idx ] = c , row [ idx ] = r , ++ siz [ c ]; U [ idx ] = c , D [ idx ] = D [ c ], U [ D [ c ]] = idx , D [ c ] = idx ; \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5b8c\u5168\u638c\u63e1\u8fd9\u51e0\u6b65\u7684\u987a\u5e8f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u6211\u4eec\u628a \\(idx\\) \u63d2\u5165\u5230 \\(first(r)\\) \u7684\u6b63\u53f3\u65b9\uff0c\u6b64\u65f6\uff1a \\(idx\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u4e3a\u539f\u6765 \\(first(r)\\) \u7684\u53f3\u7ed3\u70b9\uff1b \u539f\u6765 \\(first(r)\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(idx\\) \uff1b \\(idx\\) \u7684\u5de6\u7ed3\u70b9\u4e3a \\(first(r)\\) \uff1b \\(first(r)\\) \u7684\u53f3\u7ed3\u70b9\u4e3a \\(idx\\) \u3002 1 2 L [ idx ] = first [ r ], R [ idx ] = R [ first [ r ]]; R [ first [ r ]] = idx , L [ R [ first [ r ]]] = idx ; \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5b8c\u5168\u638c\u63e1\u8fd9\u51e0\u6b65\u7684\u987a\u5e8f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u5bf9\u4e8e \\(\\textrm{insert(r, c)}\\) \u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u56fe\u6765\u8f85\u52a9\u7406\u89e3\uff1a \u7559\u5fc3\u66f2\u7ebf\u7bad\u5934\u7684\u65b9\u5411\u3002 \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{insert(r, c)}\\) \u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 void insert ( const int & r , const int & c ) { row [ ++ idx ] = r , col [ idx ] = c , ++ siz [ c ]; U [ idx ] = D [ idx ] = c , U [ D [ c ]] = idx , D [ c ] = idx ; if ( ! first [ r ]) first [ r ] = L [ idx ] = R [ idx ] = idx ; else { L [ idx ] = first [ r ], R [ idx ] = R [ first [ r ]]; L [ R [ first [ r ]]] = idx , R [ first [ r ]] = idx ; } } dance \u64cd\u4f5c \u00b6 \\(\\textrm{dance()}\\) \u5373\u4e3a\u9012\u5f52\u5730\u5220\u9664\u4ee5\u53ca\u8fd8\u539f\u5404\u4e2a\u884c\u5217\u7684\u8fc7\u7a0b\u3002 \u5982\u679c \\(0\\) \u53f7\u7ed3\u70b9\u6ca1\u6709\u53f3\u7ed3\u70b9\uff0c\u90a3\u4e48\u77e9\u9635\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u7b54\u6848\u5e76\u8fd4\u56de\uff1b \u9009\u62e9\u5217\u5143\u7d20\u4e2a\u6570\u6700\u5c11\u7684\u4e00\u5217\uff0c\u5e76\u5220\u6389\u8fd9\u4e00\u5217\uff1b \u904d\u5386\u8fd9\u4e00\u5217\u6240\u6709\u6709 \\(1\\) \u7684\u884c\uff0c\u679a\u4e3e\u5b83\u662f\u5426\u88ab\u9009\u62e9\uff1b \u9012\u5f52\u8c03\u7528 \\(\\textrm{dance()}\\) \uff0c\u5982\u679c\u53ef\u884c\uff0c\u5219\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u5219\u6062\u590d\u88ab\u9009\u62e9\u7684\u884c\uff1b \u5982\u679c\u65e0\u89e3\uff0c\u5219\u8fd4\u56de\uff1b \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{dance()}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 bool dance ( int dep ) { int i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { ans = dep ; return 1 ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } \u5176\u4e2d stk[] \u7528\u6765\u8bb0\u5f55\u7b54\u6848\u3002 \u6ce8\u610f\u6211\u4eec\u6bcf\u6b21\u4f18\u5148\u9009\u62e9\u5217\u5143\u7d20\u4e2a\u6570\u6700\u5c11\u7684\u4e00\u5217\u8fdb\u884c\u5220\u9664\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u7a0b\u5e8f\u5177\u6709\u4e00\u5b9a\u7684\u542f\u53d1\u6027\uff0c\u4f7f\u641c\u7d22\u6811\u5206\u652f\u6700\u5c11\u3002 \u6a21\u677f \u00b6 \u300c\u6a21\u677f\u300d\u821e\u8e48\u94fe\uff08DLX\uff09 \u6a21\u677f\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <bits/stdc++.h> #define ll long long #define rgi register int #define rgl register ll #define il inline const int N = 500 + 10 ; int n , m , idx , ans ; int first [ N ], siz [ N ], stk [ N ]; struct DLXNODE { int lc , rc , up , dn , r , c ; }; il int read () { rgi x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance ( int dep ) { if ( ! R [ 0 ]) { ans = dep ; return 1 ; } rgi i , j , c = R [ 0 ]; IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } #undef IT } solver ; int main () { n = read (), m = read (); solver . build ( n , m ); for ( rgi i = 1 ; i <= n ; ++ i ) for ( rgi j = 1 ; j <= m ; ++ j ) { int x = read (); if ( x ) solver . insert ( i , j ); } solver . dance ( 1 ); if ( ans ) for ( rgi i = 1 ; i < ans ; ++ i ) printf ( \"%d \" , stk [ i ]); else puts ( \"No Solution!\" ); return 0 ; } \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 DLX \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \u6307\u6570\u7ea7 \u7684\uff0c\u5b83\u9012\u5f52\u53ca\u56de\u6eaf\u7684\u6b21\u6570\u4e0e\u77e9\u9635\u4e2d \\(1\\) \u7684\u4e2a\u6570\u6709\u5173\uff0c\u4e0e\u77e9\u9635\u7684 \\(r, c\\) \u7b49\u53c2\u6570\u65e0\u5173\u3002 \u56e0\u6b64\u7406\u8bba\u590d\u6742\u5ea6\u5927\u6982\u5728 \\(O(c^n)\\) \u5de6\u53f3\uff0c\u5176\u4e2d \\(c\\) \u4e3a\u67d0\u4e2a\u975e\u5e38\u63a5\u8fd1\u4e8e \\(1\\) \u7684\u5e38\u6570\uff0c \\(n\\) \u4e3a\u77e9\u9635\u4e2d \\(1\\) \u7684\u4e2a\u6570\u3002 \u4f46\u5b9e\u9645\u60c5\u51b5\u4e0b DLX \u8868\u73b0\u826f\u597d\uff0c\u4e00\u822c\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7684\u95ee\u9898\u3002 \u5982\u4f55\u5efa\u6a21 \u00b6 DLX \u7684\u96be\u70b9\uff0c\u4e0d\u5168\u5728\u4e8e\u94fe\u8868\u7684\u5efa\u7acb\uff0c\u800c\u5728\u4e8e\u5efa\u6a21\u3002 \u8bf7\u786e\u4fdd\u5df2\u7ecf\u5b8c\u5168\u638c\u63e1 DLX \u6a21\u677f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u6211\u4eec\u6bcf\u62ff\u5230\u4e00\u4e2a\u9898\uff0c\u5e94\u8be5\u8003\u8651\u884c\u548c\u5217\u6240\u8868\u793a\u7684\u610f\u4e49\uff1a \u884c\u8868\u793a \u51b3\u7b56 \uff0c\u56e0\u4e3a\u6bcf\u884c\u5bf9\u5e94\u7740\u4e00\u4e2a\u96c6\u5408\uff0c\u4e5f\u5c31\u5bf9\u5e94\u7740\u9009/\u4e0d\u9009\uff1b \u5217\u8868\u793a \u72b6\u6001 \uff0c\u56e0\u4e3a\u7b2c \\(i\\) \u5217\u5bf9\u5e94\u7740\u67d0\u4e2a\u6761\u4ef6 \\(P_i\\) \u3002 \u5bf9\u4e8e\u67d0\u4e00\u884c\u800c\u8a00\uff0c\u7531\u4e8e\u4e0d\u540c\u7684\u5217\u7684\u503c\u4e0d\u5c3d\u76f8\u540c\uff0c\u6211\u4eec \u7531\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51b3\u7b56 \u3002 \u4f8b\u9898\u4e00 \u6570\u72ec \u00b6 \u89e3\u9898\u601d\u8def \u5148\u8003\u8651\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u5728\u8fd9\u4e00\u9898\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u51b3\u7b56\u53ef\u4ee5\u7528\u5f62\u5982 \\((r, c, w)\\) \u7684\u6709\u5e8f\u4e09\u5143\u7ec4\u8868\u793a\u3002 \u6ce8\u610f\u5230\u201c\u5bab\u201d\u5e76\u4e0d\u662f\u51b3\u7b56\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83 \u53ef\u4ee5\u88ab\u6bcf\u4e2a\u786e\u5b9a\u7684 \\((r, c)\\) \u8868\u793a \u3002 \u56e0\u6b64\u6709 \\(9 \\times 9 \\times 9 = 729\\) \u884c\u3002 \u518d\u8003\u8651\u72b6\u6001\u662f\u4ec0\u4e48\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b \\((r, c, w)\\) \u8fd9\u4e2a\u51b3\u5c06\u4f1a\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002\u8bb0 \\((r, c)\\) \u6240\u5728\u7684\u5bab\u4e3a \\(b\\) \u3002 \u7b2c \\(r\\) \u884c\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(c\\) \u5217\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(b\\) \u5bab\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \\((r, c)\\) \u4e2d\u586b\u5165\u4e86\u4e00\u4e2a\u6570\uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\u3002 \u56e0\u6b64\u6709 \\(81 \\times 4 = 324\\) \u5217\uff0c\u5171 \\(729 \\times 4 = 2916\\) \u4e2a \\(1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06 \\(9 \\times 9\\) \u7684\u6570\u72ec\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a **\u6709 \\(729\\) \u884c\uff0c \\(324\\) \u5217\uff0c\u5171 \\(2916\\) \u4e2a \\(1\\) ** \u7684\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <bits/stdc++.h> #define LL long long #define rgi register int #define il inline const int N = 1e6 + 10 ; #define JUDGE 0 #define DEBUG 0 int ans [ 10 ][ 10 ], stk [ N ]; il int read () { rgi x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance ( int dep ) { rgi i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { for ( i = 1 ; i < dep ; ++ i ) { int x = ( stk [ i ] - 1 ) / 9 / 9 + 1 ; int y = ( stk [ i ] - 1 ) / 9 % 9 + 1 ; int v = ( stk [ i ] - 1 ) % 9 + 1 ; ans [ x ][ y ] = v ; } return 1 ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } } solver ; int GetId ( int row , int col , int num ) { return ( row - 1 ) * 9 * 9 + ( col - 1 ) * 9 + num ; } void Insert ( int row , int col , int num ) { int dx = ( row - 1 ) / 3 + 1 ; int dy = ( col - 1 ) / 3 + 1 ; int room = ( dx - 1 ) * 3 + dy ; int id = GetId ( row , col , num ); int f1 = ( row - 1 ) * 9 + num ; // task 1 int f2 = 81 + ( col - 1 ) * 9 + num ; // task 2 int f3 = 81 * 2 + ( room - 1 ) * 9 + num ; // task 3 int f4 = 81 * 3 + ( row - 1 ) * 9 + col ; // task 4 solver . insert ( id , f1 ); solver . insert ( id , f2 ); solver . insert ( id , f3 ); solver . insert ( id , f4 ); } int main () { #if JUDGE freopen ( \".in\" , \"r\" , stdin ); freopen ( \".out\" , \"w\" , stdout ); #endif solver . build ( 729 , 324 ); for ( rgi i = 1 ; i <= 9 ; ++ i ) for ( rgi j = 1 ; j <= 9 ; ++ j ) { ans [ i ][ j ] = read (); for ( rgi v = 1 ; v <= 9 ; ++ v ) { if ( ans [ i ][ j ] && ans [ i ][ j ] != v ) continue ; Insert ( i , j , v ); } } solver . dance ( 1 ); for ( rgi i = 1 ; i <= 9 ; ++ i , putchar ( '\\n' )) for ( rgi j = 1 ; j <= 9 ; ++ j , putchar ( ' ' )) printf ( \"%d\" , ans [ i ][ j ]); return 0 ; } \u4f8b\u9898\u4e8c \u9776\u5f62\u6570\u72ec \u00b6 \u89e3\u9898\u601d\u8def \u8fd9\u4e00\u9898\u4e0e \u6570\u72ec \u7684\u6a21\u578b\u6784\u5efa \u4e00\u6a21\u4e00\u6837 \uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u7b54\u6848\u7684\u66f4\u65b0\u3002 \u8fd9\u4e00\u9898\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6743\u503c\u6570\u7ec4\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u7ec4\u6570\u72ec\u7684\u89e3\u65f6\uff0c \u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u4e58\u4e0a\u5bf9\u5e94\u7684\u6743\u503c\u8ba1\u5165\u7b54\u6848\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> #define LL long long #define il inline const int oo = 0x3f3f3f3f ; const int N = 1e5 + 10 ; const int e [] = { 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 7 , 8 , 8 , 8 , 8 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 9 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 10 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 9 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 8 , 8 , 8 , 8 , 7 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 }; int ans = - oo , a [ 10 ][ 10 ], stk [ N ]; il int read () { int x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } int GetWeight ( int row , int col , int num ) { return num * e [( row - 1 ) * 9 + ( col - 1 )]; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( int i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { int i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { int i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } void dance ( int dep ) { int i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { int cur_ans = 0 ; for ( i = 1 ; i < dep ; ++ i ) { int cur_row = ( stk [ i ] - 1 ) / 9 / 9 + 1 ; int cur_col = ( stk [ i ] - 1 ) / 9 % 9 + 1 ; int cur_num = ( stk [ i ] - 1 ) % 9 + 1 ; cur_ans += GetWeight ( cur_row , cur_col , cur_num ); } ans = std :: max ( ans , cur_ans ); return ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); dance ( dep + 1 ); IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); } } solver ; int GetId ( int row , int col , int num ) { return ( row - 1 ) * 9 * 9 + ( col - 1 ) * 9 + num ; } void Insert ( int row , int col , int num ) { int dx = ( row - 1 ) / 3 + 1 ; // r int dy = ( col - 1 ) / 3 + 1 ; // c int room = ( dx - 1 ) * 3 + dy ; // room int id = GetId ( row , col , num ); int f1 = ( row - 1 ) * 9 + num ; // task 1 int f2 = 81 + ( col - 1 ) * 9 + num ; // task 2 int f3 = 81 * 2 + ( room - 1 ) * 9 + num ; // task 3 int f4 = 81 * 3 + ( row - 1 ) * 9 + col ; // task 4 solver . insert ( id , f1 ); solver . insert ( id , f2 ); solver . insert ( id , f3 ); solver . insert ( id , f4 ); } int main () { solver . build ( 729 , 324 ); for ( int i = 1 ; i <= 9 ; ++ i ) for ( int j = 1 ; j <= 9 ; ++ j ) { a [ i ][ j ] = read (); for ( int v = 1 ; v <= 9 ; ++ v ) { if ( a [ i ][ j ] && v != a [ i ][ j ]) continue ; Insert ( i , j , v ); } } solver . dance ( 1 ); printf ( \"%d\" , ans == - oo ? - 1 : ans ); return 0 ; } \u4f8b\u9898\u4e09 \u300cNOI2005\u300d\u667a\u6167\u73e0\u6e38\u620f \u00b6 \u89e3\u9898\u601d\u8def \u5b9a\u4e49\uff1a\u9898\u4e2d\u7ed9\u6211\u4eec\u7684\u667a\u6167\u73e0\u7684\u5f62\u6001\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u667a\u6167\u73e0\u7684 \u6807\u51c6\u5f62\u6001 \u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u4e24\u4e2a\u53c2\u6570 \\(d\\) \uff08\u8868\u793a\u987a\u65f6\u9488\u65cb\u8f6c \\(90^{\\circ}\\) \u7684\u6b21\u6570\uff09\u548c \\(f\\) \uff08\u662f\u5426\u6c34\u5e73\u7ffb\u8f6c\uff09\u6765\u6539\u53d8\u8fd9\u4e2a\u667a\u6167\u73e0\u7684\u5f62\u6001\u3002 \u4ecd\u7136\uff0c\u6211\u4eec\u5148\u8003\u8651\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u5728\u8fd9\u4e00\u9898\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u51b3\u7b56\u53ef\u4ee5\u7528\u5f62\u5982 \\((v, d, f, i)\\) \u7684\u6709\u5e8f\u4e94\u5143\u7ec4\u8868\u793a\u3002 \u8868\u793a\u7b2c \\(i\\) \u4e2a\u667a\u6167\u73e0\u7684*\u6807\u51c6\u5f62\u6001*\u7684\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e\uff0c\u5e8f\u53f7\u4e3a \\(v\\) \uff0c\u7ecf\u8fc7\u4e86 \\(d\\) \u6b21\u987a\u65f6\u9488\u8f6c \\(90^{\\circ}\\) \u3002 \u5de7\u5408\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \\(f = 1\\) \u65f6\u4e0d\u6c34\u5e73\u7ffb\u8f6c\uff0c \\(f = -1\\) \u65f6\u6c34\u5e73\u7ffb\u8f6c\uff0c\u4ece\u800c\u8fbe\u5230\u7b80\u5316\u4ee3\u7801\u7684\u76ee\u7684\u3002 \u56e0\u6b64\u6709 \\(55 \\times 4 \\times 2 \\times 12 = 5280\\) \u884c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u4e00\u4e9b\u4e0d\u5408\u6cd5\u7684\u586b\u5145\uff0c\u5982 \\((1, 0, 1, 4)\\) \uff0c \u6240\u4ee5 \u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u7a7a\u7684\u667a\u6167\u73e0\u68cb\u76d8\u4e5f\u53ea\u9700\u8981\u5efa\u51fa \\(2730\\) \u884c\u3002 \u518d\u8003\u8651\u72b6\u6001\u662f\u4ec0\u4e48\u3002 \u8fd9\u4e00\u9898\u7684\u72b6\u6001\u6bd4\u8f83\u7b80\u5355\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c \\((v, d, f, i)\\) \u8fd9\u4e2a\u51b3\u7b56\u4f1a\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002 \u67d0\u4e9b\u683c\u5b50\u88ab\u5360\u4e86\uff08\u7528 \\(55\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(i\\) \u4e2a\u667a\u6167\u73e0\u88ab\u7528\u4e86\uff08\u7528 \\(12\\) \u5217\u8868\u793a\uff09\u3002 \u56e0\u6b64\u6709 \\(55 + 12 = 67\\) \u5217\uff0c\u5171 \\(5280 \\times (5 + 1) = 31680\\) \u4e2a \\(1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06\u667a\u6167\u73e0\u6e38\u620f\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a **\u6709 \\(5280\\) \u884c\uff0c \\(67\\) \u5217\uff0c\u5171 \\(31680\\) \u4e2a \\(1\\) ** \u7684\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <bits/stdc++.h> #define LL long long int numcol , numrow ; int dfn [ 3000 ], tx [ 2 ], nxt [ 2 ], num [ 50 ][ 50 ], vis [ 50 ]; char ans [ 50 ][ 50 ]; const int f [ 2 ] = { - 1 , 1 }; const int table [ 12 ][ 5 ][ 2 ] = { // directions of shapes {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }}, // A {{ 0 , 0 }, { 0 , 1 }, { 0 , 2 }, { 0 , 3 }}, // B {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }}, // C {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 1 , 1 }}, // D {{ 0 , 0 }, { 1 , 0 }, { 2 , 0 }, { 2 , 1 }, { 2 , 2 }}, // E {{ 0 , 0 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }, { 0 , 3 }}, // F {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }, { 1 , 2 }}, // G {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }}, // H {{ 0 , 0 }, { 0 , 1 }, { 0 , 2 }, { 1 , 2 }, { 1 , 3 }}, // I {{ 0 , 0 }, { - 1 , 1 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }}, // J {{ 0 , 0 }, { 1 , 0 }, { 1 , 1 }, { 2 , 1 }, { 2 , 2 }}, // K {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }, { 0 , 3 }}, // L }; const int len [ 12 ] = { 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 }; const int getx [] = { 0 , 1 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 }; const int gety [] = { 0 , 1 , 1 , 2 , 1 , 2 , 3 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; struct DLX { static const int MS = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MS ], siz [ MS ]; int L [ MS ], R [ MS ], U [ MS ], D [ MS ]; int col [ MS ], row [ MS ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot , L [ tot ] = first [ r ], R [ first [ r ]] = tot ; // ! } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance () { if ( ! R [ 0 ]) return 1 ; rgi i , j , c = R [ 0 ]; IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { if ( col [ i ] <= 55 ) ans [ getx [ col [ i ]]][ gety [ col [ i ]]] = dfn [ row [ i ]] + 'A' ; IT ( j , R , i ) { remove ( col [ j ]); if ( col [ j ] <= 55 ) ans [ getx [ col [ j ]]][ gety [ col [ j ]]] = dfn [ row [ j ]] + 'A' ; } if ( dance ()) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } #undef IT } solver ; int main () { for ( rgi i = 1 ; i <= 10 ; ++ i ) scanf ( \"%s\" , ans [ i ] + 1 ); for ( rgi i = 1 ; i <= 10 ; ++ i ) for ( rgi j = 1 ; j <= i ; ++ j ) { if ( ans [ i ][ j ] != '.' ) vis [ ans [ i ][ j ] - 'A' ] = 1 ; num [ i ][ j ] = ++ numcol ; } solver . build ( 2730 , numcol + 12 ); /*******build*******/ for ( rgi id = 0 , op ; id < 12 ; ++ id ) { // every block for ( ++ numcol , op = 0 ; op <= 1 ; ++ op ) { for ( rgi dx = 0 ; dx <= 1 ; ++ dx ) { for ( rgi dy = 0 ; dy <= 1 ; ++ dy ) { for ( tx [ 0 ] = 1 ; tx [ 0 ] <= 10 ; ++ tx [ 0 ]) { for ( tx [ 1 ] = 1 ; tx [ 1 ] <= tx [ 0 ]; ++ tx [ 1 ]) { bool flag = 1 ; for ( rgi k = 0 ; k < len [ id ]; ++ k ) { nxt [ op ] = tx [ op ] + f [ dx ] * table [ id ][ k ][ 0 ]; nxt [ op ^ 1 ] = tx [ op ^ 1 ] + f [ dy ] * table [ id ][ k ][ 1 ]; if ( vis [ id ]) { if ( ans [ nxt [ 0 ]][ nxt [ 1 ]] != id + 'A' ) { flag = 0 ; break ; } } else if ( ans [ nxt [ 0 ]][ nxt [ 1 ]] != '.' ) { flag = 0 ; break ; } } if ( ! flag ) continue ; dfn [ ++ numrow ] = id ; solver . insert ( numrow , numcol ); for ( rgi k = 0 ; k < len [ id ]; ++ k ) { nxt [ op ] = tx [ op ] + f [ dx ] * table [ id ][ k ][ 0 ]; nxt [ op ^ 1 ] = tx [ op ^ 1 ] + f [ dy ] * table [ id ][ k ][ 1 ]; solver . insert ( numrow , num [ nxt [ 0 ]][ nxt [ 1 ]]); } } } } } } } /********end********/ if ( ! solver . dance ()) puts ( \"No solution\" ); else for ( rgi i = 1 ; i <= 10 ; ++ i , puts ( \"\" )) for ( rgi j = 1 ; j <= i ; ++ j ) putchar ( ans [ i ][ j ]); return 0 ; } \u7ec3\u4e60 \u00b6 SUDOKU - Sudoku \u300ckuangbin \u5e26\u4f60\u98de\u300d\u4e13\u9898\u4e09 Dancing Links \u603b\u7ed3 \u00b6 DLX \u80fd\u7528\u6765\u89e3\u51b3\u7cbe\u786e\u8986\u76d6\u95ee\u9898\uff0c\u9002\u5f53\u5730\u5efa\u7acb\u8d77\u6a21\u578b\u540e\u80fd\u89e3\u51b3\u4e00\u4e9b\u641c\u7d22\u9898\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 [1]\u82f1\u96c4\u54ea\u91cc\u51fa\u6765 \u7684 \u300a\u591c\u6df1\u4eba\u9759\u5199\u7b97\u6cd5\uff08\u4e5d\uff09- Dancing Links X\uff08\u8df3\u821e\u94fe\uff09\u300b [2]\u4e07\u4ed3\u4e00\u9ecd \u7684 \u300a\u8df3\u8dc3\u7684\u821e\u8005\uff0c\u821e\u8e48\u94fe\uff08Dancing Links\uff09\u7b97\u6cd5\u2014\u2014\u6c42\u89e3\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u300b [3]zhangjianjunab \u7684 \u300aDLX \u7b97\u6cd5\u4e00\u89c8\u300b [4]\u9759\u542c\u98ce\u541f\u3002\u7684 \u300a\u641c\u7d22\uff1aDLX \u7b97\u6cd5\u300b [5]\u5218\u6c5d\u4f73\uff0c\u9648\u950b \u7684 \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178-\u8bad\u7ec3\u6307\u5357\u300b","title":"DLX \u7b97\u6cd5"},{"location":"posts/lectures/dlx/#_1","text":"","title":"\u7cbe\u786e\u8986\u76d6\u95ee\u9898"},{"location":"posts/lectures/dlx/#_2","text":"\u7cbe\u786e\u8986\u76d6\u95ee\u9898 (Exact Cover Problem) \u662f\u6307\u7ed9\u5b9a\u8bb8\u591a\u96c6\u5408 \\(S_i (1 \\le i \\le n)\\) \u4ee5\u53ca\u4e00\u4e2a\u96c6\u5408 \\(X\\) \uff0c\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u65e0\u5e8f\u591a\u5143\u7ec4 \\((T_1, T_2, \\cdots , T_m)\\) \uff1a \\(\\forall i, j \\in [1, m],T_i\\bigcap T_j = \\varnothing (i \\neq j)\\) \\(X = \\bigcup\\limits_{i = 1}^{m}T_i\\) \\(\\forall i \\in[1, m], T_i \\in \\\\{S_1, S_2, \\cdots, S_n\\\\}\\) \u4e00\u4e2a\u300c\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u300d\u7684\u4f8b\u5b50 \u7ed9\u51fa $$ \\begin{aligned} & S_1 = \\{5, 9, 17\\} \\\\ & S_2 = \\{1, 8, 119\\} \\\\ & S_3 = \\{3, 5, 17\\} \\\\ & S_4 = \\{1, 8\\} \\\\ & S_5 = \\{3, 119\\} \\\\ & S_6 = \\{8, 9, 119\\} \\\\ & X = \\{1, 3, 5, 8, 9, 17, 119\\} \\end{aligned} $$ \u5219 \\((S_1, S_4, S_5)\\) \u4e3a\u4e00\u7ec4\u5408\u6cd5\u89e3\u3002","title":"\u5b9a\u4e49"},{"location":"posts/lectures/dlx/#_3","text":"\u6211\u4eec\u5c06 \\(\\bigcup\\limits_{i = 1}^{n}S_i\\) \u4e2d\u7684\u6240\u6709\u6570\u79bb\u6563\u5316\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e48\u4e00\u4e2a\u6a21\u578b\uff1a \u7ed9\u5b9a\u4e00\u4e2a 01 \u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u884c\uff0c\u4f7f\u5f97\u6700\u7ec8\u6bcf\u5217\u90fd\u6070\u597d\u6709\u4e00\u4e2a 1\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5bf9\u4e0a\u6587\u4e2d\u7684\u4f8b\u5b50\u8fdb\u884c\u5efa\u6a21\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e48\u4e00\u4e2a\u77e9\u9635\uff1a $$ \\begin{pmatrix} 0 & 0 & 1 & 0 & 1 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 1 \\\\ 0 & 1 & 1 & 0 & 0 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 & 1 & 0 & 1 \\end{pmatrix} $$ \u5176\u4e2d\u7b2c \\(i\\) \u884c\u8868\u793a\u7740 \\(S_i\\) \uff0c\u800c\u8fd9\u884c\u7684\u6bcf\u4e2a\u6570\u4f9d\u6b21\u8868\u793a \\([1 \\in S_i],[3 \\in S_i],[5 \\in S_i],\\cdots,[119 \\in S_i]\\) \u3002","title":"\u95ee\u9898\u8f6c\u5316"},{"location":"posts/lectures/dlx/#1","text":"\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u9009\u62e9\u54ea\u4e9b\u884c\uff0c\u6700\u540e\u68c0\u67e5\u8fd9\u4e2a\u65b9\u6848\u662f\u5426\u5408\u6cd5\u3002 \u56e0\u4e3a\u6bcf\u4e00\u884c\u90fd\u6709\u9009\u6216\u8005\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u6240\u4ee5\u679a\u4e3e\u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(2^n)\\) \u7684\uff1b \u800c\u6bcf\u6b21\u68c0\u67e5\u90fd\u9700\u8981 \\(O(nm)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u662f \\(O(nm\\cdot2^n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int ok = 0 ; for ( int state = 0 ; state < 1 << n ; ++ state ) { // \u679a\u4e3e\u6bcf\u884c\u662f\u5426\u88ab\u9009 for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) for ( int j = 1 ; j <= m ; ++ j ) a [ i ][ j ] = 1 ; int flag = 1 ; for ( int j = 1 ; j <= m ; ++ j ) for ( int i = 1 , bo = 0 ; i <= n ; ++ i ) if ( a [ i ][ j ]) { if ( bo ) flag = 0 ; else bo = 1 ; } if ( ! flag ) continue ; else { ok = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) printf ( \"%d \" , i ); puts ( \"\" ); } memset ( a , 0 , sizeof ( a )); } if ( ! ok ) puts ( \"No solution.\" );","title":"\u66b4\u529b 1"},{"location":"posts/lectures/dlx/#2","text":"\u8003\u8651\u5230 01 \u77e9\u9635\u7684\u7279\u6b8a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u884c\u90fd\u770b\u505a\u6210\u4e00\u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\u3002 \u56e0\u6b64\u88ab\u8f6c\u5316\u4e3a\u4e86 \u7ed9\u4f60 \\(n\\) \u4e2a \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u8981\u6c42\u9009\u62e9\u4e00\u4e9b\u6570\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u6570\u7684\u4e0e\u90fd\u4e3a 0\uff0c\u4e14\u6240\u6709\u6570\u7684\u6216\u4e3a \\(2^m - 1\\) \u3002 tmp \u8868\u793a\u7684\u662f\u622a\u81f3\u76ee\u524d\u7684\u6240\u6709\u88ab\u9009\u62e9\u4e86\u7684 \\(m\\) \u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u6216\u3002 \u56e0\u4e3a\u6bcf\u4e00\u884c\u90fd\u6709\u9009\u6216\u8005\u4e0d\u9009\u4e24\u79cd\u72b6\u6001\uff0c\u6240\u4ee5\u679a\u4e3e\u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(2^n)\\) \uff1b \u800c\u6bcf\u6b21\u8ba1\u7b97 tmp \u90fd\u9700\u8981 \\(O(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u4e3a \\(O(n\\cdot2^n)\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int ok = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = m ; j >= 1 ; -- j ) num [ i ] = num [ i ] << 1 | a [ i ][ j ]; for ( int state = 0 ; state < 1 << n ; ++ state ) { int tmp = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) { if ( tmp & num [ i ]) break ; tmp |= num [ i ]; } if ( tmp == ( 1 << m ) - 1 ) { ok = 1 ; for ( int i = 1 ; i <= n ; ++ i ) if (( 1 << i - 1 ) & state ) printf ( \"%d \" , i ); puts ( \"\" ); } } if ( ! ok ) puts ( \"No solution.\" );","title":"\u66b4\u529b 2"},{"location":"posts/lectures/dlx/#x","text":"Donald E. Knuth \u63d0\u51fa\u4e86 X \u7b97\u6cd5 (Algorithm X)\uff0c\u5176\u601d\u60f3\u4e0e\u521a\u624d\u7684\u66b4\u529b\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u65b9\u4fbf\u4f18\u5316\u3002 \u7ee7\u7eed\u4ee5\u4e0a\u6587\u4e2d\u4e2d\u63d0\u5230\u7684\u4f8b\u5b50\u4e3a\u8f7d\u4f53\uff0c\u6211\u4eec\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u8fd9\u6837\u7684 01 \u77e9\u9635\uff1a $$ \\begin{pmatrix} 0 & 0 & 1 & 0 & 1 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 1 \\\\ 0 & 1 & 1 & 0 & 0 & 1 & 0 \\\\ 1 & 0 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 & 0 & 1 \\\\ 0 & 0 & 0 & 1 & 1 & 0 & 1 \\end{pmatrix} $$ 1. \u6b64\u65f6\u7b2c\u4e00\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e8c\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e09\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u56db\u884c\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e94\u884c\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u516d\u884c\u6709 \\(3\\) \u4e2a \\(1\\) \u3002\u9009\u62e9\u7b2c\u4e00\u884c\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}0 & 1 \\\\ 0 & 1 & \\color{Red}1 & 0 & \\color{Red}0 & \\color{Red}1 & 0 \\\\ 1 & 0 & \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}0 & 0 \\\\ 0 & 1 & \\color{Red}0 & 0 & \\color{Red}0 & \\color{Red}0 & 1 \\\\ 0 & 0 & \\color{Red}0 & 1 & \\color{Red}1 & \\color{Red}0 & 1 \\end{pmatrix} $$ 2. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Red}0 & \\color{Red}1 & \\color{Blue}1 & \\color{Red}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Red}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 0 \\\\ 0 & 1 & \\color{Blue}0 & 0 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Red}0 & \\color{Red}0 & \\color{Blue}0 & \\color{Red}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Red}1 \\end{pmatrix} $$ 3. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ 1 & 0 & \\color{Blue}0 & 1 & \\color{Blue}0 & \\color{Blue}0 & 0 \\\\ 0 & 1 & \\color{Blue}0 & 0 & \\color{Blue}0 & \\color{Blue}0 & 1 \\\\ \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ \u8fd9\u8868\u793a\u8868\u793a\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u884c\uff0c\u4e14\u8fd9\u4e00\u884c\u7684\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u4e0d\u80fd\u6709\u5176\u4ed6 \\(1\\) \u4e86\u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u65b0\u7684\u5c0f 01 \u77e9\u9635\uff1a $$ \\begin{pmatrix} 1 & 0 & 1 & 1 \\\\ 1 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 1 \\end{pmatrix} $$ 4. \u6b64\u65f6\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e8c\u884c\uff09\u6709 \\(3\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e8c\u884c\uff08\u539f\u6765\u7684\u7b2c\u56db\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u7b2c\u4e09\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e94\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \u3002\u9009\u62e9\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e8c\u884c\uff09\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Red}1 & 0 & \\color{Red}1 & \\color{Red}0 \\\\ \\color{Red}0 & 1 & \\color{Red}0 & \\color{Red}1 \\end{pmatrix} $$ 5. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Red}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & \\color{Red}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ 6. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 \\end{pmatrix} $$ \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u77e9\u9635\u3002\u4f46\u662f\u4e0a\u6b21\u5220\u9664\u7684\u884c \"1 0 1 1\" \u4e0d\u662f\u5168 \\(1\\) \u7684\uff0c\u8bf4\u660e\u9009\u62e9\u6709\u8bef\uff1b $$ \\begin{pmatrix} \\end{pmatrix} $$ 7. \u56de\u6eaf\u5230\u6b65\u9aa4 \\(4\\) \uff0c\u6211\u4eec\u8003\u8651\u9009\u62e9\u7b2c\u4e8c\u884c\uff08\u539f\u6765\u7684\u7b2c\u56db\u884c\uff09\uff0c\u5c06\u5b83\u5220\u9664\uff0c\u5e76\u5c06\u6240\u6709 \\(1\\) \u6240\u5728\u7684\u5217\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Red}1 & 0 & \\color{Red}1 & 1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Red}0 & 1 & \\color{Red}0 & 1 \\end{pmatrix} $$ 8. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5217\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5217\u4e2d\u542b \\(1\\) \u7684\u884c\u6253\u4e0a\u6807\u8bb0\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Red}0 & \\color{Blue}1 & \\color{Red}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & 1 & \\color{Blue}0 & 1 \\end{pmatrix} $$ 9. \u9009\u62e9\u6240\u6709\u88ab\u6807\u8bb0\u7684\u884c\uff0c\u5c06\u5b83\u4eec\u5220\u9664\uff1b $$ \\begin{pmatrix} \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}1 \\\\ \\color{Blue}1 & \\color{Blue}0 & \\color{Blue}1 & \\color{Blue}0 \\\\ \\color{Blue}0 & 1 & \\color{Blue}0 & 1 \\end{pmatrix} $$ \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u77e9\u9635\uff1a $$ \\begin{pmatrix} 1 & 1 \\end{pmatrix} $$ 10. \u6b64\u65f6\u7b2c\u4e00\u884c\uff08\u539f\u6765\u7684\u7b2c\u4e94\u884c\uff09\u6709 \\(2\\) \u4e2a \\(1\\) \uff0c\u5c06\u5b83\u4eec\u5168\u90e8\u5220\u9664\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7a7a\u77e9\u9635\uff1a $$ \\begin{pmatrix} \\end{pmatrix} $$ 11. \u4e0a\u4e00\u6b21\u5220\u9664\u7684\u65f6\u5019\uff0c\u5220\u9664\u7684\u662f\u5168 \\(1\\) \u7684\u884c\uff0c\u56e0\u6b64\u6210\u529f\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\u7b54\u6848\u5373\u4e3a\u6211\u4eec\u5220\u9664\u7684\u4e09\u884c\uff1a \\(1, 4, 5\\) \u3002 \u5f3a\u70c8\u5efa\u8bae\u81ea\u5df1\u6a21\u62df\u4e00\u904d\u77e9\u9635\u5220\u9664\u3001\u8fd8\u539f\u4e0e\u56de\u6eaf\u7684\u8fc7\u7a0b\u540e\u518d\u63a5\u7740\u9605\u8bfb\u4e0b\u6587\u3002 \u6211\u4eec\u53ef\u4ee5\u6982\u62ec\u51fa X \u7b97\u6cd5\u7684\u8fc7\u7a0b\uff1a \u5bf9\u4e8e\u73b0\u5728\u7684\u77e9\u9635 \\(M\\) \uff0c\u9009\u62e9\u5e76\u6807\u8bb0\u4e00\u5217 \\(r\\) \uff0c\u5c06 \\(r\\) \u6dfb\u52a0\u81f3 \\(S\\) \u4e2d\uff1b \u5982\u679c\u5c1d\u8bd5\u4e86\u6240\u6709\u7684 \\(r\\) \u5374\u65e0\u89e3\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\uff0c\u8f93\u51fa\u65e0\u89e3\u3002 \u6807\u8bb0\u4e0e \\(r\\) \u76f8\u5173\u7684\u884c \\(r_i\\) \u548c \\(c_i\\) \uff1b \u5220\u9664\u6240\u6709\u6807\u8bb0\u7684\u884c\u548c\u5217\uff0c\u5f97\u5230\u65b0\u77e9\u9635 \\(M'\\) \uff1b \u5982\u679c \\(M'\\) \u4e3a\u7a7a\uff0c\u4e14 \\(r\\) \u4e3a\u5168 \\(1\\) \u7684\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\uff0c\u8f93\u51fa\u88ab\u5220\u9664\u7684\u884c\u7ec4\u6210\u7684\u96c6\u5408 \\(S\\) \uff1b \u5982\u679c \\(M'\\) \u4e3a\u7a7a\uff0c\u4e14 \\(r\\) \u4e0d\u4e3a\u5168 \\(1\\) \u7684\uff0c\u5219\u6062\u590d\u4e0e \\(r\\) \u76f8\u5173\u7684\u884c \\(r_i\\) \u4ee5\u53ca\u5217 \\(c_i\\) \uff0c\u8df3\u8f6c\u81f3\u6b65\u9aa4 \\(1\\) \uff1b \u5982\u679c \\(M'\\) \u4e0d\u4e3a\u7a7a\uff0c\u5219\u8df3\u8f6c\u81f3\u6b65\u9aa4 \\(1\\) \u3002 \u4e0d\u96be\u770b\u51fa\uff0cX \u7b97\u6cd5\u9700\u8981\u5927\u91cf\u7684\u201c\u5220\u9664\u884c\u201d\u3001\u201c\u5220\u9664\u5217\u201d\u548c\u201c\u6062\u590d\u884c\u201d\u3001\u201c\u6062\u590d\u5217\u201d\u7684\u64cd\u4f5c\u3002 Donald E. Knuth \u60f3\u5230\u4e86\u7528\u53cc\u5411\u5341\u5b57\u94fe\u8868\u6765\u7ef4\u62a4\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u800c\u5728\u53cc\u5411\u5341\u5b57\u94fe\u8868\u4e0a\u4e0d\u65ad\u8df3\u8dc3\u7684\u8fc7\u7a0b\u88ab\u5f62\u8c61\u5730\u6bd4\u55bb\u6210\u201c\u8df3\u8dc3\u201d\uff0c\u56e0\u6b64\u88ab\u7528\u6765\u4f18\u5316 X \u7b97\u6cd5\u7684\u53cc\u5411\u5341\u5b57\u94fe\u8868\u4e5f\u88ab\u79f0\u4e3a\u201cDancing Links\u201d\u3002","title":"X \u7b97\u6cd5"},{"location":"posts/lectures/dlx/#dancing-links-x","text":"","title":"Dancing Links \u4f18\u5316\u7684 X \u7b97\u6cd5"},{"location":"posts/lectures/dlx/#_4","text":"1 #define IT(i, A, x) for (i = A[x]; i != x; i = A[i])","title":"\u9884\u7f16\u8bd1\u547d\u4ee4"},{"location":"posts/lectures/dlx/#_5","text":"\u65e2\u7136\u662f\u53cc\u5411\u5341\u5b57\u94fe\u8868\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u6709\u56db\u4e2a\u6307\u9488\u57df\u7684\uff1a\u4e00\u4e2a\u6307\u4e0a\u65b9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u4e0b\u65b9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u5de6\u8fb9\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u53f3\u8fb9\u7684\u5143\u7d20\u3002\u800c\u6bcf\u4e2a\u5143\u7d20 \\(i\\) \u5728\u6574\u4e2a\u53cc\u5411\u5341\u5b57\u94fe\u8868\u7cfb\u4e2d\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u683c\u5b50\uff0c\u56e0\u6b64\u8fd8\u8981\u8868\u793a \\(i\\) \u6240\u5728\u7684\u5217\u548c\u6240\u5728\u7684\u8fd9\u6837\uff1a \u662f\u4e0d\u662f\u975e\u5e38\u7b80\u5355\uff1f \u800c\u5176\u5b9e\u5927\u578b\u53cc\u5411\u94fe\u8868\u5176\u5b9e\u662f\u957f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a\u884c\u9996\u6307\u793a\uff0c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a\u5217\u6307\u793a\u3002 \u884c\u9996\u6307\u793a\u4e3a first[] \uff0c\u5217\u6307\u793a\u662f\u6211\u4eec\u865a\u62df\u51fa\u7684 \\(c + 1\\) \u4e2a\u7ed3\u70b9\u3002 \u540c\u65f6\uff0c\u6bcf\u4e00\u5217\u90fd\u6709\u4e00\u4e2a siz[] \u8868\u793a\u8fd9\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u7279\u6b8a\u5730\uff0c \\(0\\) \u53f7\u7ed3\u70b9\u65e0\u53f3\u7ed3\u70b9\u7b49\u4ef7\u4e8e\u8fd9\u4e2a Dancing Links \u4e3a\u7a7a\u3002 1 2 3 4 static const int MS = 1e5 + 5 ; int n , m , idx , first [ MS ], siz [ MS ]; int L [ MS ], R [ MS ], U [ MS ], D [ MS ]; int col [ MS ], row [ MS ];","title":"\u5b9a\u4e49"},{"location":"posts/lectures/dlx/#remove","text":"\\(\\textrm{remove(c)}\\) \u8868\u793a\u5728 Dancing Links \u4e2d\u5220\u9664\u7b2c \\(c\\) \u5217\u4ee5\u53ca\u4e0e\u5176\u76f8\u5173\u7684\u884c\u548c\u5217\u3002 \u6211\u4eec\u5148\u5c06 \\(c\\) \u5220\u9664\uff0c\u6b64\u65f6\uff1a \\(c\\) \u5de6\u4fa7\u7684\u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u5e94\u4e3a \\(c\\) \u7684\u53f3\u7ed3\u70b9\uff1b \\(c\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u5e94\u4e3a \\(c\\) \u7684\u5de6\u7ed3\u70b9\u3002 \u5373 L[R[c]] = L[c], R[L[c]] = R[c]; \u3002 \u7136\u540e\u6211\u4eec\u8981\u987a\u7740\u8fd9\u4e00\u5217\u5f80\u4e0b\u8d70\uff0c\u628a\u8d70\u8fc7\u7684\u6bcf\u4e00\u884c\u90fd\u5220\u6389\u3002 \u5982\u4f55\u5220\u6389\u6bcf\u4e00\u884c\u5462\uff1f\u679a\u4e3e\u5f53\u524d\u884c\u7684\u6307\u9488 \\(j\\) \uff0c\u6b64\u65f6\uff1a \\(j\\) \u4e0a\u65b9\u7684\u7ed3\u70b9\u7684\u4e0b\u7ed3\u70b9\u5e94\u4e3a \\(j\\) \u7684\u4e0b\u7ed3\u70b9\uff1b \\(j\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\u7684\u4e0a\u7ed3\u70b9\u5e94\u4e3a \\(j\\) \u7684\u4e0a\u7ed3\u70b9\u3002 \u6ce8\u610f\u8981\u4fee\u6539\u6bcf\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u5373 U[D[j]] = U[j], D[U[j]] = D[j], --siz[col[j]]; \u3002 \u56e0\u6b64 \\(\\textrm{remove(c)}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff1a \u5176\u4e2d\u7b2c\u4e00\u4e2a IT(i, D, c) \u7b49\u4ef7\u4e8e for(i = D[c]; i != c; i = D[i]) \uff0c\u5373\u5728\u987a\u7740\u8fd9\u4e00\u5217\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\uff1b \u7b2c\u4e8c\u4e2a IT(j, R, i) \u7b49\u4ef7\u4e8e for(j = R[i]; j != i; j = R[j]) \uff0c\u5373\u5728\u987a\u7740\u8fd9\u4e00\u884c\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u3002 1 2 3 4 5 void remove ( const int & c ) { int i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; }","title":"remove \u64cd\u4f5c"},{"location":"posts/lectures/dlx/#recover","text":"\\(\\textrm{recover(c)}\\) \u8868\u793a\u5728 Dancing Links \u4e2d\u8fd8\u539f\u7b2c \\(c\\) \u5217\u4ee5\u53ca\u4e0e\u5176\u76f8\u5173\u7684\u884c\u548c\u5217\u3002 \\(\\textrm{recover(c)}\\) \u5373 \\(\\textrm{remove(c)}\\) \u7684\u9006\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u5c31\u4e0d\u591a\u8d58\u8ff0\u4e86\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c \\(\\textrm{recover(c)}\\) \u7684\u6240\u6709\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e \\(\\textrm{remove(c)}\\) \u7684\u64cd\u4f5c\u6070\u597d\u76f8\u53cd\u3002 \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{recover(c)}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 void recover ( const int & c ) { int i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; }","title":"recover \u64cd\u4f5c"},{"location":"posts/lectures/dlx/#build","text":"\\(\\textrm{build(r, c)}\\) \u8868\u793a\u65b0\u5efa\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(r \\times c\\) \uff0c\u5373\u6709 \\(r\\) \u884c\uff0c \\(c\\) \u5217\u7684 Dancing Links\u3002 \u6211\u4eec\u65b0\u5efa \\(c + 1\\) \u4e2a\u7ed3\u70b9\uff0c\u4e3a\u5217\u6307\u793a\u3002 \u7b2c \\(i\\) \u4e2a\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(i - 1\\) \uff0c\u53f3\u7ed3\u70b9\u4e3a \\(i + 1\\) \uff0c\u4e0a\u7ed3\u70b9\u4e3a \\(i\\) \uff0c\u4e0b\u7ed3\u70b9\u4e3a \\(i\\) \u3002 \u7279\u6b8a\u5730\uff0c \\(0\\) \u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(c\\) \uff0c \\(c\\) \u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u4e3a \\(0\\) \u3002 \u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u6761\u94fe\uff1a 1 2 3 4 5 6 7 8 9 10 void build ( const int & r , const int & c ) { n = r , m = c ; for ( int i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , idx = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } \u8fd9\u6837\u5c31\u521d\u59cb\u5316\u4e86\u4e00\u4e2a Dancing Links\u3002","title":"build \u64cd\u4f5c"},{"location":"posts/lectures/dlx/#insert","text":"\\(\\textrm{insert(r, c)}\\) \u8868\u793a\u5728\u7b2c \\(r\\) \u884c\uff0c\u7b2c \\(c\\) \u5217\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\u3002 \u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u6765\u64cd\u4f5c\uff1a \u5982\u679c\u7b2c \\(r\\) \u884c\u6ca1\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4f7f \\(first(r)\\) \u6307\u5411\u8fd9\u4e2a\u5143\u7d20\uff1b \u5982\u679c\u7b2c \\(r\\) \u884c\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u65b0\u5143\u7d20 \u7528\u4e00\u79cd\u5947\u5f02\u7684\u65b9\u5f0f \u4e0e \\(c\\) \u548c \\(first(r)\\) \u8fde\u63a5\u8d77\u6765\u3002 \u5bf9\u4e8e\u60c5\u51b5 1\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 first[r] = L[idx] = R[idx] = idx; \u6765\u5b9e\u73b0\uff1b \u5bf9\u4e8e\u60c5\u51b5 2\uff0c\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u65b0\u5143\u7d20\u4e3a \\(idx\\) \uff09\uff1a \u6211\u4eec\u628a \\(idx\\) \u63d2\u5165\u5230 \\(c\\) \u7684\u6b63\u4e0b\u65b9\uff0c\u6b64\u65f6\uff1a \\(idx\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\u4e3a\u539f\u6765 \\(c\\) \u7684\u4e0b\u7ed3\u70b9\uff1b \\(idx\\) \u4e0b\u65b9\u7684\u7ed3\u70b9\uff08\u5373\u539f\u6765 \\(c\\) \u7684\u4e0b\u7ed3\u70b9\uff09\u7684\u4e0a\u7ed3\u70b9\u4e3a \\(idx\\) ; \\(idx\\) \u7684\u4e0a\u7ed3\u70b9\u4e3a \\(c\\) \uff1b \\(c\\) \u7684\u4e0b\u7ed3\u70b9\u4e3a \\(idx\\) \u3002 \u6ce8\u610f\u8bb0\u5f55 \\(idx\\) \u7684\u6240\u5728\u5217\u548c\u6240\u5728\u884c\uff0c\u4ee5\u53ca\u66f4\u65b0\u8fd9\u4e00\u5217\u7684\u5143\u7d20\u4e2a\u6570\u3002 1 2 col [ ++ idx ] = c , row [ idx ] = r , ++ siz [ c ]; U [ idx ] = c , D [ idx ] = D [ c ], U [ D [ c ]] = idx , D [ c ] = idx ; \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5b8c\u5168\u638c\u63e1\u8fd9\u51e0\u6b65\u7684\u987a\u5e8f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u6211\u4eec\u628a \\(idx\\) \u63d2\u5165\u5230 \\(first(r)\\) \u7684\u6b63\u53f3\u65b9\uff0c\u6b64\u65f6\uff1a \\(idx\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u4e3a\u539f\u6765 \\(first(r)\\) \u7684\u53f3\u7ed3\u70b9\uff1b \u539f\u6765 \\(first(r)\\) \u53f3\u4fa7\u7684\u7ed3\u70b9\u7684\u5de6\u7ed3\u70b9\u4e3a \\(idx\\) \uff1b \\(idx\\) \u7684\u5de6\u7ed3\u70b9\u4e3a \\(first(r)\\) \uff1b \\(first(r)\\) \u7684\u53f3\u7ed3\u70b9\u4e3a \\(idx\\) \u3002 1 2 L [ idx ] = first [ r ], R [ idx ] = R [ first [ r ]]; R [ first [ r ]] = idx , L [ R [ first [ r ]]] = idx ; \u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u5b8c\u5168\u638c\u63e1\u8fd9\u51e0\u6b65\u7684\u987a\u5e8f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u5bf9\u4e8e \\(\\textrm{insert(r, c)}\\) \u8fd9\u4e2a\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u56fe\u6765\u8f85\u52a9\u7406\u89e3\uff1a \u7559\u5fc3\u66f2\u7ebf\u7bad\u5934\u7684\u65b9\u5411\u3002 \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{insert(r, c)}\\) \u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 void insert ( const int & r , const int & c ) { row [ ++ idx ] = r , col [ idx ] = c , ++ siz [ c ]; U [ idx ] = D [ idx ] = c , U [ D [ c ]] = idx , D [ c ] = idx ; if ( ! first [ r ]) first [ r ] = L [ idx ] = R [ idx ] = idx ; else { L [ idx ] = first [ r ], R [ idx ] = R [ first [ r ]]; L [ R [ first [ r ]]] = idx , R [ first [ r ]] = idx ; } }","title":"insert \u64cd\u4f5c"},{"location":"posts/lectures/dlx/#dance","text":"\\(\\textrm{dance()}\\) \u5373\u4e3a\u9012\u5f52\u5730\u5220\u9664\u4ee5\u53ca\u8fd8\u539f\u5404\u4e2a\u884c\u5217\u7684\u8fc7\u7a0b\u3002 \u5982\u679c \\(0\\) \u53f7\u7ed3\u70b9\u6ca1\u6709\u53f3\u7ed3\u70b9\uff0c\u90a3\u4e48\u77e9\u9635\u4e3a\u7a7a\uff0c\u8bb0\u5f55\u7b54\u6848\u5e76\u8fd4\u56de\uff1b \u9009\u62e9\u5217\u5143\u7d20\u4e2a\u6570\u6700\u5c11\u7684\u4e00\u5217\uff0c\u5e76\u5220\u6389\u8fd9\u4e00\u5217\uff1b \u904d\u5386\u8fd9\u4e00\u5217\u6240\u6709\u6709 \\(1\\) \u7684\u884c\uff0c\u679a\u4e3e\u5b83\u662f\u5426\u88ab\u9009\u62e9\uff1b \u9012\u5f52\u8c03\u7528 \\(\\textrm{dance()}\\) \uff0c\u5982\u679c\u53ef\u884c\uff0c\u5219\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u5219\u6062\u590d\u88ab\u9009\u62e9\u7684\u884c\uff1b \u5982\u679c\u65e0\u89e3\uff0c\u5219\u8fd4\u56de\uff1b \u5728\u8fd9\u91cc\u7ed9\u51fa \\(\\textrm{dance()}\\) \u7684\u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 bool dance ( int dep ) { int i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { ans = dep ; return 1 ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } \u5176\u4e2d stk[] \u7528\u6765\u8bb0\u5f55\u7b54\u6848\u3002 \u6ce8\u610f\u6211\u4eec\u6bcf\u6b21\u4f18\u5148\u9009\u62e9\u5217\u5143\u7d20\u4e2a\u6570\u6700\u5c11\u7684\u4e00\u5217\u8fdb\u884c\u5220\u9664\uff0c\u8fd9\u6837\u80fd\u4fdd\u8bc1\u7a0b\u5e8f\u5177\u6709\u4e00\u5b9a\u7684\u542f\u53d1\u6027\uff0c\u4f7f\u641c\u7d22\u6811\u5206\u652f\u6700\u5c11\u3002","title":"dance \u64cd\u4f5c"},{"location":"posts/lectures/dlx/#_6","text":"\u300c\u6a21\u677f\u300d\u821e\u8e48\u94fe\uff08DLX\uff09 \u6a21\u677f\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <bits/stdc++.h> #define ll long long #define rgi register int #define rgl register ll #define il inline const int N = 500 + 10 ; int n , m , idx , ans ; int first [ N ], siz [ N ], stk [ N ]; struct DLXNODE { int lc , rc , up , dn , r , c ; }; il int read () { rgi x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance ( int dep ) { if ( ! R [ 0 ]) { ans = dep ; return 1 ; } rgi i , j , c = R [ 0 ]; IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } #undef IT } solver ; int main () { n = read (), m = read (); solver . build ( n , m ); for ( rgi i = 1 ; i <= n ; ++ i ) for ( rgi j = 1 ; j <= m ; ++ j ) { int x = read (); if ( x ) solver . insert ( i , j ); } solver . dance ( 1 ); if ( ans ) for ( rgi i = 1 ; i < ans ; ++ i ) printf ( \"%d \" , stk [ i ]); else puts ( \"No Solution!\" ); return 0 ; }","title":"\u6a21\u677f"},{"location":"posts/lectures/dlx/#_7","text":"DLX \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \u6307\u6570\u7ea7 \u7684\uff0c\u5b83\u9012\u5f52\u53ca\u56de\u6eaf\u7684\u6b21\u6570\u4e0e\u77e9\u9635\u4e2d \\(1\\) \u7684\u4e2a\u6570\u6709\u5173\uff0c\u4e0e\u77e9\u9635\u7684 \\(r, c\\) \u7b49\u53c2\u6570\u65e0\u5173\u3002 \u56e0\u6b64\u7406\u8bba\u590d\u6742\u5ea6\u5927\u6982\u5728 \\(O(c^n)\\) \u5de6\u53f3\uff0c\u5176\u4e2d \\(c\\) \u4e3a\u67d0\u4e2a\u975e\u5e38\u63a5\u8fd1\u4e8e \\(1\\) \u7684\u5e38\u6570\uff0c \\(n\\) \u4e3a\u77e9\u9635\u4e2d \\(1\\) \u7684\u4e2a\u6570\u3002 \u4f46\u5b9e\u9645\u60c5\u51b5\u4e0b DLX \u8868\u73b0\u826f\u597d\uff0c\u4e00\u822c\u80fd\u89e3\u51b3\u5927\u90e8\u5206\u7684\u95ee\u9898\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"posts/lectures/dlx/#_8","text":"DLX \u7684\u96be\u70b9\uff0c\u4e0d\u5168\u5728\u4e8e\u94fe\u8868\u7684\u5efa\u7acb\uff0c\u800c\u5728\u4e8e\u5efa\u6a21\u3002 \u8bf7\u786e\u4fdd\u5df2\u7ecf\u5b8c\u5168\u638c\u63e1 DLX \u6a21\u677f\u540e\u518d\u7ee7\u7eed\u9605\u8bfb\u672c\u6587\u3002 \u6211\u4eec\u6bcf\u62ff\u5230\u4e00\u4e2a\u9898\uff0c\u5e94\u8be5\u8003\u8651\u884c\u548c\u5217\u6240\u8868\u793a\u7684\u610f\u4e49\uff1a \u884c\u8868\u793a \u51b3\u7b56 \uff0c\u56e0\u4e3a\u6bcf\u884c\u5bf9\u5e94\u7740\u4e00\u4e2a\u96c6\u5408\uff0c\u4e5f\u5c31\u5bf9\u5e94\u7740\u9009/\u4e0d\u9009\uff1b \u5217\u8868\u793a \u72b6\u6001 \uff0c\u56e0\u4e3a\u7b2c \\(i\\) \u5217\u5bf9\u5e94\u7740\u67d0\u4e2a\u6761\u4ef6 \\(P_i\\) \u3002 \u5bf9\u4e8e\u67d0\u4e00\u884c\u800c\u8a00\uff0c\u7531\u4e8e\u4e0d\u540c\u7684\u5217\u7684\u503c\u4e0d\u5c3d\u76f8\u540c\uff0c\u6211\u4eec \u7531\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51b3\u7b56 \u3002","title":"\u5982\u4f55\u5efa\u6a21"},{"location":"posts/lectures/dlx/#_9","text":"\u89e3\u9898\u601d\u8def \u5148\u8003\u8651\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u5728\u8fd9\u4e00\u9898\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u51b3\u7b56\u53ef\u4ee5\u7528\u5f62\u5982 \\((r, c, w)\\) \u7684\u6709\u5e8f\u4e09\u5143\u7ec4\u8868\u793a\u3002 \u6ce8\u610f\u5230\u201c\u5bab\u201d\u5e76\u4e0d\u662f\u51b3\u7b56\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83 \u53ef\u4ee5\u88ab\u6bcf\u4e2a\u786e\u5b9a\u7684 \\((r, c)\\) \u8868\u793a \u3002 \u56e0\u6b64\u6709 \\(9 \\times 9 \\times 9 = 729\\) \u884c\u3002 \u518d\u8003\u8651\u72b6\u6001\u662f\u4ec0\u4e48\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b \\((r, c, w)\\) \u8fd9\u4e2a\u51b3\u5c06\u4f1a\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002\u8bb0 \\((r, c)\\) \u6240\u5728\u7684\u5bab\u4e3a \\(b\\) \u3002 \u7b2c \\(r\\) \u884c\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(c\\) \u5217\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(b\\) \u5bab\u7528\u4e86\u4e00\u4e2a \\(w\\) \uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\uff1b \\((r, c)\\) \u4e2d\u586b\u5165\u4e86\u4e00\u4e2a\u6570\uff08\u7528 \\(9 \\times 9 = 81\\) \u5217\u8868\u793a\uff09\u3002 \u56e0\u6b64\u6709 \\(81 \\times 4 = 324\\) \u5217\uff0c\u5171 \\(729 \\times 4 = 2916\\) \u4e2a \\(1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06 \\(9 \\times 9\\) \u7684\u6570\u72ec\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a **\u6709 \\(729\\) \u884c\uff0c \\(324\\) \u5217\uff0c\u5171 \\(2916\\) \u4e2a \\(1\\) ** \u7684\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 #include <bits/stdc++.h> #define LL long long #define rgi register int #define il inline const int N = 1e6 + 10 ; #define JUDGE 0 #define DEBUG 0 int ans [ 10 ][ 10 ], stk [ N ]; il int read () { rgi x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance ( int dep ) { rgi i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { for ( i = 1 ; i < dep ; ++ i ) { int x = ( stk [ i ] - 1 ) / 9 / 9 + 1 ; int y = ( stk [ i ] - 1 ) / 9 % 9 + 1 ; int v = ( stk [ i ] - 1 ) % 9 + 1 ; ans [ x ][ y ] = v ; } return 1 ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); if ( dance ( dep + 1 )) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } } solver ; int GetId ( int row , int col , int num ) { return ( row - 1 ) * 9 * 9 + ( col - 1 ) * 9 + num ; } void Insert ( int row , int col , int num ) { int dx = ( row - 1 ) / 3 + 1 ; int dy = ( col - 1 ) / 3 + 1 ; int room = ( dx - 1 ) * 3 + dy ; int id = GetId ( row , col , num ); int f1 = ( row - 1 ) * 9 + num ; // task 1 int f2 = 81 + ( col - 1 ) * 9 + num ; // task 2 int f3 = 81 * 2 + ( room - 1 ) * 9 + num ; // task 3 int f4 = 81 * 3 + ( row - 1 ) * 9 + col ; // task 4 solver . insert ( id , f1 ); solver . insert ( id , f2 ); solver . insert ( id , f3 ); solver . insert ( id , f4 ); } int main () { #if JUDGE freopen ( \".in\" , \"r\" , stdin ); freopen ( \".out\" , \"w\" , stdout ); #endif solver . build ( 729 , 324 ); for ( rgi i = 1 ; i <= 9 ; ++ i ) for ( rgi j = 1 ; j <= 9 ; ++ j ) { ans [ i ][ j ] = read (); for ( rgi v = 1 ; v <= 9 ; ++ v ) { if ( ans [ i ][ j ] && ans [ i ][ j ] != v ) continue ; Insert ( i , j , v ); } } solver . dance ( 1 ); for ( rgi i = 1 ; i <= 9 ; ++ i , putchar ( '\\n' )) for ( rgi j = 1 ; j <= 9 ; ++ j , putchar ( ' ' )) printf ( \"%d\" , ans [ i ][ j ]); return 0 ; }","title":"\u4f8b\u9898\u4e00 \u6570\u72ec"},{"location":"posts/lectures/dlx/#_10","text":"\u89e3\u9898\u601d\u8def \u8fd9\u4e00\u9898\u4e0e \u6570\u72ec \u7684\u6a21\u578b\u6784\u5efa \u4e00\u6a21\u4e00\u6837 \uff0c\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u7b54\u6848\u7684\u66f4\u65b0\u3002 \u8fd9\u4e00\u9898\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6743\u503c\u6570\u7ec4\uff0c\u6bcf\u6b21\u627e\u5230\u4e00\u7ec4\u6570\u72ec\u7684\u89e3\u65f6\uff0c \u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u4e58\u4e0a\u5bf9\u5e94\u7684\u6743\u503c\u8ba1\u5165\u7b54\u6848\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #include <bits/stdc++.h> #define LL long long #define il inline const int oo = 0x3f3f3f3f ; const int N = 1e5 + 10 ; const int e [] = { 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 7 , 8 , 8 , 8 , 8 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 9 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 10 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 9 , 9 , 9 , 8 , 7 , 6 , 6 , 7 , 8 , 8 , 8 , 8 , 8 , 7 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 }; int ans = - oo , a [ 10 ][ 10 ], stk [ N ]; il int read () { int x = 0 , f = 0 , ch ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return f ? - x : x ; } int GetWeight ( int row , int col , int num ) { return num * e [( row - 1 ) * 9 + ( col - 1 )]; } struct DLX { static const int MAXSIZE = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MAXSIZE + 10 ], siz [ MAXSIZE + 10 ]; int L [ MAXSIZE + 10 ], R [ MAXSIZE + 10 ], U [ MAXSIZE + 10 ], D [ MAXSIZE + 10 ]; int col [ MAXSIZE + 10 ], row [ MAXSIZE + 10 ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( int i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else { R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot ; L [ tot ] = first [ r ], R [ first [ r ]] = tot ; } } void remove ( const int & c ) { int i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { int i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } void dance ( int dep ) { int i , j , c = R [ 0 ]; if ( ! R [ 0 ]) { int cur_ans = 0 ; for ( i = 1 ; i < dep ; ++ i ) { int cur_row = ( stk [ i ] - 1 ) / 9 / 9 + 1 ; int cur_col = ( stk [ i ] - 1 ) / 9 % 9 + 1 ; int cur_num = ( stk [ i ] - 1 ) % 9 + 1 ; cur_ans += GetWeight ( cur_row , cur_col , cur_num ); } ans = std :: max ( ans , cur_ans ); return ; } IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { stk [ dep ] = row [ i ]; IT ( j , R , i ) remove ( col [ j ]); dance ( dep + 1 ); IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); } } solver ; int GetId ( int row , int col , int num ) { return ( row - 1 ) * 9 * 9 + ( col - 1 ) * 9 + num ; } void Insert ( int row , int col , int num ) { int dx = ( row - 1 ) / 3 + 1 ; // r int dy = ( col - 1 ) / 3 + 1 ; // c int room = ( dx - 1 ) * 3 + dy ; // room int id = GetId ( row , col , num ); int f1 = ( row - 1 ) * 9 + num ; // task 1 int f2 = 81 + ( col - 1 ) * 9 + num ; // task 2 int f3 = 81 * 2 + ( room - 1 ) * 9 + num ; // task 3 int f4 = 81 * 3 + ( row - 1 ) * 9 + col ; // task 4 solver . insert ( id , f1 ); solver . insert ( id , f2 ); solver . insert ( id , f3 ); solver . insert ( id , f4 ); } int main () { solver . build ( 729 , 324 ); for ( int i = 1 ; i <= 9 ; ++ i ) for ( int j = 1 ; j <= 9 ; ++ j ) { a [ i ][ j ] = read (); for ( int v = 1 ; v <= 9 ; ++ v ) { if ( a [ i ][ j ] && v != a [ i ][ j ]) continue ; Insert ( i , j , v ); } } solver . dance ( 1 ); printf ( \"%d\" , ans == - oo ? - 1 : ans ); return 0 ; }","title":"\u4f8b\u9898\u4e8c \u9776\u5f62\u6570\u72ec"},{"location":"posts/lectures/dlx/#noi2005","text":"\u89e3\u9898\u601d\u8def \u5b9a\u4e49\uff1a\u9898\u4e2d\u7ed9\u6211\u4eec\u7684\u667a\u6167\u73e0\u7684\u5f62\u6001\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u667a\u6167\u73e0\u7684 \u6807\u51c6\u5f62\u6001 \u3002 \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u4e24\u4e2a\u53c2\u6570 \\(d\\) \uff08\u8868\u793a\u987a\u65f6\u9488\u65cb\u8f6c \\(90^{\\circ}\\) \u7684\u6b21\u6570\uff09\u548c \\(f\\) \uff08\u662f\u5426\u6c34\u5e73\u7ffb\u8f6c\uff09\u6765\u6539\u53d8\u8fd9\u4e2a\u667a\u6167\u73e0\u7684\u5f62\u6001\u3002 \u4ecd\u7136\uff0c\u6211\u4eec\u5148\u8003\u8651\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u5728\u8fd9\u4e00\u9898\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u51b3\u7b56\u53ef\u4ee5\u7528\u5f62\u5982 \\((v, d, f, i)\\) \u7684\u6709\u5e8f\u4e94\u5143\u7ec4\u8868\u793a\u3002 \u8868\u793a\u7b2c \\(i\\) \u4e2a\u667a\u6167\u73e0\u7684*\u6807\u51c6\u5f62\u6001*\u7684\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e\uff0c\u5e8f\u53f7\u4e3a \\(v\\) \uff0c\u7ecf\u8fc7\u4e86 \\(d\\) \u6b21\u987a\u65f6\u9488\u8f6c \\(90^{\\circ}\\) \u3002 \u5de7\u5408\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \\(f = 1\\) \u65f6\u4e0d\u6c34\u5e73\u7ffb\u8f6c\uff0c \\(f = -1\\) \u65f6\u6c34\u5e73\u7ffb\u8f6c\uff0c\u4ece\u800c\u8fbe\u5230\u7b80\u5316\u4ee3\u7801\u7684\u76ee\u7684\u3002 \u56e0\u6b64\u6709 \\(55 \\times 4 \\times 2 \\times 12 = 5280\\) \u884c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u4e00\u4e9b\u4e0d\u5408\u6cd5\u7684\u586b\u5145\uff0c\u5982 \\((1, 0, 1, 4)\\) \uff0c \u6240\u4ee5 \u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u7a7a\u7684\u667a\u6167\u73e0\u68cb\u76d8\u4e5f\u53ea\u9700\u8981\u5efa\u51fa \\(2730\\) \u884c\u3002 \u518d\u8003\u8651\u72b6\u6001\u662f\u4ec0\u4e48\u3002 \u8fd9\u4e00\u9898\u7684\u72b6\u6001\u6bd4\u8f83\u7b80\u5355\u3002 \u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c \\((v, d, f, i)\\) \u8fd9\u4e2a\u51b3\u7b56\u4f1a\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\u3002 \u67d0\u4e9b\u683c\u5b50\u88ab\u5360\u4e86\uff08\u7528 \\(55\\) \u5217\u8868\u793a\uff09\uff1b \u7b2c \\(i\\) \u4e2a\u667a\u6167\u73e0\u88ab\u7528\u4e86\uff08\u7528 \\(12\\) \u5217\u8868\u793a\uff09\u3002 \u56e0\u6b64\u6709 \\(55 + 12 = 67\\) \u5217\uff0c\u5171 \\(5280 \\times (5 + 1) = 31680\\) \u4e2a \\(1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5730\u5c06\u667a\u6167\u73e0\u6e38\u620f\u8f6c\u5316\u6210\u4e86\u4e00\u4e2a **\u6709 \\(5280\\) \u884c\uff0c \\(67\\) \u5217\uff0c\u5171 \\(31680\\) \u4e2a \\(1\\) ** \u7684\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 #include <bits/stdc++.h> #define LL long long int numcol , numrow ; int dfn [ 3000 ], tx [ 2 ], nxt [ 2 ], num [ 50 ][ 50 ], vis [ 50 ]; char ans [ 50 ][ 50 ]; const int f [ 2 ] = { - 1 , 1 }; const int table [ 12 ][ 5 ][ 2 ] = { // directions of shapes {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }}, // A {{ 0 , 0 }, { 0 , 1 }, { 0 , 2 }, { 0 , 3 }}, // B {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }}, // C {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 1 , 1 }}, // D {{ 0 , 0 }, { 1 , 0 }, { 2 , 0 }, { 2 , 1 }, { 2 , 2 }}, // E {{ 0 , 0 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }, { 0 , 3 }}, // F {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }, { 1 , 2 }}, // G {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }}, // H {{ 0 , 0 }, { 0 , 1 }, { 0 , 2 }, { 1 , 2 }, { 1 , 3 }}, // I {{ 0 , 0 }, { - 1 , 1 }, { 0 , 1 }, { 1 , 1 }, { 0 , 2 }}, // J {{ 0 , 0 }, { 1 , 0 }, { 1 , 1 }, { 2 , 1 }, { 2 , 2 }}, // K {{ 0 , 0 }, { 1 , 0 }, { 0 , 1 }, { 0 , 2 }, { 0 , 3 }}, // L }; const int len [ 12 ] = { 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 }; const int getx [] = { 0 , 1 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 }; const int gety [] = { 0 , 1 , 1 , 2 , 1 , 2 , 3 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; struct DLX { static const int MS = 1e5 + 10 ; #define IT(i, A, x) for (i = A[x]; i != x; i = A[i]) int n , m , tot , first [ MS ], siz [ MS ]; int L [ MS ], R [ MS ], U [ MS ], D [ MS ]; int col [ MS ], row [ MS ]; void build ( const int & r , const int & c ) { n = r , m = c ; for ( rgi i = 0 ; i <= c ; ++ i ) { L [ i ] = i - 1 , R [ i ] = i + 1 ; U [ i ] = D [ i ] = i ; } L [ 0 ] = c , R [ c ] = 0 , tot = c ; memset ( first , 0 , sizeof ( first )); memset ( siz , 0 , sizeof ( siz )); } void insert ( const int & r , const int & c ) { col [ ++ tot ] = c , row [ tot ] = r , ++ siz [ c ]; D [ tot ] = D [ c ], U [ D [ c ]] = tot , U [ tot ] = c , D [ c ] = tot ; if ( ! first [ r ]) first [ r ] = L [ tot ] = R [ tot ] = tot ; else R [ tot ] = R [ first [ r ]], L [ R [ first [ r ]]] = tot , L [ tot ] = first [ r ], R [ first [ r ]] = tot ; // ! } void remove ( const int & c ) { rgi i , j ; L [ R [ c ]] = L [ c ], R [ L [ c ]] = R [ c ]; IT ( i , D , c ) IT ( j , R , i ) U [ D [ j ]] = U [ j ], D [ U [ j ]] = D [ j ], -- siz [ col [ j ]]; } void recover ( const int & c ) { rgi i , j ; IT ( i , U , c ) IT ( j , L , i ) U [ D [ j ]] = D [ U [ j ]] = j , ++ siz [ col [ j ]]; L [ R [ c ]] = R [ L [ c ]] = c ; } bool dance () { if ( ! R [ 0 ]) return 1 ; rgi i , j , c = R [ 0 ]; IT ( i , R , 0 ) if ( siz [ i ] < siz [ c ]) c = i ; remove ( c ); IT ( i , D , c ) { if ( col [ i ] <= 55 ) ans [ getx [ col [ i ]]][ gety [ col [ i ]]] = dfn [ row [ i ]] + 'A' ; IT ( j , R , i ) { remove ( col [ j ]); if ( col [ j ] <= 55 ) ans [ getx [ col [ j ]]][ gety [ col [ j ]]] = dfn [ row [ j ]] + 'A' ; } if ( dance ()) return 1 ; IT ( j , L , i ) recover ( col [ j ]); } recover ( c ); return 0 ; } #undef IT } solver ; int main () { for ( rgi i = 1 ; i <= 10 ; ++ i ) scanf ( \"%s\" , ans [ i ] + 1 ); for ( rgi i = 1 ; i <= 10 ; ++ i ) for ( rgi j = 1 ; j <= i ; ++ j ) { if ( ans [ i ][ j ] != '.' ) vis [ ans [ i ][ j ] - 'A' ] = 1 ; num [ i ][ j ] = ++ numcol ; } solver . build ( 2730 , numcol + 12 ); /*******build*******/ for ( rgi id = 0 , op ; id < 12 ; ++ id ) { // every block for ( ++ numcol , op = 0 ; op <= 1 ; ++ op ) { for ( rgi dx = 0 ; dx <= 1 ; ++ dx ) { for ( rgi dy = 0 ; dy <= 1 ; ++ dy ) { for ( tx [ 0 ] = 1 ; tx [ 0 ] <= 10 ; ++ tx [ 0 ]) { for ( tx [ 1 ] = 1 ; tx [ 1 ] <= tx [ 0 ]; ++ tx [ 1 ]) { bool flag = 1 ; for ( rgi k = 0 ; k < len [ id ]; ++ k ) { nxt [ op ] = tx [ op ] + f [ dx ] * table [ id ][ k ][ 0 ]; nxt [ op ^ 1 ] = tx [ op ^ 1 ] + f [ dy ] * table [ id ][ k ][ 1 ]; if ( vis [ id ]) { if ( ans [ nxt [ 0 ]][ nxt [ 1 ]] != id + 'A' ) { flag = 0 ; break ; } } else if ( ans [ nxt [ 0 ]][ nxt [ 1 ]] != '.' ) { flag = 0 ; break ; } } if ( ! flag ) continue ; dfn [ ++ numrow ] = id ; solver . insert ( numrow , numcol ); for ( rgi k = 0 ; k < len [ id ]; ++ k ) { nxt [ op ] = tx [ op ] + f [ dx ] * table [ id ][ k ][ 0 ]; nxt [ op ^ 1 ] = tx [ op ^ 1 ] + f [ dy ] * table [ id ][ k ][ 1 ]; solver . insert ( numrow , num [ nxt [ 0 ]][ nxt [ 1 ]]); } } } } } } } /********end********/ if ( ! solver . dance ()) puts ( \"No solution\" ); else for ( rgi i = 1 ; i <= 10 ; ++ i , puts ( \"\" )) for ( rgi j = 1 ; j <= i ; ++ j ) putchar ( ans [ i ][ j ]); return 0 ; }","title":"\u4f8b\u9898\u4e09 \u300cNOI2005\u300d\u667a\u6167\u73e0\u6e38\u620f"},{"location":"posts/lectures/dlx/#_11","text":"SUDOKU - Sudoku \u300ckuangbin \u5e26\u4f60\u98de\u300d\u4e13\u9898\u4e09 Dancing Links","title":"\u7ec3\u4e60"},{"location":"posts/lectures/dlx/#_12","text":"DLX \u80fd\u7528\u6765\u89e3\u51b3\u7cbe\u786e\u8986\u76d6\u95ee\u9898\uff0c\u9002\u5f53\u5730\u5efa\u7acb\u8d77\u6a21\u578b\u540e\u80fd\u89e3\u51b3\u4e00\u4e9b\u641c\u7d22\u9898\u3002","title":"\u603b\u7ed3"},{"location":"posts/lectures/dlx/#_13","text":"[1]\u82f1\u96c4\u54ea\u91cc\u51fa\u6765 \u7684 \u300a\u591c\u6df1\u4eba\u9759\u5199\u7b97\u6cd5\uff08\u4e5d\uff09- Dancing Links X\uff08\u8df3\u821e\u94fe\uff09\u300b [2]\u4e07\u4ed3\u4e00\u9ecd \u7684 \u300a\u8df3\u8dc3\u7684\u821e\u8005\uff0c\u821e\u8e48\u94fe\uff08Dancing Links\uff09\u7b97\u6cd5\u2014\u2014\u6c42\u89e3\u7cbe\u786e\u8986\u76d6\u95ee\u9898\u300b [3]zhangjianjunab \u7684 \u300aDLX \u7b97\u6cd5\u4e00\u89c8\u300b [4]\u9759\u542c\u98ce\u541f\u3002\u7684 \u300a\u641c\u7d22\uff1aDLX \u7b97\u6cd5\u300b [5]\u5218\u6c5d\u4f73\uff0c\u9648\u950b \u7684 \u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178-\u8bad\u7ec3\u6307\u5357\u300b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"posts/lectures/easy-dynamic-programming/","text":"\u5927\u6982\u8fd9\u7bc7\u535a\u6587\u5c31\u53ea\u80fd\u719f\u6089\u4e00\u4e0b\u5404\u5927dp\u6a21\u578b\u5427\uff1f \u533a\u95f4dp \u00b6 \u6982\u8ff0 \u00b6 \u533a\u95f4dp\u662fdp\u7684\u4e00\u79cd\uff0c\u4e00\u822c\u5904\u7406\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u5173\u4e8e\u533a\u95f4\u7684\u4e00\u4e9b\u95ee\u9898\u3002 \u56e0\u4e3a \\([l, r]\\) \u8fd9\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u7528\u5f88\u591a\u4e2a \\([l, k] \\bigcap (k, r]\\) \u91cd\u590d\u5730 \u8986\u76d6\uff0c \u4e5f\u5c31\u662f\u901a\u8fc7\u679a\u4e3e\u65ad\u70b9 \\(k\\) \uff0c\u6765\u5b9e\u73b0\u533a\u95f4 \\([l, r] \\gets [l, k] + (k, r]\\) \u4fe1\u606f\u7684\u8f6c\u79fb\u3002 \u5373 \\(f(l, r) = \\operatorname{op}\\\\{f(l, k) + f(k + 1, r)\\\\} \\quad k \\in [l, r)\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f \\(k\\) \u7684\u8303\u56f4\u4e5f\u4e0d\u4e00\u5b9a\u662f \\([l, r)\\) \uff0c\u4e5f\u6709\u8bb8\u591a\u9898\u662f \\(k \\in (l, r)\\) \u7684\uff0c \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5904\u7406\u51fa \\(len = 2\\) \u7684\uff0c\u7136\u540e for \u5faa\u73af\u4ece \\(len = 3\\) \u5f00\u59cb\u3002 \u4f8b\u9898 \u00b6 \u300cNOI1995\u300d\u77f3\u5b50\u5408\u5e76 \u89e3\u9898\u601d\u8def \u62c6\u73af\u6210\u94fe \uff0c\u4ee4 \\(a[n + 1\\ldots 2n] \\gets a[1 \\ldots n]\\) \uff0c\u8fd9\u6837\u5c31\u628a\u4e00\u4e2a\u73af\u5f62\u7684\u95ee\u9898\u8f6c\u5316\u5230\u4e86\u5e8f\u5217\u4e0a\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u5806\u77f3\u5b50\u4e00\u76f4\u5408\u5e76\u5230\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927\u503c\uff1b \u8bbe \\(g(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u5806\u77f3\u5b50\u4e00\u76f4\u5408\u5e76\u5230\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u3002 \u56e0\u4e3a \\([l, r]\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\([l, k]\\) \u548c \\((k, r]\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ \\begin{aligned} f(l, r) & = \\max\\{sum_r - sum_{l - 1} + f(l, k) + f(k + 1, r)\\} \\quad k \\in [l, r) \\\\ g(l, r) & = \\max\\{sum_r - sum_{l - 1} + g(l, k) + g(k + 1, r)\\} \\quad k \\in [l, r) \\end{aligned} $$ \u300c\u4e00\u672c\u901a 5.1 \u4f8b 3\u300d\u51f8\u591a\u8fb9\u5f62\u7684\u5212\u5206 \u89e3\u9898\u601d\u8def \u6211\u4eec\u5c06\u8fd9\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u987a\u65f6\u9488\u6392\u6210\u4e00\u884c\uff0c\u73af\u4e0a\u7684\u9876\u70b9\u5176\u5b9e\u548c\u5e8f\u5217\u6ca1\u6709\u533a\u522b\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u4e2a\u9876\u70b9\u5230\u7b2c \\(r\\) \u4e2a\u9876\u70b9\u6240\u7ec4\u6210\u7684\u51f8\u591a\u8fb9\u5f62\u5212\u5206\u540e\uff0c\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u503c\u3002 \u56e0\u4e3a \\(S(l, r)\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\((l, k)\\) \u548c \\((k, r)\\) \uff0c\u518d\u52a0\u4e0a \\(a_l, a_r, a_k\\) \u7684\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ f(l, r) = \\min\\{f(l, k) + f(k, r) + a_l\\cdot a_k\\cdot a_r\\} \\quad k \\in (l, r) $$ \u300cNOIP2007\u300d\u77e9\u9635\u53d6\u6570\u6e38\u620f \u89e3\u9898\u601d\u8def \u6ce8\u610f\u5230\u6bcf\u4e00\u884c\u7684\u8d21\u732e\u5176\u5b9e\u662f\u4e92\u4e0d\u5e72\u6270\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u5bf9\u6bcf\u4e00\u884c\u8fdb\u884c dp\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u8fd9\u4e00\u884c\u53d6\u4e86 \\(m - (r - l + 1)\\) \u6b65\u540e\uff0c\u8fd8\u5269 \\([l, r]\\) \u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(S(l, r)\\) \u53ef\u4ee5\u662f \\(S(l - 1, r) - a_{l - 1}\\) \u5f97\u6765\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f \\(S(l, r + 1) - a_{r + 1}\\) \u5f97\u6765\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ f(l, r) = \\max \\begin{cases} f(l - 1, r) + a_{l - 1} \\cdot 2^{m - (r - l + 1)} \\\\ f(l, r + 1) + a_{r + 1} \\cdot 2^{m - (r - l + 1)} \\end{cases} $$ \u300cCF Edu #83\u300dE. Array Shrinking \u89e3\u9898\u601d\u8def \u8fd9\u9898\u6bd4\u8f83\u7efc\u5408\uff0c\u8981\u5148\u7528\u533a\u95f4dp\u9884\u5904\u7406\uff0c\u7136\u540e\u518d\u7ebf\u6027\u9012\u63a8\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a \\([l, r]\\) \u80fd\u7f29\u5408\u5f97\u5230\u7684\u6570\u5b57\uff08\u5982\u679c\u65e0\u6cd5\u7f29\u5408\uff0c\u5219 \\(f(l, r) = 0\\) \uff09 \u8bbe \\(g(i)\\) \u8868\u793a \\([1, i]\\) \u53ef\u4ee5\u88ab\u5206\u6210\u7684\u6bb5\u6570\u7684\u6700\u5c0f\u503c\u3002 \u5982\u679c \\([l, r]\\) \u80fd\u4ece \\([l, k]\\) \u548c \\((k, r]\\) \u7ec4\u6210\uff0c\u90a3\u4e48 \\(f(l, k)\\) \u662f\u5e94\u8be5\u7b49\u4e8e \\(f(k + 1, r)\\) \u7684\uff0c\u8fd9\u6837\u624d\u80fd\u300c\u7f29\u5408\u300d\u3002\u6240\u4ee5\u8fd9\u4e48\u8f6c\u79fb \\(f\\) \uff1a $$ f(l, r) = \\max\\{f(l, k) + 1\\} \\quad (k \\in [l, r) \\land f(l, k) = f(k + 1, r) > 0) $$ \u56e0\u4e3a \\([1, i]\\) \u80fd\u88ab\u5206\u6210 \\([1, j]\\) \u548c \\((j, i]\\) \u4e24\u6bb5\uff0c\u6211\u4eec\u53ea\u7528\u8003\u8651 \\((j, i]\\) \u80fd\u5426\u7f29\u5408\u5f97\u5230\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ g(i) = \\min\\{g(j) + 1\\} \\quad (j \\in [1, i) \\land f(j + 1, i) \\neq 0) $$ \u6811\u578bdp \u00b6 \u6982\u8ff0 \u00b6 \u6811\u578bdp\u662fdp\u7684\u4e00\u79cd\uff0c\u4e00\u822c\u5904\u7406\u5b50\u6811\u4e2d\u6700\u4f18\u89e3\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u300c\u6362\u6839dp\u300d\u4e4b\u7c7b\u7684\u5904\u7406 \u6574\u68f5\u6811 \u4e0a\u6700\u4f18\u89e3\u7684\u4e00\u4e9b\u95ee\u9898\u3002 \u4f8b\u9898 \u00b6 \u300c\u4e00\u672c\u901a 5.2 \u4f8b 4\u300d\u6218\u7565\u6e38\u620f \u89e3\u9898\u601d\u8def \u6811\u578bdp\u5165\u95e8\u9898\u3002 \u8bbe \\(f(u, 0)\\) \u8868\u793a \\(u\\) \u4e0a\u4e0d\u653e\u58eb\u5175\uff0c\u4f7f\u5f97\u6240\u6709\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684 \u8fb9 \u88ab\u300c\u77ad\u671b\u300d\u5230\uff0c\u6240\u9700\u653e\u7f6e\u7684\u58eb\u5175\u6700\u5c11\u4e2a\u6570\u3002 \u8bbe \\(f(u, 1)\\) \u8868\u793a \\(u\\) \u4e0a\u653e\u58eb\u5175\uff0c\u4f7f\u5f97\u6240\u6709\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684 \u8fb9 \u88ab\u300c\u77ad\u671b\u300d\u5230\uff0c\u6240\u9700\u653e\u7f6e\u7684\u58eb\u5175\u6700\u5c11\u4e2a\u6570\u3002 \u82e5 \\(u\\) \u4e0a\u4e0d\u653e\u7f6e\u58eb\u5175\uff0c\u90a3\u4e48\u6240\u6709\u7684 \\(v \\in \\textrm{son}(u)\\) \u4e0a\u90fd\u5f97\u653e\u58eb\u5175\uff0c\u624d\u80fd\u4f7f\u6240\u6709\u7684\u8fb9 \\((u, v) \\quad (v \\in \\textrm{son}(u))\\) \u88ab\u77ad\u671b\u5230\uff1b \u82e5 \\(u\\) \u4e0a\u653e\u7f6e\u4e86\u58eb\u5175\uff0c\u90a3\u4e48\u6240\u6709\u7684 \\(v \\in \\textrm{son}(u)\\) \u4e0a\u9700\u4e0d\u9700\u8981\u653e\u7f6e\u58eb\u5175\u662f\u968f\u610f\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ \\begin{aligned} f(u, 0) & = \\sum_{v \\in \\textrm{son}(u)} f(v, 1) \\\\ f(u, 1) & = \\sum_{v \\in \\textrm{son}(u)} \\min\\{f(v, 0), f(v, 1)\\} \\end{aligned} $$ \u300c\u4e00\u672c\u901a 5.2 \u7ec3\u4e60 2\u300d\u65c5\u6e38\u89c4\u5212 \u89e3\u9898\u601d\u8def \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684\u6362\u6839dp\u3002 \u9996\u5148\u6211\u4eec\u94a6\u5b9a\u4e00\u4e2a\u6839\uff0c\u5bf9\u8fd9\u68f5\u6709\u6839\u6811\u8fdb\u884cdfs\uff1b\u518d\u6362\u6839\uff0c\u7b97\u51fa\u6362\u6839\u540e\u7684\u8d21\u732e\u3002 \u8bbe \\(f(u, 0)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u8bbe \\(f(u, 1)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6b21\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u8bbe \\(g(u)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u8fdc\u7684\u70b9\u662f\u5728 \u54ea\u4e00\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u4e2d \u3002 \u8bbe \\(h(u)\\) \u8868\u793a\u4e0d\u7ecf\u8fc7 \\(u\\) \u7684\u5b50\u6811\uff0c\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u539f\u6765\u7684\u65e0\u6839\u6811\u7684\u76f4\u5f84\uff0c\u4e3a \\(\\max\\\\{f(i, 0), \\max\\\\{f(i, 1), h(i)\\\\}\\\\}\\) \uff0c\u5373 \u4ece\u81ea\u5df1\u7684\u67d0\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u4e00\u6761\u8def\u5f84\u4e00\u76f4\u5ef6\u4f38\u5230\u53e6\u4e00\u4e2a\u5b69\u5b50\uff0c\u6216\u8005\u662f\u8fd9\u68f5\u6811\u7684\u300c\u53e6\u4e00\u534a\u90e8\u5206\u300d\u3002 \u6700\u540e\u6211\u4eec\u8f93\u51fa\u7684\uff0c\u5c31\u662f\u6240\u6709 \\(f(i, 0), \\max\\\\{f(i, 1), h(i)\\\\}\\) \u7b49\u4e8e\u76f4\u5f84\u957f\u5ea6\u7684 \\(i\\) \u3002 \u5728\u7b2c\u4e00\u6b21dfs\u4e2d\uff0c\u6211\u4eec\u662f \u4ece\u5b69\u5b50\u5f80\u53cc\u4eb2 \u8f6c\u79fb\u7684\uff0c\u65b9\u7a0b\u662f\u663e\u7136\u7684\uff1a $$ \\begin{aligned} f(u, 0) & = \\max_{v \\in \\textrm{son}(u)}\\{f(v, 0) + 1\\} \\\\ f(u, 1) & = \\textrm{second}\\max_{v \\in \\textrm{son}(u)}\\{f(v, 0) + 1\\} \\end{aligned} $$ \u8f6c\u79fb\u65f6\u987a\u4fbf\u66f4\u65b0 \\(g\\) \u5373\u53ef\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u91cd\u70b9\u8003\u8651\u7684\u662f \u7b2c\u4e8c\u6b21dfs \u4f1a\u5e26\u6765\u4ec0\u4e48\u6837\u7684\u5f71\u54cd\uff0c\u4e5f\u5c31\u662f\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97 \\(h\\) \u503c\u3002 \u7b2c\u4e8c\u6b21dfs\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u4e5f\u5c31\u662f \u4ece\u53cc\u4eb2\u5f80\u5b69\u5b50 \u8f6c\u79fb\u7684\u3002 \u4ece \\(u\\) \u4e0d\u7ecf\u8fc7\u5b50\u6811\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u80af\u5b9a\u662f \\(u\\) \u7684\u7236\u4eb2 \\(x\\) \u80fd\u8d70\u4e00\u6761\u7279\u522b\u8fdc\u7684\u8def\u5f84\u51fa\u6765\u3002 \u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\u8981\u4e48\u662f \\(x\\) \u5f80 \\(x\\) \u7684\u5b69\u5b50\uff08\u4f46\u4e0d\u662f \\(u\\) \uff09\u7684\u65b9\u5411\u8d70\uff0c\u8981\u4e48\u662f \\(x\\) \u5f80 \\(x\\) \u7684\u7236\u4eb2 \\(y\\) \u7684\u65b9\u5411\u8d70\u3002 \u5982\u679c \\(u\\) \u662f \\(g\\) \u4e2d\u8bb0\u5f55\u7684\u6700\u5927\u5b69\u5b50\uff0c\u90a3\u4e48\u7b2c\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u53ea\u80fd\u8d70\u6b21\u5927\u5b69\u5b50\uff0c\u5373 \\(f(x, 1)\\) \uff1b\u7b2c\u4e8c\u79cd\u53ef\u80fd\u5c31\u662f \\(h(x)\\) \uff1b \u5982\u679c \\(u\\) \u4e0d\u662f \\(g\\) \u4e2d\u8bb0\u5f55\u7684\u6700\u5927\u5b69\u5b50\uff0c\u90a3\u4e48\u7b2c\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u80fd\u8d70\u6700\u5927\u5b69\u5b50\uff0c\u5373 \\(f(x, 0)\\) \uff1b\u7b2c\u4e8c\u79cd\u53ef\u80fd\u8fd8\u662f \\(h(x)\\) \uff1b \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ h(v) = \\begin{cases}\\max\\{h(u), f(u, 1)\\} & v = g(u), u = \\textrm{father}(v) \\\\ \\max\\{h(u), f(u, 0)\\} & v \\neq g(u), u = \\textrm{father}(v)\\end{cases} $$ \u72b6\u538bdp \u00b6 \u6982\u8ff0 \u00b6 \u5047\u8bbe\u6709\u4e00\u884c\u683c\u5b50\uff0c\u8981\u4f60\u9ed1\u767d\u67d3\u8272\uff0c\u4f60\u4f1a\u600e\u4e48\u8003\u8651\u8868\u793a\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u5462\uff1f \u5047\u8bbe \\(1\\) \u8868\u793a\u9ed1\u8272\uff0c \\(0\\) \u8868\u793a\u767d\u8272\uff0c\u90a3\u8fd9\u4e00\u884c\u662f\u4e0d\u662f\u5c31\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5462\uff1f \u72b6\u538bdp \u5c31\u662f\u901a\u8fc7\u7528\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u72b6\u6001\u7684\u4e00\u79cddp\u7c7b\u578b\u3002 \u901a\u5e38\u9664\u4e86\u4e8c\u8fdb\u5236\uff0c\u8fd8\u6709\u4e09\u8fdb\u5236\uff08\u4e0d\u80fd\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4f46\u662f\u80fd\u66b4\u529b\u62c6\u4f4d\uff09\u3002 \u4f8b\u9898 \u00b6 \u300cSCOI2005\u300d\u4e92\u4e0d\u4fb5\u72af \u89e3\u9898\u601d\u8def \u72b6\u538bdp \u5165\u95e8\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a \\(n\\) \u4f4d\u4e8c\u8fdb\u5236\u6570 \\(st\\) \u6765\u8868\u793a\u8fd9\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u4e0a\u6709\u738b\uff0c\u4e3a \\(0\\) \u5219\u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u662f\u7a7a\u7684\u3002 \u663e\u7136\u5982\u679c\u4e00\u4e2a\u72b6\u6001 \\(st\\) \u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(st \\& (st / 2) = 0 \\land st \\& (st \\cdot 2) = 0\\) \u3002 \u7136\u540e\u8fd8\u8981\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\uff0c\u5224\u65ad\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u4f1a\u4e0d\u4f1a\u548c\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u51b2\u7a81\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4fbf\u662f\uff1a $$ f(i, st, cnt) = \\sum_{pr}f(i - 1, pr, cnt - \\operatorname{popcount}(st)) $$ \u5176\u4e2d \\(st, pr\\) \u5747\u4e3a\u5408\u6cd5\u72b6\u6001\uff0c\u4e14 \\(st\\) \u4e0e \\(pr\\) \u4e0d\u51b2\u7a81\uff0c\u540e\u6587\u540c\u3002 \\(\\operatorname{popcount}(x)\\) \u8868\u793a \\(x\\) \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d \\(1\\) \u7684\u4e2a\u6570\u3002 \u7b54\u6848\u5373\u4e3a \\(\\sum_{st}f(n, st, k)\\) \u3002 \u300c\u4e00\u672c\u901a 5.4 \u7ec3\u4e60 1\u300d\u6d82\u62b9\u679c\u9171 \u89e3\u9898\u601d\u8def \u7a0d\u5fae\u6709\u70b9\u590d\u6742\u7684\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u662f\u5408\u6cd5\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u6c42\u51fa\u8fd9\u4e2a\u72b6\u6001\u7684\u4e09\u8fdb\u5236\u8868\u793a\u3002 \u7136\u540e\u9010\u4e2a\u5224\u65ad\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u662f\u5426\u4e0d\u540c\u5373\u53ef\u3002 \u5176\u6b21\uff0c\u76f8\u90bb\u4e24\u884c\u7684\u72b6\u6001\u662f\u5426\u4e0d\u4f1a\u51b2\u7a81\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u540c\u65f6\u53d6\u51fa\u8fd9\u4e24\u4e2a\u72b6\u6001\u5728\u4e09\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u9010\u4e2a\u6bd4\u8f83\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u7136\u540e\u662f\u8f6c\u79fb\uff0c\u56e0\u4e3a\u5df2\u7ecf\u56fa\u5b9a\u4e86\u7b2c \\(k\\) \u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u505a\u662f\u628a\u8fd9\u4e2a\u68cb\u76d8\u5206\u5272\u6210\u4e86 \u4e92\u4e0d\u5e72\u6270 \u7684 \\([1, k)\\) \u548c \\((k, n]\\) \u4e24\u90e8\u5206\u3002 \u5206\u522b\u6c42\u51fa\u6765\u65b9\u6848\u6570\u7136\u540e \u76f8\u4e58 \u5373\u53ef\u5f97\u5230\u6700\u7ec8\u7b54\u6848\u3002 \u5269\u4e0b\u7684\u90e8\u5206\u4e0e \u300cSCOI2005\u300d\u4e92\u4e0d\u4fb5\u72af \u7c7b\u4f3c\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a $$ f(i, st) = \\sum_{pr}f(i - 1, pr) $$ \u7b54\u6848\u5373\u4e3a $$ ans_{k}\\cdot ans_{n - k + 1} = \\left(\\sum_{st}f(k, st)\\right)\\cdot\\left(\\sum_{st}f(n - k + 1, st)\\right) $$ \u300cAPIO2007\u300d\u52a8\u7269\u56ed \u89e3\u9898\u601d\u8def \u6bd4\u8f83\u6709\u6280\u5de7\u6027\u7684\u4e00\u9053\u72b6\u538bdp\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u4eba\u53ea\u80fd\u770b\u89c1\u957f\u5ea6\u4e3a \\(5\\) \u7684\u300c\u7a97\u53e3\u300d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u8fdb\u884c\u72b6\u6001\u538b\u7f29\u3002\u6211\u4eec\u628a\u4e00\u4e2a\u4eba\u80fd\u770b\u5230\u7684\u52a8\u7269\u538b\u7f29\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u8868\u793a\u80fd\u770b\u89c1 \\(i\\) \u8fd9\u4e2a\u52a8\u7269\uff0c\u5426\u5219\u5c31\u770b\u4e0d\u89c1\u8fd9\u4e2a\u52a8\u7269\u3002 \u9996\u5148\u6211\u4eec\u9884\u5904\u7406\u51fa \\(g(i, st)\\) \uff0c\u8868\u793a\u4ece\u7b2c \\(i\\) \u4e2a\u52a8\u7269\u5f00\u59cb\uff0c\u5f80\u540e\u7684 \\(5\\) \u4e2a\u52a8\u7269\u88ab\u79fb\u8d70\uff0c\u5373\u79fb\u8d70\u72b6\u6001\u4e3a \\(st\\) \u65f6\u7684\u6ee1\u610f\u4eba\u6570\u3002 \u5176\u6b21\u6211\u4eec\u8bbe \\(f(i, st)\\) \u8868\u793a \\([1, i]\\) \uff0c\u5f80\u540e\u7684 \\(5\\) \u4e2a\u52a8\u7269\u88ab\u79fb\u8d70\uff0c\u5373\u79fb\u8d70\u72b6\u6001\u4e3a \\(st\\) \u65f6\u7684\u6700\u5927\u6ee1\u610f\u4eba\u6570\u3002 \u53ef\u4ee5\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ f(i, st) = \\max\\{f(i - 1, st \\cdot 2), f(i - 1, st \\cdot 2 + 1) + g(i, st)\\} $$ \u6211\u4eec\u4ece\u7b2c \\(1\\) \u4e2a\u5f00\u59cb\u679a\u4e3e\uff0c\u7136\u540e\u8981\u6ee1\u8db3\u7b2c \\(n + 1\\) \u4e2a\u7684\u72b6\u6001\u548c\u7b2c \\(1\\) \u4e2a\u72b6\u6001\u76f8\u540c\u5373\u53ef\u3002 \u6570\u4f4ddp \u00b6 \u4e0d\u4f1a\uff0c\u5495\u7740\u5728\u3002","title":"\u7ecf\u5178\u52a8\u6001\u89c4\u5212\u6a21\u578b"},{"location":"posts/lectures/easy-dynamic-programming/#dp","text":"","title":"\u533a\u95f4dp"},{"location":"posts/lectures/easy-dynamic-programming/#_1","text":"\u533a\u95f4dp\u662fdp\u7684\u4e00\u79cd\uff0c\u4e00\u822c\u5904\u7406\u5728\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u5173\u4e8e\u533a\u95f4\u7684\u4e00\u4e9b\u95ee\u9898\u3002 \u56e0\u4e3a \\([l, r]\\) \u8fd9\u4e2a\u533a\u95f4\uff0c\u53ef\u4ee5\u7528\u5f88\u591a\u4e2a \\([l, k] \\bigcap (k, r]\\) \u91cd\u590d\u5730 \u8986\u76d6\uff0c \u4e5f\u5c31\u662f\u901a\u8fc7\u679a\u4e3e\u65ad\u70b9 \\(k\\) \uff0c\u6765\u5b9e\u73b0\u533a\u95f4 \\([l, r] \\gets [l, k] + (k, r]\\) \u4fe1\u606f\u7684\u8f6c\u79fb\u3002 \u5373 \\(f(l, r) = \\operatorname{op}\\\\{f(l, k) + f(k + 1, r)\\\\} \\quad k \\in [l, r)\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f \\(k\\) \u7684\u8303\u56f4\u4e5f\u4e0d\u4e00\u5b9a\u662f \\([l, r)\\) \uff0c\u4e5f\u6709\u8bb8\u591a\u9898\u662f \\(k \\in (l, r)\\) \u7684\uff0c \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5904\u7406\u51fa \\(len = 2\\) \u7684\uff0c\u7136\u540e for \u5faa\u73af\u4ece \\(len = 3\\) \u5f00\u59cb\u3002","title":"\u6982\u8ff0"},{"location":"posts/lectures/easy-dynamic-programming/#_2","text":"\u300cNOI1995\u300d\u77f3\u5b50\u5408\u5e76 \u89e3\u9898\u601d\u8def \u62c6\u73af\u6210\u94fe \uff0c\u4ee4 \\(a[n + 1\\ldots 2n] \\gets a[1 \\ldots n]\\) \uff0c\u8fd9\u6837\u5c31\u628a\u4e00\u4e2a\u73af\u5f62\u7684\u95ee\u9898\u8f6c\u5316\u5230\u4e86\u5e8f\u5217\u4e0a\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u5806\u77f3\u5b50\u4e00\u76f4\u5408\u5e76\u5230\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5927\u503c\uff1b \u8bbe \\(g(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u5806\u77f3\u5b50\u4e00\u76f4\u5408\u5e76\u5230\u7b2c \\(r\\) \u5806\u77f3\u5b50\uff0c\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\u3002 \u56e0\u4e3a \\([l, r]\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\([l, k]\\) \u548c \\((k, r]\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ \\begin{aligned} f(l, r) & = \\max\\{sum_r - sum_{l - 1} + f(l, k) + f(k + 1, r)\\} \\quad k \\in [l, r) \\\\ g(l, r) & = \\max\\{sum_r - sum_{l - 1} + g(l, k) + g(k + 1, r)\\} \\quad k \\in [l, r) \\end{aligned} $$ \u300c\u4e00\u672c\u901a 5.1 \u4f8b 3\u300d\u51f8\u591a\u8fb9\u5f62\u7684\u5212\u5206 \u89e3\u9898\u601d\u8def \u6211\u4eec\u5c06\u8fd9\u4e2a\u51f8\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u9876\u70b9\u987a\u65f6\u9488\u6392\u6210\u4e00\u884c\uff0c\u73af\u4e0a\u7684\u9876\u70b9\u5176\u5b9e\u548c\u5e8f\u5217\u6ca1\u6709\u533a\u522b\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u7b2c \\(l\\) \u4e2a\u9876\u70b9\u5230\u7b2c \\(r\\) \u4e2a\u9876\u70b9\u6240\u7ec4\u6210\u7684\u51f8\u591a\u8fb9\u5f62\u5212\u5206\u540e\uff0c\u80fd\u5f97\u5230\u7684\u6700\u5c0f\u503c\u3002 \u56e0\u4e3a \\(S(l, r)\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\((l, k)\\) \u548c \\((k, r)\\) \uff0c\u518d\u52a0\u4e0a \\(a_l, a_r, a_k\\) \u7684\u8d21\u732e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ f(l, r) = \\min\\{f(l, k) + f(k, r) + a_l\\cdot a_k\\cdot a_r\\} \\quad k \\in (l, r) $$ \u300cNOIP2007\u300d\u77e9\u9635\u53d6\u6570\u6e38\u620f \u89e3\u9898\u601d\u8def \u6ce8\u610f\u5230\u6bcf\u4e00\u884c\u7684\u8d21\u732e\u5176\u5b9e\u662f\u4e92\u4e0d\u5e72\u6270\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u5bf9\u6bcf\u4e00\u884c\u8fdb\u884c dp\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a\u8fd9\u4e00\u884c\u53d6\u4e86 \\(m - (r - l + 1)\\) \u6b65\u540e\uff0c\u8fd8\u5269 \\([l, r]\\) \u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(S(l, r)\\) \u53ef\u4ee5\u662f \\(S(l - 1, r) - a_{l - 1}\\) \u5f97\u6765\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f \\(S(l, r + 1) - a_{r + 1}\\) \u5f97\u6765\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ f(l, r) = \\max \\begin{cases} f(l - 1, r) + a_{l - 1} \\cdot 2^{m - (r - l + 1)} \\\\ f(l, r + 1) + a_{r + 1} \\cdot 2^{m - (r - l + 1)} \\end{cases} $$ \u300cCF Edu #83\u300dE. Array Shrinking \u89e3\u9898\u601d\u8def \u8fd9\u9898\u6bd4\u8f83\u7efc\u5408\uff0c\u8981\u5148\u7528\u533a\u95f4dp\u9884\u5904\u7406\uff0c\u7136\u540e\u518d\u7ebf\u6027\u9012\u63a8\u3002 \u8bbe \\(f(l, r)\\) \u8868\u793a \\([l, r]\\) \u80fd\u7f29\u5408\u5f97\u5230\u7684\u6570\u5b57\uff08\u5982\u679c\u65e0\u6cd5\u7f29\u5408\uff0c\u5219 \\(f(l, r) = 0\\) \uff09 \u8bbe \\(g(i)\\) \u8868\u793a \\([1, i]\\) \u53ef\u4ee5\u88ab\u5206\u6210\u7684\u6bb5\u6570\u7684\u6700\u5c0f\u503c\u3002 \u5982\u679c \\([l, r]\\) \u80fd\u4ece \\([l, k]\\) \u548c \\((k, r]\\) \u7ec4\u6210\uff0c\u90a3\u4e48 \\(f(l, k)\\) \u662f\u5e94\u8be5\u7b49\u4e8e \\(f(k + 1, r)\\) \u7684\uff0c\u8fd9\u6837\u624d\u80fd\u300c\u7f29\u5408\u300d\u3002\u6240\u4ee5\u8fd9\u4e48\u8f6c\u79fb \\(f\\) \uff1a $$ f(l, r) = \\max\\{f(l, k) + 1\\} \\quad (k \\in [l, r) \\land f(l, k) = f(k + 1, r) > 0) $$ \u56e0\u4e3a \\([1, i]\\) \u80fd\u88ab\u5206\u6210 \\([1, j]\\) \u548c \\((j, i]\\) \u4e24\u6bb5\uff0c\u6211\u4eec\u53ea\u7528\u8003\u8651 \\((j, i]\\) \u80fd\u5426\u7f29\u5408\u5f97\u5230\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ g(i) = \\min\\{g(j) + 1\\} \\quad (j \\in [1, i) \\land f(j + 1, i) \\neq 0) $$","title":"\u4f8b\u9898"},{"location":"posts/lectures/easy-dynamic-programming/#dp_1","text":"","title":"\u6811\u578bdp"},{"location":"posts/lectures/easy-dynamic-programming/#_3","text":"\u6811\u578bdp\u662fdp\u7684\u4e00\u79cd\uff0c\u4e00\u822c\u5904\u7406\u5b50\u6811\u4e2d\u6700\u4f18\u89e3\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u300c\u6362\u6839dp\u300d\u4e4b\u7c7b\u7684\u5904\u7406 \u6574\u68f5\u6811 \u4e0a\u6700\u4f18\u89e3\u7684\u4e00\u4e9b\u95ee\u9898\u3002","title":"\u6982\u8ff0"},{"location":"posts/lectures/easy-dynamic-programming/#_4","text":"\u300c\u4e00\u672c\u901a 5.2 \u4f8b 4\u300d\u6218\u7565\u6e38\u620f \u89e3\u9898\u601d\u8def \u6811\u578bdp\u5165\u95e8\u9898\u3002 \u8bbe \\(f(u, 0)\\) \u8868\u793a \\(u\\) \u4e0a\u4e0d\u653e\u58eb\u5175\uff0c\u4f7f\u5f97\u6240\u6709\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684 \u8fb9 \u88ab\u300c\u77ad\u671b\u300d\u5230\uff0c\u6240\u9700\u653e\u7f6e\u7684\u58eb\u5175\u6700\u5c11\u4e2a\u6570\u3002 \u8bbe \\(f(u, 1)\\) \u8868\u793a \\(u\\) \u4e0a\u653e\u58eb\u5175\uff0c\u4f7f\u5f97\u6240\u6709\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684 \u8fb9 \u88ab\u300c\u77ad\u671b\u300d\u5230\uff0c\u6240\u9700\u653e\u7f6e\u7684\u58eb\u5175\u6700\u5c11\u4e2a\u6570\u3002 \u82e5 \\(u\\) \u4e0a\u4e0d\u653e\u7f6e\u58eb\u5175\uff0c\u90a3\u4e48\u6240\u6709\u7684 \\(v \\in \\textrm{son}(u)\\) \u4e0a\u90fd\u5f97\u653e\u58eb\u5175\uff0c\u624d\u80fd\u4f7f\u6240\u6709\u7684\u8fb9 \\((u, v) \\quad (v \\in \\textrm{son}(u))\\) \u88ab\u77ad\u671b\u5230\uff1b \u82e5 \\(u\\) \u4e0a\u653e\u7f6e\u4e86\u58eb\u5175\uff0c\u90a3\u4e48\u6240\u6709\u7684 \\(v \\in \\textrm{son}(u)\\) \u4e0a\u9700\u4e0d\u9700\u8981\u653e\u7f6e\u58eb\u5175\u662f\u968f\u610f\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8f6c\u79fb\uff1a $$ \\begin{aligned} f(u, 0) & = \\sum_{v \\in \\textrm{son}(u)} f(v, 1) \\\\ f(u, 1) & = \\sum_{v \\in \\textrm{son}(u)} \\min\\{f(v, 0), f(v, 1)\\} \\end{aligned} $$ \u300c\u4e00\u672c\u901a 5.2 \u7ec3\u4e60 2\u300d\u65c5\u6e38\u89c4\u5212 \u89e3\u9898\u601d\u8def \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684\u6362\u6839dp\u3002 \u9996\u5148\u6211\u4eec\u94a6\u5b9a\u4e00\u4e2a\u6839\uff0c\u5bf9\u8fd9\u68f5\u6709\u6839\u6811\u8fdb\u884cdfs\uff1b\u518d\u6362\u6839\uff0c\u7b97\u51fa\u6362\u6839\u540e\u7684\u8d21\u732e\u3002 \u8bbe \\(f(u, 0)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u8bbe \\(f(u, 1)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6b21\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u8bbe \\(g(u)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u6700\u8fdc\u7684\u70b9\u662f\u5728 \u54ea\u4e00\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u4e2d \u3002 \u8bbe \\(h(u)\\) \u8868\u793a\u4e0d\u7ecf\u8fc7 \\(u\\) \u7684\u5b50\u6811\uff0c\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u539f\u6765\u7684\u65e0\u6839\u6811\u7684\u76f4\u5f84\uff0c\u4e3a \\(\\max\\\\{f(i, 0), \\max\\\\{f(i, 1), h(i)\\\\}\\\\}\\) \uff0c\u5373 \u4ece\u81ea\u5df1\u7684\u67d0\u4e2a\u5b69\u5b50\u7684\u5b50\u6811\u4e2d\u6709\u4e00\u6761\u8def\u5f84\u4e00\u76f4\u5ef6\u4f38\u5230\u53e6\u4e00\u4e2a\u5b69\u5b50\uff0c\u6216\u8005\u662f\u8fd9\u68f5\u6811\u7684\u300c\u53e6\u4e00\u534a\u90e8\u5206\u300d\u3002 \u6700\u540e\u6211\u4eec\u8f93\u51fa\u7684\uff0c\u5c31\u662f\u6240\u6709 \\(f(i, 0), \\max\\\\{f(i, 1), h(i)\\\\}\\) \u7b49\u4e8e\u76f4\u5f84\u957f\u5ea6\u7684 \\(i\\) \u3002 \u5728\u7b2c\u4e00\u6b21dfs\u4e2d\uff0c\u6211\u4eec\u662f \u4ece\u5b69\u5b50\u5f80\u53cc\u4eb2 \u8f6c\u79fb\u7684\uff0c\u65b9\u7a0b\u662f\u663e\u7136\u7684\uff1a $$ \\begin{aligned} f(u, 0) & = \\max_{v \\in \\textrm{son}(u)}\\{f(v, 0) + 1\\} \\\\ f(u, 1) & = \\textrm{second}\\max_{v \\in \\textrm{son}(u)}\\{f(v, 0) + 1\\} \\end{aligned} $$ \u8f6c\u79fb\u65f6\u987a\u4fbf\u66f4\u65b0 \\(g\\) \u5373\u53ef\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u91cd\u70b9\u8003\u8651\u7684\u662f \u7b2c\u4e8c\u6b21dfs \u4f1a\u5e26\u6765\u4ec0\u4e48\u6837\u7684\u5f71\u54cd\uff0c\u4e5f\u5c31\u662f\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97 \\(h\\) \u503c\u3002 \u7b2c\u4e8c\u6b21dfs\u662f\u81ea\u9876\u5411\u4e0b\u7684\uff0c\u4e5f\u5c31\u662f \u4ece\u53cc\u4eb2\u5f80\u5b69\u5b50 \u8f6c\u79fb\u7684\u3002 \u4ece \\(u\\) \u4e0d\u7ecf\u8fc7\u5b50\u6811\u7684\u6700\u957f\u8ddd\u79bb\uff0c\u80af\u5b9a\u662f \\(u\\) \u7684\u7236\u4eb2 \\(x\\) \u80fd\u8d70\u4e00\u6761\u7279\u522b\u8fdc\u7684\u8def\u5f84\u51fa\u6765\u3002 \u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u6709\u4e24\u79cd\u53ef\u80fd\uff1a\u8981\u4e48\u662f \\(x\\) \u5f80 \\(x\\) \u7684\u5b69\u5b50\uff08\u4f46\u4e0d\u662f \\(u\\) \uff09\u7684\u65b9\u5411\u8d70\uff0c\u8981\u4e48\u662f \\(x\\) \u5f80 \\(x\\) \u7684\u7236\u4eb2 \\(y\\) \u7684\u65b9\u5411\u8d70\u3002 \u5982\u679c \\(u\\) \u662f \\(g\\) \u4e2d\u8bb0\u5f55\u7684\u6700\u5927\u5b69\u5b50\uff0c\u90a3\u4e48\u7b2c\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u53ea\u80fd\u8d70\u6b21\u5927\u5b69\u5b50\uff0c\u5373 \\(f(x, 1)\\) \uff1b\u7b2c\u4e8c\u79cd\u53ef\u80fd\u5c31\u662f \\(h(x)\\) \uff1b \u5982\u679c \\(u\\) \u4e0d\u662f \\(g\\) \u4e2d\u8bb0\u5f55\u7684\u6700\u5927\u5b69\u5b50\uff0c\u90a3\u4e48\u7b2c\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u80fd\u8d70\u6700\u5927\u5b69\u5b50\uff0c\u5373 \\(f(x, 0)\\) \uff1b\u7b2c\u4e8c\u79cd\u53ef\u80fd\u8fd8\u662f \\(h(x)\\) \uff1b \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u63a8\u5bfc\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ h(v) = \\begin{cases}\\max\\{h(u), f(u, 1)\\} & v = g(u), u = \\textrm{father}(v) \\\\ \\max\\{h(u), f(u, 0)\\} & v \\neq g(u), u = \\textrm{father}(v)\\end{cases} $$","title":"\u4f8b\u9898"},{"location":"posts/lectures/easy-dynamic-programming/#dp_2","text":"","title":"\u72b6\u538bdp"},{"location":"posts/lectures/easy-dynamic-programming/#_5","text":"\u5047\u8bbe\u6709\u4e00\u884c\u683c\u5b50\uff0c\u8981\u4f60\u9ed1\u767d\u67d3\u8272\uff0c\u4f60\u4f1a\u600e\u4e48\u8003\u8651\u8868\u793a\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u5462\uff1f \u5047\u8bbe \\(1\\) \u8868\u793a\u9ed1\u8272\uff0c \\(0\\) \u8868\u793a\u767d\u8272\uff0c\u90a3\u8fd9\u4e00\u884c\u662f\u4e0d\u662f\u5c31\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5462\uff1f \u72b6\u538bdp \u5c31\u662f\u901a\u8fc7\u7528\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u72b6\u6001\u7684\u4e00\u79cddp\u7c7b\u578b\u3002 \u901a\u5e38\u9664\u4e86\u4e8c\u8fdb\u5236\uff0c\u8fd8\u6709\u4e09\u8fdb\u5236\uff08\u4e0d\u80fd\u4f7f\u7528\u4f4d\u8fd0\u7b97\uff0c\u4f46\u662f\u80fd\u66b4\u529b\u62c6\u4f4d\uff09\u3002","title":"\u6982\u8ff0"},{"location":"posts/lectures/easy-dynamic-programming/#_6","text":"\u300cSCOI2005\u300d\u4e92\u4e0d\u4fb5\u72af \u89e3\u9898\u601d\u8def \u72b6\u538bdp \u5165\u95e8\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a \\(n\\) \u4f4d\u4e8c\u8fdb\u5236\u6570 \\(st\\) \u6765\u8868\u793a\u8fd9\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u4e0a\u6709\u738b\uff0c\u4e3a \\(0\\) \u5219\u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u662f\u7a7a\u7684\u3002 \u663e\u7136\u5982\u679c\u4e00\u4e2a\u72b6\u6001 \\(st\\) \u662f\u5408\u6cd5\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(st \\& (st / 2) = 0 \\land st \\& (st \\cdot 2) = 0\\) \u3002 \u7136\u540e\u8fd8\u8981\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\uff0c\u5224\u65ad\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u4f1a\u4e0d\u4f1a\u548c\u8fd9\u4e00\u884c\u7684\u72b6\u6001\u51b2\u7a81\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4fbf\u662f\uff1a $$ f(i, st, cnt) = \\sum_{pr}f(i - 1, pr, cnt - \\operatorname{popcount}(st)) $$ \u5176\u4e2d \\(st, pr\\) \u5747\u4e3a\u5408\u6cd5\u72b6\u6001\uff0c\u4e14 \\(st\\) \u4e0e \\(pr\\) \u4e0d\u51b2\u7a81\uff0c\u540e\u6587\u540c\u3002 \\(\\operatorname{popcount}(x)\\) \u8868\u793a \\(x\\) \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d \\(1\\) \u7684\u4e2a\u6570\u3002 \u7b54\u6848\u5373\u4e3a \\(\\sum_{st}f(n, st, k)\\) \u3002 \u300c\u4e00\u672c\u901a 5.4 \u7ec3\u4e60 1\u300d\u6d82\u62b9\u679c\u9171 \u89e3\u9898\u601d\u8def \u7a0d\u5fae\u6709\u70b9\u590d\u6742\u7684\u4e09\u8fdb\u5236\u72b6\u6001\u538b\u7f29\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u72b6\u6001\u662f\u5426\u662f\u5408\u6cd5\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u6c42\u51fa\u8fd9\u4e2a\u72b6\u6001\u7684\u4e09\u8fdb\u5236\u8868\u793a\u3002 \u7136\u540e\u9010\u4e2a\u5224\u65ad\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u662f\u5426\u4e0d\u540c\u5373\u53ef\u3002 \u5176\u6b21\uff0c\u76f8\u90bb\u4e24\u884c\u7684\u72b6\u6001\u662f\u5426\u4e0d\u4f1a\u51b2\u7a81\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u540c\u65f6\u53d6\u51fa\u8fd9\u4e24\u4e2a\u72b6\u6001\u5728\u4e09\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u9010\u4e2a\u6bd4\u8f83\u662f\u5426\u76f8\u540c\u5373\u53ef\u3002 \u7136\u540e\u662f\u8f6c\u79fb\uff0c\u56e0\u4e3a\u5df2\u7ecf\u56fa\u5b9a\u4e86\u7b2c \\(k\\) \u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u505a\u662f\u628a\u8fd9\u4e2a\u68cb\u76d8\u5206\u5272\u6210\u4e86 \u4e92\u4e0d\u5e72\u6270 \u7684 \\([1, k)\\) \u548c \\((k, n]\\) \u4e24\u90e8\u5206\u3002 \u5206\u522b\u6c42\u51fa\u6765\u65b9\u6848\u6570\u7136\u540e \u76f8\u4e58 \u5373\u53ef\u5f97\u5230\u6700\u7ec8\u7b54\u6848\u3002 \u5269\u4e0b\u7684\u90e8\u5206\u4e0e \u300cSCOI2005\u300d\u4e92\u4e0d\u4fb5\u72af \u7c7b\u4f3c\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a $$ f(i, st) = \\sum_{pr}f(i - 1, pr) $$ \u7b54\u6848\u5373\u4e3a $$ ans_{k}\\cdot ans_{n - k + 1} = \\left(\\sum_{st}f(k, st)\\right)\\cdot\\left(\\sum_{st}f(n - k + 1, st)\\right) $$ \u300cAPIO2007\u300d\u52a8\u7269\u56ed \u89e3\u9898\u601d\u8def \u6bd4\u8f83\u6709\u6280\u5de7\u6027\u7684\u4e00\u9053\u72b6\u538bdp\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e00\u4e2a\u4eba\u53ea\u80fd\u770b\u89c1\u957f\u5ea6\u4e3a \\(5\\) \u7684\u300c\u7a97\u53e3\u300d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u8fdb\u884c\u72b6\u6001\u538b\u7f29\u3002\u6211\u4eec\u628a\u4e00\u4e2a\u4eba\u80fd\u770b\u5230\u7684\u52a8\u7269\u538b\u7f29\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u8868\u793a\u80fd\u770b\u89c1 \\(i\\) \u8fd9\u4e2a\u52a8\u7269\uff0c\u5426\u5219\u5c31\u770b\u4e0d\u89c1\u8fd9\u4e2a\u52a8\u7269\u3002 \u9996\u5148\u6211\u4eec\u9884\u5904\u7406\u51fa \\(g(i, st)\\) \uff0c\u8868\u793a\u4ece\u7b2c \\(i\\) \u4e2a\u52a8\u7269\u5f00\u59cb\uff0c\u5f80\u540e\u7684 \\(5\\) \u4e2a\u52a8\u7269\u88ab\u79fb\u8d70\uff0c\u5373\u79fb\u8d70\u72b6\u6001\u4e3a \\(st\\) \u65f6\u7684\u6ee1\u610f\u4eba\u6570\u3002 \u5176\u6b21\u6211\u4eec\u8bbe \\(f(i, st)\\) \u8868\u793a \\([1, i]\\) \uff0c\u5f80\u540e\u7684 \\(5\\) \u4e2a\u52a8\u7269\u88ab\u79fb\u8d70\uff0c\u5373\u79fb\u8d70\u72b6\u6001\u4e3a \\(st\\) \u65f6\u7684\u6700\u5927\u6ee1\u610f\u4eba\u6570\u3002 \u53ef\u4ee5\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a $$ f(i, st) = \\max\\{f(i - 1, st \\cdot 2), f(i - 1, st \\cdot 2 + 1) + g(i, st)\\} $$ \u6211\u4eec\u4ece\u7b2c \\(1\\) \u4e2a\u5f00\u59cb\u679a\u4e3e\uff0c\u7136\u540e\u8981\u6ee1\u8db3\u7b2c \\(n + 1\\) \u4e2a\u7684\u72b6\u6001\u548c\u7b2c \\(1\\) \u4e2a\u72b6\u6001\u76f8\u540c\u5373\u53ef\u3002","title":"\u4f8b\u9898"},{"location":"posts/lectures/easy-dynamic-programming/#dp_3","text":"\u4e0d\u4f1a\uff0c\u5495\u7740\u5728\u3002","title":"\u6570\u4f4ddp"},{"location":"posts/lectures/karatsuba/","text":"\u5728 2019 \u8054\u8d5b\u524d\u542c EternalAlexander \u63d0\u5230\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u7384\u5b66\u7684\u7b97\u6cd5\uff0c\u73b0\u5728\u5c31\u5b66\u4e60\u4e00\u4e0b\u5427\u3002 \u7b80\u4ecb \u00b6 \u300cKaratsuba \u4e58\u6cd5\u300d\u662f 1960 \u5e74\u7531 Anatolii Alexeevitch Karatsuba \u63d0\u51fa\u7684\u53ef\u7528\u4e8e\u5927\u6574\u6570\u4e58\u6cd5\u7684\u7b97\u6cd5\u3002 \u7406\u8bba\u63a8\u5bfc \u00b6 \u4e0d\u59a8\u8bbe\u6211\u4eec\u8981\u76f8\u4e58\u7684\u4e24\u4e2a\u6570\u5b57\u5206\u522b\u4e3a \\(a\\) \u548c \\(b\\) \uff0c\u5176\u4e58\u79ef\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u6570\uff0c\u4e3a \\(c\\) \u3002 \u8bbe \\(a = x_1\\cdot10^m + x_0, b = y_1\\cdot10^m + y_0\\) \uff0c\u5176\u4e2d \\(0 < x_1, x_0, y_1, y_0 < 10^m\\) \uff0c\u5219 \\(\\begin{aligned}c = ab & = (x_1\\cdot10^m + x_0) \\cdot (y_1\\cdot10^m + y_0) \\\\\\\\ & = (x_1\\cdot y_1)10^{2m} + (x_1\\cdot y_0 + x_0\\cdot y_1)10^m + x_0\\cdot y_0\\end{aligned}\\) \u8bb0 \\(z_2 = x_1\\cdot y_1, z_1 = x_1\\cdot y_0 + x_0\\cdot y_1, z_0 = x_0\\cdot y_0\\) \u3002 \u6ce8\u610f\u5230 \uff0c \\(z_1 = (x_1 + x_0)(y_1 + y_0) - z_2 - z_0\\) \u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5206\u6b65\u8ba1\u7b97 \\((x_1 + x_0)(y_1 + y_0), z_2, z_0\\) \u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u5b9e\u8d28\u4e0a\u662f\u628a\u4e00\u4e2a \\(n \\times n\\) \u7684\u4e58\u6cd5\u5316\u7b80\u4e3a\u4e86\u4e09\u4e2a\u957f\u5ea6\u66f4\u5c0f\u7684\u4e58\u6cd5\u3002 \u5f53 \\(m = \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor\\) \u65f6\uff0c\u6709\u9012\u63a8\u5f0f \\(T(n) = 3T(\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor) + O(n)\\) \u3002 \u4e0d\u96be\u7531\u4e3b\u5b9a\u7406\u5f97\u77e5 \\(T(n) = \\Theta(n^{\\log_{2}3}) \\approx \\Theta(n^{1.585})\\) \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4e0b\u9762\u7ed9\u51fa\u7684\u662f MUL - Fast Multiplication \u7684\u4ee3\u7801\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> #define LL long long #define LOCAL namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 1e4 + 5 ; int t , n , m ; int a [ N ], b [ N ], c [ N << 1 ]; char A [ N ], B [ N ]; int * Kmul ( int len , int ra [], int rb []) { if ( len <= 32 ) { int * r = new int [ len * 2 + 1 ](); for ( int i = 0 ; i <= len ; ++ i ) for ( int j = 0 ; j <= len ; ++ j ) r [ i + j ] += ra [ i ] * rb [ j ]; return r ; } int hf = len / 2 + 1 ; int * r = new int [ hf * 4 + 1 ](); int * z0 , * z1 , * z2 ; z0 = Kmul ( hf - 1 , ra , rb ); z2 = Kmul ( len - hf , ra + hf , rb + hf ); for ( int i = 0 ; i + hf <= len ; ++ i ) ra [ i ] += ra [ i + hf ]; for ( int i = 0 ; i + hf <= len ; ++ i ) rb [ i ] += rb [ i + hf ]; z1 = Kmul ( hf - 1 , ra , rb ); for ( int i = 0 ; i + hf <= len ; ++ i ) ra [ i ] -= ra [ i + hf ]; for ( int i = 0 ; i + hf <= len ; ++ i ) rb [ i ] -= rb [ i + hf ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) z1 [ i ] -= z0 [ i ]; for ( int i = 0 ; i <= ( len - hf ) * 2 ; ++ i ) z1 [ i ] -= z2 [ i ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) r [ i ] += z0 [ i ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) r [ i + hf ] += z1 [ i ]; for ( int i = 0 ; i <= ( len - hf ) * 2 ; ++ i ) r [ i + hf * 2 ] += z2 [ i ]; delete [] z0 ; delete [] z1 ; delete [] z2 ; return r ; } void Karatsuba ( int ra [], int rb [], int rc []) { int * r = Kmul ( n - 1 , ra , rb ); memcpy ( rc , r , sizeof ( int ) * m ); for ( int i = 0 ; i < m - 1 ; ++ i ) { if ( rc [ i ] >= 10 ) { rc [ i + 1 ] += rc [ i ] / 10 ; rc [ i ] %= 10 ; } } delete [] r ; } int main () { #ifdef LOCAL freopen ( \"mul.in\" , \"r\" , stdin ); freopen ( \"mul.out\" , \"w\" , stdout ); #endif io :: read ( t ); while ( t -- ) { int len1 , len2 ; scanf ( \"%s %s\" , A + 1 , B + 1 ); len1 = strlen ( A + 1 ), len2 = strlen ( B + 1 ); n = std :: max ( len1 , len2 ); for ( int i = len1 , j = len2 , k = 0 ; k < n ; -- i , -- j , ++ k ) { if ( i >= 1 ) a [ k ] = A [ i ] - '0' ; else a [ k ] = 0 ; if ( j >= 1 ) b [ k ] = B [ j ] - '0' ; else b [ k ] = 0 ; } /*for(int i = 1; i <= n; ++i) printf(\"%d\", a[i]); putchar('\\n'); for(int i = 1; i <= n; ++i) printf(\"%d\", b[i]); putchar('\\n');*/ m = len1 + len2 - 1 ; Karatsuba ( a , b , c ); while ( ! c [ m - 1 ] && m > 1 ) -- m ; for ( int i = m - 1 ; i >= 0 ; -- i ) io :: write ( c [ i ]); io :: write ( '\\n' ); } return 0 ; } \u5199\u5728\u6700\u540e \u00b6 \u6ca1\u5565\u5375\u5b50\u7528\u3002","title":"Karatsuba \u4e58\u6cd5"},{"location":"posts/lectures/karatsuba/#_1","text":"\u300cKaratsuba \u4e58\u6cd5\u300d\u662f 1960 \u5e74\u7531 Anatolii Alexeevitch Karatsuba \u63d0\u51fa\u7684\u53ef\u7528\u4e8e\u5927\u6574\u6570\u4e58\u6cd5\u7684\u7b97\u6cd5\u3002","title":"\u7b80\u4ecb"},{"location":"posts/lectures/karatsuba/#_2","text":"\u4e0d\u59a8\u8bbe\u6211\u4eec\u8981\u76f8\u4e58\u7684\u4e24\u4e2a\u6570\u5b57\u5206\u522b\u4e3a \\(a\\) \u548c \\(b\\) \uff0c\u5176\u4e58\u79ef\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u6570\uff0c\u4e3a \\(c\\) \u3002 \u8bbe \\(a = x_1\\cdot10^m + x_0, b = y_1\\cdot10^m + y_0\\) \uff0c\u5176\u4e2d \\(0 < x_1, x_0, y_1, y_0 < 10^m\\) \uff0c\u5219 \\(\\begin{aligned}c = ab & = (x_1\\cdot10^m + x_0) \\cdot (y_1\\cdot10^m + y_0) \\\\\\\\ & = (x_1\\cdot y_1)10^{2m} + (x_1\\cdot y_0 + x_0\\cdot y_1)10^m + x_0\\cdot y_0\\end{aligned}\\) \u8bb0 \\(z_2 = x_1\\cdot y_1, z_1 = x_1\\cdot y_0 + x_0\\cdot y_1, z_0 = x_0\\cdot y_0\\) \u3002 \u6ce8\u610f\u5230 \uff0c \\(z_1 = (x_1 + x_0)(y_1 + y_0) - z_2 - z_0\\) \u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5206\u6b65\u8ba1\u7b97 \\((x_1 + x_0)(y_1 + y_0), z_2, z_0\\) \u5373\u53ef\u3002","title":"\u7406\u8bba\u63a8\u5bfc"},{"location":"posts/lectures/karatsuba/#_3","text":"\u6211\u4eec\u5b9e\u8d28\u4e0a\u662f\u628a\u4e00\u4e2a \\(n \\times n\\) \u7684\u4e58\u6cd5\u5316\u7b80\u4e3a\u4e86\u4e09\u4e2a\u957f\u5ea6\u66f4\u5c0f\u7684\u4e58\u6cd5\u3002 \u5f53 \\(m = \\left\\lfloor\\dfrac{n}{2}\\right\\rfloor\\) \u65f6\uff0c\u6709\u9012\u63a8\u5f0f \\(T(n) = 3T(\\left\\lfloor\\dfrac{n}{2}\\right\\rfloor) + O(n)\\) \u3002 \u4e0d\u96be\u7531\u4e3b\u5b9a\u7406\u5f97\u77e5 \\(T(n) = \\Theta(n^{\\log_{2}3}) \\approx \\Theta(n^{1.585})\\)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/karatsuba/#_4","text":"\u4e0b\u9762\u7ed9\u51fa\u7684\u662f MUL - Fast Multiplication \u7684\u4ee3\u7801\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <bits/stdc++.h> #define LL long long #define LOCAL namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int N = 1e4 + 5 ; int t , n , m ; int a [ N ], b [ N ], c [ N << 1 ]; char A [ N ], B [ N ]; int * Kmul ( int len , int ra [], int rb []) { if ( len <= 32 ) { int * r = new int [ len * 2 + 1 ](); for ( int i = 0 ; i <= len ; ++ i ) for ( int j = 0 ; j <= len ; ++ j ) r [ i + j ] += ra [ i ] * rb [ j ]; return r ; } int hf = len / 2 + 1 ; int * r = new int [ hf * 4 + 1 ](); int * z0 , * z1 , * z2 ; z0 = Kmul ( hf - 1 , ra , rb ); z2 = Kmul ( len - hf , ra + hf , rb + hf ); for ( int i = 0 ; i + hf <= len ; ++ i ) ra [ i ] += ra [ i + hf ]; for ( int i = 0 ; i + hf <= len ; ++ i ) rb [ i ] += rb [ i + hf ]; z1 = Kmul ( hf - 1 , ra , rb ); for ( int i = 0 ; i + hf <= len ; ++ i ) ra [ i ] -= ra [ i + hf ]; for ( int i = 0 ; i + hf <= len ; ++ i ) rb [ i ] -= rb [ i + hf ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) z1 [ i ] -= z0 [ i ]; for ( int i = 0 ; i <= ( len - hf ) * 2 ; ++ i ) z1 [ i ] -= z2 [ i ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) r [ i ] += z0 [ i ]; for ( int i = 0 ; i <= ( hf - 1 ) * 2 ; ++ i ) r [ i + hf ] += z1 [ i ]; for ( int i = 0 ; i <= ( len - hf ) * 2 ; ++ i ) r [ i + hf * 2 ] += z2 [ i ]; delete [] z0 ; delete [] z1 ; delete [] z2 ; return r ; } void Karatsuba ( int ra [], int rb [], int rc []) { int * r = Kmul ( n - 1 , ra , rb ); memcpy ( rc , r , sizeof ( int ) * m ); for ( int i = 0 ; i < m - 1 ; ++ i ) { if ( rc [ i ] >= 10 ) { rc [ i + 1 ] += rc [ i ] / 10 ; rc [ i ] %= 10 ; } } delete [] r ; } int main () { #ifdef LOCAL freopen ( \"mul.in\" , \"r\" , stdin ); freopen ( \"mul.out\" , \"w\" , stdout ); #endif io :: read ( t ); while ( t -- ) { int len1 , len2 ; scanf ( \"%s %s\" , A + 1 , B + 1 ); len1 = strlen ( A + 1 ), len2 = strlen ( B + 1 ); n = std :: max ( len1 , len2 ); for ( int i = len1 , j = len2 , k = 0 ; k < n ; -- i , -- j , ++ k ) { if ( i >= 1 ) a [ k ] = A [ i ] - '0' ; else a [ k ] = 0 ; if ( j >= 1 ) b [ k ] = B [ j ] - '0' ; else b [ k ] = 0 ; } /*for(int i = 1; i <= n; ++i) printf(\"%d\", a[i]); putchar('\\n'); for(int i = 1; i <= n; ++i) printf(\"%d\", b[i]); putchar('\\n');*/ m = len1 + len2 - 1 ; Karatsuba ( a , b , c ); while ( ! c [ m - 1 ] && m > 1 ) -- m ; for ( int i = m - 1 ; i >= 0 ; -- i ) io :: write ( c [ i ]); io :: write ( '\\n' ); } return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/karatsuba/#_5","text":"\u6ca1\u5565\u5375\u5b50\u7528\u3002","title":"\u5199\u5728\u6700\u540e"},{"location":"posts/lectures/kmp/","text":"\u53d1\u73b0\u81ea\u5df1\u4e0d\u4f1a KMP \u7684\u6a21\u677f\u4e86\uff0c\u501f\u6b64\u673a\u4f1a\u590d\u4e60\u4e00\u4e0b KMP\uff0c\u987a\u4fbf\u66f4\u6df1\u5165\u5730\u7814\u7a76\u524d\u7f00\u51fd\u6570 \\(\\pi\\) \u7684\u5e94\u7528\u3002 \u5199\u5728\u524d\u9762 \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u524d\u7f00\uff0c\u7528 \\(S \\sqsubset T\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u540e\u7f00\uff0c\u7528 \\(S \\sqsupset T\\) \u8868\u793a\uff1b \\(S\\) \u7684\u7b2c \\(i\\) \u4e2a\u524d\u7f00\uff0c\u5373 \\(S[1..i]\\) \uff0c\u7528 \\(S_i\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807\u3001 \\(\\pi\\) \u6570\u7ec4\u4e0b\u6807 \u5747\u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b \\(S_4 = \\mathtt{ABCB}\\) \u3002 \u524d\u7f00\u51fd\u6570\u6570\u7ec4 \u00b6 \u5b9a\u4e49 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570 \\(\\pi(S)\\) \u7684\u503c\u4e3a \\(S\\) \u7684\u6700\u957f\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u5373\uff1a $$ \\begin{aligned} \\pi(S) & = \\mathop{\\operatorname{argmax}}\\limits_{k < \\left|S\\right|}\\{S[1..k] = S[\\left|S\\right| - k + 1..\\left|S\\right|]\\} \\\\ & = \\mathop{\\operatorname{argmax}}\\limits_{k < \\left|S\\right|}\\{S_k \\sqsupset S\\} \\end{aligned} $$ \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570\u6570\u7ec4 \\(\\pi\\) \u4e3a \\(\\pi[i] = \\pi(S_i)\\) \u3002 \\(\\pi[1]\\) \u7b49\u4e8e\u2026\u2026\uff1f \u7279\u6b8a\u5730\uff0c\u5f53 \\(\\left|S\\right| = 1\\) \u65f6 \\(\\pi(S) = \\mathop{\\operatorname{argmax}}\\limits_{k < 1}\\\\{S[1..k] = S[2 - k..1]\\\\}\\) \u6b64\u65f6\u6709 \\(k = 0\\) \u6ee1\u8db3 \\(S[1..0] = S[2..1] = \\epsilon\\) \uff0c\u6545 \\(\\left|S\\right| = 1 \\Longrightarrow \\pi(S) = 0\\) \u3002 \u6027\u8d28 1 \\(\\pi(S_i) = \\pi[i] < i\\) \u3002 \u8bc1\u660e \u7531\u5b9a\u4e49\u77e5 \\(\\pi[i] < i\\) \uff0c\u5373\u5f97\u8bc1\u3002 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u6839\u636e\u5b9a\u4e49\uff0c \\(\\pi[1] = 0\\) \uff1b \u5047\u8bbe\u6211\u4eec\u5faa\u73af\u5230\u4e86\u8981\u6c42 \\(\\pi[i]\\quad(i \\ge 2)\\) \uff0c\u4ee4 \\(k \\gets \\pi[i - 1]\\) \u3002 \u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u5f97\uff0c\u6b64\u65f6 \\(S[1..k] = S[i - k, i - 1]\\) \u3002 \u6211\u4eec\u73b0\u5728\u8981\u505a\u7684\uff0c\u5c31\u662f\u4ece \\(\\pi[1..i - 1]\\) \u9012\u63a8\u5230 \\(\\pi[i]\\) \uff1a \u8003\u8651\u5230 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u4e0d\u65ad\u5730\u679a\u4e3e\u5171\u540c\u7684\u524d\u540e\u7f00\uff08\u5373\u4f7f\u7528 \\(k = \\pi[k]\\) \u6765\u8fed\u4ee3\uff09\u3002 \u7ed3\u675f\u8fd9\u4e2a\u8fed\u4ee3\uff0c\u6709\u4e14\u4ec5\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(k = 0\\) \u6216 \\(S[k + 1] = S[i]\\) \u3002 \u5bf9\u4e8e\u524d\u8005\uff0c\u8bf4\u660e\u5bf9\u4e8e\u5b57\u7b26\u4e32 \\(S[1..i]\\) \uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e24\u4e2a\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\u76f8\u540c\uff0c \\(\\pi[i] = 0\\) \u3002 \u5bf9\u4e8e\u540e\u8005\uff0c\u8bf4\u660e\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a \\(k\\) \uff0c\u4f7f\u5f97 \\(S[1..k + 1] = S[i - k..i]\\) \uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u6709 \\(\\pi[i] = k + 1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6c42\u51fa\u4e86\u5b57\u7b26\u4e32 \\(S\\) \u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4 \\(\\pi\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> void calcPi ( char * S ) { pi [ 1 ] = 0 ; int len = strlen ( S + 1 ); for ( int i = 2 , k = 0 ; i <= len ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } } \u6b63\u786e\u6027 \u00b6 \u5f15\u7406 1\uff08\u540e\u7f00\u91cd\u53e0\u5f15\u7406\uff09 \u5bf9\u4e8e \\(x, y\\) \u6ee1\u8db3 \\(x \\sqsupset z, y \\sqsupset z\\) \u800c\u8a00\uff0c\u6709\uff1a \u82e5 \\(\\left|x\\right| \\le \\left|y\\right|\\) \uff0c\u5219 \\(x \\sqsupset y\\) \uff1b \u82e5 \\(\\left|x\\right| \\ge \\left|y\\right|\\) \uff0c\u5219 \\(y \\sqsupset x\\) \uff1b \u82e5 \\(\\left|x\\right| = \\left|y\\right|\\) \uff0c\u5219 \\(x = y\\) \u3002 \u8bc1\u660e \u8fc7\u4e8e\u663e\u7136\uff0c\u8bc1\u660e\u7565\u3002 \u8bbe $$ \\pi^{\\star}[q] = \\{\\pi[q], \\pi^{(2)}[q], \\cdots, \\pi^{(t)}[q]\\} $$ \u5176\u4e2d $$ \\pi^{(i)}[q] = \\begin{cases}q & i = 0 \\\\ \\pi[\\pi^{(i - 1)}[q]] & i \\ge 1\\end{cases} $$ \u5f53 \\(\\pi^{(t)}[q] = 0\\) \u65f6 \\(\\pi^{\\star}[q]\\) \u4e2d\u7684\u5e8f\u5217\u7ec8\u6b62\u3002 \u5f15\u7406 2\uff08\u524d\u7f00\u51fd\u6570\u8fed\u4ee3\u5f15\u7406\uff09 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 $$ \\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k < q \\land S_k \\sqsupset S_q\\} $$ \u8bc1\u660e \u5148\u8bc1\u660e \\(\\pi^{\\star}[q] \\subseteq \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\}\\) \uff0c \u5373\u8bc1\u660e \\(\\forall x \\in \\pi^{\\star}[q], x < q \\land S_x \\sqsupset S_q\\) \u3002 \u4efb\u53d6 \\(x \\in \\pi^{\\star}[q]\\) \uff0c\u4e0d\u59a8\u8bbe \\(x = \\pi^{u}[q] \\quad (u > 0)\\) \uff0c\u4e0b\u9762\u901a\u8fc7\u5bf9 \\(u\\) \u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\u547d\u9898\u6210\u7acb\u3002 \uff08\u57fa\u7840\uff09\u5f53 \\(u = 1\\) \u65f6\uff0c \\(x = \\pi[q]\\) \uff0c\u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u53ef\u77e5 \\(\\pi[q] < q \\land S_{\\pi[q]} \\sqsupset S_q\\) \u3002 \uff08\u5047\u8bbe\uff09\u5047\u8bbe\u5f53 \\(u = v\\) \u65f6 \\(\\pi^{v}[q] < q \\land S_{\\pi^{v}[q]} \\sqsupset S_q\\) \u3002 \uff08\u63a8\u5bfc\uff09\u5219\u5f53 \\(u = v + 1\\) \u65f6\uff0c \\(\\pi^{v + 1}[q] = \\pi[\\pi^{v}[q]] < \\pi^{v}[q] < q\\) \uff08\u6027\u8d28 1\uff09\uff1b \\(S_{\\pi^{v + 1}[q]} \\sqsupset S_{\\pi^{v}[q]} \\sqsupset S_q\\) \uff08\u7531\u6027\u8d28 1 \u5f97\u5230\u4e0b\u6807\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u7531\u5f15\u7406 1 \u5f97\u5230\u524d\u7f00\u4e4b\u95f4\u7684\u5173\u7cfb\uff09 \u56e0\u6b64 \\(\\forall x \\in \\pi^{\\star}[q], x < q \\land S_x \\sqsupset S_q\\) \u3002 \u518d\u8bc1\u660e \\(\\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \uff0c \u5373\u8bc1\u660e \\(\\forall x \\in \\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}, x \\in\\pi^{\\star}[q]\\) \u8003\u8651\u4f7f\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u547d\u9898\u6210\u7acb\u3002 \u5047\u8bbe\u96c6\u5408 \\(M = \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} - \\pi^{\\star}[q]\\) \u975e\u7a7a\uff0c \\(j\\) \u662f \\(M\\) \u4e2d\u7684\u6700\u5927\u503c\u3002 \\(\\because\\) \\(\\pi[q]\\) \u662f \\(\\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}\\) \u4e2d\u7684\u6700\u5927\u503c\uff0c\u4e14 \\(j \\in \\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}\\) \\(\\therefore j < \\pi[q], S_j \\sqsupset S_q\\) \u53c8 \\(\\because \\pi[q] \\in \\pi^{\\star}[q]\\) \\(\\therefore \\exists j' \\in \\pi^{\\star}[q], \\text{s.t. }j' > j\\) \u8bbe \\(j'\\) \u8868\u793a \\(\\pi^{\\star}[q]\\) \u4e2d\u6bd4 \\(j\\) \u5927\u7684\u6700\u5c0f\u6574\u6570\u3002 \\(\\because \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \u4e14 \\(j' \\in \\pi^{\\star}[q]\\) \\(\\therefore S_{j'} \\sqsupset S_q\\) \\(\\because j' > j\\) \u4e14 \\(j\\) \u662f\u5c0f\u4e8e \\(j'\\) \u7684\u6700\u5927\u503c \\(\\therefore S_j \\sqsupset S_{j'}\\) \uff08\u5f15\u7406 1\uff09 \u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u77e5 \\(\\pi[j'] = j\\) \\(\\because j' \\in \\pi^{\\star}[q]\\) \\(\\therefore j = \\pi[j'] \\in \\pi^{\\star}[q]\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe \u56e0\u6b64 \\(\\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 \\(\\forall q \\in [1, n], \\pi^{\\star}[q] = \\\\{k: k < q \\land S_k \\sqsupset S_q\\\\}\\) \u3002 \u5f15\u7406 3 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 \\(\\forall q \\in [1, n]\\) \uff0c\u82e5 \\(\\pi[q] > 0\\) \uff0c\u5219 \\(\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \u3002 \u8bc1\u660e \u4ee4 \\(x = \\pi[q] > 0\\) \uff0c\u5219 \\(x < q, S_x \\sqsupset S_q\\) \\(\\because x > 0\\) \uff0c\u5219 \\(x - 1\\) \u6709\u610f\u4e49 \\(\\therefore x - 1 < q - 1, S_{x - 1} \\sqsupset S_{q - 1}\\) \uff08\u628a \\(S_x\\) \u548c \\(S_q\\) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u53bb\u6389\uff09 \u7531\u5f15\u7406 2 \u77e5 \\(x - 1 \\in \\pi^{\\star}[q - 1]\\) \\(\\therefore \\forall q \\in [1, n] \\land \\pi[q] > 0,\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \u5bf9 \\(q \\in [2, n]\\) \u5b9a\u4e49\u5b50\u96c6 \\(E_{q - i} \\subseteq \\pi^{\\star}[q - 1]\\) \u4e3a\uff1a $$ E_{q - 1} = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} $$ \u5219\u6709\uff1a $$ \\begin{aligned} E_{q - 1} & = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} \\\\ & = \\{k: k < q - 1, S_k \\sqsupset S_{q - 1}, S[k + 1] = S[q]\\} \\\\ & = \\{k: k < q - 1, S_{k + 1} \\sqsupset S_q\\} \\end{aligned} $$ \u56e0\u6b64\uff0c \\(E_{q - 1}\\) \u662f\u7531 \\(\\pi^{\\star}[q - 1]\\) \u4e2d\u7684\u503c\u7ec4\u6210\u7684\u3001\u80fd\u6ee1\u8db3 \\(S_{k + 1}\\) \u4e0e \\(S_q\\) \u7684\u67d0\u4e2a\u540e\u7f00\u76f8\u7b49\u7684 \\(k\\) \u7ec4\u6210\u7684\u96c6\u5408\u3002 \u63a8\u8bba 1 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 $$ \\forall q \\in [2, n],\\pi[q] = \\begin{cases}0 & E_{q - 1} = \\varnothing \\\\ 1 + \\max\\{k \\in E_{q - 1}\\} & E_{q - 1} \\neq \\varnothing\\end{cases} $$ \u8bc1\u660e \u5f53 \\(E_{q - 1} = \\varnothing\\) \u65f6\uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a \\(k \\in \\pi^{\\star}[q - 1]\\) \uff0c\u4f7f\u5f97 \\(S_{k + 1} \\sqsupset S_q\\) \u3002 \u663e\u7136\u6b64\u65f6 \\(\\pi[q]\\) \u53ea\u80fd\u4e3a \\(0\\) \u3002 \u5f53 \\(E_{q - 1} \\neq \\varnothing\\) \u65f6\uff0c \\(\\forall k \\in E_{q - 1}, k < q - 1 \\land S_{k + 1} \\sqsupset S_q \\Longrightarrow k + 1 < q\\) \u5219\u7531 \\(\\pi[q]\\) \u7684\u5b9a\u4e49\uff0c \\(k\\) \u662f\u62d3\u5c55\u5230 \\(S_q\\) \u7684\u67d0\u4e00\u540e\u7f00\u7684\u5907\u9009\u9879\uff0c \\(\\pi[q] \\ge 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u3002 \u6ce8\u610f\u5230\u6b64\u65f6 \\(\\pi[q] > 0\\) \uff0c\u8bbe \\(r = \\pi[q] - 1\\) \u3002 \u5219 \\(r + 1 = \\pi[q] < q, S_{r + 1} = S_{\\pi[q]} \\sqsupset S_q\\) \u3002 \\(\\because r + 1 > 0\\) \\(\\therefore S_{r + 1} = S_q\\) \u7531\u5f15\u7406 3 \u53ef\u5f97 \\(r = \\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \\(\\therefore r \\in E_{q - 1}\\) \\(\\therefore \\pi[q] - 1 = r \\le \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u5373 \\(\\pi[q] \\le 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53 \\(E_{q - 1} \\neq \\varnothing\\) \uff0c \\(\\pi[q] = 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u3002 \u518d\u770b\u4e00\u6b21\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> void calcPi ( char * S ) { pi [ 1 ] = 0 ; int len = strlen ( S + 1 ); for ( int i = 2 , k = 0 ; i <= len ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u4e0a\u8ff0\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002 \u8bc1\u660e \u521d\u59cb\u5316 \u5728\u7b2c 4 \u884c\u7684\u8fed\u4ee3\u5f00\u59cb\u524d\uff0c\u6709 \\(i = 1, k = \\pi[i] = 0\\) \uff0c\u4e0d\u53d8\u5f0f\u6210\u7acb\u3002 \u4fdd\u6301 \u5728\u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u524d\uff0c\u6709 \\(k = \\pi[i - 1]\\) \uff1a \u82e5\u662f\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u6b64\u7b49\u5f0f\u7531\u7b2c 4 \u884c\u4fdd\u8bc1\uff1b \u5176\u4f59\u8fed\u4ee3\u5747\u7531\u7b2c 9 \u884c\u4fdd\u8bc1\u3002 \u63a5\u4e0b\u6765\u8981\u8bc1\u660e\u6bcf\u6b21\u8fed\u4ee3\u7ed3\u675f\u540e\u5747\u6709 \\(k = \\pi[i]\\) \u6210\u7acb\u3002 \u82e5 \\(k \\neq \\pi[i]\\) \uff0c\u5219\u4f1a\u5728\u7b2c 5-8 \u884c\u5c06 \\(k\\) \u8c03\u6574\u81f3 \\(\\pi[i]\\) \u3002 \u7b2c 5 \u884c\u7684 while \u5faa\u73af\u904d\u5386\u6bcf\u4e00\u4e2a \\(k \\in \\pi^{\\star}[i - 1]\\) \uff0c\u76f4\u81f3\u627e\u5230\u4e00\u4e2a \\(k\\) \uff0c\u4f7f\u5f97 \\(S[k + 1] = S[i]\\) \u3002\uff08\u5f15\u7406 2\uff09 \u82e5\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u503c\uff0c\u5219\u5728\u7b2c 7 \u884c \\(k = 0\\) \u3002 \u82e5\u627e\u5230\u4e86\u8fd9\u6837\u7684\u503c\uff0c\u6b64\u65f6 \\(k\\) \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5e94\u5c06 \\(\\pi[i] \\gets k + 1\\) \u3002\uff08\u63a8\u8bba 1\uff09 \u7b2c 9 \u884c\u7684\u8d4b\u503c\u8bed\u53e5\u4f7f\u5f97 \\(k = \\pi[i]\\) \u6052\u6210\u7acb\u3002 \u7ec8\u6b62 \u5f53 \\(i = n + 1\\) \u65f6\uff0c\u8fed\u4ee3\u7ec8\u6b62\uff0c\u6b64\u65f6\u6211\u4eec\u6c42\u51fa\u4e86 \\(\\pi[1..n]\\) \u3002 \u81f3\u6b64\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u56e0\u6b64\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u80fd\u6b63\u786e\u5730\u6c42\u51fa\u5b57\u7b26\u4e32 \\(S\\) \u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e0d\u96be\u53d1\u73b0\uff0c\u7b2c 7-9 \u884c\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(n)\\) \uff0c\u552f\u4e00\u68d8\u624b\u7684\u662f\u7b2c 6-7 \u884c\u4ee3\u7801\u3002 \u8003\u8651 \\(k\\) \u7684\u53d8\u5316\uff0c \\(k\\) \u5728\u7b2c 7-8 \u884c\u589e\u52a0\u7684\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(n\\) \u6b21\uff0c\u5373 \\(k \\le n\\) \uff1b \\(k\\) \u5728\u7b2c 6 \u884c\u7684\u64cd\u4f5c\u4e2d\uff0c\u56e0\u4e3a\u6709 \\(\\pi(S_i) < i\\) \u7684\u6027\u8d28\uff0c\u5bfc\u81f4\u6bcf\u6b21\u8fed\u4ee3\u81f3\u5c11\u4f7f \\(k\\) \u51cf\u5c0f \\(1\\) \uff0c\u5373\u6700\u591a\u8fed\u4ee3 \\(n\\) \u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u6613\u77e5\u7528\u6b64\u79cd\u65b9\u6cd5\u6c42\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 KMP \u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a\u7528 \\(S = \\mathtt{CCFCCFMONEY}\\) \u88ab \\(T = \\mathtt{CCFCCFSB}\\) \u5339\u914d\u3002 \u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 \\(i,k\\) \uff0c\u8868\u793a \\(S[i - k..i - 1] = T[1..k]\\) \u3002 \u6211\u4eec\u8981\u62d3\u5c55\u7684\uff0c\u5c31\u662f \\(S[i]\\) \u4e0e \\(T[k + 1]\\) \u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u9996\u5148\u6211\u4eec\u8003\u8651\u6734\u7d20\u7b97\u6cd5\u7684\u5f0a\u7aef\uff1a\u5f53\u4f60\u5339\u914d\u5230\u4e86 \\(i = 8, k = 7\\) \u65f6\uff1a $$ \\begin{aligned} S & = \\mathtt{\\color{green}CCFXCCF\\color{red}M\\color{black}ONEY} \\\\ T & = \\mathtt{\\color{green}CCFXCCF\\color{red}S\\color{black}B} \\\\ \\text{index} & =\\mathtt{123456789} \\end{aligned} $$ \u4f60\u53d1\u73b0 \\(S[i] = S[8] = \\mathtt{M}\\) \uff0c\u53ef \\(T[k + 1] = T[8] = \\mathtt{S}\\) \uff0c\u6211\u4eec\u524d\u529f\u5c3d\u5f03\uff0c\u53ea\u80fd\u5c06 \\(T\\) \u5f80\u53f3\u5e73\u79fb\u4e00\u683c\u3002 \u800c\u4e14\u8981\u91cd\u65b0\u5f00\u59cb\uff1a \\(i = 1, k = 1\\) \u3002 $$ \\begin{aligned} S & = \\mathtt{CCFXCCFMONEY} \\\\ T & = \\mathtt{\\text{ }CCFXCCFSB} \\\\ \\text{index} & =\\mathtt{123456789} \\end{aligned} $$ \u663e\u7136\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 \u518d\u8003\u8651\u4f7f\u7528\u524d\u7f00\u51fd\u6570 \\(\\pi\\) \u6765\u4f18\u5316\u5339\u914d\u7684\u8fc7\u7a0b\u3002 \u4e0d\u96be\u6c42\u51fa \\(T\\) \u7684\u524d\u7f00\u6570\u7ec4 \\(\\pi[1..n] = \\{0, 1, 0, 0, 1, 2, 3, 0, 0\\}\\) \u3002 \u8003\u8651\u524d\u7f00\u6570\u7ec4\u7684\u610f\u4e49\uff1a \\(T_i\\) \u7684\u6700\u957f\u7684\u76f8\u7b49\u7684\u524d\u540e\u7f00\u957f\u5ea6\u3002 \u4f60\u77e5\u9053\u4e86\u5f53 \\(i = 8, k = 7\\) \u65f6\uff0c\u6709 \\(S[1..7] = T[1..7]\\) \uff0c\u800c\u4e14 \\(T[1..3] = T[5..7]\\) \u3002 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u628a \\(T[1..3]\\) \u8fd9\u4e2a\u5730\u65b9\u5339\u914d\u5230\u7684 \\(\\mathtt{\\color{green}CCF}\\) \u79fb\u52a8\u5230 \\(S[5..8]\\) \u53bb\u3002 \u8fd9\u6837\u5c31\u76f4\u63a5\u8282\u7701\u4e86\u4e09\u6b21\u79fb\u52a8\u3002 \u603b\u7ed3\u4e00\u4e0b\u4f7f\u7528\u524d\u7f00\u51fd\u6570 \\(\\pi\\) \u65f6\u6211\u4eec\u7684\u5339\u914d\u8fc7\u7a0b\uff1a \u4f7f\u7528 \\(i, k\\) \u6765\u8868\u793a\u5f53\u524d \\(S[i - k..i - 1] = T[1..k]\\) \uff1b \u5982\u679c \\(S[i] \\neq T[k + 1]\\) \uff0c\u6211\u4eec\u5c31\u7528 \\(\\pi\\) \u51fd\u6570\u6765\u5b9e\u73b0\u5927\u5e45\u5ea6\u7684\u8df3\u8dc3\uff1b \u5426\u5219 \\(k' \\gets k + 1\\) \uff0c\u8868\u793a \\(S[i - k..i] = T[1..k + 1]\\) \uff1b \u5f53 \\(k = m\\) \u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d \\(S[i - m + 1..i] = T[1..m]\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> void KMP ( char * S , char * T ) { for ( int i = 1 , k = 0 ; i <= n ; ++ i ) { while ( k > 0 && T [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( T [ k + 1 ] == S [ i ]) ++ k ; if ( k == m ) { printf ( \"%d \\n \" , i - m + 1 ); // S[i - m + 1..i] = T[1..m] k = pi [ k ]; } } } \u6b63\u786e\u6027 \u00b6 \u53ef\u4ee5\u8bc1\u660e\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u662f\u6b63\u786e\u7684\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u4f9d\u846b\u82a6\u753b\u74e2\u5730\u4f7f\u7528\u6c42\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u65f6\u7684\u644a\u8fd8\u5206\u6790\u65b9\u6cd5\uff0c\u4e0d\u96be\u5f97\u51fa KMP \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n + m)\\) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e0d\u96be\u53d1\u73b0 KMP \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n + m)\\) \u3002 \u4f8b\u9898 \u00b6 \u300cNOI2014\u300d\u52a8\u7269\u56ed \u300cPOJ 1961\u300dPeriod \u300cCF1200E\u300dCompress Words \u300cPOI2006\u300dOKR-Periods of Words \u5199\u5728\u6700\u540e \u00b6 KMP Reflect upon yourself before you judge others. \u611f\u89c9\u524d\u7f00\u51fd\u6570\u7684\u6027\u8d28\u975e\u5e38\u4f18\u79c0\uff0c\u53ef\u4ee5\u6709\u500d\u589e next \u6570\u7ec4\u4e4b\u7c7b\u7684\u795e\u5947\u64cd\u4f5c\u6765\u8279\u6807\u7b97\u3002\uff08\u5927\u96fe","title":"\u524d\u7f00\u51fd\u6570\u4e0e KMP \u7b97\u6cd5"},{"location":"posts/lectures/kmp/#_1","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u524d\u7f00\uff0c\u7528 \\(S \\sqsubset T\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u540e\u7f00\uff0c\u7528 \\(S \\sqsupset T\\) \u8868\u793a\uff1b \\(S\\) \u7684\u7b2c \\(i\\) \u4e2a\u524d\u7f00\uff0c\u5373 \\(S[1..i]\\) \uff0c\u7528 \\(S_i\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807\u3001 \\(\\pi\\) \u6570\u7ec4\u4e0b\u6807 \u5747\u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b \\(S_4 = \\mathtt{ABCB}\\) \u3002","title":"\u5199\u5728\u524d\u9762"},{"location":"posts/lectures/kmp/#_2","text":"","title":"\u524d\u7f00\u51fd\u6570\u6570\u7ec4"},{"location":"posts/lectures/kmp/#_3","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570 \\(\\pi(S)\\) \u7684\u503c\u4e3a \\(S\\) \u7684\u6700\u957f\u76f8\u7b49\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u5373\uff1a $$ \\begin{aligned} \\pi(S) & = \\mathop{\\operatorname{argmax}}\\limits_{k < \\left|S\\right|}\\{S[1..k] = S[\\left|S\\right| - k + 1..\\left|S\\right|]\\} \\\\ & = \\mathop{\\operatorname{argmax}}\\limits_{k < \\left|S\\right|}\\{S_k \\sqsupset S\\} \\end{aligned} $$ \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570\u6570\u7ec4 \\(\\pi\\) \u4e3a \\(\\pi[i] = \\pi(S_i)\\) \u3002 \\(\\pi[1]\\) \u7b49\u4e8e\u2026\u2026\uff1f \u7279\u6b8a\u5730\uff0c\u5f53 \\(\\left|S\\right| = 1\\) \u65f6 \\(\\pi(S) = \\mathop{\\operatorname{argmax}}\\limits_{k < 1}\\\\{S[1..k] = S[2 - k..1]\\\\}\\) \u6b64\u65f6\u6709 \\(k = 0\\) \u6ee1\u8db3 \\(S[1..0] = S[2..1] = \\epsilon\\) \uff0c\u6545 \\(\\left|S\\right| = 1 \\Longrightarrow \\pi(S) = 0\\) \u3002 \u6027\u8d28 1 \\(\\pi(S_i) = \\pi[i] < i\\) \u3002 \u8bc1\u660e \u7531\u5b9a\u4e49\u77e5 \\(\\pi[i] < i\\) \uff0c\u5373\u5f97\u8bc1\u3002","title":"\u5b9a\u4e49"},{"location":"posts/lectures/kmp/#_4","text":"\u6839\u636e\u5b9a\u4e49\uff0c \\(\\pi[1] = 0\\) \uff1b \u5047\u8bbe\u6211\u4eec\u5faa\u73af\u5230\u4e86\u8981\u6c42 \\(\\pi[i]\\quad(i \\ge 2)\\) \uff0c\u4ee4 \\(k \\gets \\pi[i - 1]\\) \u3002 \u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u5f97\uff0c\u6b64\u65f6 \\(S[1..k] = S[i - k, i - 1]\\) \u3002 \u6211\u4eec\u73b0\u5728\u8981\u505a\u7684\uff0c\u5c31\u662f\u4ece \\(\\pi[1..i - 1]\\) \u9012\u63a8\u5230 \\(\\pi[i]\\) \uff1a \u8003\u8651\u5230 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u4e0d\u65ad\u5730\u679a\u4e3e\u5171\u540c\u7684\u524d\u540e\u7f00\uff08\u5373\u4f7f\u7528 \\(k = \\pi[k]\\) \u6765\u8fed\u4ee3\uff09\u3002 \u7ed3\u675f\u8fd9\u4e2a\u8fed\u4ee3\uff0c\u6709\u4e14\u4ec5\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(k = 0\\) \u6216 \\(S[k + 1] = S[i]\\) \u3002 \u5bf9\u4e8e\u524d\u8005\uff0c\u8bf4\u660e\u5bf9\u4e8e\u5b57\u7b26\u4e32 \\(S[1..i]\\) \uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e24\u4e2a\u771f\u524d\u7f00\u4e0e\u771f\u540e\u7f00\u76f8\u540c\uff0c \\(\\pi[i] = 0\\) \u3002 \u5bf9\u4e8e\u540e\u8005\uff0c\u8bf4\u660e\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a \\(k\\) \uff0c\u4f7f\u5f97 \\(S[1..k + 1] = S[i - k..i]\\) \uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u6709 \\(\\pi[i] = k + 1\\) \u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u6c42\u51fa\u4e86\u5b57\u7b26\u4e32 \\(S\\) \u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4 \\(\\pi\\) \u3002","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"posts/lectures/kmp/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> void calcPi ( char * S ) { pi [ 1 ] = 0 ; int len = strlen ( S + 1 ); for ( int i = 2 , k = 0 ; i <= len ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/kmp/#_6","text":"\u5f15\u7406 1\uff08\u540e\u7f00\u91cd\u53e0\u5f15\u7406\uff09 \u5bf9\u4e8e \\(x, y\\) \u6ee1\u8db3 \\(x \\sqsupset z, y \\sqsupset z\\) \u800c\u8a00\uff0c\u6709\uff1a \u82e5 \\(\\left|x\\right| \\le \\left|y\\right|\\) \uff0c\u5219 \\(x \\sqsupset y\\) \uff1b \u82e5 \\(\\left|x\\right| \\ge \\left|y\\right|\\) \uff0c\u5219 \\(y \\sqsupset x\\) \uff1b \u82e5 \\(\\left|x\\right| = \\left|y\\right|\\) \uff0c\u5219 \\(x = y\\) \u3002 \u8bc1\u660e \u8fc7\u4e8e\u663e\u7136\uff0c\u8bc1\u660e\u7565\u3002 \u8bbe $$ \\pi^{\\star}[q] = \\{\\pi[q], \\pi^{(2)}[q], \\cdots, \\pi^{(t)}[q]\\} $$ \u5176\u4e2d $$ \\pi^{(i)}[q] = \\begin{cases}q & i = 0 \\\\ \\pi[\\pi^{(i - 1)}[q]] & i \\ge 1\\end{cases} $$ \u5f53 \\(\\pi^{(t)}[q] = 0\\) \u65f6 \\(\\pi^{\\star}[q]\\) \u4e2d\u7684\u5e8f\u5217\u7ec8\u6b62\u3002 \u5f15\u7406 2\uff08\u524d\u7f00\u51fd\u6570\u8fed\u4ee3\u5f15\u7406\uff09 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 $$ \\forall q \\in [1, n], \\pi^{\\star}[q] = \\{k: k < q \\land S_k \\sqsupset S_q\\} $$ \u8bc1\u660e \u5148\u8bc1\u660e \\(\\pi^{\\star}[q] \\subseteq \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\}\\) \uff0c \u5373\u8bc1\u660e \\(\\forall x \\in \\pi^{\\star}[q], x < q \\land S_x \\sqsupset S_q\\) \u3002 \u4efb\u53d6 \\(x \\in \\pi^{\\star}[q]\\) \uff0c\u4e0d\u59a8\u8bbe \\(x = \\pi^{u}[q] \\quad (u > 0)\\) \uff0c\u4e0b\u9762\u901a\u8fc7\u5bf9 \\(u\\) \u7684\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\u547d\u9898\u6210\u7acb\u3002 \uff08\u57fa\u7840\uff09\u5f53 \\(u = 1\\) \u65f6\uff0c \\(x = \\pi[q]\\) \uff0c\u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u53ef\u77e5 \\(\\pi[q] < q \\land S_{\\pi[q]} \\sqsupset S_q\\) \u3002 \uff08\u5047\u8bbe\uff09\u5047\u8bbe\u5f53 \\(u = v\\) \u65f6 \\(\\pi^{v}[q] < q \\land S_{\\pi^{v}[q]} \\sqsupset S_q\\) \u3002 \uff08\u63a8\u5bfc\uff09\u5219\u5f53 \\(u = v + 1\\) \u65f6\uff0c \\(\\pi^{v + 1}[q] = \\pi[\\pi^{v}[q]] < \\pi^{v}[q] < q\\) \uff08\u6027\u8d28 1\uff09\uff1b \\(S_{\\pi^{v + 1}[q]} \\sqsupset S_{\\pi^{v}[q]} \\sqsupset S_q\\) \uff08\u7531\u6027\u8d28 1 \u5f97\u5230\u4e0b\u6807\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u7531\u5f15\u7406 1 \u5f97\u5230\u524d\u7f00\u4e4b\u95f4\u7684\u5173\u7cfb\uff09 \u56e0\u6b64 \\(\\forall x \\in \\pi^{\\star}[q], x < q \\land S_x \\sqsupset S_q\\) \u3002 \u518d\u8bc1\u660e \\(\\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \uff0c \u5373\u8bc1\u660e \\(\\forall x \\in \\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}, x \\in\\pi^{\\star}[q]\\) \u8003\u8651\u4f7f\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u547d\u9898\u6210\u7acb\u3002 \u5047\u8bbe\u96c6\u5408 \\(M = \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} - \\pi^{\\star}[q]\\) \u975e\u7a7a\uff0c \\(j\\) \u662f \\(M\\) \u4e2d\u7684\u6700\u5927\u503c\u3002 \\(\\because\\) \\(\\pi[q]\\) \u662f \\(\\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}\\) \u4e2d\u7684\u6700\u5927\u503c\uff0c\u4e14 \\(j \\in \\\\{k:k < q \\land S_x \\sqsupset S_q\\\\}\\) \\(\\therefore j < \\pi[q], S_j \\sqsupset S_q\\) \u53c8 \\(\\because \\pi[q] \\in \\pi^{\\star}[q]\\) \\(\\therefore \\exists j' \\in \\pi^{\\star}[q], \\text{s.t. }j' > j\\) \u8bbe \\(j'\\) \u8868\u793a \\(\\pi^{\\star}[q]\\) \u4e2d\u6bd4 \\(j\\) \u5927\u7684\u6700\u5c0f\u6574\u6570\u3002 \\(\\because \\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \u4e14 \\(j' \\in \\pi^{\\star}[q]\\) \\(\\therefore S_{j'} \\sqsupset S_q\\) \\(\\because j' > j\\) \u4e14 \\(j\\) \u662f\u5c0f\u4e8e \\(j'\\) \u7684\u6700\u5927\u503c \\(\\therefore S_j \\sqsupset S_{j'}\\) \uff08\u5f15\u7406 1\uff09 \u7531 \\(\\pi\\) \u6570\u7ec4\u7684\u5b9a\u4e49\u77e5 \\(\\pi[j'] = j\\) \\(\\because j' \\in \\pi^{\\star}[q]\\) \\(\\therefore j = \\pi[j'] \\in \\pi^{\\star}[q]\\) \uff0c\u4e0e\u5047\u8bbe\u77db\u76fe \u56e0\u6b64 \\(\\\\{k:k < q \\land S_k \\sqsupset S_q\\\\} \\subseteq \\pi^{\\star}[q]\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 \\(\\forall q \\in [1, n], \\pi^{\\star}[q] = \\\\{k: k < q \\land S_k \\sqsupset S_q\\\\}\\) \u3002 \u5f15\u7406 3 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 \\(\\forall q \\in [1, n]\\) \uff0c\u82e5 \\(\\pi[q] > 0\\) \uff0c\u5219 \\(\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \u3002 \u8bc1\u660e \u4ee4 \\(x = \\pi[q] > 0\\) \uff0c\u5219 \\(x < q, S_x \\sqsupset S_q\\) \\(\\because x > 0\\) \uff0c\u5219 \\(x - 1\\) \u6709\u610f\u4e49 \\(\\therefore x - 1 < q - 1, S_{x - 1} \\sqsupset S_{q - 1}\\) \uff08\u628a \\(S_x\\) \u548c \\(S_q\\) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u53bb\u6389\uff09 \u7531\u5f15\u7406 2 \u77e5 \\(x - 1 \\in \\pi^{\\star}[q - 1]\\) \\(\\therefore \\forall q \\in [1, n] \\land \\pi[q] > 0,\\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \u5bf9 \\(q \\in [2, n]\\) \u5b9a\u4e49\u5b50\u96c6 \\(E_{q - i} \\subseteq \\pi^{\\star}[q - 1]\\) \u4e3a\uff1a $$ E_{q - 1} = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} $$ \u5219\u6709\uff1a $$ \\begin{aligned} E_{q - 1} & = \\{k\\in\\pi^{\\star}[q - 1]:S_{k + 1} = S_k\\} \\\\ & = \\{k: k < q - 1, S_k \\sqsupset S_{q - 1}, S[k + 1] = S[q]\\} \\\\ & = \\{k: k < q - 1, S_{k + 1} \\sqsupset S_q\\} \\end{aligned} $$ \u56e0\u6b64\uff0c \\(E_{q - 1}\\) \u662f\u7531 \\(\\pi^{\\star}[q - 1]\\) \u4e2d\u7684\u503c\u7ec4\u6210\u7684\u3001\u80fd\u6ee1\u8db3 \\(S_{k + 1}\\) \u4e0e \\(S_q\\) \u7684\u67d0\u4e2a\u540e\u7f00\u76f8\u7b49\u7684 \\(k\\) \u7ec4\u6210\u7684\u96c6\u5408\u3002 \u63a8\u8bba 1 \u5bf9\u4efb\u610f\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6709 $$ \\forall q \\in [2, n],\\pi[q] = \\begin{cases}0 & E_{q - 1} = \\varnothing \\\\ 1 + \\max\\{k \\in E_{q - 1}\\} & E_{q - 1} \\neq \\varnothing\\end{cases} $$ \u8bc1\u660e \u5f53 \\(E_{q - 1} = \\varnothing\\) \u65f6\uff0c\u4e0d\u5b58\u5728\u4efb\u4f55\u4e00\u4e2a \\(k \\in \\pi^{\\star}[q - 1]\\) \uff0c\u4f7f\u5f97 \\(S_{k + 1} \\sqsupset S_q\\) \u3002 \u663e\u7136\u6b64\u65f6 \\(\\pi[q]\\) \u53ea\u80fd\u4e3a \\(0\\) \u3002 \u5f53 \\(E_{q - 1} \\neq \\varnothing\\) \u65f6\uff0c \\(\\forall k \\in E_{q - 1}, k < q - 1 \\land S_{k + 1} \\sqsupset S_q \\Longrightarrow k + 1 < q\\) \u5219\u7531 \\(\\pi[q]\\) \u7684\u5b9a\u4e49\uff0c \\(k\\) \u662f\u62d3\u5c55\u5230 \\(S_q\\) \u7684\u67d0\u4e00\u540e\u7f00\u7684\u5907\u9009\u9879\uff0c \\(\\pi[q] \\ge 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u3002 \u6ce8\u610f\u5230\u6b64\u65f6 \\(\\pi[q] > 0\\) \uff0c\u8bbe \\(r = \\pi[q] - 1\\) \u3002 \u5219 \\(r + 1 = \\pi[q] < q, S_{r + 1} = S_{\\pi[q]} \\sqsupset S_q\\) \u3002 \\(\\because r + 1 > 0\\) \\(\\therefore S_{r + 1} = S_q\\) \u7531\u5f15\u7406 3 \u53ef\u5f97 \\(r = \\pi[q] - 1 \\in \\pi^{\\star}[q - 1]\\) \\(\\therefore r \\in E_{q - 1}\\) \\(\\therefore \\pi[q] - 1 = r \\le \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u5373 \\(\\pi[q] \\le 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53 \\(E_{q - 1} \\neq \\varnothing\\) \uff0c \\(\\pi[q] = 1 + \\max\\\\{k \\in E_{q - 1}\\\\}\\) \u3002 \u518d\u770b\u4e00\u6b21\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> void calcPi ( char * S ) { pi [ 1 ] = 0 ; int len = strlen ( S + 1 ); for ( int i = 2 , k = 0 ; i <= len ; ++ i ) { while ( k > 0 && S [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( S [ k + 1 ] == S [ i ]) ++ k ; pi [ i ] = k ; } } \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u4e0a\u8ff0\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002 \u8bc1\u660e \u521d\u59cb\u5316 \u5728\u7b2c 4 \u884c\u7684\u8fed\u4ee3\u5f00\u59cb\u524d\uff0c\u6709 \\(i = 1, k = \\pi[i] = 0\\) \uff0c\u4e0d\u53d8\u5f0f\u6210\u7acb\u3002 \u4fdd\u6301 \u5728\u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u524d\uff0c\u6709 \\(k = \\pi[i - 1]\\) \uff1a \u82e5\u662f\u7b2c\u4e00\u6b21\u8fed\u4ee3\uff0c\u6b64\u7b49\u5f0f\u7531\u7b2c 4 \u884c\u4fdd\u8bc1\uff1b \u5176\u4f59\u8fed\u4ee3\u5747\u7531\u7b2c 9 \u884c\u4fdd\u8bc1\u3002 \u63a5\u4e0b\u6765\u8981\u8bc1\u660e\u6bcf\u6b21\u8fed\u4ee3\u7ed3\u675f\u540e\u5747\u6709 \\(k = \\pi[i]\\) \u6210\u7acb\u3002 \u82e5 \\(k \\neq \\pi[i]\\) \uff0c\u5219\u4f1a\u5728\u7b2c 5-8 \u884c\u5c06 \\(k\\) \u8c03\u6574\u81f3 \\(\\pi[i]\\) \u3002 \u7b2c 5 \u884c\u7684 while \u5faa\u73af\u904d\u5386\u6bcf\u4e00\u4e2a \\(k \\in \\pi^{\\star}[i - 1]\\) \uff0c\u76f4\u81f3\u627e\u5230\u4e00\u4e2a \\(k\\) \uff0c\u4f7f\u5f97 \\(S[k + 1] = S[i]\\) \u3002\uff08\u5f15\u7406 2\uff09 \u82e5\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u503c\uff0c\u5219\u5728\u7b2c 7 \u884c \\(k = 0\\) \u3002 \u82e5\u627e\u5230\u4e86\u8fd9\u6837\u7684\u503c\uff0c\u6b64\u65f6 \\(k\\) \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5e94\u5c06 \\(\\pi[i] \\gets k + 1\\) \u3002\uff08\u63a8\u8bba 1\uff09 \u7b2c 9 \u884c\u7684\u8d4b\u503c\u8bed\u53e5\u4f7f\u5f97 \\(k = \\pi[i]\\) \u6052\u6210\u7acb\u3002 \u7ec8\u6b62 \u5f53 \\(i = n + 1\\) \u65f6\uff0c\u8fed\u4ee3\u7ec8\u6b62\uff0c\u6b64\u65f6\u6211\u4eec\u6c42\u51fa\u4e86 \\(\\pi[1..n]\\) \u3002 \u81f3\u6b64\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u56e0\u6b64\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u80fd\u6b63\u786e\u5730\u6c42\u51fa\u5b57\u7b26\u4e32 \\(S\\) \u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u3002","title":"\u6b63\u786e\u6027"},{"location":"posts/lectures/kmp/#_7","text":"\u4e0d\u96be\u53d1\u73b0\uff0c\u7b2c 7-9 \u884c\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(n)\\) \uff0c\u552f\u4e00\u68d8\u624b\u7684\u662f\u7b2c 6-7 \u884c\u4ee3\u7801\u3002 \u8003\u8651 \\(k\\) \u7684\u53d8\u5316\uff0c \\(k\\) \u5728\u7b2c 7-8 \u884c\u589e\u52a0\u7684\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(n\\) \u6b21\uff0c\u5373 \\(k \\le n\\) \uff1b \\(k\\) \u5728\u7b2c 6 \u884c\u7684\u64cd\u4f5c\u4e2d\uff0c\u56e0\u4e3a\u6709 \\(\\pi(S_i) < i\\) \u7684\u6027\u8d28\uff0c\u5bfc\u81f4\u6bcf\u6b21\u8fed\u4ee3\u81f3\u5c11\u4f7f \\(k\\) \u51cf\u5c0f \\(1\\) \uff0c\u5373\u6700\u591a\u8fed\u4ee3 \\(n\\) \u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u7528\u4e0a\u8ff0\u65b9\u6cd5\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/kmp/#_8","text":"\u6613\u77e5\u7528\u6b64\u79cd\u65b9\u6cd5\u6c42\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/kmp/#kmp","text":"","title":"KMP \u7b97\u6cd5"},{"location":"posts/lectures/kmp/#_9","text":"\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a\u7528 \\(S = \\mathtt{CCFCCFMONEY}\\) \u88ab \\(T = \\mathtt{CCFCCFSB}\\) \u5339\u914d\u3002 \u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488 \\(i,k\\) \uff0c\u8868\u793a \\(S[i - k..i - 1] = T[1..k]\\) \u3002 \u6211\u4eec\u8981\u62d3\u5c55\u7684\uff0c\u5c31\u662f \\(S[i]\\) \u4e0e \\(T[k + 1]\\) \u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u9996\u5148\u6211\u4eec\u8003\u8651\u6734\u7d20\u7b97\u6cd5\u7684\u5f0a\u7aef\uff1a\u5f53\u4f60\u5339\u914d\u5230\u4e86 \\(i = 8, k = 7\\) \u65f6\uff1a $$ \\begin{aligned} S & = \\mathtt{\\color{green}CCFXCCF\\color{red}M\\color{black}ONEY} \\\\ T & = \\mathtt{\\color{green}CCFXCCF\\color{red}S\\color{black}B} \\\\ \\text{index} & =\\mathtt{123456789} \\end{aligned} $$ \u4f60\u53d1\u73b0 \\(S[i] = S[8] = \\mathtt{M}\\) \uff0c\u53ef \\(T[k + 1] = T[8] = \\mathtt{S}\\) \uff0c\u6211\u4eec\u524d\u529f\u5c3d\u5f03\uff0c\u53ea\u80fd\u5c06 \\(T\\) \u5f80\u53f3\u5e73\u79fb\u4e00\u683c\u3002 \u800c\u4e14\u8981\u91cd\u65b0\u5f00\u59cb\uff1a \\(i = 1, k = 1\\) \u3002 $$ \\begin{aligned} S & = \\mathtt{CCFXCCFMONEY} \\\\ T & = \\mathtt{\\text{ }CCFXCCFSB} \\\\ \\text{index} & =\\mathtt{123456789} \\end{aligned} $$ \u663e\u7136\u6734\u7d20\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(nm)\\) \u3002 \u518d\u8003\u8651\u4f7f\u7528\u524d\u7f00\u51fd\u6570 \\(\\pi\\) \u6765\u4f18\u5316\u5339\u914d\u7684\u8fc7\u7a0b\u3002 \u4e0d\u96be\u6c42\u51fa \\(T\\) \u7684\u524d\u7f00\u6570\u7ec4 \\(\\pi[1..n] = \\{0, 1, 0, 0, 1, 2, 3, 0, 0\\}\\) \u3002 \u8003\u8651\u524d\u7f00\u6570\u7ec4\u7684\u610f\u4e49\uff1a \\(T_i\\) \u7684\u6700\u957f\u7684\u76f8\u7b49\u7684\u524d\u540e\u7f00\u957f\u5ea6\u3002 \u4f60\u77e5\u9053\u4e86\u5f53 \\(i = 8, k = 7\\) \u65f6\uff0c\u6709 \\(S[1..7] = T[1..7]\\) \uff0c\u800c\u4e14 \\(T[1..3] = T[5..7]\\) \u3002 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u628a \\(T[1..3]\\) \u8fd9\u4e2a\u5730\u65b9\u5339\u914d\u5230\u7684 \\(\\mathtt{\\color{green}CCF}\\) \u79fb\u52a8\u5230 \\(S[5..8]\\) \u53bb\u3002 \u8fd9\u6837\u5c31\u76f4\u63a5\u8282\u7701\u4e86\u4e09\u6b21\u79fb\u52a8\u3002 \u603b\u7ed3\u4e00\u4e0b\u4f7f\u7528\u524d\u7f00\u51fd\u6570 \\(\\pi\\) \u65f6\u6211\u4eec\u7684\u5339\u914d\u8fc7\u7a0b\uff1a \u4f7f\u7528 \\(i, k\\) \u6765\u8868\u793a\u5f53\u524d \\(S[i - k..i - 1] = T[1..k]\\) \uff1b \u5982\u679c \\(S[i] \\neq T[k + 1]\\) \uff0c\u6211\u4eec\u5c31\u7528 \\(\\pi\\) \u51fd\u6570\u6765\u5b9e\u73b0\u5927\u5e45\u5ea6\u7684\u8df3\u8dc3\uff1b \u5426\u5219 \\(k' \\gets k + 1\\) \uff0c\u8868\u793a \\(S[i - k..i] = T[1..k + 1]\\) \uff1b \u5f53 \\(k = m\\) \u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d \\(S[i - m + 1..i] = T[1..m]\\) \u3002","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"posts/lectures/kmp/#_10","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> void KMP ( char * S , char * T ) { for ( int i = 1 , k = 0 ; i <= n ; ++ i ) { while ( k > 0 && T [ k + 1 ] != S [ i ]) k = pi [ k ]; if ( T [ k + 1 ] == S [ i ]) ++ k ; if ( k == m ) { printf ( \"%d \\n \" , i - m + 1 ); // S[i - m + 1..i] = T[1..m] k = pi [ k ]; } } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/kmp/#_11","text":"\u53ef\u4ee5\u8bc1\u660e\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u662f\u6b63\u786e\u7684\u3002","title":"\u6b63\u786e\u6027"},{"location":"posts/lectures/kmp/#_12","text":"\u4f9d\u846b\u82a6\u753b\u74e2\u5730\u4f7f\u7528\u6c42\u524d\u7f00\u51fd\u6570\u6570\u7ec4\u65f6\u7684\u644a\u8fd8\u5206\u6790\u65b9\u6cd5\uff0c\u4e0d\u96be\u5f97\u51fa KMP \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n + m)\\) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/kmp/#_13","text":"\u4e0d\u96be\u53d1\u73b0 KMP \u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n + m)\\) \u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/kmp/#_14","text":"\u300cNOI2014\u300d\u52a8\u7269\u56ed \u300cPOJ 1961\u300dPeriod \u300cCF1200E\u300dCompress Words \u300cPOI2006\u300dOKR-Periods of Words","title":"\u4f8b\u9898"},{"location":"posts/lectures/kmp/#_15","text":"KMP Reflect upon yourself before you judge others. \u611f\u89c9\u524d\u7f00\u51fd\u6570\u7684\u6027\u8d28\u975e\u5e38\u4f18\u79c0\uff0c\u53ef\u4ee5\u6709\u500d\u589e next \u6570\u7ec4\u4e4b\u7c7b\u7684\u795e\u5947\u64cd\u4f5c\u6765\u8279\u6807\u7b97\u3002\uff08\u5927\u96fe","title":"\u5199\u5728\u6700\u540e"},{"location":"posts/lectures/lyndon/","text":"OI-Wiki \u91cc\u7684\u5b57\u7b26\u4e32\u677f\u5757\u6709 \u8fd9\u4e2a \uff0c\u5c31\u5b66\u4e00\u5b66\u53ed\uff1f \u5199\u5728\u524d\u9762 \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u524d\u7f00\uff0c\u7528 \\(S \\sqsubset T\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u540e\u7f00\uff0c\u7528 \\(S \\sqsupset T\\) \u8868\u793a\uff1b \\(S\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e \\(T\\) \uff0c\u7528 \\(S < T\\) \u8868\u793a\uff0c\u5373 \\(\\left|S\\right| < \\left|T\\right| \\lor (\\left|S\\right| = \\left|T\\right| \\land \\exists i \\in [1, \\left|S\\right|), \\textrm{s.t. }S[1..i] = T[1..i] \\land S[i + 1] < T[i + 1])\\) \uff1b \u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u91cd\u590d \\(i\\) \u6b21\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5373 \\(\\begin{matrix}\\overline{\\underbrace{SS\\cdots S}}\\\\S \\textrm{ repeated } i \\textrm{ times}\\end{matrix}\\) \uff0c\u7528 \\(S^i\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807 \u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b Lyndon \u4e32 \u00b6 \u5b9a\u4e49 \u00b6 \u82e5\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u6ee1\u8db3 \\(\\forall i \\in [2, \\left|S\\right|], S< S[i..\\left|S\\right|]\\) \uff0c\u5219\u6211\u4eec\u79f0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\u4e00\u4e2a\u300cLyndon \u4e32\u300d\u3002 \u5b83\u7684\u7b49\u4ef7\u547d\u9898\u662f \\(S\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u5176\u6240\u6709 \u975e\u5e73\u51e1\u7684 \u5faa\u73af\u540c\u6784\u4e32\u3002 \u6027\u8d28 \u00b6 \u6027\u8d28 1 \u82e5\u6709\u4e24 Lyndon \u4e32 \\(S, T\\) \uff0c\u4e14 \\(S < T\\) \uff0c\u5219 \\(\\overline{ST}\\) \u4e5f\u4e3a Lyndon \u4e32\u3002 \u8bc1\u660e \u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u6765\u8bc1\u660e\uff1a \\(\\left|S\\right| \\ge \\left|T\\right|\\) \u663e\u7136 \\(\\overline{ST} < T\\) \uff0c\u53c8\u6709 \\(T\\) \u7684\u6240\u6709\u540e\u7f00\u90fd\u5927\u4e8e \\(T\\) \uff0c\u56e0\u6b64 \\(\\overline{ST}\\) \u7684\u6240\u6709\u540e\u7f00\u90fd\u5927\u4e8e \\(\\overline{ST}\\) \u3002 \u56e0\u6b64 \\(\\overline{ST}\\) \u662f Lyndon \u4e32\u3002 \\(\\left|S\\right| > \\left|T\\right|\\) \u82e5 \\(S \\not\\sqsubset T\\) \u6b64\u65f6 \\(\\overline{ST} < T\\) \uff0c\u7531 1 \u5373\u53ef\u5f97\u8bc1\u3002 \u82e5 \\(S \\sqsubset T\\) \u82e5 \\(\\overline{ST} \\ge T\\) \uff0c\u5219\u6709 \\(T \\ge T[\\left|S\\right| + 1..\\left|T\\right|]\\) \uff0c\u4e0e\u300c \\(T\\) \u662f Lyndon \u4e32\u300d\u77db\u76fe\u3002 \u90a3\u4e48\u6b64\u65f6\u4e00\u5b9a\u6709 \\(\\overline{ST} < T\\) \uff0c\u7531 1 \u5373\u53ef\u5f97\u8bc1\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u82e5\u6709\u4e24 Lyndon \u4e32 \\(S, T\\) \uff0c\u4e14 \\(S < T\\) \uff0c\u5219 \\(\\overline{ST}\\) \u4e5f\u4e3a Lyndon \u4e32\u3002 \u6027\u8d28 2 \u82e5\u5b57\u7b26\u4e32 \\(S\\) \u548c\u5b57\u7b26 \\(c\\) \u6ee1\u8db3\u5b58\u5728\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(T\\) \u4f7f\u5f97 \\(\\overline{Sc} \\sqsubset T\\) \uff0c\u5219 \\(\\forall c' > c \\in \\Sigma\\) \uff0c \\(\\overline{Sc'}\\) \u5747\u4e3a Lyndon \u4e32\u3002 \u8bc1\u660e \u4e0d\u59a8\u8bbe \\(T = \\overline{ScR}, n = \\left|S\\right|\\) \uff0c\u5219 $$ \\forall i \\in [2, n], \\overline{S[i..\\left|S\\right|]cR} > \\overline{ScR} $$ \\(\\therefore \\overline{S[i..\\left|S\\right|]c} \\ge S\\) \\(\\therefore \\overline{S[i..\\left|S\\right|]c'} > \\overline{S[i..\\left|S\\right|]c} \\ge S\\) \u53c8 \\(\\because c \\ge S[1]\\) \\(\\therefore c' > c \\ge S[1]\\) \\(\\therefore T = \\overline{Sc'}\\) \u4e5f\u662f\u4e00\u4e2a Lyndon \u4e32\u3002 Lyndon \u5206\u89e3 \u00b6 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u5206\u89e3\u6210 \\(\\overline{T_1T_2\\cdots T_m}\\) \uff0c\u6ee1\u8db3 \\(\\forall i \\in [1, m), T_i \\ge T_{i + 1}\\) \uff0c\u4e14 \\(\\forall i \\in [1, m]\\) \uff0c \\(T_i\\) \u5747\u4e3a Lyndon \u4e32\u3002 \u8fd9\u6837\u7684\u4e00\u4e2a\u5206\u89e3\u6211\u4eec\u79f0\u4e4b\u4e3a\u300cLyndon \u5206\u89e3\u300d\u3002 \u5b9a\u7406 \u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u7684 Lyndon \u5206\u89e3\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002 \u8bc1\u660e \u5148\u8bc1\u660e\u5b58\u5728\u6027\uff1a \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u975e Lyndon \u5206\u89e3 \\(S = \\overline{R_1R_2\\cdots R_x}\\) \uff0c\u521d\u59cb\u5316 \\(x = n, \\forall i \\in [1, n], R_i = S[i]\\) \u3002 \u82e5 \\(\\exists i \\in [1, n), \\textrm{s.t. }R_i < R_{i + 1}\\) \uff0c\u5219\u5c06 \\(R_i\\) \u4e0e \\(R_{i + 1}\\) \u5408\u6210\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u4e00\u5b9a\u80fd\u5f97\u5230\u4e00\u4e2a Lyndon \u5206\u89e3\u3002 \u518d\u8bc1\u660e\u552f\u4e00\u6027\uff1a \u8bbe \\(S\\) \u6709\u4e24\u4e2a Lyndon \u5206\u89e3 \\(S = \\overline{P_1P_2\\cdots P_iP_{i + 1}\\cdots P_x}\\) \u548c \\(S = \\overline{P_1P_2\\cdots P_iQ_{i + 1}\\cdots Q_x}\\) \u3002 \u4e0d\u59a8\u4ee4 \\(\\left|P_{i + 1}\\right| > \\left|Q_{i +1}\\right|\\) \uff0c\u8bbe \\(P_{i + 1} = \\overline{Q_{i + 1}Q_{i + 2}\\cdots Q_{k}Q_{k + 1}[1..l]}\\) \uff0c\u5219 $$ P_{i + 1} < Q_{k + 1}[1..l] \\le Q_{k + 1} \\le Q_{i + 1} < P_{i + 1} $$ \u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u7684 Lyndon \u5206\u89e3\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002 Duval \u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7ef4\u6301\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\uff1a \\(S[1..i - 1] = \\overline{R_1R_2\\cdots R_w}\\) \u662f\u56fa\u5b9a\u4e0b\u6765\u7684 Lyndon \u5206\u89e3\uff0c\u4e5f\u5c31\u662f \\(\\forall l \\in [1, w], R_l\\) \u662f \\(\\textrm{Lyndon}\\) \u4e32\u4e14 \\(R_l > R_{l + 1}\\) \u3002 \\(S[i..k-1] = T ^ \\alpha + Z (\\alpha > 1)\\) \u662f\u6ca1\u6709\u56fa\u5b9a\u7684\u5206\u89e3\uff0c\u6ee1\u8db3 \\(T\\) \u662f \\(\\textrm{Lyndon}\\) \u4e32\uff0c\u4e14 \\(Z\\) \u662f \\(T\\) \u7684 \u53ef\u4e3a\u7a7a\u7684 \u4e0d\u7b49\u4e8e \\(T\\) \u7684\u524d\u7f00\uff0c\u4e14\u6709 \\(R_g > S[i..k-1]\\) \u3002 \u4ee4 \\(j = k - \\left|T\\right|\\) \uff0c\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u5468\u671f\u5bf9\u5e94 \\(k\\) \u7684\u5b57\u7b26\u3002 \u82e5 \\(S[k] = S[j]\\) \uff0c\u5219 \\(k \\gets k + 1, j \\gets j + 1\\) \u5373\u53ef\u3002 \u82e5 \\(S[k] > S[j]\\) \uff0c\u7531\u5f15\u7406 2 \u77e5 \\(\\overline{ZS[k]}\\) \u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u7531\u4e8e Lyndon \u5206\u89e3\u8981\u4fdd\u8bc1 \\(R_i \\ge R_{i + 1}\\) \uff0c\u6240\u4ee5 \\(\\overline{T^{\\alpha}ZS[k]}\\) \u6210\u4e3a\u4e86\u4e00\u4e2a\u65b0\u7684 Lyndon \u4e32\u3002 \u82e5 \\(S[k] < S[j]\\) \uff0c\u5219 \\(S[k]\\) \u4e0d\u80fd\u88ab\u5305\u542b\u5230 \\(T^{\\alpha}\\) \u91cc\uff0c\u56e0\u4e3a \\(S[k]\\) \u7684\u51fa\u73b0\u4f1a\u5bfc\u81f4\u66f4\u5c0f\u7684\u540e\u7f00\u7684\u5b58\u5728\u3002\u6240\u4ee5 \\(T^{\\alpha}\\) \u8981\u88ab\u5206\u79bb\u51fa\u53bb\uff0c\u7b97\u6cd5\u4ece \\(Z\\) \u7684\u5f00\u5934\u91cd\u65b0\u5f00\u59cb\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u4e0b\u9762\u662f\u6c42\u51fa\u4e00\u4e2a\u4e32\u7684 Lyndon \u5206\u89e3\u7684\u4ee3\u7801\u5b9e\u73b0\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> #define LL long long const int N = 5e6 + 5 ; int n , ans ; char str [ N ]; int main () { scanf ( \"%s\" , str + 1 ); n = strlen ( str + 1 ); for ( int i = 1 ; i <= n ; ) { int j = i , k = i + 1 ; while ( k <= n && str [ j ] <= str [ k ]) { if ( str [ j ] < str [ k ]) j = i , ++ k ; else ++ j , ++ k ; } while ( i <= j ) { ans ^= i + ( k - j ) - 1 ; i += k - j ; } } printf ( \"%d\" , ans ); return 0 ; } \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e0d\u96be\u53d1\u73b0\uff0c \\(i\\) \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u4e14\u6bcf\u6b21 \\(k\\) \u79fb\u52a8\u7684\u8ddd\u79bb \u4e0d\u4f1a\u8d85\u8fc7 \\(i\\) \u79fb\u52a8\u7684\u8ddd\u79bb \uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 Bonus \u4e8b\u5b9e\u4e0a\uff0c\u5faa\u73af\u7684\u603b\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(4n - 3\\) \u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e0d\u96be\u53d1\u73b0\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \u989d\u5916 \\(O(1)\\) \u7684\u3002 \u4f8b\u9898 \u00b6 \u8fd8\u5495\u7740\u5728\u3002 \u5199\u5728\u6700\u540e \u00b6 \u592a\u9ad8\u6df1\u4e86\uff0c\u8fd9\u8f88\u5b50\u90fd\u7528\u4e0d\u5230\u8fd9\u4e48\u795e\u5fc5\u7684\u5185\u5bb9\u3002","title":"Lyndon \u5206\u89e3"},{"location":"posts/lectures/lyndon/#_1","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \u5b57\u7b26\u4e32\u901a\u5e38\u7528 \\(S, T\\) \u7b49\u8868\u793a\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \u5b57\u7b26\u4e32\u957f\u5ea6\u7528 \\(\\left|S\\right|\\) \u8868\u793a\uff1b \u5b57\u7b26\u96c6\u5927\u5c0f\u7528 \\(\\left|\\Sigma\\right|\\) \u8868\u793a\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \u7a7a\u4e32\u7528 \\(\\epsilon\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u524d\u7f00\uff0c\u7528 \\(S \\sqsubset T\\) \u8868\u793a\uff1b \\(S\\) \u662f \\(T\\) \u7684\u540e\u7f00\uff0c\u7528 \\(S \\sqsupset T\\) \u8868\u793a\uff1b \\(S\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e \\(T\\) \uff0c\u7528 \\(S < T\\) \u8868\u793a\uff0c\u5373 \\(\\left|S\\right| < \\left|T\\right| \\lor (\\left|S\\right| = \\left|T\\right| \\land \\exists i \\in [1, \\left|S\\right|), \\textrm{s.t. }S[1..i] = T[1..i] \\land S[i + 1] < T[i + 1])\\) \uff1b \u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u91cd\u590d \\(i\\) \u6b21\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5373 \\(\\begin{matrix}\\overline{\\underbrace{SS\\cdots S}}\\\\S \\textrm{ repeated } i \\textrm{ times}\\end{matrix}\\) \uff0c\u7528 \\(S^i\\) \u8868\u793a\u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807 \u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b","title":"\u5199\u5728\u524d\u9762"},{"location":"posts/lectures/lyndon/#lyndon","text":"","title":"Lyndon \u4e32"},{"location":"posts/lectures/lyndon/#_2","text":"\u82e5\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u6ee1\u8db3 \\(\\forall i \\in [2, \\left|S\\right|], S< S[i..\\left|S\\right|]\\) \uff0c\u5219\u6211\u4eec\u79f0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\u4e00\u4e2a\u300cLyndon \u4e32\u300d\u3002 \u5b83\u7684\u7b49\u4ef7\u547d\u9898\u662f \\(S\\) \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u5176\u6240\u6709 \u975e\u5e73\u51e1\u7684 \u5faa\u73af\u540c\u6784\u4e32\u3002","title":"\u5b9a\u4e49"},{"location":"posts/lectures/lyndon/#_3","text":"\u6027\u8d28 1 \u82e5\u6709\u4e24 Lyndon \u4e32 \\(S, T\\) \uff0c\u4e14 \\(S < T\\) \uff0c\u5219 \\(\\overline{ST}\\) \u4e5f\u4e3a Lyndon \u4e32\u3002 \u8bc1\u660e \u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u6765\u8bc1\u660e\uff1a \\(\\left|S\\right| \\ge \\left|T\\right|\\) \u663e\u7136 \\(\\overline{ST} < T\\) \uff0c\u53c8\u6709 \\(T\\) \u7684\u6240\u6709\u540e\u7f00\u90fd\u5927\u4e8e \\(T\\) \uff0c\u56e0\u6b64 \\(\\overline{ST}\\) \u7684\u6240\u6709\u540e\u7f00\u90fd\u5927\u4e8e \\(\\overline{ST}\\) \u3002 \u56e0\u6b64 \\(\\overline{ST}\\) \u662f Lyndon \u4e32\u3002 \\(\\left|S\\right| > \\left|T\\right|\\) \u82e5 \\(S \\not\\sqsubset T\\) \u6b64\u65f6 \\(\\overline{ST} < T\\) \uff0c\u7531 1 \u5373\u53ef\u5f97\u8bc1\u3002 \u82e5 \\(S \\sqsubset T\\) \u82e5 \\(\\overline{ST} \\ge T\\) \uff0c\u5219\u6709 \\(T \\ge T[\\left|S\\right| + 1..\\left|T\\right|]\\) \uff0c\u4e0e\u300c \\(T\\) \u662f Lyndon \u4e32\u300d\u77db\u76fe\u3002 \u90a3\u4e48\u6b64\u65f6\u4e00\u5b9a\u6709 \\(\\overline{ST} < T\\) \uff0c\u7531 1 \u5373\u53ef\u5f97\u8bc1\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u82e5\u6709\u4e24 Lyndon \u4e32 \\(S, T\\) \uff0c\u4e14 \\(S < T\\) \uff0c\u5219 \\(\\overline{ST}\\) \u4e5f\u4e3a Lyndon \u4e32\u3002 \u6027\u8d28 2 \u82e5\u5b57\u7b26\u4e32 \\(S\\) \u548c\u5b57\u7b26 \\(c\\) \u6ee1\u8db3\u5b58\u5728\u67d0\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(T\\) \u4f7f\u5f97 \\(\\overline{Sc} \\sqsubset T\\) \uff0c\u5219 \\(\\forall c' > c \\in \\Sigma\\) \uff0c \\(\\overline{Sc'}\\) \u5747\u4e3a Lyndon \u4e32\u3002 \u8bc1\u660e \u4e0d\u59a8\u8bbe \\(T = \\overline{ScR}, n = \\left|S\\right|\\) \uff0c\u5219 $$ \\forall i \\in [2, n], \\overline{S[i..\\left|S\\right|]cR} > \\overline{ScR} $$ \\(\\therefore \\overline{S[i..\\left|S\\right|]c} \\ge S\\) \\(\\therefore \\overline{S[i..\\left|S\\right|]c'} > \\overline{S[i..\\left|S\\right|]c} \\ge S\\) \u53c8 \\(\\because c \\ge S[1]\\) \\(\\therefore c' > c \\ge S[1]\\) \\(\\therefore T = \\overline{Sc'}\\) \u4e5f\u662f\u4e00\u4e2a Lyndon \u4e32\u3002","title":"\u6027\u8d28"},{"location":"posts/lectures/lyndon/#lyndon_1","text":"\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u5206\u89e3\u6210 \\(\\overline{T_1T_2\\cdots T_m}\\) \uff0c\u6ee1\u8db3 \\(\\forall i \\in [1, m), T_i \\ge T_{i + 1}\\) \uff0c\u4e14 \\(\\forall i \\in [1, m]\\) \uff0c \\(T_i\\) \u5747\u4e3a Lyndon \u4e32\u3002 \u8fd9\u6837\u7684\u4e00\u4e2a\u5206\u89e3\u6211\u4eec\u79f0\u4e4b\u4e3a\u300cLyndon \u5206\u89e3\u300d\u3002 \u5b9a\u7406 \u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u7684 Lyndon \u5206\u89e3\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002 \u8bc1\u660e \u5148\u8bc1\u660e\u5b58\u5728\u6027\uff1a \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u975e Lyndon \u5206\u89e3 \\(S = \\overline{R_1R_2\\cdots R_x}\\) \uff0c\u521d\u59cb\u5316 \\(x = n, \\forall i \\in [1, n], R_i = S[i]\\) \u3002 \u82e5 \\(\\exists i \\in [1, n), \\textrm{s.t. }R_i < R_{i + 1}\\) \uff0c\u5219\u5c06 \\(R_i\\) \u4e0e \\(R_{i + 1}\\) \u5408\u6210\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u6837\u4e00\u5b9a\u80fd\u5f97\u5230\u4e00\u4e2a Lyndon \u5206\u89e3\u3002 \u518d\u8bc1\u660e\u552f\u4e00\u6027\uff1a \u8bbe \\(S\\) \u6709\u4e24\u4e2a Lyndon \u5206\u89e3 \\(S = \\overline{P_1P_2\\cdots P_iP_{i + 1}\\cdots P_x}\\) \u548c \\(S = \\overline{P_1P_2\\cdots P_iQ_{i + 1}\\cdots Q_x}\\) \u3002 \u4e0d\u59a8\u4ee4 \\(\\left|P_{i + 1}\\right| > \\left|Q_{i +1}\\right|\\) \uff0c\u8bbe \\(P_{i + 1} = \\overline{Q_{i + 1}Q_{i + 2}\\cdots Q_{k}Q_{k + 1}[1..l]}\\) \uff0c\u5219 $$ P_{i + 1} < Q_{k + 1}[1..l] \\le Q_{k + 1} \\le Q_{i + 1} < P_{i + 1} $$ \u4e0e\u5047\u8bbe\u77db\u76fe\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u7684 Lyndon \u5206\u89e3\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u3002","title":"Lyndon \u5206\u89e3"},{"location":"posts/lectures/lyndon/#duval","text":"","title":"Duval \u7b97\u6cd5"},{"location":"posts/lectures/lyndon/#_4","text":"\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7ef4\u6301\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\uff1a \\(S[1..i - 1] = \\overline{R_1R_2\\cdots R_w}\\) \u662f\u56fa\u5b9a\u4e0b\u6765\u7684 Lyndon \u5206\u89e3\uff0c\u4e5f\u5c31\u662f \\(\\forall l \\in [1, w], R_l\\) \u662f \\(\\textrm{Lyndon}\\) \u4e32\u4e14 \\(R_l > R_{l + 1}\\) \u3002 \\(S[i..k-1] = T ^ \\alpha + Z (\\alpha > 1)\\) \u662f\u6ca1\u6709\u56fa\u5b9a\u7684\u5206\u89e3\uff0c\u6ee1\u8db3 \\(T\\) \u662f \\(\\textrm{Lyndon}\\) \u4e32\uff0c\u4e14 \\(Z\\) \u662f \\(T\\) \u7684 \u53ef\u4e3a\u7a7a\u7684 \u4e0d\u7b49\u4e8e \\(T\\) \u7684\u524d\u7f00\uff0c\u4e14\u6709 \\(R_g > S[i..k-1]\\) \u3002 \u4ee4 \\(j = k - \\left|T\\right|\\) \uff0c\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u5468\u671f\u5bf9\u5e94 \\(k\\) \u7684\u5b57\u7b26\u3002 \u82e5 \\(S[k] = S[j]\\) \uff0c\u5219 \\(k \\gets k + 1, j \\gets j + 1\\) \u5373\u53ef\u3002 \u82e5 \\(S[k] > S[j]\\) \uff0c\u7531\u5f15\u7406 2 \u77e5 \\(\\overline{ZS[k]}\\) \u662f\u4e00\u4e2a Lyndon \u4e32\uff0c\u7531\u4e8e Lyndon \u5206\u89e3\u8981\u4fdd\u8bc1 \\(R_i \\ge R_{i + 1}\\) \uff0c\u6240\u4ee5 \\(\\overline{T^{\\alpha}ZS[k]}\\) \u6210\u4e3a\u4e86\u4e00\u4e2a\u65b0\u7684 Lyndon \u4e32\u3002 \u82e5 \\(S[k] < S[j]\\) \uff0c\u5219 \\(S[k]\\) \u4e0d\u80fd\u88ab\u5305\u542b\u5230 \\(T^{\\alpha}\\) \u91cc\uff0c\u56e0\u4e3a \\(S[k]\\) \u7684\u51fa\u73b0\u4f1a\u5bfc\u81f4\u66f4\u5c0f\u7684\u540e\u7f00\u7684\u5b58\u5728\u3002\u6240\u4ee5 \\(T^{\\alpha}\\) \u8981\u88ab\u5206\u79bb\u51fa\u53bb\uff0c\u7b97\u6cd5\u4ece \\(Z\\) \u7684\u5f00\u5934\u91cd\u65b0\u5f00\u59cb\u3002","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"posts/lectures/lyndon/#_5","text":"\u4e0b\u9762\u662f\u6c42\u51fa\u4e00\u4e2a\u4e32\u7684 Lyndon \u5206\u89e3\u7684\u4ee3\u7801\u5b9e\u73b0\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> #define LL long long const int N = 5e6 + 5 ; int n , ans ; char str [ N ]; int main () { scanf ( \"%s\" , str + 1 ); n = strlen ( str + 1 ); for ( int i = 1 ; i <= n ; ) { int j = i , k = i + 1 ; while ( k <= n && str [ j ] <= str [ k ]) { if ( str [ j ] < str [ k ]) j = i , ++ k ; else ++ j , ++ k ; } while ( i <= j ) { ans ^= i + ( k - j ) - 1 ; i += k - j ; } } printf ( \"%d\" , ans ); return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/lyndon/#_6","text":"\u4e0d\u96be\u53d1\u73b0\uff0c \\(i\\) \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u4e14\u6bcf\u6b21 \\(k\\) \u79fb\u52a8\u7684\u8ddd\u79bb \u4e0d\u4f1a\u8d85\u8fc7 \\(i\\) \u79fb\u52a8\u7684\u8ddd\u79bb \uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 Bonus \u4e8b\u5b9e\u4e0a\uff0c\u5faa\u73af\u7684\u603b\u6b21\u6570\u4e0d\u8d85\u8fc7 \\(4n - 3\\) \u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/lyndon/#_7","text":"\u4e0d\u96be\u53d1\u73b0\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \u989d\u5916 \\(O(1)\\) \u7684\u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"posts/lectures/lyndon/#_8","text":"\u8fd8\u5495\u7740\u5728\u3002","title":"\u4f8b\u9898"},{"location":"posts/lectures/lyndon/#_9","text":"\u592a\u9ad8\u6df1\u4e86\uff0c\u8fd9\u8f88\u5b50\u90fd\u7528\u4e0d\u5230\u8fd9\u4e48\u795e\u5fc5\u7684\u5185\u5bb9\u3002","title":"\u5199\u5728\u6700\u540e"},{"location":"posts/lectures/pam/","text":"EERTREE\uff0c\u53c8\u79f0\u56de\u6587\u6811\uff08Palindrome tree\uff09\u3001\u56de\u6587\u81ea\u52a8\u673a\uff08PAM\uff09\uff0c\u662f\u4e00\u79cd\u80fd\u5728 \\(O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})\\) \u7684\u65f6\u95f4\u4e0e \\(O(\\left|S\\right|)\\) \u7684\u7a7a\u95f4\u5185\u5904\u7406\u4e0e \u56de\u6587\u4e32 \u6709\u5173\u95ee\u9898\u7684\u6570\u636e\u7ed3\u6784\u3002 Bonus EERTREE \u662f\u4e00\u4e2a \u56de\u6587\u4e32 \uff0c\u4e5f\u8bb8\u8fd9\u5c31\u662f\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u540d\u5b57\u7684\u6765\u5386\u3002 \u56de\u6587\u6811\u7684\u9ad8\u7ea7\u5e94\u7528\u6162\u6162\u5199\uff0c\u6301\u7eed\u66f4\u65b0\u3002 pdf \u8bba\u6587 \u5199\u5728\u524d\u9762 \u00b6 \u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \\(S, T\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \\(\\left|S\\right|\\) \u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\uff1b \\(\\left|\\Sigma\\right|\\) \u8868\u793a\u5b57\u7b26\u96c6\u5927\u5c0f\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \\(\\epsilon\\) \u8868\u793a\u7a7a\u4e32\uff1b \\(S \\subset T\\) \u8868\u793a \\(S\\) \u4e3a \\(T\\) \u7684\u5b50\u4e32\uff0c\u5373 \\(\\exists i \\in [1, \\left|T\\right| - \\left|S\\right|], \\text{s.t. } \\forall j \\in [1, \\left|S\\right|], S[j] = T[i + j - 1]\\) \uff1b \\(\\overleftarrow{S}\\) \u8868\u793a \\(S\\) \u7684\u7ffb\u8f6c\uff0c\u5373 \\(\\forall i \\in [1, \\left|S\\right|], \\overleftarrow{S}[i] = S[\\left|S\\right|- i + 1]\\) \uff1b \\(S\\) \u4e3a\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53 \\(S = \\overleftarrow{S}\\) \uff0c\u5373 \\(\\forall i \\in [1, \\left|S\\right|], S[i] = S[\\left|S\\right| - i + 1]\\) \uff1b \u82e5 \\(S\\) \u4e3a\u56de\u6587\u4e32\uff0c\u5219\u5b9a\u4e49 \\(r(S)\\) \u4e3a\u5176\u6700\u957f\u56de\u6587\u534a\u5f84\uff0c\u5373 \\(r(S) = \\max\\\\{\\left\\lfloor\\dfrac{\\left|T\\right| + 1}{2}\\right\\rfloor\\\\}, T \\subset S, T = \\overleftarrow{T}\\) \u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807\u3001\u56de\u6587\u6811\u5185\u8282\u70b9\u7f16\u53f7 \u5747\u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b \\(S[1..4] \\subset S[1..5]\\) \uff1b \\(\\overleftarrow{S[3..5]} = \\mathtt{DAB}\\) \uff1b \\(S[1..5] = \\mathtt{ABCBA} = \\overleftarrow{S[1..5]}\\) \u4e3a\u56de\u6587\u4e32\u3002 \u7ed3\u6784\u3001\u64cd\u4f5c\u4e0e\u5efa\u7acb \u00b6 \u4e3a\u4ec0\u4e48 \u00b6 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u56de\u6587\u4e32 \\(S\\) \uff0c\u4ee4 \\(P = \\{ T : T = S[i..n - i + 1] \\quad i \\in [1, \\left\\lfloor\\dfrac{n + 1}{2}\\right\\rfloor]\\}\\) \uff0c\u5219 \\(\\forall x \\in P, x = \\overleftarrow{x}\\) \u3002 \u90a3\u4e48 \\(\\forall x \\in P\\) \u4e4b\u95f4\u53c8\u6709\u4ec0\u4e48\u6837\u7684\u5173\u7cfb\u5462\uff1f \u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u662f\u5f88\u591a \u5b50\u56de\u6587\u4e32\u5c42\u5c42\u5d4c\u5957 \u800c\u6210\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u901a\u8fc7 \u5728\u4e24\u7aef\u6dfb\u52a0\u76f8\u540c\u7684\u5b57\u7b26 \uff0c\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u56de\u6587\u4e32\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5bfb\u89c5\u5230\u4e86\u56de\u6587\u6811\u4e0a \u8fb9\u7684\u610f\u4e49 \u3002 \u5728\u56de\u6587\u6811\u4e2d\uff0c \\(u\\) \u7684\u7236\u4eb2\u8fde\u5411 \\(u\\) \u7684\u8fb9\u4e0a\u5b58\u50a8\u7740\u5b57\u7b26 \\(c\\) \u7684\u610f\u4e49\u662f \\(u\\) \u7684\u7236\u4eb2\u8868\u793a\u7684\u56de\u6587\u4e32\uff0c\u5728\u4e24\u7aef\u52a0\u4e0a \\(c\\) \u540e\uff0c\u80fd\u5f62\u6210 \\(u\\) \u3002 \u662f\u4ec0\u4e48 \u00b6 {% noteblock success %} \u5f15\u7406 1\uff1a\u5411 \\(S\\) \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \uff0c\u6700\u591a\u53ea\u4f1a\u65b0\u751f\u6210\u4e00\u4e2a\u56de\u6587\u5b50\u4e32\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u8fd9\u4e2a\u5b50\u4e32\u662f \\(S\\) \u7684 \u6700\u957f\u56de\u6587\u540e\u7f00 \u672b\u7aef\u589e\u52a0 \\(c\\) \uff0c\u4e14\u539f\u6765\u7684\u524d\u7aef\u6070\u597d\u4e5f\u662f \\(c\\) \uff0c\u6240\u4ea7\u751f\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u5728 \\(S\\) \u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6700\u591a\u53ea\u4f1a\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u3002 $\\blacksquare$ {% endfolding %} \u56de\u6587\u6811\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u662f\u4e00\u4e2a\u5305\u542b\u7740\u989d\u5916\u4fe1\u606f\u7684\u6709\u5411\u56fe\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u56de\u6587\u5b50\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u8282\u70b9\u3002 \u56de\u6587\u6811\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\uff1a \\(\\text{add}(c)\\) \u548c \\(\\text{eertree}(S)\\) \u3002 \\(\\text{add}(c)\\) \u8868\u793a\u5728\u56de\u6587\u6811\u5185\u63d2\u5165 \\(c\\) \uff0c\u8fd4\u56de\u6b64\u6b21\u64cd\u4f5c\u65b0\u589e\u7684\u56de\u6587\u5b50\u4e32\u4e2a\u6570\u3002 \u901a\u8fc7\u5f15\u7406 1\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 \\(\\text{add}(c)\\) \u603b\u662f\u8fd4\u56de \\(0\\) \u6216 \\(1\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u80fd\u5728 \\(O(1)\\) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u5df2\u7ecf\u5904\u7406\u4e86\u7684\u5b57\u7b26\u4e32 \\(T\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u5373 \\(\\text{maxSuf}(T)\\) \u3002 \\(\\text{eertree}(S)\\) \u8868\u793a\u5c06 \\(S\\) \u5185\u7684\u5b57\u7b26\uff0c\u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u63d2\u5165\u540e\u5f62\u6210\u7684\u56de\u6587\u6811\u3002 {% noteblock warning %} \u5c0f\u7ed3 1\uff1a \\(S\\) \u4e2d\u5305\u542b\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32\u6570\u91cf\u4e3a \\(\\text{eertree}(S)\\) \u7684\u8282\u70b9\u4e2d\u7684\u6700\u5927\u7f16\u53f7\u3002 {% endnoteblock %} \u4e00\u68f5\u56de\u6587\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u8981\u5b58\u50a8\u7684\u4fe1\u606f\u6709\uff1a \u8fd9\u4e2a\u70b9\u7684\u5e8f\u53f7 \\(u\\) \uff1b \u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6 \\(len_u\\) \uff1b \u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u7684\u4e00\u6761\u6807\u4e3a \\(c\\) \u7684\u51fa\u8fb9\u6307\u5411\u7684\u8282\u70b9\u7684\u7f16\u53f7 \\(ch_{u, c}\\) \uff1b \u56de\u6587\u94fe\u63a5 \\(fail_u\\) \uff1b \u4e3a\u4e86\u4ee5\u540e\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u65b0\u5efa\u4e24\u4e2a\u8282\u70b9\uff0c\u957f\u5ea6\u548c\u7f16\u53f7\u5206\u522b\u4e3a \\(-1\\) \u548c \\(0\\) \u3002 \\(0\\) \u8868\u793a\u7740\u7a7a\u4e32\uff0c\u79f0\u4e4b\u4e3a\u300c\u5076\u6839\u300d\uff1b\u800c \\(-1\\) \u8868\u793a\u7740\u300c\u865a\u4e32\u300d\uff0c\u79f0\u4e4b\u4e3a\u300c\u5947\u6839\u300d\u3002 \u5076\u6839\uff08\u5373 \\(0\\) \uff09\u8fde\u51fa\u7684\u8fb9\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u6307\u5411 \\(cc\\) \uff0c\u8868\u793a\u5728 \\(\\epsilon\\) \u7684\u4e24\u4fa7\u540c\u65f6\u6dfb\u52a0 \\(c\\) \u6240\u5f62\u6210\u7684\u7684\u5b57\u7b26\u4e32\u4e3a \\(cc\\) \uff1b \u5947\u6839\uff08\u5373 \\(-1\\) \uff09\u8fde\u51fa\u7684\u8fb9\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u6307\u5411 \\(c\\) \uff0c\u8868\u793a\u539f\u6765\u957f\u5ea6\u4e3a \\(-1\\) \u7684\u4e32\uff0c\u5728\u4e24\u4fa7\u540c\u65f6\u6dfb\u52a0 \\(c\\) \u5f62\u6210\u4e86\u957f\u5ea6\u4e3a \\(1\\) \u7684\u5b57\u7b26\u4e32 \\(c\\) \u3002 \u8282\u70b9 \\(u\\) \u8fde\u81f3 \\(v\\) \u7684\u56de\u6587\u94fe\u63a5 \\(fail_u\\) \u610f\u5473\u7740 \\(v\\) \u8868\u793a\u7684\u56de\u6587\u4e32 \\(S\\) \u662f \\(u\\) \u8868\u793a\u7684\u56de\u6587\u4e32 \\(T\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00\u5b50\u4e32\uff08\u56e0\u4e3a\u6700\u957f\u7684\u662f\u81ea\u5df1\u672c\u8eab\uff09\u3002 \u6211\u4eec \u5b9a\u4e49 \\(fail_c = 0, fail_0 = fail_{-1} = -1\\) \u3002 {% noteblock success %} \u5f15\u7406 2\uff1a\u4efb\u4e00\u6ee1\u8db3 \\(len_u > 0\\) \u7684\u8282\u70b9 \\(u\\) \u7684\u5165\u5ea6\u4e3a \\(1\\) \uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u300c\u5165\u5ea6\u300d\u4e0d\u5c06\u300c\u56de\u6587\u94fe\u63a5\u300d\u8ba1\u7b97\u5728\u5185\uff09\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} 1. \u82e5 \\(len_u = 1\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(-1 \\to u\\) \uff1b \u82e5 \\(len_u = 2\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(0 \\to u\\) \uff1b \u82e5 \\(len_u \\ge 3\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(v \\to u\\) \uff0c\u6ee1\u8db3\uff1a \\(v\\) \u8868\u793a\u7684\u56de\u6587\u5b50\u4e32 \\(T\\) \u7684\u4e24\u7aef\u6dfb\u52a0\u67d0\u4e2a\u5b57\u7b26 \\(c\\) \u80fd\u4f7f\u5f97 \\(u\\) \u8868\u793a\u7684\u56de\u6587\u5b50\u4e32 \\(S\\) \u6ee1\u8db3 \\(S = cTc\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4efb\u4e00\u6ee1\u8db3 \\(len_u > 0\\) \u7684\u8282\u70b9 \\(u\\) \u7684\u5165\u5ea6\u4e3a \\(1\\) \u3002 $\\blacksquare$ {% endfolding %} {% noteblock success %} \u547d\u9898 1\uff1a\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u7531\u5f15\u7406 1 \u53ef\u77e5\uff0c\u5728 \\(S\\) \u7684\u9010\u6b65\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u6700\u591a\u4f1a\u65b0\u5efa \\(n\\) \u4e2a\u8282\u70b9\uff1b\u800c\u8fd8\u6709 \\(2\\) \u4e2a\u521d\u59cb\u5316\u65f6\u65b0\u5efa\u7684\u8282\u70b9\u3002 \u6240\u4ee5\u8282\u70b9\u4e2a\u6570\u4e3a\u6700\u591a\u4e3a \\(n + 2\\) \u4e2a\u3002 \u7531\u5f15\u7406 2 \u53ef\u77e5\uff0c\u8fb9\u7684\u4e2a\u6570\u6700\u591a\u4e3a \\(n\\) \u4e2a\uff1b\u56de\u6587\u94fe\u63a5\u6700\u591a\u6709 \\(n\\) \u4e2a\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb \\(\\text{eertree}(S)\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 $\\blacksquare$ {% endfolding %} \u600e\u4e48\u505a \u00b6 \u4ee5 \\(S_0 = \\mathtt{EERTREE}\\) \u4e3a\u4f8b\uff0c\u6211\u4eec\u5bf9\u5b83\u5efa\u7acb\u4e00\u68f5\u56de\u6587\u6811\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u65b0\u5efa\u4e24\u4e2a\u70b9\uff0c\u94a6\u5b9a\u5b83\u4eec\u4e3a\u300c\u5947\u6839 \\(1\\) \u300d\u548c\u300c\u5076\u6839 \\(0\\) \u300d\u3002 \u4e00\u68f5\u7a7a\u7684\u56de\u6587\u6811\u662f\u8fd9\u6837\u7684\uff08\u7ea2\u8272\u8fb9\u4e3a \\(fail\\) \u8fb9\uff0c\u84dd\u8272\u8fb9\u4e3a \\(ch\\) \u8fb9\uff0c\u540e\u540c\uff09\uff1a \u7136\u540e\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{E}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EE}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{R}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EER}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{T}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERT}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{R}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTR}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTRE}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTREE}\\) \u3002 \u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u5462\uff1f {% noteblock success %} \u547d\u9898 2\uff1a\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe\u5230\u5728\u7ebf \\(O(n\\log\\left|\\Sigma\\right|)\\) \u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(\\text{eertree}(\\epsilon)\\) \uff0c\u5373\u4e00\u4e2a\u300c\u5947\u6839\u300d\u548c\u4e00\u4e2a\u300c\u5076\u6839\u300d\u52a0\u4e0a\u5b83\u4eec\u7684\u56de\u6587\u94fe\u63a5\u3002 \u5bf9 \\(S\\) \u5efa\u9020\u56de\u6587\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u4f9d\u6b21\u5411\u56de\u6587\u6811\u4e2d\u63d2\u5165 \\(S[1], S[2], \\ldots, S[n]\\) \u3002 \u6211\u4eec\u8981\u4f7f\u5f97\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\uff0c\u56de\u6587\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u4ee5\u53ca\u56de\u6587\u94fe\u63a5\u90fd\u88ab\u6b63\u786e\u7ef4\u62a4\u3002 \u8003\u8651\u8fdb\u884c\u5b8c\u4e86\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u4e86 \\(T = S[1..i]\\) \u7684\u56de\u6587\u6811\uff0c\u73b0\u5728\u8981\u63d2\u5165 \\(c = S[i + 1]\\) \u3002 \u6211\u4eec\u73b0\u5728\u7684\u76ee\u6807\u662f\u5bfb\u627e \\(S[1..i + 1] = Tc\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00 \\(P\\) \u3002 \u663e\u7136\uff0c\u8981\u4e48 \\(P = c\\) \uff0c\u8981\u4e48 \\(P = cQc\\) \uff08\u663e\u7136 \\(Q\\) \u4e3a \\(S[1..i]\\) \u7684\u67d0\u4e00\u56de\u6587\u540e\u7f00\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230 \\(T\\) \u4e2d\uff0c\u4ee5 \u5f00\u5934\u7684\u524d\u4e00\u4f4d \u4e3a \\(c\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00 \\(Q\\) \u3002 \u6211\u4eec\u4ece \\(\\text{maxSuf}(T)\\) \u5f00\u59cb\uff0c\u6cbf\u7740\u56de\u6587\u94fe\u63a5\u904d\u5386\uff0c\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a \\(v\\) \uff0c\u6bd4\u8f83 \\(c\\) \u548c \\(T[i - len_v - 1]\\) \u3002 \u600e\u4e48\u7406\u89e3\u5462\uff1f \\(T[i - len_v..i - 1]\\) \u662f\u67d0\u4e00\u56de\u6587\u4e32 \\(Q\\) \uff0c\u6211\u4eec\u8981\u627e\u7684\uff0c\u662f\u6ee1\u8db3 \\(Q\\) \u5f00\u5934\u7684\u524d\u4e00\u4f4d\u4e3a \\(c\\) \u7684\u67d0\u4e00\u56de\u6587\u4e32\u3002 \u4e5f\u5c31\u662f\u8981\u4fdd\u8bc1 \\(c = T[i - len_v - 1]\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u7279\u6b8a\u5730\uff0c\u5f53 \\(P = c\\) \u65f6\uff0c \\(Q\\) \u5bf9\u5e94\u7684\u8282\u70b9\u4e3a\u300c\u5947\u6839\u300d\u3002 \u82e5 \\(P = c\\) \uff1a \u68c0\u67e5 \\(ch_{-1, c}\\) \u662f\u5426\u5b58\u5728\uff1a \u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u4f7f \\(ch_{-1, c} = v, len_v = 1, fail_v = 0\\) \u3002 \u82e5\u5b58\u5728\uff0c\u6839\u636e\u5b9a\u4e49\uff0c \\(fail_v = 0\\) \u4e0d\u9700\u8981\u66f4\u65b0\u3002 \u82e5 \\(P = cQc\\) \uff1a \u8bbe \\(Q\\) \u5bf9\u5e94\u7684\u8282\u70b9\u7684\u5e8f\u53f7\u4e3a \\(u\\) \u3002 \u68c0\u67e5 \\(ch_{u, c}\\) \u662f\u5426\u5b58\u5728\uff1a \u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u4f7f \\(len_v = len_u + 2\\) \uff0c\u8fde\u63a5 \\(u \\to v\\) \uff0c\u8fd8\u8981\u66f4\u65b0 \\(fail_v\\) \u3002 \u82e5\u5b58\u5728\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u66f4\u65b0 \\(fail_v\\) \u3002 \u8003\u8651 \\(fail_v\\) \u5230\u5e95\u4f1a\u6307\u5411\u54ea\u91cc\uff1f\u4f1a\u6307\u5411 \\(S[1, i] = Tc\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00\u3002 \u5373 \\(cQc\\) \u4e2d \u5f00\u5934\u7684\u524d\u4e00\u4f4d \u4e3a \\(c\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00 \\(R\\) \u3002 \u82e5\u6211\u4eec\u4ece \\(u\\) \u5f00\u59cb\u904d\u5386\u56de\u6587\u94fe\u63a5\uff0c\u90a3\u4e48\u627e\u5230\u7684\u4f1a\u662f \\(cQc\\) \u8fd9\u4e2a\u6700\u957f\u56de\u6587\u540e\u7f00\uff1b \u56e0\u6b64\u6211\u4eec\u5e94\u4ece \\(x = fail_u\\) \u5f00\u59cb\u904d\u5386\uff0c\u4ecd\u7136\u662f\u6bd4\u8f83 \\(c\\) \u548c \\(T[i - len_x - 1]\\) \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790 \\(\\text{add}\\) \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6211\u4eec\u6bcf\u6b21\u68c0\u67e5 \\(ch_{u, c}\\) \uff08\u6216\u662f\u68c0\u67e5 \\(ch_{-1, c}\\) \uff09\u662f\u5426\u5b58\u5728\uff0c\u9700\u8981 \\(O(\\log\\left|\\Sigma\\right|)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08 std::map \u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\uff09 \u5b9e\u9645\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u5b50\u8282\u70b9\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u5355\u6b21 \\(\\text{add}\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\left|\\Sigma\\right|)\\) \u7684\u3002 \u5219\u4e00\u5171 \\(n\\) \u6b21\uff0c\u5171 \\(O(n \\log\\left|\\Sigma\\right|)\\) \u3002 \u4ee4\u5df2\u7ecf\u5904\u7406\u4e86\u7684\u5b57\u7b26\u4e32 \\(S[1..i] = T\\) \uff0c\u8003\u8651 \\(\\text{maxSuf}(T)\\) \u7684\u672b\u5c3e\u5728 \\(S\\) \u4e2d\u7684\u4e0b\u6807 \\(j\\) \u7684\u53d8\u5316\uff1a \u4e00\u4e2a \\(fail\\) \u7684\u8f6c\u79fb\u4f1a\u4f7f \\(j\\) \u5411\u5de6\u81f3\u5c11\u79fb\u52a8\u4e00\u683c\uff1b \u4e00\u4e2a \\(ch\\) \u8f6c\u79fb\u4f1a\u4f7f \\(j\\) \u5411\u53f3\u81f3\u5c11\u79fb\u52a8\u4e00\u683c\u3002 \u5728\u5904\u7406\u6574\u4e2a \\(S\\) \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5411\u5de6\u6700\u591a\u79fb\u52a8 \\(n\\) \u683c\uff0c\u4e5f\u5c31\u662f\u6700\u591a \\(n\\) \u6b21\uff1b\u5411\u53f3\u6700\u591a\u79fb\u52a8 \\(n\\) \u683c\uff0c\u4e5f\u5c31\u662f\u6700\u591a \\(n\\) \u6b21\u3002 \u56e0\u6b64\u8f6c\u79fb\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u603b\u5171 \\(O(n)\\) \u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n) + O(n\\log\\left|\\Sigma\\right|) = O(n\\log\\left|\\Sigma\\right|)\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe\u5230\u5728\u7ebf \\(O(n\\log\\left|\\Sigma\\right|)\\) \u3002 $\\blacksquare$ {% endfolding %} \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u540e\u6587\u6709\u5427\u3002 \u6027\u8d28 \u00b6 \u6211\u4eec\u79f0\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u662f\u300c\u5947\u300d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(len_u\\) \u4e3a\u5947\u6570\uff1b\u79f0\u4e00\u4e2a\u8282\u70b9 \\(v\\) \u662f\u300c\u5076\u300d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(len_v\\) \u4e3a\u5076\u6570\u3002 {% noteblock success %} \u5f15\u7406 3\uff1a 1. \u4e00\u68f5\u56de\u6587\u6811\u672c\u8d28\u4e0a\u662f\u4e24\u4e2a\u5f31\u8fde\u901a\u56fe\uff1a\u4ee5\u300c\u5947\u6839\u300d\u548c\u300c\u5947\u70b9\u300d\u6784\u6210\u7684\u4e00\u4e2a\u5f31\u8fde\u901a\u5b50\u56fe\u548c\u4ee5\u300c\u5076\u6839\u300d\u548c\u300c\u5076\u70b9\u300d\u6784\u6210\u7684\u4e00\u4e2a\u5f31\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u5747\u4e3a\u6811\u3002 2. \u300c\u5947\u70b9\u300d\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u6784\u6210\u7684\u6811\u662f \\(S\\) \u53f3\u534a\u90e8\u5206\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u5b50\u4e32\u6784\u6210\u7684 trie\uff1b\u300c\u5076\u70b9\u300d\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u6784\u6210\u7684\u6811\u662f \\(S\\) \u53f3\u534a\u90e8\u5206\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\u6784\u6210\u7684 trie\u3002 3. \u4e00\u68f5\u56de\u6587\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e0e\u8fde\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u56de\u6587\u94fe\u63a5\u7684\u53cd\u5411\u94fe\u63a5\u6784\u6210\u4e00\u68f5\u6709\u5411\u57fa\u73af\u6811\uff0c\u5176\u4e2d\u73af\u4e3a \\(-1\\) \u8282\u70b9\u7684\u81ea\u73af\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} 1. \u5982\u679c\u8fb9 \\(e = u \\to v\\) \u5b58\u5728\uff0c\u5219 \\(len_v = len_u + 2\\) \uff0c\u663e\u7136 \\(u, v\\) \u5947\u5076\u6027\u76f8\u540c\uff0c\u5219\u300c\u5947\u70b9\u300d\u4e0e\u300c\u5076\u70b9\u300d\u4e4b\u95f4\u4e92\u4e0d\u76f8\u901a\u3002 \u7ed3\u5408\u5f15\u7406 2\uff0c\u6b64\u6027\u8d28\u5f97\u8bc1\u3002 \u8fd9\u662f\u56de\u6587\u6811\u4e0a\u8fb9\u7684\u5b9a\u4e49\u548c trie \u7684\u5b9a\u4e49\u3002 \u6ce8\u610f\u5230\uff0c\u9664\u4e86 \\(fail_{-1}\\) \uff0c\u5176\u4ed6\u7684\u56de\u6587\u94fe\u63a5\u5747\u4f1a\u4f7f \\(len\\) \u51cf\u5c0f\uff0c\u4e14\u56de\u6587\u6811\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5747\u6709\u552f\u4e00\u7684\u56de\u6587\u94fe\u63a5\u3002 \u5219\u6bcf\u4e2a\u70b9\u90fd\u4ec5\u6709\u552f\u4e00\u7b80\u5355\u8def\u5f84\u5230\u8fbe \\(-1\\) \uff0c\u8fd9\u663e\u7136\u662f\u4e00\u68f5\uff08\u5e26\u6709\u4e00\u4e2a\u73af\uff09\u7684\u6811\u3002 $\\blacksquare$ {% endfolding %} {% noteblock warning %} \u5c0f\u7ed3 2\uff1a\u4e00\u4e9b\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u5982\u56de\u6587 trie\u3001\u540e\u7f00 trie \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(O(n^2)\\) \u7684\uff1b\u50cf\u540e\u7f00\u6811\u548c Compressed trie \u8fd9\u6837\u5f88\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002\u4f46\u56de\u6587\u6811\u8fd9\u4e48\u7b80\u660e\u6613\u61c2\u7684\u6570\u636e\u7ed3\u6784\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \\(O(n)\\) \u7684\u3002 \u5c82\u4e0d\u5999\u54c9\uff1f \u66f4\u91cd\u8981\u7684\u662f\uff0c \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32\u671f\u671b\u4e2a\u6570 \u662f \\(O(\\sqrt{\\left|S\\right|\\cdot\\left|\\Sigma\\right|})\\) \u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56de\u6587\u6811\u7684\u671f\u671b\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u4f73\u3002 {% endnoteblock %} {% noteblock warning %} \u5c0f\u7ed3 3\uff1a\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04 \\(\\theta :\\Sigma \\to \\Sigma, \\text{s.t. } \\theta^2(S) = S\\) \u3002\u6211\u4eec\u79f0\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u662f \\(\\theta\\) -\u56de\u6587\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(S = \\theta(\\overleftarrow{S})\\) \u3002\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684 \\(\\theta\\) -\u56de\u6587\u6811\u4ecd\u53ef\u4ee5\u5728 \\(O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})\\) \u7684\u65f6\u95f4\u4e0e \\(O(\\left|S\\right|)\\) \u7684\u7a7a\u95f4\u5185\u5efa\u7acb\u8d77\u6765\u3002 {% endnoteblock %} \u57fa\u7840\u5e94\u7528 \u00b6 \u300cAPIO2014\u300d\u56de\u6587\u4e32 \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6c42 \\(\\max\\\\{\\left|T\\right|\\cdot \\text{occ}(S, T)\\\\}, T \\subset S \\land T = \\overleftarrow{T}\\) \u3002 \u5176\u4e2d \\(\\text{occ}(S, T)\\) \u8868\u793a \\(T\\) \u5728 \\(S\\) \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c \\(1 \\le \\left|S\\right| \\le 3 \\cdot 10^5\\) \u3002 \u300cMIPT Fall Programming Training Camp2014\u300dB. Pairs \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u5b57\u7b26\u96c6\u4e3a \\(\\Sigma\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6c42\u6ee1\u8db3 \\(1 \\le i \\le j < k \\le n \\land (S[i..j] = \\overleftarrow{S[i..j]}) \\land (S[j + 1..k] = \\overleftarrow{S[j + 1..k]})\\) \u7684\u4e09\u5143\u7ec4 \\((i, j, k)\\) \u7684\u4e2a\u6570\u3002 \\(1 \\le n \\le 3 \\cdot 10^5\\) \u6027\u8d28 3\uff1a \u300cAPIO2014\u300d\u56de\u6587\u4e32 \u80fd\u7528\u56de\u6587\u6811\u5728 \u989d\u5916 \\(O(n)\\) \u7684\u65f6\u95f4\u548c\u7a7a\u95f4 \u5185\u89e3\u51b3\u3002 {% folding \"\u8bc1\u660e\" %} \u4ee4 \\(\\text{occ}[u]\\) \u8868\u793a\u8282\u70b9 \\(u\\) \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \\(T\\) \u5728 \\(S\\) \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4ee4 \\(\\text{occAsMax}[u]\\) \u8868\u793a\u6ee1\u8db3 \\(\\text{maxSuf}(S[1, i]) = T\\) \u7684 \\(i\\) \u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u4e4b\u540e\u5b9e\u65f6\u7ef4\u62a4\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c $$ \\text{occ}[u] = \\text{occAsMax}[u] + \\sum_{v:fail_v = u}\\text{occ}[v] $$ \u56e0\u4e3a\uff0c \\(T\\) \u5728 \\(S\\) \u4e2d\u51fa\u73b0\uff0c\u8981\u4e48\u662f\u4ee5 \\(T = \\text{maxSuf}(S[1..i])\\) \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u8981\u4e48\u662f\u4ee5 \\(T = \\text{maxSuf}(S[l..r]), S[l..r] = \\overleftarrow{S[l..r]}\\) \u7684\u5f62\u5f0f\u51fa\u73b0\u3002 \u8003\u8651\u5230\u524d\u8005\u5373 \\(\\text{occAsMax}[u]\\) \uff0c\u540e\u8005\u5373\u6ee1\u8db3 \\(fail_v = u\\) \u7684 \\(\\text{occ}[v]\\) \uff0c\u5219\u4e0a\u8ff0\u5f0f\u5b50\u6210\u7acb\u3002 \u7531\u5f15\u7406 3 \u53ef\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u5730\u7ef4\u62a4 \\(\\text{occ}[u]\\) \u3002 \uff08 maxNode \u662f\u6700\u5927\u8282\u70b9\u7f16\u53f7\uff09 1 2 3 4 for ( int i = maxNode ; i >= 1 ; -- i ) occ [ i ] = occAsMax [ i ]; for ( int i = maxNode ; i >= 1 ; -- i ) occ [ fail [ i ] ] += occ [ i ]; \u6211\u4eec\u5f97\u5230\u4e86 \\(\\text{occ}\\) \u4e4b\u540e\uff0c\u7b54\u6848\u5373\u4e3a \\(\\mathop{\\operatorname{argmax}}\\limits_{\\text{occ}[u]}(\\text{occ}[u]\\cdot len_u)\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u989d\u5916\u7ef4\u62a4\u7684\u4e00\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(n)\\) \u3002 \u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e3a C++ \u4e0d\u652f\u6301\u8bbf\u95ee\u8d1f\u6570\u6570\u7ec4\u4e0b\u6807\uff0c\u6240\u4ee5\u6211\u4eec \u6574\u4f53\u628a\u4e0b\u6807\u52a0\u4e00 \uff0c\u5373 \\(0\\) \u4ee3\u8868\u300c\u5947\u6839\u300d\uff0c \\(1\\) \u4ee3\u8868\u300c\u5076\u6839\u300d\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6b64\u65f6 maxNode \u5373\u4e3a cntNode - 1 \uff0c \\(1\\) \u53f7\u8282\u70b9\u7684\u7f16\u53f7\u5b9e\u9645\u4e0a\u4e3a \\(2\\) \uff08\u5904\u7406 \\(\\text{occ}\\) \u7684\u65f6\u5019\u8981\u6ce8\u610f\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <bits/stdc++.h> #define LL long long const int N = 3e5 + 5 ; const int C = 26 + 5 ; int m ; char str [ N ]; struct EERTREE { static const int MS = N ; int n , cntNode , last , s [ MS ], len [ MS ], ch [ MS ][ C ], fail [ MS ]; int occAsMax [ MS ], occ [ MS ]; int make ( int ll ) { len [ cntNode ] = ll ; for ( int i = 0 ; i < C ; ++ i ) ch [ cntNode ][ i ] = 0 ; return cntNode ++ ; } int getfail ( int x ) { while ( s [ n ] != s [ n - len [ x ] - 1 ]) x = fail [ x ]; return x ; } bool add ( int x ) { s [ ++ n ] = x ; int u = getfail ( last ), flg = 0 ; if ( ! u ) { if ( ! ch [ u ][ x ]) { int v = make ( 1 ); ch [ u ][ x ] = v ; fail [ v ] = 1 ; flg = 1 ; } } else { if ( ! ch [ u ][ x ]) { int v = make ( len [ u ] + 2 ); ch [ u ][ x ] = v ; flg = 1 ; } fail [ ch [ u ][ x ] ] = ch [ getfail ( fail [ u ])][ x ]; } last = ch [ u ][ x ]; ++ occAsMax [ last ]; return flg ; } LL getocc () { LL ans = - 1 ; // \u8fd9\u91cc\u8981\u6ce8\u610f\u8fed\u4ee3\u7684\u8303\u56f4 for ( int i = cntNode - 1 ; i >= 2 ; -- i ) occ [ i ] = occAsMax [ i ]; for ( int i = cntNode - 1 ; i >= 2 ; -- i ) occ [ fail [ i ] ] += occ [ i ]; for ( int i = cntNode - 1 ; i >= 2 ; -- i ) ans = std :: max ( ans , 1LL * occ [ i ] * len [ i ]); return ans ; } void init () { n = cntNode = last = 0 ; make ( - 1 ), make ( 0 ); } } t ; int main () { scanf ( \"%s\" , str + 1 ); m = strlen ( str + 1 ); t . init (); for ( int i = 1 ; i <= m ; ++ i ) t . add ( str [ i ] - 'a' + 1 ); printf ( \"%lld\" , t . getocc ()); return 0 ; } $\\blacksquare$ {% endfolding %} \u6027\u8d28 4\uff1a \u300cMIPT Fall Programming Training Camp2014\u300dB. Pairs \u80fd\u7528\u56de\u6587\u6811\u5728 \u989d\u5916 \\(O(n\\log\\left|\\Sigma\\right|)\\) \u7684\u65f6\u95f4\u548c \\(O(n)\\) \u7684\u7a7a\u95f4 \u5185\u89e3\u51b3\u3002 {% folding \"\u8bc1\u660e\" %} \u9996\u5148\uff0c\u6211\u4eec\u5efa\u7acb\u8d77 \\(\\text{eertree}(S)\\) \u3002 \u6211\u4eec\u7528 \\(\\text{maxSuf}[i]\\) \u6765\u8868\u793a \\(\\text{maxSuf}(S[1..i])\\) \uff0c\u8fd9\u4e2a\u663e\u7136\u80fd\u5728 \\(O(n)\\) \u7684\u7a7a\u95f4\u5185\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\u7ef4\u62a4\u3002 \u6211\u4eec\u4ee4 \\(\\text{sufCount}[u]\\) \u8868\u793a\u7f16\u53f7\u4e3a \\(u\\) \u7684\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u56de\u6587\u540e\u7f00\u7684\u4e2a\u6570\u3002 \u540c\u7406\u6211\u4eec\u8fd8\u8981\u6c42\u51fa \\(\\text{maxPre}\\) \u4e0e \\(\\text{preCount}\\) \u3002\u6ce8\u610f\u5230\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u7684\u662f \\(\\overleftarrow{S}\\) \u7684 \\(\\text{maxSuf}\\) \u548c \\(\\text{sufCount}\\) \uff08\u8bb0\u4e3a \\(\\text{maxSuf}'\\) \u548c \\(\\text{sufCount}'\\) \u3002\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u5efa\u7acb\u8d77 \\(\\text{eertree}(\\overleftarrow{S})\\) \u3002 \u7b54\u6848\u5373\u4e3a $$ \\sum_{i = 1}^{n - 1}\\text{sufCount}[\\text{maxSuf}[i]]\\cdot\\text{sufCount}'[\\text{maxSuf}'[n - i]] $$ \u4e0d\u96be\u53d1\u73b0\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\log\\left|\\Sigma\\right|)\\) \u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 md \u6ca1\u5f97\u5730\u65b9\u4ea4\u8fd9\u9053\u9898\uff0c\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <bits/stdc++.h> #define LL long long const int N = 3e5 + 5 ; const int C = 26 + 5 ; int m ; char str [ N ]; LL ans ; struct EERTREE { static const int MS = N ; int n , cntNode , s [ MS ], len [ MS ], ch [ MS ][ C ], fail [ MS ]; int sufCount [ MS ], maxSuf [ MS ]; int make ( int ll ) { len [ cntNode ] = ll ; for ( int i = 0 ; i < C ; ++ i ) ch [ cntNode ][ i ] = 0 ; return cntNode ++ ; } int getfail ( int x ) { while ( s [ n ] != s [ n - len [ x ] - 1 ]) x = fail [ x ]; return x ; } bool add ( int x ) { s [ ++ n ] = x ; int u = getfail ( maxSuf [ n - 1 ]), flg = 0 ; if ( ! u ) { if ( ! ch [ u ][ x ]) { int v = make ( 1 ); fail [ v ] = 1 ; ch [ u ][ x ] = v ; flg = 1 ; } } else { if ( ! ch [ u ][ x ]) { int v = make ( len [ u ] + 2 ); ch [ u ][ x ] = v ; flg = 1 ; } fail [ ch [ u ][ x ] ] = ch [ getfail ( fail [ u ])][ x ]; } sufCount [ ch [ u ][ x ]] = sufCount [ fail [ ch [ u ][ x ]] ] + 1 ; maxSuf [ n ] = ch [ u ][ x ]; return flg ; } void init () { n = cntNode ; memset ( maxSuf , 0 , sizeof ( maxSuf )); make ( - 1 ), make ( 0 ); } } t1 , t2 ; int main () { scanf ( \"%s\" , str + 1 ); m = strlen ( str + 1 ); t1 . init (), t2 . init (); for ( int i = 1 ; i <= m ; ++ i ) t1 . add ( str [ i ] - 'a' + 1 ); for ( int i = m ; i >= 1 ; -- i ) t2 . add ( str [ i ] - 'a' + 1 ); for ( int i = 1 ; i <= m - 1 ; ++ i ) ans += t1 . sufCount [ t1 . maxSuf [ i ] ] * t2 . sufCount [ t2 . maxSuf [ m - i ] ]; printf ( \"%lld\" , ans ); return 0 ; } {% endfolding %} \u8b66\u544a \u6709\u5173\u56de\u6587\u6811\u7684\u9ad8\u7ea7\u5e94\u7528\uff0c\u8bf7\u67e5\u9605\u8bba\u6587\u3002 \uff08\u6211\u5495\u4e86\uff09 \u5199\u5728\u6700\u540e \u00b6 \u56de\u6587\u6811\u771f\u7684\u80fd\u5f88\u5de7\u5999\u5730\u89e3\u51b3\u4e0e\u56de\u6587\u4e32\u6709\u5173\u7684\u95ee\u9898\uff0c \u800c\u4e14\u5f88\u591a\u4e0e\u56de\u6587\u4e32\u6709\u5173\u7684\u95ee\u9898\u7684\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u52a3\u65e0\u6bd4\uff0c \u8fd9\u4e5f\u80fd\u4ece\u4fa7\u9762\u4f53\u73b0\u51fa\u56de\u6587\u6811\u7684\u5de7\u5999\u3002 \u7528\u4e00\u9996\u524d\u4eba\u5199\u7684\u8bd7\u4f5c\u7ed3\u5c3e\uff1a \\[ \\begin{aligned} & \\textit{I think that I shall never see} \\\\\\\\ & \\textit{A poem lovely as a tree.} \\\\\\\\ & \\textit{Poems are made by fools like me,} \\\\\\\\ & \\textit{But only God can make a tree.} \\end{aligned} \\] \u63a5\u4e0b\u6765\u5c31\u5f00\u59cb\u52aa\u529b\u94bb\u7814\u540e\u7f00\u6811\u5427\u3002","title":"\u56de\u6587\u6811"},{"location":"posts/lectures/pam/#_1","text":"\u4e3a\u4e86\u66f4\u65b9\u4fbf\u5730\u63cf\u8ff0\u5b57\u7b26\u4e32\u76f8\u5173\u5185\u5bb9\uff0c\u6211\u4eec\u505a\u51fa\u4ee5\u4e0b\u89c4\u5b9a\uff1a \\(S, T\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c \\(c\\) \u901a\u5e38\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c \\(\\Sigma\\) \u8868\u793a\u5b57\u7b26\u96c6\uff1b \\(\\left|S\\right|\\) \u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\uff1b \\(\\left|\\Sigma\\right|\\) \u8868\u793a\u5b57\u7b26\u96c6\u5927\u5c0f\uff1b \\(S[l..r]\\) \u8868\u793a \\(S[l], S[l + 1], \\ldots, S[r - 1], S[r]\\) \uff1b \\(\\epsilon\\) \u8868\u793a\u7a7a\u4e32\uff1b \\(S \\subset T\\) \u8868\u793a \\(S\\) \u4e3a \\(T\\) \u7684\u5b50\u4e32\uff0c\u5373 \\(\\exists i \\in [1, \\left|T\\right| - \\left|S\\right|], \\text{s.t. } \\forall j \\in [1, \\left|S\\right|], S[j] = T[i + j - 1]\\) \uff1b \\(\\overleftarrow{S}\\) \u8868\u793a \\(S\\) \u7684\u7ffb\u8f6c\uff0c\u5373 \\(\\forall i \\in [1, \\left|S\\right|], \\overleftarrow{S}[i] = S[\\left|S\\right|- i + 1]\\) \uff1b \\(S\\) \u4e3a\u56de\u6587\u4e32\u5f53\u4e14\u4ec5\u5f53 \\(S = \\overleftarrow{S}\\) \uff0c\u5373 \\(\\forall i \\in [1, \\left|S\\right|], S[i] = S[\\left|S\\right| - i + 1]\\) \uff1b \u82e5 \\(S\\) \u4e3a\u56de\u6587\u4e32\uff0c\u5219\u5b9a\u4e49 \\(r(S)\\) \u4e3a\u5176\u6700\u957f\u56de\u6587\u534a\u5f84\uff0c\u5373 \\(r(S) = \\max\\\\{\\left\\lfloor\\dfrac{\\left|T\\right| + 1}{2}\\right\\rfloor\\\\}, T \\subset S, T = \\overleftarrow{T}\\) \u3002 \u7279\u6b8a\u5730\uff0c\u672c\u6587\u7684\u5b57\u7b26\u4e32\u4e0b\u6807\u3001\u56de\u6587\u6811\u5185\u8282\u70b9\u7f16\u53f7 \u5747\u4ece \\(1\\) \u5f00\u59cb \u3002 \u4e00\u4e9b\u5b57\u7b26\u4e32\u6709\u5173\u672f\u8bed\u7684\u4f8b\u5b50 \u5bf9\u4e8e \\(S = \\mathtt{ABCBAD}\\) \u800c\u8a00\uff1a \\(\\left|S\\right| = 6\\) \uff1b \\(\\left|\\Sigma\\right| = 4\\) \uff1b \\(S[2..4] = \\mathtt{BCBA}\\) \uff1b \\(S[1..4] \\subset S[1..5]\\) \uff1b \\(\\overleftarrow{S[3..5]} = \\mathtt{DAB}\\) \uff1b \\(S[1..5] = \\mathtt{ABCBA} = \\overleftarrow{S[1..5]}\\) \u4e3a\u56de\u6587\u4e32\u3002","title":"\u5199\u5728\u524d\u9762"},{"location":"posts/lectures/pam/#_2","text":"","title":"\u7ed3\u6784\u3001\u64cd\u4f5c\u4e0e\u5efa\u7acb"},{"location":"posts/lectures/pam/#_3","text":"\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u56de\u6587\u4e32 \\(S\\) \uff0c\u4ee4 \\(P = \\{ T : T = S[i..n - i + 1] \\quad i \\in [1, \\left\\lfloor\\dfrac{n + 1}{2}\\right\\rfloor]\\}\\) \uff0c\u5219 \\(\\forall x \\in P, x = \\overleftarrow{x}\\) \u3002 \u90a3\u4e48 \\(\\forall x \\in P\\) \u4e4b\u95f4\u53c8\u6709\u4ec0\u4e48\u6837\u7684\u5173\u7cfb\u5462\uff1f \u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u662f\u5f88\u591a \u5b50\u56de\u6587\u4e32\u5c42\u5c42\u5d4c\u5957 \u800c\u6210\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u901a\u8fc7 \u5728\u4e24\u7aef\u6dfb\u52a0\u76f8\u540c\u7684\u5b57\u7b26 \uff0c\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u56de\u6587\u4e32\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5bfb\u89c5\u5230\u4e86\u56de\u6587\u6811\u4e0a \u8fb9\u7684\u610f\u4e49 \u3002 \u5728\u56de\u6587\u6811\u4e2d\uff0c \\(u\\) \u7684\u7236\u4eb2\u8fde\u5411 \\(u\\) \u7684\u8fb9\u4e0a\u5b58\u50a8\u7740\u5b57\u7b26 \\(c\\) \u7684\u610f\u4e49\u662f \\(u\\) \u7684\u7236\u4eb2\u8868\u793a\u7684\u56de\u6587\u4e32\uff0c\u5728\u4e24\u7aef\u52a0\u4e0a \\(c\\) \u540e\uff0c\u80fd\u5f62\u6210 \\(u\\) \u3002","title":"\u4e3a\u4ec0\u4e48"},{"location":"posts/lectures/pam/#_4","text":"{% noteblock success %} \u5f15\u7406 1\uff1a\u5411 \\(S\\) \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 \\(c\\) \uff0c\u6700\u591a\u53ea\u4f1a\u65b0\u751f\u6210\u4e00\u4e2a\u56de\u6587\u5b50\u4e32\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u8fd9\u4e2a\u5b50\u4e32\u662f \\(S\\) \u7684 \u6700\u957f\u56de\u6587\u540e\u7f00 \u672b\u7aef\u589e\u52a0 \\(c\\) \uff0c\u4e14\u539f\u6765\u7684\u524d\u7aef\u6070\u597d\u4e5f\u662f \\(c\\) \uff0c\u6240\u4ea7\u751f\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u5728 \\(S\\) \u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u6700\u591a\u53ea\u4f1a\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u3002 $\\blacksquare$ {% endfolding %} \u56de\u6587\u6811\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u662f\u4e00\u4e2a\u5305\u542b\u7740\u989d\u5916\u4fe1\u606f\u7684\u6709\u5411\u56fe\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u7528\u56de\u6587\u5b50\u4e32\u6765\u8868\u793a\u4e00\u4e2a\u8282\u70b9\u3002 \u56de\u6587\u6811\u652f\u6301\u4e24\u4e2a\u64cd\u4f5c\uff1a \\(\\text{add}(c)\\) \u548c \\(\\text{eertree}(S)\\) \u3002 \\(\\text{add}(c)\\) \u8868\u793a\u5728\u56de\u6587\u6811\u5185\u63d2\u5165 \\(c\\) \uff0c\u8fd4\u56de\u6b64\u6b21\u64cd\u4f5c\u65b0\u589e\u7684\u56de\u6587\u5b50\u4e32\u4e2a\u6570\u3002 \u901a\u8fc7\u5f15\u7406 1\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 \\(\\text{add}(c)\\) \u603b\u662f\u8fd4\u56de \\(0\\) \u6216 \\(1\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\uff0c\u6211\u4eec\u90fd\u80fd\u5728 \\(O(1)\\) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u5df2\u7ecf\u5904\u7406\u4e86\u7684\u5b57\u7b26\u4e32 \\(T\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\uff0c\u5373 \\(\\text{maxSuf}(T)\\) \u3002 \\(\\text{eertree}(S)\\) \u8868\u793a\u5c06 \\(S\\) \u5185\u7684\u5b57\u7b26\uff0c\u4ece\u5de6\u81f3\u53f3\u9010\u4e2a\u63d2\u5165\u540e\u5f62\u6210\u7684\u56de\u6587\u6811\u3002 {% noteblock warning %} \u5c0f\u7ed3 1\uff1a \\(S\\) \u4e2d\u5305\u542b\u7684\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u5b50\u4e32\u6570\u91cf\u4e3a \\(\\text{eertree}(S)\\) \u7684\u8282\u70b9\u4e2d\u7684\u6700\u5927\u7f16\u53f7\u3002 {% endnoteblock %} \u4e00\u68f5\u56de\u6587\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u8981\u5b58\u50a8\u7684\u4fe1\u606f\u6709\uff1a \u8fd9\u4e2a\u70b9\u7684\u5e8f\u53f7 \\(u\\) \uff1b \u8868\u793a\u7684\u56de\u6587\u4e32\u7684\u957f\u5ea6 \\(len_u\\) \uff1b \u4ece\u8fd9\u4e2a\u70b9\u51fa\u53d1\u7684\u4e00\u6761\u6807\u4e3a \\(c\\) \u7684\u51fa\u8fb9\u6307\u5411\u7684\u8282\u70b9\u7684\u7f16\u53f7 \\(ch_{u, c}\\) \uff1b \u56de\u6587\u94fe\u63a5 \\(fail_u\\) \uff1b \u4e3a\u4e86\u4ee5\u540e\u7684\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u65b0\u5efa\u4e24\u4e2a\u8282\u70b9\uff0c\u957f\u5ea6\u548c\u7f16\u53f7\u5206\u522b\u4e3a \\(-1\\) \u548c \\(0\\) \u3002 \\(0\\) \u8868\u793a\u7740\u7a7a\u4e32\uff0c\u79f0\u4e4b\u4e3a\u300c\u5076\u6839\u300d\uff1b\u800c \\(-1\\) \u8868\u793a\u7740\u300c\u865a\u4e32\u300d\uff0c\u79f0\u4e4b\u4e3a\u300c\u5947\u6839\u300d\u3002 \u5076\u6839\uff08\u5373 \\(0\\) \uff09\u8fde\u51fa\u7684\u8fb9\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u6307\u5411 \\(cc\\) \uff0c\u8868\u793a\u5728 \\(\\epsilon\\) \u7684\u4e24\u4fa7\u540c\u65f6\u6dfb\u52a0 \\(c\\) \u6240\u5f62\u6210\u7684\u7684\u5b57\u7b26\u4e32\u4e3a \\(cc\\) \uff1b \u5947\u6839\uff08\u5373 \\(-1\\) \uff09\u8fde\u51fa\u7684\u8fb9\uff08\u5982\u679c\u5b58\u5728\uff09\uff0c\u6307\u5411 \\(c\\) \uff0c\u8868\u793a\u539f\u6765\u957f\u5ea6\u4e3a \\(-1\\) \u7684\u4e32\uff0c\u5728\u4e24\u4fa7\u540c\u65f6\u6dfb\u52a0 \\(c\\) \u5f62\u6210\u4e86\u957f\u5ea6\u4e3a \\(1\\) \u7684\u5b57\u7b26\u4e32 \\(c\\) \u3002 \u8282\u70b9 \\(u\\) \u8fde\u81f3 \\(v\\) \u7684\u56de\u6587\u94fe\u63a5 \\(fail_u\\) \u610f\u5473\u7740 \\(v\\) \u8868\u793a\u7684\u56de\u6587\u4e32 \\(S\\) \u662f \\(u\\) \u8868\u793a\u7684\u56de\u6587\u4e32 \\(T\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00\u5b50\u4e32\uff08\u56e0\u4e3a\u6700\u957f\u7684\u662f\u81ea\u5df1\u672c\u8eab\uff09\u3002 \u6211\u4eec \u5b9a\u4e49 \\(fail_c = 0, fail_0 = fail_{-1} = -1\\) \u3002 {% noteblock success %} \u5f15\u7406 2\uff1a\u4efb\u4e00\u6ee1\u8db3 \\(len_u > 0\\) \u7684\u8282\u70b9 \\(u\\) \u7684\u5165\u5ea6\u4e3a \\(1\\) \uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u300c\u5165\u5ea6\u300d\u4e0d\u5c06\u300c\u56de\u6587\u94fe\u63a5\u300d\u8ba1\u7b97\u5728\u5185\uff09\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} 1. \u82e5 \\(len_u = 1\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(-1 \\to u\\) \uff1b \u82e5 \\(len_u = 2\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(0 \\to u\\) \uff1b \u82e5 \\(len_u \\ge 3\\) \uff0c\u5219\u5176\u552f\u4e00\u7684\u5165\u8fb9\u5fc5\u4e3a \\(v \\to u\\) \uff0c\u6ee1\u8db3\uff1a \\(v\\) \u8868\u793a\u7684\u56de\u6587\u5b50\u4e32 \\(T\\) \u7684\u4e24\u7aef\u6dfb\u52a0\u67d0\u4e2a\u5b57\u7b26 \\(c\\) \u80fd\u4f7f\u5f97 \\(u\\) \u8868\u793a\u7684\u56de\u6587\u5b50\u4e32 \\(S\\) \u6ee1\u8db3 \\(S = cTc\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u4efb\u4e00\u6ee1\u8db3 \\(len_u > 0\\) \u7684\u8282\u70b9 \\(u\\) \u7684\u5165\u5ea6\u4e3a \\(1\\) \u3002 $\\blacksquare$ {% endfolding %} {% noteblock success %} \u547d\u9898 1\uff1a\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u7531\u5f15\u7406 1 \u53ef\u77e5\uff0c\u5728 \\(S\\) \u7684\u9010\u6b65\u63d2\u5165\u8fc7\u7a0b\u4e2d\uff0c\u6700\u591a\u4f1a\u65b0\u5efa \\(n\\) \u4e2a\u8282\u70b9\uff1b\u800c\u8fd8\u6709 \\(2\\) \u4e2a\u521d\u59cb\u5316\u65f6\u65b0\u5efa\u7684\u8282\u70b9\u3002 \u6240\u4ee5\u8282\u70b9\u4e2a\u6570\u4e3a\u6700\u591a\u4e3a \\(n + 2\\) \u4e2a\u3002 \u7531\u5f15\u7406 2 \u53ef\u77e5\uff0c\u8fb9\u7684\u4e2a\u6570\u6700\u591a\u4e3a \\(n\\) \u4e2a\uff1b\u56de\u6587\u94fe\u63a5\u6700\u591a\u6709 \\(n\\) \u4e2a\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb \\(\\text{eertree}(S)\\) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 $\\blacksquare$ {% endfolding %}","title":"\u662f\u4ec0\u4e48"},{"location":"posts/lectures/pam/#_5","text":"\u4ee5 \\(S_0 = \\mathtt{EERTREE}\\) \u4e3a\u4f8b\uff0c\u6211\u4eec\u5bf9\u5b83\u5efa\u7acb\u4e00\u68f5\u56de\u6587\u6811\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u65b0\u5efa\u4e24\u4e2a\u70b9\uff0c\u94a6\u5b9a\u5b83\u4eec\u4e3a\u300c\u5947\u6839 \\(1\\) \u300d\u548c\u300c\u5076\u6839 \\(0\\) \u300d\u3002 \u4e00\u68f5\u7a7a\u7684\u56de\u6587\u6811\u662f\u8fd9\u6837\u7684\uff08\u7ea2\u8272\u8fb9\u4e3a \\(fail\\) \u8fb9\uff0c\u84dd\u8272\u8fb9\u4e3a \\(ch\\) \u8fb9\uff0c\u540e\u540c\uff09\uff1a \u7136\u540e\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{E}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EE}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{R}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EER}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{T}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERT}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{R}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTR}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTRE}\\) \u3002 \u63a5\u7740\u6211\u4eec\u63d2\u5165 \\(\\mathtt{E}\\) \uff0c\u73b0\u5728 \\(S = \\mathtt{EERTREE}\\) \u3002 \u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u5462\uff1f {% noteblock success %} \u547d\u9898 2\uff1a\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe\u5230\u5728\u7ebf \\(O(n\\log\\left|\\Sigma\\right|)\\) \u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} \u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(\\text{eertree}(\\epsilon)\\) \uff0c\u5373\u4e00\u4e2a\u300c\u5947\u6839\u300d\u548c\u4e00\u4e2a\u300c\u5076\u6839\u300d\u52a0\u4e0a\u5b83\u4eec\u7684\u56de\u6587\u94fe\u63a5\u3002 \u5bf9 \\(S\\) \u5efa\u9020\u56de\u6587\u6811\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u4f9d\u6b21\u5411\u56de\u6587\u6811\u4e2d\u63d2\u5165 \\(S[1], S[2], \\ldots, S[n]\\) \u3002 \u6211\u4eec\u8981\u4f7f\u5f97\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\uff0c\u56de\u6587\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u4ee5\u53ca\u56de\u6587\u94fe\u63a5\u90fd\u88ab\u6b63\u786e\u7ef4\u62a4\u3002 \u8003\u8651\u8fdb\u884c\u5b8c\u4e86\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u540e\u7684\u72b6\u6001\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u7406\u4e86 \\(T = S[1..i]\\) \u7684\u56de\u6587\u6811\uff0c\u73b0\u5728\u8981\u63d2\u5165 \\(c = S[i + 1]\\) \u3002 \u6211\u4eec\u73b0\u5728\u7684\u76ee\u6807\u662f\u5bfb\u627e \\(S[1..i + 1] = Tc\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00 \\(P\\) \u3002 \u663e\u7136\uff0c\u8981\u4e48 \\(P = c\\) \uff0c\u8981\u4e48 \\(P = cQc\\) \uff08\u663e\u7136 \\(Q\\) \u4e3a \\(S[1..i]\\) \u7684\u67d0\u4e00\u56de\u6587\u540e\u7f00\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230 \\(T\\) \u4e2d\uff0c\u4ee5 \u5f00\u5934\u7684\u524d\u4e00\u4f4d \u4e3a \\(c\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00 \\(Q\\) \u3002 \u6211\u4eec\u4ece \\(\\text{maxSuf}(T)\\) \u5f00\u59cb\uff0c\u6cbf\u7740\u56de\u6587\u94fe\u63a5\u904d\u5386\uff0c\u8bbe\u5f53\u524d\u8282\u70b9\u4e3a \\(v\\) \uff0c\u6bd4\u8f83 \\(c\\) \u548c \\(T[i - len_v - 1]\\) \u3002 \u600e\u4e48\u7406\u89e3\u5462\uff1f \\(T[i - len_v..i - 1]\\) \u662f\u67d0\u4e00\u56de\u6587\u4e32 \\(Q\\) \uff0c\u6211\u4eec\u8981\u627e\u7684\uff0c\u662f\u6ee1\u8db3 \\(Q\\) \u5f00\u5934\u7684\u524d\u4e00\u4f4d\u4e3a \\(c\\) \u7684\u67d0\u4e00\u56de\u6587\u4e32\u3002 \u4e5f\u5c31\u662f\u8981\u4fdd\u8bc1 \\(c = T[i - len_v - 1]\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u7279\u6b8a\u5730\uff0c\u5f53 \\(P = c\\) \u65f6\uff0c \\(Q\\) \u5bf9\u5e94\u7684\u8282\u70b9\u4e3a\u300c\u5947\u6839\u300d\u3002 \u82e5 \\(P = c\\) \uff1a \u68c0\u67e5 \\(ch_{-1, c}\\) \u662f\u5426\u5b58\u5728\uff1a \u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u4f7f \\(ch_{-1, c} = v, len_v = 1, fail_v = 0\\) \u3002 \u82e5\u5b58\u5728\uff0c\u6839\u636e\u5b9a\u4e49\uff0c \\(fail_v = 0\\) \u4e0d\u9700\u8981\u66f4\u65b0\u3002 \u82e5 \\(P = cQc\\) \uff1a \u8bbe \\(Q\\) \u5bf9\u5e94\u7684\u8282\u70b9\u7684\u5e8f\u53f7\u4e3a \\(u\\) \u3002 \u68c0\u67e5 \\(ch_{u, c}\\) \u662f\u5426\u5b58\u5728\uff1a \u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u4f7f \\(len_v = len_u + 2\\) \uff0c\u8fde\u63a5 \\(u \\to v\\) \uff0c\u8fd8\u8981\u66f4\u65b0 \\(fail_v\\) \u3002 \u82e5\u5b58\u5728\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u66f4\u65b0 \\(fail_v\\) \u3002 \u8003\u8651 \\(fail_v\\) \u5230\u5e95\u4f1a\u6307\u5411\u54ea\u91cc\uff1f\u4f1a\u6307\u5411 \\(S[1, i] = Tc\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00\u3002 \u5373 \\(cQc\\) \u4e2d \u5f00\u5934\u7684\u524d\u4e00\u4f4d \u4e3a \\(c\\) \u7684\u6b21\u957f\u56de\u6587\u540e\u7f00 \\(R\\) \u3002 \u82e5\u6211\u4eec\u4ece \\(u\\) \u5f00\u59cb\u904d\u5386\u56de\u6587\u94fe\u63a5\uff0c\u90a3\u4e48\u627e\u5230\u7684\u4f1a\u662f \\(cQc\\) \u8fd9\u4e2a\u6700\u957f\u56de\u6587\u540e\u7f00\uff1b \u56e0\u6b64\u6211\u4eec\u5e94\u4ece \\(x = fail_u\\) \u5f00\u59cb\u904d\u5386\uff0c\u4ecd\u7136\u662f\u6bd4\u8f83 \\(c\\) \u548c \\(T[i - len_x - 1]\\) \u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790 \\(\\text{add}\\) \u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u6211\u4eec\u6bcf\u6b21\u68c0\u67e5 \\(ch_{u, c}\\) \uff08\u6216\u662f\u68c0\u67e5 \\(ch_{-1, c}\\) \uff09\u662f\u5426\u5b58\u5728\uff0c\u9700\u8981 \\(O(\\log\\left|\\Sigma\\right|)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08 std::map \u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\uff09 \u5b9e\u9645\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528\u5b50\u8282\u70b9\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u5355\u6b21 \\(\\text{add}\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\left|\\Sigma\\right|)\\) \u7684\u3002 \u5219\u4e00\u5171 \\(n\\) \u6b21\uff0c\u5171 \\(O(n \\log\\left|\\Sigma\\right|)\\) \u3002 \u4ee4\u5df2\u7ecf\u5904\u7406\u4e86\u7684\u5b57\u7b26\u4e32 \\(S[1..i] = T\\) \uff0c\u8003\u8651 \\(\\text{maxSuf}(T)\\) \u7684\u672b\u5c3e\u5728 \\(S\\) \u4e2d\u7684\u4e0b\u6807 \\(j\\) \u7684\u53d8\u5316\uff1a \u4e00\u4e2a \\(fail\\) \u7684\u8f6c\u79fb\u4f1a\u4f7f \\(j\\) \u5411\u5de6\u81f3\u5c11\u79fb\u52a8\u4e00\u683c\uff1b \u4e00\u4e2a \\(ch\\) \u8f6c\u79fb\u4f1a\u4f7f \\(j\\) \u5411\u53f3\u81f3\u5c11\u79fb\u52a8\u4e00\u683c\u3002 \u5728\u5904\u7406\u6574\u4e2a \\(S\\) \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5411\u5de6\u6700\u591a\u79fb\u52a8 \\(n\\) \u683c\uff0c\u4e5f\u5c31\u662f\u6700\u591a \\(n\\) \u6b21\uff1b\u5411\u53f3\u6700\u591a\u79fb\u52a8 \\(n\\) \u683c\uff0c\u4e5f\u5c31\u662f\u6700\u591a \\(n\\) \u6b21\u3002 \u56e0\u6b64\u8f6c\u79fb\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u603b\u5171 \\(O(n)\\) \u3002 \u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n) + O(n\\log\\left|\\Sigma\\right|) = O(n\\log\\left|\\Sigma\\right|)\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u7acb\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684\u56de\u6587\u6811 \\(\\text{eertree}(S)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u8fbe\u5230\u5728\u7ebf \\(O(n\\log\\left|\\Sigma\\right|)\\) \u3002 $\\blacksquare$ {% endfolding %}","title":"\u600e\u4e48\u505a"},{"location":"posts/lectures/pam/#_6","text":"\u540e\u6587\u6709\u5427\u3002","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/lectures/pam/#_7","text":"\u6211\u4eec\u79f0\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u662f\u300c\u5947\u300d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(len_u\\) \u4e3a\u5947\u6570\uff1b\u79f0\u4e00\u4e2a\u8282\u70b9 \\(v\\) \u662f\u300c\u5076\u300d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(len_v\\) \u4e3a\u5076\u6570\u3002 {% noteblock success %} \u5f15\u7406 3\uff1a 1. \u4e00\u68f5\u56de\u6587\u6811\u672c\u8d28\u4e0a\u662f\u4e24\u4e2a\u5f31\u8fde\u901a\u56fe\uff1a\u4ee5\u300c\u5947\u6839\u300d\u548c\u300c\u5947\u70b9\u300d\u6784\u6210\u7684\u4e00\u4e2a\u5f31\u8fde\u901a\u5b50\u56fe\u548c\u4ee5\u300c\u5076\u6839\u300d\u548c\u300c\u5076\u70b9\u300d\u6784\u6210\u7684\u4e00\u4e2a\u5f31\u8fde\u901a\u5b50\u56fe\uff0c\u4e14\u5747\u4e3a\u6811\u3002 2. \u300c\u5947\u70b9\u300d\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u6784\u6210\u7684\u6811\u662f \\(S\\) \u53f3\u534a\u90e8\u5206\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u56de\u6587\u5b50\u4e32\u6784\u6210\u7684 trie\uff1b\u300c\u5076\u70b9\u300d\u548c\u4e0e\u5176\u76f8\u8fde\u7684\u8fb9\u6784\u6210\u7684\u6811\u662f \\(S\\) \u53f3\u534a\u90e8\u5206\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u56de\u6587\u5b50\u4e32\u6784\u6210\u7684 trie\u3002 3. \u4e00\u68f5\u56de\u6587\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u4e0e\u8fde\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u56de\u6587\u94fe\u63a5\u7684\u53cd\u5411\u94fe\u63a5\u6784\u6210\u4e00\u68f5\u6709\u5411\u57fa\u73af\u6811\uff0c\u5176\u4e2d\u73af\u4e3a \\(-1\\) \u8282\u70b9\u7684\u81ea\u73af\u3002 {% endnoteblock %} {% folding \"\u8bc1\u660e\" %} 1. \u5982\u679c\u8fb9 \\(e = u \\to v\\) \u5b58\u5728\uff0c\u5219 \\(len_v = len_u + 2\\) \uff0c\u663e\u7136 \\(u, v\\) \u5947\u5076\u6027\u76f8\u540c\uff0c\u5219\u300c\u5947\u70b9\u300d\u4e0e\u300c\u5076\u70b9\u300d\u4e4b\u95f4\u4e92\u4e0d\u76f8\u901a\u3002 \u7ed3\u5408\u5f15\u7406 2\uff0c\u6b64\u6027\u8d28\u5f97\u8bc1\u3002 \u8fd9\u662f\u56de\u6587\u6811\u4e0a\u8fb9\u7684\u5b9a\u4e49\u548c trie \u7684\u5b9a\u4e49\u3002 \u6ce8\u610f\u5230\uff0c\u9664\u4e86 \\(fail_{-1}\\) \uff0c\u5176\u4ed6\u7684\u56de\u6587\u94fe\u63a5\u5747\u4f1a\u4f7f \\(len\\) \u51cf\u5c0f\uff0c\u4e14\u56de\u6587\u6811\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5747\u6709\u552f\u4e00\u7684\u56de\u6587\u94fe\u63a5\u3002 \u5219\u6bcf\u4e2a\u70b9\u90fd\u4ec5\u6709\u552f\u4e00\u7b80\u5355\u8def\u5f84\u5230\u8fbe \\(-1\\) \uff0c\u8fd9\u663e\u7136\u662f\u4e00\u68f5\uff08\u5e26\u6709\u4e00\u4e2a\u73af\uff09\u7684\u6811\u3002 $\\blacksquare$ {% endfolding %} {% noteblock warning %} \u5c0f\u7ed3 2\uff1a\u4e00\u4e9b\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u6570\u636e\u7ed3\u6784\u5982\u56de\u6587 trie\u3001\u540e\u7f00 trie \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(O(n^2)\\) \u7684\uff1b\u50cf\u540e\u7f00\u6811\u548c Compressed trie \u8fd9\u6837\u5f88\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002\u4f46\u56de\u6587\u6811\u8fd9\u4e48\u7b80\u660e\u6613\u61c2\u7684\u6570\u636e\u7ed3\u6784\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \\(O(n)\\) \u7684\u3002 \u5c82\u4e0d\u5999\u54c9\uff1f \u66f4\u91cd\u8981\u7684\u662f\uff0c \u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u672c\u8d28\u4e0d\u540c\u7684\u56de\u6587\u4e32\u671f\u671b\u4e2a\u6570 \u662f \\(O(\\sqrt{\\left|S\\right|\\cdot\\left|\\Sigma\\right|})\\) \u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u56de\u6587\u6811\u7684\u671f\u671b\u7a7a\u95f4\u590d\u6742\u5ea6\u66f4\u4f73\u3002 {% endnoteblock %} {% noteblock warning %} \u5c0f\u7ed3 3\uff1a\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6620\u5c04 \\(\\theta :\\Sigma \\to \\Sigma, \\text{s.t. } \\theta^2(S) = S\\) \u3002\u6211\u4eec\u79f0\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(S\\) \u662f \\(\\theta\\) -\u56de\u6587\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(S = \\theta(\\overleftarrow{S})\\) \u3002\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u7684 \\(\\theta\\) -\u56de\u6587\u6811\u4ecd\u53ef\u4ee5\u5728 \\(O(\\left|S\\right|\\log{\\left|\\Sigma\\right|})\\) \u7684\u65f6\u95f4\u4e0e \\(O(\\left|S\\right|)\\) \u7684\u7a7a\u95f4\u5185\u5efa\u7acb\u8d77\u6765\u3002 {% endnoteblock %}","title":"\u6027\u8d28"},{"location":"posts/lectures/pam/#_8","text":"\u300cAPIO2014\u300d\u56de\u6587\u4e32 \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6c42 \\(\\max\\\\{\\left|T\\right|\\cdot \\text{occ}(S, T)\\\\}, T \\subset S \\land T = \\overleftarrow{T}\\) \u3002 \u5176\u4e2d \\(\\text{occ}(S, T)\\) \u8868\u793a \\(T\\) \u5728 \\(S\\) \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\uff0c \\(1 \\le \\left|S\\right| \\le 3 \\cdot 10^5\\) \u3002 \u300cMIPT Fall Programming Training Camp2014\u300dB. Pairs \u9898\u610f\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \uff0c\u5b57\u7b26\u96c6\u4e3a \\(\\Sigma\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \uff0c\u6c42\u6ee1\u8db3 \\(1 \\le i \\le j < k \\le n \\land (S[i..j] = \\overleftarrow{S[i..j]}) \\land (S[j + 1..k] = \\overleftarrow{S[j + 1..k]})\\) \u7684\u4e09\u5143\u7ec4 \\((i, j, k)\\) \u7684\u4e2a\u6570\u3002 \\(1 \\le n \\le 3 \\cdot 10^5\\) \u6027\u8d28 3\uff1a \u300cAPIO2014\u300d\u56de\u6587\u4e32 \u80fd\u7528\u56de\u6587\u6811\u5728 \u989d\u5916 \\(O(n)\\) \u7684\u65f6\u95f4\u548c\u7a7a\u95f4 \u5185\u89e3\u51b3\u3002 {% folding \"\u8bc1\u660e\" %} \u4ee4 \\(\\text{occ}[u]\\) \u8868\u793a\u8282\u70b9 \\(u\\) \u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \\(T\\) \u5728 \\(S\\) \u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4ee4 \\(\\text{occAsMax}[u]\\) \u8868\u793a\u6ee1\u8db3 \\(\\text{maxSuf}(S[1, i]) = T\\) \u7684 \\(i\\) \u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u4e4b\u540e\u5b9e\u65f6\u7ef4\u62a4\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c $$ \\text{occ}[u] = \\text{occAsMax}[u] + \\sum_{v:fail_v = u}\\text{occ}[v] $$ \u56e0\u4e3a\uff0c \\(T\\) \u5728 \\(S\\) \u4e2d\u51fa\u73b0\uff0c\u8981\u4e48\u662f\u4ee5 \\(T = \\text{maxSuf}(S[1..i])\\) \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u8981\u4e48\u662f\u4ee5 \\(T = \\text{maxSuf}(S[l..r]), S[l..r] = \\overleftarrow{S[l..r]}\\) \u7684\u5f62\u5f0f\u51fa\u73b0\u3002 \u8003\u8651\u5230\u524d\u8005\u5373 \\(\\text{occAsMax}[u]\\) \uff0c\u540e\u8005\u5373\u6ee1\u8db3 \\(fail_v = u\\) \u7684 \\(\\text{occ}[v]\\) \uff0c\u5219\u4e0a\u8ff0\u5f0f\u5b50\u6210\u7acb\u3002 \u7531\u5f15\u7406 3 \u53ef\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u5730\u7ef4\u62a4 \\(\\text{occ}[u]\\) \u3002 \uff08 maxNode \u662f\u6700\u5927\u8282\u70b9\u7f16\u53f7\uff09 1 2 3 4 for ( int i = maxNode ; i >= 1 ; -- i ) occ [ i ] = occAsMax [ i ]; for ( int i = maxNode ; i >= 1 ; -- i ) occ [ fail [ i ] ] += occ [ i ]; \u6211\u4eec\u5f97\u5230\u4e86 \\(\\text{occ}\\) \u4e4b\u540e\uff0c\u7b54\u6848\u5373\u4e3a \\(\\mathop{\\operatorname{argmax}}\\limits_{\\text{occ}[u]}(\\text{occ}[u]\\cdot len_u)\\) \u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u989d\u5916\u7ef4\u62a4\u7684\u4e00\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a \\(O(n)\\) \u3002 \u5728\u5b9e\u73b0\u7684\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e3a C++ \u4e0d\u652f\u6301\u8bbf\u95ee\u8d1f\u6570\u6570\u7ec4\u4e0b\u6807\uff0c\u6240\u4ee5\u6211\u4eec \u6574\u4f53\u628a\u4e0b\u6807\u52a0\u4e00 \uff0c\u5373 \\(0\\) \u4ee3\u8868\u300c\u5947\u6839\u300d\uff0c \\(1\\) \u4ee3\u8868\u300c\u5076\u6839\u300d\u2026\u2026\u4ee5\u6b64\u7c7b\u63a8\u3002 \u6b64\u65f6 maxNode \u5373\u4e3a cntNode - 1 \uff0c \\(1\\) \u53f7\u8282\u70b9\u7684\u7f16\u53f7\u5b9e\u9645\u4e0a\u4e3a \\(2\\) \uff08\u5904\u7406 \\(\\text{occ}\\) \u7684\u65f6\u5019\u8981\u6ce8\u610f\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <bits/stdc++.h> #define LL long long const int N = 3e5 + 5 ; const int C = 26 + 5 ; int m ; char str [ N ]; struct EERTREE { static const int MS = N ; int n , cntNode , last , s [ MS ], len [ MS ], ch [ MS ][ C ], fail [ MS ]; int occAsMax [ MS ], occ [ MS ]; int make ( int ll ) { len [ cntNode ] = ll ; for ( int i = 0 ; i < C ; ++ i ) ch [ cntNode ][ i ] = 0 ; return cntNode ++ ; } int getfail ( int x ) { while ( s [ n ] != s [ n - len [ x ] - 1 ]) x = fail [ x ]; return x ; } bool add ( int x ) { s [ ++ n ] = x ; int u = getfail ( last ), flg = 0 ; if ( ! u ) { if ( ! ch [ u ][ x ]) { int v = make ( 1 ); ch [ u ][ x ] = v ; fail [ v ] = 1 ; flg = 1 ; } } else { if ( ! ch [ u ][ x ]) { int v = make ( len [ u ] + 2 ); ch [ u ][ x ] = v ; flg = 1 ; } fail [ ch [ u ][ x ] ] = ch [ getfail ( fail [ u ])][ x ]; } last = ch [ u ][ x ]; ++ occAsMax [ last ]; return flg ; } LL getocc () { LL ans = - 1 ; // \u8fd9\u91cc\u8981\u6ce8\u610f\u8fed\u4ee3\u7684\u8303\u56f4 for ( int i = cntNode - 1 ; i >= 2 ; -- i ) occ [ i ] = occAsMax [ i ]; for ( int i = cntNode - 1 ; i >= 2 ; -- i ) occ [ fail [ i ] ] += occ [ i ]; for ( int i = cntNode - 1 ; i >= 2 ; -- i ) ans = std :: max ( ans , 1LL * occ [ i ] * len [ i ]); return ans ; } void init () { n = cntNode = last = 0 ; make ( - 1 ), make ( 0 ); } } t ; int main () { scanf ( \"%s\" , str + 1 ); m = strlen ( str + 1 ); t . init (); for ( int i = 1 ; i <= m ; ++ i ) t . add ( str [ i ] - 'a' + 1 ); printf ( \"%lld\" , t . getocc ()); return 0 ; } $\\blacksquare$ {% endfolding %} \u6027\u8d28 4\uff1a \u300cMIPT Fall Programming Training Camp2014\u300dB. Pairs \u80fd\u7528\u56de\u6587\u6811\u5728 \u989d\u5916 \\(O(n\\log\\left|\\Sigma\\right|)\\) \u7684\u65f6\u95f4\u548c \\(O(n)\\) \u7684\u7a7a\u95f4 \u5185\u89e3\u51b3\u3002 {% folding \"\u8bc1\u660e\" %} \u9996\u5148\uff0c\u6211\u4eec\u5efa\u7acb\u8d77 \\(\\text{eertree}(S)\\) \u3002 \u6211\u4eec\u7528 \\(\\text{maxSuf}[i]\\) \u6765\u8868\u793a \\(\\text{maxSuf}(S[1..i])\\) \uff0c\u8fd9\u4e2a\u663e\u7136\u80fd\u5728 \\(O(n)\\) \u7684\u7a7a\u95f4\u5185\u5728\u6bcf\u6b21 \\(\\text{add}\\) \u64cd\u4f5c\u4e4b\u540e\u7ef4\u62a4\u3002 \u6211\u4eec\u4ee4 \\(\\text{sufCount}[u]\\) \u8868\u793a\u7f16\u53f7\u4e3a \\(u\\) \u7684\u8282\u70b9\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u56de\u6587\u540e\u7f00\u7684\u4e2a\u6570\u3002 \u540c\u7406\u6211\u4eec\u8fd8\u8981\u6c42\u51fa \\(\\text{maxPre}\\) \u4e0e \\(\\text{preCount}\\) \u3002\u6ce8\u610f\u5230\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u7684\u662f \\(\\overleftarrow{S}\\) \u7684 \\(\\text{maxSuf}\\) \u548c \\(\\text{sufCount}\\) \uff08\u8bb0\u4e3a \\(\\text{maxSuf}'\\) \u548c \\(\\text{sufCount}'\\) \u3002\u3002 \u4e8e\u662f\uff0c\u6211\u4eec\u5efa\u7acb\u8d77 \\(\\text{eertree}(\\overleftarrow{S})\\) \u3002 \u7b54\u6848\u5373\u4e3a $$ \\sum_{i = 1}^{n - 1}\\text{sufCount}[\\text{maxSuf}[i]]\\cdot\\text{sufCount}'[\\text{maxSuf}'[n - i]] $$ \u4e0d\u96be\u53d1\u73b0\u8fd9\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\log\\left|\\Sigma\\right|)\\) \u7684\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 md \u6ca1\u5f97\u5730\u65b9\u4ea4\u8fd9\u9053\u9898\uff0c\u4ee3\u7801\u4ec5\u4f9b\u53c2\u8003\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <bits/stdc++.h> #define LL long long const int N = 3e5 + 5 ; const int C = 26 + 5 ; int m ; char str [ N ]; LL ans ; struct EERTREE { static const int MS = N ; int n , cntNode , s [ MS ], len [ MS ], ch [ MS ][ C ], fail [ MS ]; int sufCount [ MS ], maxSuf [ MS ]; int make ( int ll ) { len [ cntNode ] = ll ; for ( int i = 0 ; i < C ; ++ i ) ch [ cntNode ][ i ] = 0 ; return cntNode ++ ; } int getfail ( int x ) { while ( s [ n ] != s [ n - len [ x ] - 1 ]) x = fail [ x ]; return x ; } bool add ( int x ) { s [ ++ n ] = x ; int u = getfail ( maxSuf [ n - 1 ]), flg = 0 ; if ( ! u ) { if ( ! ch [ u ][ x ]) { int v = make ( 1 ); fail [ v ] = 1 ; ch [ u ][ x ] = v ; flg = 1 ; } } else { if ( ! ch [ u ][ x ]) { int v = make ( len [ u ] + 2 ); ch [ u ][ x ] = v ; flg = 1 ; } fail [ ch [ u ][ x ] ] = ch [ getfail ( fail [ u ])][ x ]; } sufCount [ ch [ u ][ x ]] = sufCount [ fail [ ch [ u ][ x ]] ] + 1 ; maxSuf [ n ] = ch [ u ][ x ]; return flg ; } void init () { n = cntNode ; memset ( maxSuf , 0 , sizeof ( maxSuf )); make ( - 1 ), make ( 0 ); } } t1 , t2 ; int main () { scanf ( \"%s\" , str + 1 ); m = strlen ( str + 1 ); t1 . init (), t2 . init (); for ( int i = 1 ; i <= m ; ++ i ) t1 . add ( str [ i ] - 'a' + 1 ); for ( int i = m ; i >= 1 ; -- i ) t2 . add ( str [ i ] - 'a' + 1 ); for ( int i = 1 ; i <= m - 1 ; ++ i ) ans += t1 . sufCount [ t1 . maxSuf [ i ] ] * t2 . sufCount [ t2 . maxSuf [ m - i ] ]; printf ( \"%lld\" , ans ); return 0 ; } {% endfolding %} \u8b66\u544a \u6709\u5173\u56de\u6587\u6811\u7684\u9ad8\u7ea7\u5e94\u7528\uff0c\u8bf7\u67e5\u9605\u8bba\u6587\u3002 \uff08\u6211\u5495\u4e86\uff09","title":"\u57fa\u7840\u5e94\u7528"},{"location":"posts/lectures/pam/#_9","text":"\u56de\u6587\u6811\u771f\u7684\u80fd\u5f88\u5de7\u5999\u5730\u89e3\u51b3\u4e0e\u56de\u6587\u4e32\u6709\u5173\u7684\u95ee\u9898\uff0c \u800c\u4e14\u5f88\u591a\u4e0e\u56de\u6587\u4e32\u6709\u5173\u7684\u95ee\u9898\u7684\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u52a3\u65e0\u6bd4\uff0c \u8fd9\u4e5f\u80fd\u4ece\u4fa7\u9762\u4f53\u73b0\u51fa\u56de\u6587\u6811\u7684\u5de7\u5999\u3002 \u7528\u4e00\u9996\u524d\u4eba\u5199\u7684\u8bd7\u4f5c\u7ed3\u5c3e\uff1a \\[ \\begin{aligned} & \\textit{I think that I shall never see} \\\\\\\\ & \\textit{A poem lovely as a tree.} \\\\\\\\ & \\textit{Poems are made by fools like me,} \\\\\\\\ & \\textit{But only God can make a tree.} \\end{aligned} \\] \u63a5\u4e0b\u6765\u5c31\u5f00\u59cb\u52aa\u529b\u94bb\u7814\u540e\u7f00\u6811\u5427\u3002","title":"\u5199\u5728\u6700\u540e"},{"location":"posts/lectures/sim-euclid/","text":"\u300c\u7c7b\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u300d\u4e0e\u300c\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u300d\u7684\u5171\u540c\u4e4b\u5904\u2014\u2014 \u4ec5\u662f\u5747\u4f7f\u7528\u4e86\u300c\u8f97\u8f6c\u76f8\u9664\u300d\u6765\u8bc1\u660e\u590d\u6742\u5ea6\u3002 \u7b80\u4ecb \u00b6 \u5df2\u77e5 \\(a, b, c, n\\) \uff0c\u6c42 $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\end{aligned} $$ \u5171 \\(t (1 \\le t \\le 10^5)\\) \u7ec4\u6570\u636e\uff0c \\(0 \\le a, b, c, n \\le 10^9\\) \uff0c \\(c \\neq 0\\) \u3002 \u7406\u8bba\u63a8\u5bfc \u00b6 \u63a8\u5bfc\u4e4b\u524d \u00b6 \u8bb0 \\(m = \\left\\lfloor\\dfrac{an + b}{c}\\right\\rfloor, t = \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor\\) \uff0c\u4e0b\u6587\u7684\u65b9\u62ec\u53f7\u5747\u4e3a \u827e\u4f5b\u68ee\u62ec\u53f7 \u3002 \u7ed3\u8bba \u5728\u63a8\u5f0f\u5b50\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u8bc1\u660e\u4e00\u4e2a\u5e38\u7528\u7684\u7ed3\u8bba\u3002 $$ \\begin{aligned} \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right] \\end{aligned} $$ \u8bc1\u660e \u6ce8\u610f\u5230 $$ \\begin{aligned} j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor & \\Leftrightarrow j + 1 \\le \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & \\Leftrightarrow j + 1 \\le \\dfrac{ai + b}{c} \\\\ & \\Leftrightarrow cj + c \\le ai + b \\\\ & \\Leftrightarrow cj + c - 1 < ai + b \\\\ & \\Leftrightarrow cj - b + c - 1 < ai \\\\ & \\Leftrightarrow i > \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\ & \\Leftrightarrow i > t \\end{aligned} $$ \u6240\u4ee5\u539f\u547d\u9898\u5f97\u8bc1\u3002 f \u00b6 \u9996\u5148\u6211\u4eec\u6765\u6c42 \\(f(a, b, c, n)\\) \u7684\u9012\u63a8\u5f0f\u3002 \u6211\u4eec \u5b9a\u4e49 \\(f(a, b, c, n) = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\left(\\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) + \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i\\right) + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}1\\right)\\\\ & = f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1 \\\\ & = \\sum_{i = 0}^{n}\\sum_{j = 0}^{m - 1}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\left(n - t\\right) \\\\ & = \\sum_{j = 0}^{m - 1}n + \\sum\\limits_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor \\\\ & = nm - f(c, c - b - 1, a, m - 1) \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(f\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ f(a, b, c, n) = \\begin{cases} f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor & (a \\ge n \\lor b \\ge n)\\\\ nm - f(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$ g \u00b6 \u6211\u4eec \u5b9a\u4e49 \\(g(a, b, c, n) = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}\\left(i\\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n} i^2 + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i + \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n) \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1\\right) \\\\ & = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{m}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right]\\right) \\\\ & = \\sum_{j = 0}^{m - 1}i\\cdot\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right]\\cdot i \\\\ & = \\sum_{j = 0}^{m - 1}\\cdot\\sum_{i = t + 1}^{n}1 \\\\ & = \\sum_{j = 0}^{m - 1}\\dfrac{(t + n + 1)(n - t)}{2} \\\\ & = \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\bigg(n(n + 1) - t^2 - t\\bigg) \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right)^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right) \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1) \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(g\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ g(a, b, c, n) = \\begin{cases} \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n) & (a \\ge c \\lor b \\ge c) \\\\ \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$ h \u00b6 \u6211\u4eec \u5b9a\u4e49 \\(h(a, b, c, n) = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\Bigg(\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)^2 + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 + \\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & + 2 \\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + 2 \\cdot \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\Bigg) \\\\ & = \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n} i^2 + 2\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n}1 \\\\ & + \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) + h(a \\bmod c, b \\bmod c, c, n) \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(2\\cdot\\dfrac{\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor + 1\\right)}{2} - \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 1}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}(j + 1) \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)(n - t) \\\\ & = -f(a, b, c, n) + 2n\\sum_{j = 0}^{m - 1}(j + 1) - 2\\sum_{j = 0}^{m - 1}(j + 1)t \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}jt - \\sum_{j = 0}^{m - 1}t \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}\\left(j\\cdot\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor\\right) - \\sum_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2g(c, c - b - 1, a, m - 1) - 2f(c, c - b - 1, a, m - 1); \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(h\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ h(a, b, c, n) = \\begin{cases} \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 & + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) \\\\ & + h(a \\bmod c, b \\bmod c, c, n) & (a \\ge c \\lor b \\ge c) \\\\ f(a, b, c, n) + nm(m + 1) & - 2g(c, c - b - 1, a, m - 1) \\\\ & - 2f(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$ \u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e \u00b6 \u4e0d\u4f1a\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u8fd9\u91cc\u7ed9\u51fa \u3010\u6a21\u677f\u3011\u7c7b\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u7684\u4ee3\u7801\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <bits/stdc++.h> #define LL long long #define LOCAL namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int mod = 998244353 ; const int inv2 = 499122177 ; const int inv6 = 166374059 ; LL t , A , B , C , N ; struct QUERY { LL f , g , h ; }; QUERY solve ( LL a , LL b , LL c , LL n ) { QUERY res , tmp ; if ( ! a ) { res . f = ( b / c ) * ( n + 1 ) % mod ; res . g = ( b / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod ; res . h = ( b / c ) * ( b / c ) % mod * ( n + 1 ) % mod ; return res ; } else if ( a >= c || b >= c ) { tmp = solve ( a % c , b % c , c , n ); res . f = ( tmp . f + ( a / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod + ( b / c ) * ( n + 1 ) % mod ) % mod ; res . g = ( tmp . g + ( a / c ) * inv6 % mod * n % mod * ( n + 1 ) % mod * ( 2 * n + 1 ) % mod + ( b / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod ) % mod ; res . h = ( tmp . h + ( b / c ) * 2 % mod * tmp . f % mod + ( a / c ) * 2 % mod * tmp . g % mod + ( a / c ) * ( a / c ) % mod * inv6 % mod * n % mod * ( n + 1 ) % mod * ( 2 * n + 1 ) % mod + ( b / c ) * ( b / c ) % mod * ( n + 1 ) % mod + ( a / c ) * ( b / c ) % mod * n % mod * ( n + 1 ) % mod ) % mod ; return res ; } else { LL m = ( a * n + b ) / c ; tmp = solve ( c , c - b - 1 , a , m - 1 ); res . f = (( m * n % mod - tmp . f ) % mod + mod ) % mod ; res . g = inv2 * ((( m * n % mod * ( n + 1 ) % mod - tmp . f - tmp . h ) % mod + mod ) % mod ) % mod ; res . h = (( n * m % mod * ( m + 1 ) % mod - res . f - 2 * tmp . g % mod - 2 * tmp . f % mod ) % mod + mod ) % mod ; return res ; } } int main () { #ifdef LOCAL freopen ( \"sim.in\" , \"r\" , stdin ); freopen ( \"sim.out\" , \"w\" , stdout ); #endif io :: read ( t ); while ( t -- ) { io :: read ( N , A , B , C ); QUERY cur = solve ( A , B , C , N ); io :: write ( cur . f , ' ' , cur . h , ' ' , cur . g , '\\n' ); } return 0 ; }","title":"\u7c7b\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5"},{"location":"posts/lectures/sim-euclid/#_1","text":"\u5df2\u77e5 \\(a, b, c, n\\) \uff0c\u6c42 $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\end{aligned} $$ \u5171 \\(t (1 \\le t \\le 10^5)\\) \u7ec4\u6570\u636e\uff0c \\(0 \\le a, b, c, n \\le 10^9\\) \uff0c \\(c \\neq 0\\) \u3002","title":"\u7b80\u4ecb"},{"location":"posts/lectures/sim-euclid/#_2","text":"","title":"\u7406\u8bba\u63a8\u5bfc"},{"location":"posts/lectures/sim-euclid/#_3","text":"\u8bb0 \\(m = \\left\\lfloor\\dfrac{an + b}{c}\\right\\rfloor, t = \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor\\) \uff0c\u4e0b\u6587\u7684\u65b9\u62ec\u53f7\u5747\u4e3a \u827e\u4f5b\u68ee\u62ec\u53f7 \u3002 \u7ed3\u8bba \u5728\u63a8\u5f0f\u5b50\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8981\u8bc1\u660e\u4e00\u4e2a\u5e38\u7528\u7684\u7ed3\u8bba\u3002 $$ \\begin{aligned} \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right] \\end{aligned} $$ \u8bc1\u660e \u6ce8\u610f\u5230 $$ \\begin{aligned} j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor & \\Leftrightarrow j + 1 \\le \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & \\Leftrightarrow j + 1 \\le \\dfrac{ai + b}{c} \\\\ & \\Leftrightarrow cj + c \\le ai + b \\\\ & \\Leftrightarrow cj + c - 1 < ai + b \\\\ & \\Leftrightarrow cj - b + c - 1 < ai \\\\ & \\Leftrightarrow i > \\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\ & \\Leftrightarrow i > t \\end{aligned} $$ \u6240\u4ee5\u539f\u547d\u9898\u5f97\u8bc1\u3002","title":"\u63a8\u5bfc\u4e4b\u524d"},{"location":"posts/lectures/sim-euclid/#f","text":"\u9996\u5148\u6211\u4eec\u6765\u6c42 \\(f(a, b, c, n)\\) \u7684\u9012\u63a8\u5f0f\u3002 \u6211\u4eec \u5b9a\u4e49 \\(f(a, b, c, n) = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\left(\\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) + \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i\\right) + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}1\\right)\\\\ & = f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} f(a, b, c, n) & = \\sum_{i = 0}^{n}\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor \\\\ & = \\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1 \\\\ & = \\sum_{i = 0}^{n}\\sum_{j = 0}^{m - 1}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\left(n - t\\right) \\\\ & = \\sum_{j = 0}^{m - 1}n + \\sum\\limits_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor \\\\ & = nm - f(c, c - b - 1, a, m - 1) \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(f\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ f(a, b, c, n) = \\begin{cases} f(a \\bmod c, b \\bmod c, c, n) + \\dfrac{n(n + 1)}{2}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor & (a \\ge n \\lor b \\ge n)\\\\ nm - f(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$","title":"f"},{"location":"posts/lectures/sim-euclid/#g","text":"\u6211\u4eec \u5b9a\u4e49 \\(g(a, b, c, n) = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}\\left(i\\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n} i^2 + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot\\sum_{i = 0}^{n}i + \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n) \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} g(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}1\\right) \\\\ & = \\sum_{i = 0}^{n}i\\cdot\\left(\\sum_{j = 0}^{m}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right]\\right) \\\\ & = \\sum_{j = 0}^{m - 1}i\\cdot\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = \\sum_{j = 0}^{m - 1}\\sum_{i = 0}^{n}\\left[i > t\\right]\\cdot i \\\\ & = \\sum_{j = 0}^{m - 1}\\cdot\\sum_{i = t + 1}^{n}1 \\\\ & = \\sum_{j = 0}^{m - 1}\\dfrac{(t + n + 1)(n - t)}{2} \\\\ & = \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\bigg(n(n + 1) - t^2 - t\\bigg) \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}t \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right)^2 - \\dfrac{1}{2}\\sum_{j = 0}^{m - 1}\\left(\\left\\lfloor\\dfrac{cj + (c - b - 1)}{a}\\right\\rfloor\\right) \\\\ & = \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1) \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(g\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ g(a, b, c, n) = \\begin{cases} \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor + (n + 1)\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + g(a \\bmod c, b \\bmod c, c, n) & (a \\ge c \\lor b \\ge c) \\\\ \\dfrac{1}{2}mn(n + 1) - \\dfrac{1}{2}h(c, c - b - 1, a, m - 1) - \\dfrac{1}{2}g(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$","title":"g"},{"location":"posts/lectures/sim-euclid/#h","text":"\u6211\u4eec \u5b9a\u4e49 \\(h(a, b, c, n) = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2\\) \u3002 \u5f53 \\(a \\ge c\\) \u6216 \\(b \\ge c\\) \u65f6\uff1a $$ \\begin{aligned} h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot c + a \\bmod c\\right) \\cdot i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\cdot c + b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i + \\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + \\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\Bigg(\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)^2 + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 + \\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 \\\\ & + 2 \\cdot \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right) + 2 \\cdot \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot i\\right)\\Bigg) \\\\ & = \\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n} i^2 + 2\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}i + \\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2\\sum_{i = 0}^{n}1 \\\\ & + \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right)^2 + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\sum_{i = 0}^{n}\\left(i\\cdot\\left\\lfloor\\dfrac{\\left(a \\bmod c\\right) \\cdot i + \\left(b \\bmod c\\right)}{c}\\right\\rfloor\\right) \\\\ & = \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) + h(a \\bmod c, b \\bmod c, c, n) \\end{aligned} $$ \u5f53 \\(a < c\\) \u4e14 \\(b < c\\) \u65f6\uff1a $$ \\begin{aligned} h(a, b, c, n) & = \\sum_{i = 0}^{n}\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right)^2 \\\\ & = \\sum_{i = 0}^{n}\\left(2\\cdot\\dfrac{\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\cdot\\left(\\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor + 1\\right)}{2} - \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right) \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 1}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor}j \\\\ & = -f(a, b, c, n) + 2\\sum_{i = 0}^{n}\\sum_{j = 0}^{\\left\\lfloor\\tfrac{ai + b}{c}\\right\\rfloor - 1}(j + 1) \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[j < \\left\\lfloor\\dfrac{ai + b}{c}\\right\\rfloor\\right] \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)\\sum_{i = 0}^{n}\\left[i > t\\right] \\\\ & = -f(a, b, c, n) + 2\\sum_{j = 0}^{m - 1}(j + 1)(n - t) \\\\ & = -f(a, b, c, n) + 2n\\sum_{j = 0}^{m - 1}(j + 1) - 2\\sum_{j = 0}^{m - 1}(j + 1)t \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}jt - \\sum_{j = 0}^{m - 1}t \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2\\sum_{j = 0}^{m - 1}\\left(j\\cdot\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor\\right) - \\sum_{j = 0}^{m - 1}\\left\\lfloor\\dfrac{cj + c - b - 1}{a}\\right\\rfloor \\\\ & = -f(a, b, c, n) + nm(m + 1) - 2g(c, c - b - 1, a, m - 1) - 2f(c, c - b - 1, a, m - 1); \\end{aligned} $$ \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u5230\u4e86 \\(h\\) \u7684\u9012\u63a8\u5f0f\uff1a $$ h(a, b, c, n) = \\begin{cases} \\dfrac{n(n + 1)(2n + 1)}{6}\\cdot\\left(\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\right)^2 & + n(n + 1)\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor + (n + 1)\\cdot\\left(\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor\\right)^2 \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{b}{c}\\right\\rfloor f(a \\bmod c, b \\bmod c, c, n) \\\\ & + 2\\cdot\\left\\lfloor\\dfrac{a}{c}\\right\\rfloor g(a \\bmod c, b \\bmod c, c, n) \\\\ & + h(a \\bmod c, b \\bmod c, c, n) & (a \\ge c \\lor b \\ge c) \\\\ f(a, b, c, n) + nm(m + 1) & - 2g(c, c - b - 1, a, m - 1) \\\\ & - 2f(c, c - b - 1, a, m - 1) & \\textrm{otherwise} \\end{cases} $$","title":"h"},{"location":"posts/lectures/sim-euclid/#_4","text":"\u4e0d\u4f1a\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u8bc1\u660e"},{"location":"posts/lectures/sim-euclid/#_5","text":"\u8fd9\u91cc\u7ed9\u51fa \u3010\u6a21\u677f\u3011\u7c7b\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u7684\u4ee3\u7801\u5b9e\u73b0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <bits/stdc++.h> #define LL long long #define LOCAL namespace io { template < typename T > inline void read ( T & _x ) { int f = 0 , ch ; _x = 0 ; while ( ! isdigit ( ch = getchar ())) f |= ch == '-' ; while ( isdigit ( ch )) _x = _x * 10 + ch - '0' , ch = getchar (); if ( f ) _x = - _x ; } template < typename T , typename ... Args > inline void read ( T & _f , Args & ... args ) { read ( _f ), read ( args ...); } inline void _deal ( char ch ) { putchar ( ch ); } template < typename T > inline void _deal ( T _x ) { if ( _x < 0 ) putchar ( '-' ), _x = - _x ; if ( _x > 9 ) _deal ( _x / 10 ); putchar ( _x % 10 + '0' ); } inline void write () {} template < typename T , typename ... Args > inline void write ( T _f , Args ... args ) { _deal ( _f ), write ( args ...); } } const int mod = 998244353 ; const int inv2 = 499122177 ; const int inv6 = 166374059 ; LL t , A , B , C , N ; struct QUERY { LL f , g , h ; }; QUERY solve ( LL a , LL b , LL c , LL n ) { QUERY res , tmp ; if ( ! a ) { res . f = ( b / c ) * ( n + 1 ) % mod ; res . g = ( b / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod ; res . h = ( b / c ) * ( b / c ) % mod * ( n + 1 ) % mod ; return res ; } else if ( a >= c || b >= c ) { tmp = solve ( a % c , b % c , c , n ); res . f = ( tmp . f + ( a / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod + ( b / c ) * ( n + 1 ) % mod ) % mod ; res . g = ( tmp . g + ( a / c ) * inv6 % mod * n % mod * ( n + 1 ) % mod * ( 2 * n + 1 ) % mod + ( b / c ) * inv2 % mod * n % mod * ( n + 1 ) % mod ) % mod ; res . h = ( tmp . h + ( b / c ) * 2 % mod * tmp . f % mod + ( a / c ) * 2 % mod * tmp . g % mod + ( a / c ) * ( a / c ) % mod * inv6 % mod * n % mod * ( n + 1 ) % mod * ( 2 * n + 1 ) % mod + ( b / c ) * ( b / c ) % mod * ( n + 1 ) % mod + ( a / c ) * ( b / c ) % mod * n % mod * ( n + 1 ) % mod ) % mod ; return res ; } else { LL m = ( a * n + b ) / c ; tmp = solve ( c , c - b - 1 , a , m - 1 ); res . f = (( m * n % mod - tmp . f ) % mod + mod ) % mod ; res . g = inv2 * ((( m * n % mod * ( n + 1 ) % mod - tmp . f - tmp . h ) % mod + mod ) % mod ) % mod ; res . h = (( n * m % mod * ( m + 1 ) % mod - res . f - 2 * tmp . g % mod - 2 * tmp . f % mod ) % mod + mod ) % mod ; return res ; } } int main () { #ifdef LOCAL freopen ( \"sim.in\" , \"r\" , stdin ); freopen ( \"sim.out\" , \"w\" , stdout ); #endif io :: read ( t ); while ( t -- ) { io :: read ( N , A , B , C ); QUERY cur = solve ( A , B , C , N ); io :: write ( cur . f , ' ' , cur . h , ' ' , cur . g , '\\n' ); } return 0 ; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"posts/mood/","text":"\u8fd9\u91cc\u653e\u7f6e\u7684\u662f\u4e00\u4e9b\u6211\u7684\u8bf4\u8bf4\uff0cQQ \u7a7a\u95f4\u6bd5\u7adf\u4eba\u591a\u773c\u6742\u3002","title":"\u6982\u89c8"},{"location":"posts/mood/2020-08/","text":"2020-08-08 \u00b6 \u4eca\u5929\u7684 cf \u597d\u61a8\u554a\uff0cA \u9898\u9762\u53c8\u81ed\u53c8\u957f\uff0c\u7ed3\u8bba\u53c8\u77ed\u53c8\u5c0f\u3002 B \u548c C \u7b97\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u968f\u4fbf\u5199\u4e86\u51e0\u4e0b\u5c31\u8fc7\u4e86\u3002 D \u662f\u4e2a\u60ac\u7ebf\u6cd5 dp\uff0c\u4e0d\u662f\u5f88\u4f1a\u3002 E1 \u548c E2 \u5e94\u8be5\u662f AC \u81ea\u52a8\u673a\u4e0a dp\u3002 \u4e09\u9898\u80fd\u4ece 900 \u5230 1900\uff0c\u5c31\u770b\u624b\u901f\u548c\u6b63\u786e\u7387\u4e86\u3002","title":"2020.08"},{"location":"posts/mood/2020-08/#2020-08-08","text":"\u4eca\u5929\u7684 cf \u597d\u61a8\u554a\uff0cA \u9898\u9762\u53c8\u81ed\u53c8\u957f\uff0c\u7ed3\u8bba\u53c8\u77ed\u53c8\u5c0f\u3002 B \u548c C \u7b97\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u968f\u4fbf\u5199\u4e86\u51e0\u4e0b\u5c31\u8fc7\u4e86\u3002 D \u662f\u4e2a\u60ac\u7ebf\u6cd5 dp\uff0c\u4e0d\u662f\u5f88\u4f1a\u3002 E1 \u548c E2 \u5e94\u8be5\u662f AC \u81ea\u52a8\u673a\u4e0a dp\u3002 \u4e09\u9898\u80fd\u4ece 900 \u5230 1900\uff0c\u5c31\u770b\u624b\u901f\u548c\u6b63\u786e\u7387\u4e86\u3002","title":"2020-08-08"},{"location":"posts/mood/2020-09/","text":"","title":"2020.09"},{"location":"posts/whk/","text":"\u8fd9\u91cc\u653e\u7f6e\u7684\u662f\u4e00\u4e9b\u6211\u7684\u6587\u5316\u8bfe\u76f8\u5173\u5185\u5bb9\u3002","title":"\u6982\u89c8"},{"location":"posts/whk/maths/immovable-point-of-an-array/","text":"\u6570\u5217\u4e0d\u52a8\u70b9\u53ef\u4ee5\u8f85\u52a9\u6211\u4eec\u5feb\u901f\u89e3\u51b3\u4e0e\u6570\u5217\u901a\u9879\u516c\u5f0f\u6709\u5173\u7684\u95ee\u9898\u3002 \u57fa\u7840\u77e5\u8bc6 \u00b6 \u5b9a\u4e49 \u00b6 \u5df2\u77e5\u51fd\u6570 \\(f(x)\\) \uff0c\u82e5\u5b58\u5728 \\(x_0\\) \u4f7f\u5f97 \\(f(x_0) = x_0\\) \uff0c\u5219\u79f0 \\(x_0\\) \u4e3a \\(f(x)\\) \u7684\u4e00\u4e2a\u4e0d\u52a8\u70b9\u3002 \u82e5\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_{n + 1} = g(a_n) \\quad(n \\in \\mathbb{N}^{*})\\) \uff0c\u5219\u79f0 \\(g(x)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\u3002 \u5b9a\u7406\u4e00 \u00b6 \u82e5 \\(f(x) = ax + b\\quad(a \\notin \\{0, 1\\})\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p\\) \u4e3a \\(f(x)\\) \u7684\u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{a_n - p\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(a\\) \u7684\u7b49\u6bd4\u6570\u5217\u3002 \u8bc1\u660e \\(\\because\\) \\(p\\) \u4e3a \\(f(x)\\) \u7684\u4e0d\u52a8\u70b9 \\(\\therefore p = f(p) = ap + b\\) \uff0c\u5373 \\(b - p = -ap\\) \u53c8 \\(a_{n + 1} = f(a_n) = a\\cdot a_n + b\\) \\(\\begin{aligned}\\therefore a_{n + 1} - p & = a\\cdot a_n + b - p \\\\ & = a\\cdot a_n - ap \\\\ & = a(a_n - p)\\end{aligned}\\) \\(\\therefore\\) \\(\\{a_n - p\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(a\\) \u7684\u7b49\u6bd4\u6570\u5217 \u5b9a\u7406\u4e8c \u00b6 \u82e5 \\(f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24 \u76f8\u5f02 \u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{\\dfrac{a_n - p}{a_n - q}\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(\\dfrac{a - pc}{a - qc}\\) \u7684\u7b49\u6bd4\u6570\u5217\u3002 \u8bc1\u660e \u7531 \\(x = f(x) = \\dfrac{ax + b}{cx + d}\\) \u77e5 \\(cx^2 + (d - a)x - b = 0\\) \u5c06 \\(x_1 = p, x_2 = q\\) \u4ee3\u5165\u5f97 \\(\\begin{cases}cp^2 + (d - a)p - b = 0 \\\\ cq^2 + (d - a)q - b = 0\\end{cases}\\) \u6574\u7406\u5f97 \\(\\begin{cases}p = \\dfrac{pd - b}{a - pc} \\\\ q = \\dfrac{qd - b}{a - qc}\\end{cases}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} & = \\dfrac{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - q} \\\\ & = \\dfrac{(a - pc)a_n + b - pd}{(a - qc)a_n + b - qd} \\\\ & = \\dfrac{a - pc}{a - qc} \\cdot \\dfrac{a_n - \\dfrac{pd - b}{a - pc}}{a_n - \\dfrac{qd - b}{a - qc}} \\\\ & = \\dfrac{a_n - p}{a_n - q}\\cdot\\dfrac{a - pc}{a - qc}\\end{aligned}\\) \\(\\therefore\\) \\(\\{\\dfrac{a_n - p}{a_n - q}\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(\\dfrac{a - pc}{a - qc}\\) \u7684\u7b49\u6bd4\u6570\u5217 \u82e5 \\(f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p\\) \u4e3a \\(f(x)\\) \u7684 \u552f\u4e00 \u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{\\dfrac{1}{a_n - p}\\}\\) \u4e3a\u516c\u5dee\u4e3a \\(\\dfrac{2c}{a + d}\\) \u7684\u7b49\u5dee\u6570\u5217\u3002 \u8bc1\u660e \u7531 \\(x = f(x) = \\dfrac{ax + b}{cx + d}\\) \u77e5 \\(cx^2 + (d - a)x - b = 0\\) \\(\\therefore cp^2 + (d - a)p - b = 0\\) \uff0c\u5373 \\(b - pd = cp^2 - ap\\) \\(\\begin{aligned}\\therefore \\dfrac{1}{a_{n + 1} - p} & = \\dfrac{1}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + b - pd} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + cp^2 - ap} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)(a_n - p)} \\\\ & = \\dfrac{1}{a - cp}\\cdot\\dfrac{c(a_n - p) + cp + d}{a_n - p} \\\\ & = \\dfrac{c}{a - cp} + \\dfrac{cp + d}{a - cp}\\cdot\\dfrac{1}{a_n - p} \\\\ & = \\dfrac{1}{a_n - p} + \\dfrac{2c}{a + d}\\end{aligned}\\) \\(\\therefore\\) \\(\\{\\dfrac{1}{a_n - p}\\}\\) \u4e3a\u516c\u5dee\u4e3a \\(\\dfrac{2c}{a + d}\\) \u7684\u7b49\u5dee\u6570\u5217 \u5b9a\u7406\u4e09 \u00b6 \u82e5 \\(f(x) = \\dfrac{ax^2 + bx + c}{ex + f}\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24 \u76f8\u5f02 \u4e0d\u52a8\u70b9\uff0c\u5219 \u5f53\u4e14\u4ec5\u5f53 \\(b = 0, e = 2a\\) \u65f6\u6709 \\(\\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2\\) \u3002 \u8bc1\u660e \\(\\because\\) \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24\u76f8\u5f02\u4e0d\u52a8\u70b9 \\(\\therefore \\begin{cases}c - pf = (e - a)p^2 - bp \\\\ c - qf = (e - a)q^2 - bq\\end{cases}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} & = \\dfrac{a\\cdot a_n^2 + b\\cdot a_n + c - p(e\\cdot a_n + f)}{a\\cdot a_n^2 + b\\cdot a_n + c - q(e\\cdot a_n + f)} \\\\ & = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + c - pf}{a\\cdot a_n^2 + (b - eq)\\cdot a_n + c - qf} \\\\ & = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq}\\end{aligned}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2 & \\iff \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq} = \\dfrac{a_n^2 - 2p\\cdot a_n + p^2}{a_n^2 - 2q\\cdot a_n + q^2} \\\\ & \\iff \\begin{cases}b - ep = -2ap \\\\ b - eq = -2aq\\end{cases} \\\\ & \\iff \\begin{cases}(2a - e)p + b = 0 \\\\ (2a - e)q + b = 0\\end{cases} \\\\ & \\iff \\begin{cases}b = 0 \\\\ e = 2a\\end{cases} \\quad(p \\neq q)\\end{aligned}\\) \u4f8b\u9898\u8bb2\u89e3 \u00b6 \u4f8b1 \u00b6 \u8bbe\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_1 = 1, a_{n + 1} = \\dfrac{a_n + 2}{a_n}\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{x + 2}{x}\\) \uff0c\u89e3\u5f97 \\(x_1 = -1, x_2 = 2\\) \\(\\therefore\\) \\(\\{\\dfrac{a_n + 1}{a_n - 2}\\}\\) \u4e3a\u9996\u9879\u4e3a \\(-2\\) \uff0c\u516c\u6bd4\u4e3a \\(-2\\) \u7684\u7b49\u6bd4\u6570\u5217 \\(\\therefore \\dfrac{a_n +1}{a_n - 2} = (-2)^n\\) \\(\\therefore a_n = \\dfrac{2\\cdot (-2)^n +1}{(-2)^n - 1}\\) \u4f8b2 \u00b6 \u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3\u4e0b\u5217\u5173\u7cfb\uff1a \\(a_1 = 2a, a_{n + 1} = 2a - \\dfrac{a^2}{a_n}\\quad(a \\neq 0)\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{2ax - a^2}{x}\\) \uff0c\u89e3\u5f97 \\(x_1 = x_2 = a\\) \\(\\therefore\\) \\(\\{\\dfrac{1}{a_n - a}\\}\\) \u4e3a\u9996\u9879\u4e3a \\(\\dfrac{1}{a}\\) \uff0c\u516c\u6bd4\u4e3a \\(\\dfrac{1}{a}\\) \u7684\u7b49\u6bd4\u6570\u5217 \\(\\therefore \\dfrac{1}{a_n - a} = \\dfrac{n}{a}\\) \\(\\therefore a_n = \\dfrac{a + na}{n}\\) \u4f8b3 \u00b6 \u5df2\u77e5\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_1 = 2, a_{n + 1} = \\dfrac{a_n^2 + 2}{2a_n}\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{x^2 + 2}{2x}\\) \uff0c\u89e3\u5f97 \\(x_1 = \\sqrt{2}, x_2 = -\\sqrt{2}\\) \\(\\therefore \\dfrac{a_{n + 1} - \\sqrt{2}}{a_{n + 1} + \\sqrt{2}} = (\\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}})^2\\) \\(\\therefore \\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}} = (3 - 2\\sqrt{2})^{2^{n - 1}} = (\\sqrt{2} - 1)^{2^n}\\) \\(\\therefore a_n = \\sqrt{2}\\cdot\\dfrac{1 + (\\sqrt{2} - 1)^{2^n}}{1 - (\\sqrt{2} - 1)^{2^n}}\\) \u603b\u7ed3 \u00b6 \u65e0\u6280\u5de7\uff0c\u5c31\u662f\u5957\u516c\u5f0f\u3002","title":"\u6570\u5217\u4e0d\u52a8\u70b9\u6d45\u63a2"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_1","text":"","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_2","text":"\u5df2\u77e5\u51fd\u6570 \\(f(x)\\) \uff0c\u82e5\u5b58\u5728 \\(x_0\\) \u4f7f\u5f97 \\(f(x_0) = x_0\\) \uff0c\u5219\u79f0 \\(x_0\\) \u4e3a \\(f(x)\\) \u7684\u4e00\u4e2a\u4e0d\u52a8\u70b9\u3002 \u82e5\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_{n + 1} = g(a_n) \\quad(n \\in \\mathbb{N}^{*})\\) \uff0c\u5219\u79f0 \\(g(x)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\u3002","title":"\u5b9a\u4e49"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_3","text":"\u82e5 \\(f(x) = ax + b\\quad(a \\notin \\{0, 1\\})\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p\\) \u4e3a \\(f(x)\\) \u7684\u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{a_n - p\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(a\\) \u7684\u7b49\u6bd4\u6570\u5217\u3002 \u8bc1\u660e \\(\\because\\) \\(p\\) \u4e3a \\(f(x)\\) \u7684\u4e0d\u52a8\u70b9 \\(\\therefore p = f(p) = ap + b\\) \uff0c\u5373 \\(b - p = -ap\\) \u53c8 \\(a_{n + 1} = f(a_n) = a\\cdot a_n + b\\) \\(\\begin{aligned}\\therefore a_{n + 1} - p & = a\\cdot a_n + b - p \\\\ & = a\\cdot a_n - ap \\\\ & = a(a_n - p)\\end{aligned}\\) \\(\\therefore\\) \\(\\{a_n - p\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(a\\) \u7684\u7b49\u6bd4\u6570\u5217","title":"\u5b9a\u7406\u4e00"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_4","text":"\u82e5 \\(f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24 \u76f8\u5f02 \u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{\\dfrac{a_n - p}{a_n - q}\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(\\dfrac{a - pc}{a - qc}\\) \u7684\u7b49\u6bd4\u6570\u5217\u3002 \u8bc1\u660e \u7531 \\(x = f(x) = \\dfrac{ax + b}{cx + d}\\) \u77e5 \\(cx^2 + (d - a)x - b = 0\\) \u5c06 \\(x_1 = p, x_2 = q\\) \u4ee3\u5165\u5f97 \\(\\begin{cases}cp^2 + (d - a)p - b = 0 \\\\ cq^2 + (d - a)q - b = 0\\end{cases}\\) \u6574\u7406\u5f97 \\(\\begin{cases}p = \\dfrac{pd - b}{a - pc} \\\\ q = \\dfrac{qd - b}{a - qc}\\end{cases}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} & = \\dfrac{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - q} \\\\ & = \\dfrac{(a - pc)a_n + b - pd}{(a - qc)a_n + b - qd} \\\\ & = \\dfrac{a - pc}{a - qc} \\cdot \\dfrac{a_n - \\dfrac{pd - b}{a - pc}}{a_n - \\dfrac{qd - b}{a - qc}} \\\\ & = \\dfrac{a_n - p}{a_n - q}\\cdot\\dfrac{a - pc}{a - qc}\\end{aligned}\\) \\(\\therefore\\) \\(\\{\\dfrac{a_n - p}{a_n - q}\\}\\) \u4e3a\u516c\u6bd4\u4e3a \\(\\dfrac{a - pc}{a - qc}\\) \u7684\u7b49\u6bd4\u6570\u5217 \u82e5 \\(f(x) = \\dfrac{ax + b}{cx + d}\\quad(c \\neq 0, ad - bc \\neq 0)\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p\\) \u4e3a \\(f(x)\\) \u7684 \u552f\u4e00 \u4e0d\u52a8\u70b9\uff0c\u5219\u6570\u5217 \\(\\{\\dfrac{1}{a_n - p}\\}\\) \u4e3a\u516c\u5dee\u4e3a \\(\\dfrac{2c}{a + d}\\) \u7684\u7b49\u5dee\u6570\u5217\u3002 \u8bc1\u660e \u7531 \\(x = f(x) = \\dfrac{ax + b}{cx + d}\\) \u77e5 \\(cx^2 + (d - a)x - b = 0\\) \\(\\therefore cp^2 + (d - a)p - b = 0\\) \uff0c\u5373 \\(b - pd = cp^2 - ap\\) \\(\\begin{aligned}\\therefore \\dfrac{1}{a_{n + 1} - p} & = \\dfrac{1}{\\dfrac{a\\cdot a_n + b}{c\\cdot a_n + d} - p} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + b - pd} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)\\cdot a_n + cp^2 - ap} \\\\ & = \\dfrac{c\\cdot a_n + d}{(a - cp)(a_n - p)} \\\\ & = \\dfrac{1}{a - cp}\\cdot\\dfrac{c(a_n - p) + cp + d}{a_n - p} \\\\ & = \\dfrac{c}{a - cp} + \\dfrac{cp + d}{a - cp}\\cdot\\dfrac{1}{a_n - p} \\\\ & = \\dfrac{1}{a_n - p} + \\dfrac{2c}{a + d}\\end{aligned}\\) \\(\\therefore\\) \\(\\{\\dfrac{1}{a_n - p}\\}\\) \u4e3a\u516c\u5dee\u4e3a \\(\\dfrac{2c}{a + d}\\) \u7684\u7b49\u5dee\u6570\u5217","title":"\u5b9a\u7406\u4e8c"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_5","text":"\u82e5 \\(f(x) = \\dfrac{ax^2 + bx + c}{ex + f}\\) \u4e3a\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u9012\u63a8\u51fd\u6570\uff0c\u4e14 \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24 \u76f8\u5f02 \u4e0d\u52a8\u70b9\uff0c\u5219 \u5f53\u4e14\u4ec5\u5f53 \\(b = 0, e = 2a\\) \u65f6\u6709 \\(\\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2\\) \u3002 \u8bc1\u660e \\(\\because\\) \\(p, q\\) \u4e3a \\(f(x)\\) \u7684\u4e24\u76f8\u5f02\u4e0d\u52a8\u70b9 \\(\\therefore \\begin{cases}c - pf = (e - a)p^2 - bp \\\\ c - qf = (e - a)q^2 - bq\\end{cases}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} & = \\dfrac{a\\cdot a_n^2 + b\\cdot a_n + c - p(e\\cdot a_n + f)}{a\\cdot a_n^2 + b\\cdot a_n + c - q(e\\cdot a_n + f)} \\\\ & = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + c - pf}{a\\cdot a_n^2 + (b - eq)\\cdot a_n + c - qf} \\\\ & = \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq}\\end{aligned}\\) \\(\\begin{aligned}\\therefore \\dfrac{a_{n + 1} - p}{a_{n + 1} - q} = (\\dfrac{a_n - p}{a_n - q})^2 & \\iff \\dfrac{a\\cdot a_n^2 + (b - ep)\\cdot a_n + (e - a)\\cdot p^2 - bp}{a\\cdot a_n^2 - (b - eq)\\cdot a_n + (e - a)\\cdot q^2 - bq} = \\dfrac{a_n^2 - 2p\\cdot a_n + p^2}{a_n^2 - 2q\\cdot a_n + q^2} \\\\ & \\iff \\begin{cases}b - ep = -2ap \\\\ b - eq = -2aq\\end{cases} \\\\ & \\iff \\begin{cases}(2a - e)p + b = 0 \\\\ (2a - e)q + b = 0\\end{cases} \\\\ & \\iff \\begin{cases}b = 0 \\\\ e = 2a\\end{cases} \\quad(p \\neq q)\\end{aligned}\\)","title":"\u5b9a\u7406\u4e09"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_6","text":"","title":"\u4f8b\u9898\u8bb2\u89e3"},{"location":"posts/whk/maths/immovable-point-of-an-array/#1","text":"\u8bbe\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_1 = 1, a_{n + 1} = \\dfrac{a_n + 2}{a_n}\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{x + 2}{x}\\) \uff0c\u89e3\u5f97 \\(x_1 = -1, x_2 = 2\\) \\(\\therefore\\) \\(\\{\\dfrac{a_n + 1}{a_n - 2}\\}\\) \u4e3a\u9996\u9879\u4e3a \\(-2\\) \uff0c\u516c\u6bd4\u4e3a \\(-2\\) \u7684\u7b49\u6bd4\u6570\u5217 \\(\\therefore \\dfrac{a_n +1}{a_n - 2} = (-2)^n\\) \\(\\therefore a_n = \\dfrac{2\\cdot (-2)^n +1}{(-2)^n - 1}\\)","title":"\u4f8b1"},{"location":"posts/whk/maths/immovable-point-of-an-array/#2","text":"\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3\u4e0b\u5217\u5173\u7cfb\uff1a \\(a_1 = 2a, a_{n + 1} = 2a - \\dfrac{a^2}{a_n}\\quad(a \\neq 0)\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{2ax - a^2}{x}\\) \uff0c\u89e3\u5f97 \\(x_1 = x_2 = a\\) \\(\\therefore\\) \\(\\{\\dfrac{1}{a_n - a}\\}\\) \u4e3a\u9996\u9879\u4e3a \\(\\dfrac{1}{a}\\) \uff0c\u516c\u6bd4\u4e3a \\(\\dfrac{1}{a}\\) \u7684\u7b49\u6bd4\u6570\u5217 \\(\\therefore \\dfrac{1}{a_n - a} = \\dfrac{n}{a}\\) \\(\\therefore a_n = \\dfrac{a + na}{n}\\)","title":"\u4f8b2"},{"location":"posts/whk/maths/immovable-point-of-an-array/#3","text":"\u5df2\u77e5\u6570\u5217 \\(\\{a_n\\}\\) \u6ee1\u8db3 \\(a_1 = 2, a_{n + 1} = \\dfrac{a_n^2 + 2}{2a_n}\\) \uff0c\u6c42\u6570\u5217 \\(\\{a_n\\}\\) \u7684\u901a\u9879\u516c\u5f0f\u3002 \u89e3\u6790 \u7279\u5f81\u65b9\u7a0b\u4e3a \\(x = \\dfrac{x^2 + 2}{2x}\\) \uff0c\u89e3\u5f97 \\(x_1 = \\sqrt{2}, x_2 = -\\sqrt{2}\\) \\(\\therefore \\dfrac{a_{n + 1} - \\sqrt{2}}{a_{n + 1} + \\sqrt{2}} = (\\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}})^2\\) \\(\\therefore \\dfrac{a_n - \\sqrt{2}}{a_n + \\sqrt{2}} = (3 - 2\\sqrt{2})^{2^{n - 1}} = (\\sqrt{2} - 1)^{2^n}\\) \\(\\therefore a_n = \\sqrt{2}\\cdot\\dfrac{1 + (\\sqrt{2} - 1)^{2^n}}{1 - (\\sqrt{2} - 1)^{2^n}}\\)","title":"\u4f8b3"},{"location":"posts/whk/maths/immovable-point-of-an-array/#_7","text":"\u65e0\u6280\u5de7\uff0c\u5c31\u662f\u5957\u516c\u5f0f\u3002","title":"\u603b\u7ed3"},{"location":"posts/whk/maths/rubbish-formulas-of-calculation-geomatrics/","text":"\u4e00\u4e9b\u6709\u610f\u601d\u7684\u516c\u5f0f\uff0c\u4e5f\u8bb8\u80cc\u4e0b\u6765\u505a\u5c0f\u9898\u5f88\u5feb\uff1f\u4f46\u8fd8\u662f\u91cd\u5728\u7406\u89e3\u3002 \u70b9\u5173\u4e8e\u70b9\u7684\u5bf9\u79f0\u70b9 \u00b6 \u70b9 \\(A(x_1, y_1)\\) \u5173\u4e8e\u70b9 \\(O(x_0, y_0)\\) \u7684\u5bf9\u79f0\u70b9\u4e3a $$ \\boxed{B(2x_0 - x_1, 2y_0 - y_1)} $$ \u70b9\u5173\u4e8e\u7ebf\u7684\u5bf9\u79f0\u70b9 \u00b6 \u70b9 \\(A(x_1, y_1)\\) \u5173\u4e8e\u76f4\u7ebf \\(l_0: a_0x + b_0y + c_0 = 0\\) \u7684\u5bf9\u79f0\u70b9\u4e3a $$ \\boxed{B(x_1 - \\dfrac{2a_0(a_0x_1 + b_0y_1 + c_0)}{a_0^2 + b_0^2}, y_1 - \\dfrac{2b_0(a_0x_1 + b_0y_1 + c_0)}{a_0^2 + b_0^2})} $$ \u7ebf\u5173\u4e8e\u70b9\u7684\u5bf9\u79f0\u7ebf \u00b6 \u76f4\u7ebf \\(l_1:a_1x + b_1y + c_1 = 0\\) \u5173\u4e8e\u70b9 \\(O(x_0, y_0)\\) \u7684\u5bf9\u79f0\u76f4\u7ebf\u4e3a $$ \\boxed{l_2:\\dfrac{a_1x + b_1y + c_1}{a_1x_0 + b_1y_0 + c_1} = 2} $$ \u7ebf\u5173\u4e8e\u7ebf\u7684\u5bf9\u79f0\u7ebf \u00b6 \u76f4\u7ebf \\(l_1:a_1x + b_1y + c_1 = 0\\) \u5173\u4e8e\u76f4\u7ebf \\(l_0:a_0x + b_0y + c_0 = 0\\) \u7684\u5bf9\u79f0\u76f4\u7ebf\u4e3a $$ \\boxed{l_2:\\dfrac{a_1x + b_1y + c_1}{a_0x + b_0y + c_0} = \\dfrac{2(a_0a_1 + b_0b_1)}{a_0^2 + b_0^2}} $$","title":"\u89e3\u6790\u51e0\u4f55\u4e2d\u5bf9\u79f0\u95ee\u9898\u516c\u5f0f"},{"location":"posts/whk/maths/rubbish-formulas-of-calculation-geomatrics/#_1","text":"\u70b9 \\(A(x_1, y_1)\\) \u5173\u4e8e\u70b9 \\(O(x_0, y_0)\\) \u7684\u5bf9\u79f0\u70b9\u4e3a $$ \\boxed{B(2x_0 - x_1, 2y_0 - y_1)} $$","title":"\u70b9\u5173\u4e8e\u70b9\u7684\u5bf9\u79f0\u70b9"},{"location":"posts/whk/maths/rubbish-formulas-of-calculation-geomatrics/#_2","text":"\u70b9 \\(A(x_1, y_1)\\) \u5173\u4e8e\u76f4\u7ebf \\(l_0: a_0x + b_0y + c_0 = 0\\) \u7684\u5bf9\u79f0\u70b9\u4e3a $$ \\boxed{B(x_1 - \\dfrac{2a_0(a_0x_1 + b_0y_1 + c_0)}{a_0^2 + b_0^2}, y_1 - \\dfrac{2b_0(a_0x_1 + b_0y_1 + c_0)}{a_0^2 + b_0^2})} $$","title":"\u70b9\u5173\u4e8e\u7ebf\u7684\u5bf9\u79f0\u70b9"},{"location":"posts/whk/maths/rubbish-formulas-of-calculation-geomatrics/#_3","text":"\u76f4\u7ebf \\(l_1:a_1x + b_1y + c_1 = 0\\) \u5173\u4e8e\u70b9 \\(O(x_0, y_0)\\) \u7684\u5bf9\u79f0\u76f4\u7ebf\u4e3a $$ \\boxed{l_2:\\dfrac{a_1x + b_1y + c_1}{a_1x_0 + b_1y_0 + c_1} = 2} $$","title":"\u7ebf\u5173\u4e8e\u70b9\u7684\u5bf9\u79f0\u7ebf"},{"location":"posts/whk/maths/rubbish-formulas-of-calculation-geomatrics/#_4","text":"\u76f4\u7ebf \\(l_1:a_1x + b_1y + c_1 = 0\\) \u5173\u4e8e\u76f4\u7ebf \\(l_0:a_0x + b_0y + c_0 = 0\\) \u7684\u5bf9\u79f0\u76f4\u7ebf\u4e3a $$ \\boxed{l_2:\\dfrac{a_1x + b_1y + c_1}{a_0x + b_0y + c_0} = \\dfrac{2(a_0a_1 + b_0b_1)}{a_0^2 + b_0^2}} $$","title":"\u7ebf\u5173\u4e8e\u7ebf\u7684\u5bf9\u79f0\u7ebf"},{"location":"posts/whk/maths/sum-of-a-geometric-array/","text":"\u611f\u89c9 \\(S_n = \\dfrac{a_1 - q\\cdot a_n}{1 - q}(q\\neq 1)\\) \u8fd9\u4e2a\u516c\u5f0f\u5b9e\u5728\u662f\u592a\u611a\u8822\u4e86\uff0c \u4e8e\u662f\u81ea\u5df1\u6574\u7406\u4e86\u4e00\u4e2a\u66f4\u6f02\u4eae\u7684\uff0c\u4e5f\u66f4\u5bb9\u6613\u8bb0\u4f4f\u7684\u516c\u5f0f\uff1a \\(S_n = a_1\\cdot\\dfrac{q^n - 1}{q - 1}(q \\neq 1)\\) \u3002","title":"\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u516c\u5f0f"}]}